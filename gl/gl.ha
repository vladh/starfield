use strings;
use rt;


// Built-in loader
@symbol("eglGetProcAddress") fn eglGetProcAddress(procName: *const u8) *void;

fn get_proc_address(name: str, cstr: *const u8) *void = {
	return eglGetProcAddress(cstr);
};

// Types
export type gl_enum = uint;
export type gl_bitfield = uint;

export type GLDEBUGPROC = fn(
	source: gl_enum,
	type_: gl_enum,
	id: uint,
	severity: gl_enum,
	length: i32,
	message: *const i8,
	userParam: *void
) void;
export type GLDEBUGPROCARB = fn(
	source: gl_enum,
	type_: gl_enum,
	id: uint,
	severity: gl_enum,
	length: i32,
	message: *const i8,
	userParam: *void
) void;
export type GLDEBUGPROCKHR = fn(
	source: gl_enum,
	type_: gl_enum,
	id: uint,
	severity: gl_enum,
	length: i32,
	message: *const i8,
	userParam: *void
) void;
export type GLDEBUGPROCAMD = fn(
	id: uint,
	category: gl_enum,
	severity: gl_enum,
	length: i32,
	message: *const i8,
	userParam: *void
) void;
export type GLVULKANPROCNV = fn() void;

// Constants
export def _1PASS_EXT: uint = 0x80A1;
export def _1PASS_SGIS: uint = 0x80A1;
export def _2D: uint = 0x0600;
export def _2PASS_0_EXT: uint = 0x80A2;
export def _2PASS_0_SGIS: uint = 0x80A2;
export def _2PASS_1_EXT: uint = 0x80A3;
export def _2PASS_1_SGIS: uint = 0x80A3;
export def _2X_BIT_ATI: uint = 0x00000001;
export def _2_BYTES: uint = 0x1407;
export def _3D: uint = 0x0601;
export def _3D_COLOR: uint = 0x0602;
export def _3D_COLOR_TEXTURE: uint = 0x0603;
export def _3_BYTES: uint = 0x1408;
export def _422_AVERAGE_EXT: uint = 0x80CE;
export def _422_EXT: uint = 0x80CC;
export def _422_REV_AVERAGE_EXT: uint = 0x80CF;
export def _422_REV_EXT: uint = 0x80CD;
export def _4D_COLOR_TEXTURE: uint = 0x0604;
export def _4PASS_0_EXT: uint = 0x80A4;
export def _4PASS_0_SGIS: uint = 0x80A4;
export def _4PASS_1_EXT: uint = 0x80A5;
export def _4PASS_1_SGIS: uint = 0x80A5;
export def _4PASS_2_EXT: uint = 0x80A6;
export def _4PASS_2_SGIS: uint = 0x80A6;
export def _4PASS_3_EXT: uint = 0x80A7;
export def _4PASS_3_SGIS: uint = 0x80A7;
export def _4X_BIT_ATI: uint = 0x00000002;
export def _4_BYTES: uint = 0x1409;
export def _8X_BIT_ATI: uint = 0x00000004;
export def ABGR_EXT: uint = 0x8000;
export def ACCUM: uint = 0x0100;
export def ACCUM_ADJACENT_PAIRS_NV: uint = 0x90AD;
export def ACCUM_ALPHA_BITS: uint = 0x0D5B;
export def ACCUM_BLUE_BITS: uint = 0x0D5A;
export def ACCUM_BUFFER_BIT: uint = 0x00000200;
export def ACCUM_CLEAR_VALUE: uint = 0x0B80;
export def ACCUM_GREEN_BITS: uint = 0x0D59;
export def ACCUM_RED_BITS: uint = 0x0D58;
export def ACTIVE_ATOMIC_COUNTER_BUFFERS: uint = 0x92D9;
export def ACTIVE_ATTRIBUTES: uint = 0x8B89;
export def ACTIVE_ATTRIBUTE_MAX_LENGTH: uint = 0x8B8A;
export def ACTIVE_PROGRAM: uint = 0x8259;
export def ACTIVE_PROGRAM_EXT: uint = 0x8B8D;
export def ACTIVE_RESOURCES: uint = 0x92F5;
export def ACTIVE_STENCIL_FACE_EXT: uint = 0x8911;
export def ACTIVE_SUBROUTINES: uint = 0x8DE5;
export def ACTIVE_SUBROUTINE_MAX_LENGTH: uint = 0x8E48;
export def ACTIVE_SUBROUTINE_UNIFORMS: uint = 0x8DE6;
export def ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS: uint = 0x8E47;
export def ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH: uint = 0x8E49;
export def ACTIVE_TEXTURE: uint = 0x84E0;
export def ACTIVE_TEXTURE_ARB: uint = 0x84E0;
export def ACTIVE_UNIFORMS: uint = 0x8B86;
export def ACTIVE_UNIFORM_BLOCKS: uint = 0x8A36;
export def ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH: uint = 0x8A35;
export def ACTIVE_UNIFORM_MAX_LENGTH: uint = 0x8B87;
export def ACTIVE_VARIABLES: uint = 0x9305;
export def ACTIVE_VARYINGS_NV: uint = 0x8C81;
export def ACTIVE_VARYING_MAX_LENGTH_NV: uint = 0x8C82;
export def ACTIVE_VERTEX_UNITS_ARB: uint = 0x86A5;
export def ADD: uint = 0x0104;
export def ADD_ATI: uint = 0x8963;
export def ADD_SIGNED: uint = 0x8574;
export def ADD_SIGNED_ARB: uint = 0x8574;
export def ADD_SIGNED_EXT: uint = 0x8574;
export def ADJACENT_PAIRS_NV: uint = 0x90AE;
export def AFFINE_2D_NV: uint = 0x9092;
export def AFFINE_3D_NV: uint = 0x9094;
export def ALIASED_LINE_WIDTH_RANGE: uint = 0x846E;
export def ALIASED_POINT_SIZE_RANGE: uint = 0x846D;
export def ALLOW_DRAW_FRG_HINT_PGI: uint = 0x1A210;
export def ALLOW_DRAW_MEM_HINT_PGI: uint = 0x1A211;
export def ALLOW_DRAW_OBJ_HINT_PGI: uint = 0x1A20E;
export def ALLOW_DRAW_WIN_HINT_PGI: uint = 0x1A20F;
export def ALL_ATTRIB_BITS: uint = 0xFFFFFFFF;
export def ALL_BARRIER_BITS: uint = 0xFFFFFFFF;
export def ALL_BARRIER_BITS_EXT: uint = 0xFFFFFFFF;
export def ALL_COMPLETED_NV: uint = 0x84F2;
export def ALL_PIXELS_AMD: uint = 0xFFFFFFFF;
export def ALL_SHADER_BITS: uint = 0xFFFFFFFF;
export def ALL_STATIC_DATA_IBM: uint = 103060;
export def ALPHA: uint = 0x1906;
export def ALPHA12: uint = 0x803D;
export def ALPHA12_EXT: uint = 0x803D;
export def ALPHA16: uint = 0x803E;
export def ALPHA16F_ARB: uint = 0x881C;
export def ALPHA16F_EXT: uint = 0x881C;
export def ALPHA16I_EXT: uint = 0x8D8A;
export def ALPHA16UI_EXT: uint = 0x8D78;
export def ALPHA16_EXT: uint = 0x803E;
export def ALPHA16_SNORM: uint = 0x9018;
export def ALPHA32F_ARB: uint = 0x8816;
export def ALPHA32F_EXT: uint = 0x8816;
export def ALPHA32I_EXT: uint = 0x8D84;
export def ALPHA32UI_EXT: uint = 0x8D72;
export def ALPHA4: uint = 0x803B;
export def ALPHA4_EXT: uint = 0x803B;
export def ALPHA8: uint = 0x803C;
export def ALPHA8I_EXT: uint = 0x8D90;
export def ALPHA8UI_EXT: uint = 0x8D7E;
export def ALPHA8_EXT: uint = 0x803C;
export def ALPHA8_SNORM: uint = 0x9014;
export def ALPHA_BIAS: uint = 0x0D1D;
export def ALPHA_BITS: uint = 0x0D55;
export def ALPHA_FLOAT16_APPLE: uint = 0x881C;
export def ALPHA_FLOAT16_ATI: uint = 0x881C;
export def ALPHA_FLOAT32_APPLE: uint = 0x8816;
export def ALPHA_FLOAT32_ATI: uint = 0x8816;
export def ALPHA_INTEGER_EXT: uint = 0x8D97;
export def ALPHA_MAX_CLAMP_INGR: uint = 0x8567;
export def ALPHA_MAX_SGIX: uint = 0x8321;
export def ALPHA_MIN_CLAMP_INGR: uint = 0x8563;
export def ALPHA_MIN_SGIX: uint = 0x8320;
export def ALPHA_REF_COMMAND_NV: uint = 0x000F;
export def ALPHA_SCALE: uint = 0x0D1C;
export def ALPHA_SNORM: uint = 0x9010;
export def ALPHA_TEST: uint = 0x0BC0;
export def ALPHA_TEST_FUNC: uint = 0x0BC1;
export def ALPHA_TEST_REF: uint = 0x0BC2;
export def ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV: uint = 0x934D;
export def ALPHA_TO_COVERAGE_DITHER_DISABLE_NV: uint = 0x934F;
export def ALPHA_TO_COVERAGE_DITHER_ENABLE_NV: uint = 0x934E;
export def ALPHA_TO_COVERAGE_DITHER_MODE_NV: uint = 0x92BF;
export def ALREADY_SIGNALED: uint = 0x911A;
export def ALWAYS: uint = 0x0207;
export def ALWAYS_FAST_HINT_PGI: uint = 0x1A20C;
export def ALWAYS_SOFT_HINT_PGI: uint = 0x1A20D;
export def AMBIENT: uint = 0x1200;
export def AMBIENT_AND_DIFFUSE: uint = 0x1602;
export def AND: uint = 0x1501;
export def AND_INVERTED: uint = 0x1504;
export def AND_REVERSE: uint = 0x1502;
export def ANY_SAMPLES_PASSED: uint = 0x8C2F;
export def ANY_SAMPLES_PASSED_CONSERVATIVE: uint = 0x8D6A;
export def ARC_TO_NV: uint = 0xFE;
export def ARRAY_BUFFER: uint = 0x8892;
export def ARRAY_BUFFER_ARB: uint = 0x8892;
export def ARRAY_BUFFER_BINDING: uint = 0x8894;
export def ARRAY_BUFFER_BINDING_ARB: uint = 0x8894;
export def ARRAY_ELEMENT_LOCK_COUNT_EXT: uint = 0x81A9;
export def ARRAY_ELEMENT_LOCK_FIRST_EXT: uint = 0x81A8;
export def ARRAY_OBJECT_BUFFER_ATI: uint = 0x8766;
export def ARRAY_OBJECT_OFFSET_ATI: uint = 0x8767;
export def ARRAY_SIZE: uint = 0x92FB;
export def ARRAY_STRIDE: uint = 0x92FE;
export def ASYNC_DRAW_PIXELS_SGIX: uint = 0x835D;
export def ASYNC_HISTOGRAM_SGIX: uint = 0x832C;
export def ASYNC_MARKER_SGIX: uint = 0x8329;
export def ASYNC_READ_PIXELS_SGIX: uint = 0x835E;
export def ASYNC_TEX_IMAGE_SGIX: uint = 0x835C;
export def ATOMIC_COUNTER_BARRIER_BIT: uint = 0x00001000;
export def ATOMIC_COUNTER_BARRIER_BIT_EXT: uint = 0x00001000;
export def ATOMIC_COUNTER_BUFFER: uint = 0x92C0;
export def ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS: uint = 0x92C5;
export def ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES: uint = 0x92C6;
export def ATOMIC_COUNTER_BUFFER_BINDING: uint = 0x92C1;
export def ATOMIC_COUNTER_BUFFER_DATA_SIZE: uint = 0x92C4;
export def ATOMIC_COUNTER_BUFFER_INDEX: uint = 0x9301;
export def ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER: uint = 0x90ED;
export def ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER: uint = 0x92CB;
export def ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER: uint = 0x92CA;
export def ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV: uint = 0x959E;
export def ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV: uint = 0x959F;
export def ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER: uint = 0x92C8;
export def ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER: uint = 0x92C9;
export def ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER: uint = 0x92C7;
export def ATOMIC_COUNTER_BUFFER_SIZE: uint = 0x92C3;
export def ATOMIC_COUNTER_BUFFER_START: uint = 0x92C2;
export def ATTACHED_MEMORY_OBJECT_NV: uint = 0x95A4;
export def ATTACHED_MEMORY_OFFSET_NV: uint = 0x95A5;
export def ATTACHED_SHADERS: uint = 0x8B85;
export def ATTENUATION_EXT: uint = 0x834D;
export def ATTRIBUTE_ADDRESS_COMMAND_NV: uint = 0x0009;
export def ATTRIB_ARRAY_POINTER_NV: uint = 0x8645;
export def ATTRIB_ARRAY_SIZE_NV: uint = 0x8623;
export def ATTRIB_ARRAY_STRIDE_NV: uint = 0x8624;
export def ATTRIB_ARRAY_TYPE_NV: uint = 0x8625;
export def ATTRIB_STACK_DEPTH: uint = 0x0BB0;
export def AUTO_GENERATE_MIPMAP: uint = 0x8295;
export def AUTO_NORMAL: uint = 0x0D80;
export def AUX0: uint = 0x0409;
export def AUX1: uint = 0x040A;
export def AUX2: uint = 0x040B;
export def AUX3: uint = 0x040C;
export def AUX_BUFFERS: uint = 0x0C00;
export def AUX_DEPTH_STENCIL_APPLE: uint = 0x8A14;
export def AVERAGE_EXT: uint = 0x8335;
export def AVERAGE_HP: uint = 0x8160;
export def BACK: uint = 0x0405;
export def BACK_LEFT: uint = 0x0402;
export def BACK_NORMALS_HINT_PGI: uint = 0x1A223;
export def BACK_PRIMARY_COLOR_NV: uint = 0x8C77;
export def BACK_RIGHT: uint = 0x0403;
export def BACK_SECONDARY_COLOR_NV: uint = 0x8C78;
export def BEVEL_NV: uint = 0x90A6;
export def BGR: uint = 0x80E0;
export def BGRA: uint = 0x80E1;
export def BGRA8_EXT: uint = 0x93A1;
export def BGRA_EXT: uint = 0x80E1;
export def BGRA_INTEGER_EXT: uint = 0x8D9B;
export def BGR_EXT: uint = 0x80E0;
export def BGR_INTEGER_EXT: uint = 0x8D9A;
export def BIAS_BIT_ATI: uint = 0x00000008;
export def BIAS_BY_NEGATIVE_ONE_HALF_NV: uint = 0x8541;
export def BINORMAL_ARRAY_EXT: uint = 0x843A;
export def BINORMAL_ARRAY_POINTER_EXT: uint = 0x8443;
export def BINORMAL_ARRAY_STRIDE_EXT: uint = 0x8441;
export def BINORMAL_ARRAY_TYPE_EXT: uint = 0x8440;
export def BITMAP: uint = 0x1A00;
export def BITMAP_TOKEN: uint = 0x0704;
export def BLACKHOLE_RENDER_INTEL: uint = 0x83FC;
export def BLEND: uint = 0x0BE2;
export def BLEND_ADVANCED_COHERENT_KHR: uint = 0x9285;
export def BLEND_ADVANCED_COHERENT_NV: uint = 0x9285;
export def BLEND_COLOR: uint = 0x8005;
export def BLEND_COLOR_COMMAND_NV: uint = 0x000B;
export def BLEND_COLOR_EXT: uint = 0x8005;
export def BLEND_DST: uint = 0x0BE0;
export def BLEND_DST_ALPHA: uint = 0x80CA;
export def BLEND_DST_ALPHA_EXT: uint = 0x80CA;
export def BLEND_DST_RGB: uint = 0x80C8;
export def BLEND_DST_RGB_EXT: uint = 0x80C8;
export def BLEND_EQUATION: uint = 0x8009;
export def BLEND_EQUATION_ALPHA: uint = 0x883D;
export def BLEND_EQUATION_ALPHA_EXT: uint = 0x883D;
export def BLEND_EQUATION_EXT: uint = 0x8009;
export def BLEND_EQUATION_RGB: uint = 0x8009;
export def BLEND_EQUATION_RGB_EXT: uint = 0x8009;
export def BLEND_OVERLAP_NV: uint = 0x9281;
export def BLEND_PREMULTIPLIED_SRC_NV: uint = 0x9280;
export def BLEND_SRC: uint = 0x0BE1;
export def BLEND_SRC_ALPHA: uint = 0x80CB;
export def BLEND_SRC_ALPHA_EXT: uint = 0x80CB;
export def BLEND_SRC_RGB: uint = 0x80C9;
export def BLEND_SRC_RGB_EXT: uint = 0x80C9;
export def BLOCK_INDEX: uint = 0x92FD;
export def BLUE: uint = 0x1905;
export def BLUE_BIAS: uint = 0x0D1B;
export def BLUE_BITS: uint = 0x0D54;
export def BLUE_BIT_ATI: uint = 0x00000004;
export def BLUE_INTEGER_EXT: uint = 0x8D96;
export def BLUE_MAX_CLAMP_INGR: uint = 0x8566;
export def BLUE_MIN_CLAMP_INGR: uint = 0x8562;
export def BLUE_NV: uint = 0x1905;
export def BLUE_SCALE: uint = 0x0D1A;
export def BOLD_BIT_NV: uint = 0x01;
export def BOOL: uint = 0x8B56;
export def BOOL_ARB: uint = 0x8B56;
export def BOOL_VEC2: uint = 0x8B57;
export def BOOL_VEC2_ARB: uint = 0x8B57;
export def BOOL_VEC3: uint = 0x8B58;
export def BOOL_VEC3_ARB: uint = 0x8B58;
export def BOOL_VEC4: uint = 0x8B59;
export def BOOL_VEC4_ARB: uint = 0x8B59;
export def BOUNDING_BOX_NV: uint = 0x908D;
export def BOUNDING_BOX_OF_BOUNDING_BOXES_NV: uint = 0x909C;
export def BUFFER: uint = 0x82E0;
export def BUFFER_ACCESS: uint = 0x88BB;
export def BUFFER_ACCESS_ARB: uint = 0x88BB;
export def BUFFER_BINDING: uint = 0x9302;
export def BUFFER_DATA_SIZE: uint = 0x9303;
export def BUFFER_FLUSHING_UNMAP_APPLE: uint = 0x8A13;
export def BUFFER_GPU_ADDRESS_NV: uint = 0x8F1D;
export def BUFFER_IMMUTABLE_STORAGE: uint = 0x821F;
export def BUFFER_MAPPED: uint = 0x88BC;
export def BUFFER_MAPPED_ARB: uint = 0x88BC;
export def BUFFER_MAP_POINTER: uint = 0x88BD;
export def BUFFER_MAP_POINTER_ARB: uint = 0x88BD;
export def BUFFER_OBJECT_APPLE: uint = 0x85B3;
export def BUFFER_OBJECT_EXT: uint = 0x9151;
export def BUFFER_SERIALIZED_MODIFY_APPLE: uint = 0x8A12;
export def BUFFER_SIZE: uint = 0x8764;
export def BUFFER_SIZE_ARB: uint = 0x8764;
export def BUFFER_STORAGE_FLAGS: uint = 0x8220;
export def BUFFER_UPDATE_BARRIER_BIT: uint = 0x00000200;
export def BUFFER_UPDATE_BARRIER_BIT_EXT: uint = 0x00000200;
export def BUFFER_USAGE: uint = 0x8765;
export def BUFFER_USAGE_ARB: uint = 0x8765;
export def BUFFER_VARIABLE: uint = 0x92E5;
export def BUMP_ENVMAP_ATI: uint = 0x877B;
export def BUMP_NUM_TEX_UNITS_ATI: uint = 0x8777;
export def BUMP_ROT_MATRIX_ATI: uint = 0x8775;
export def BUMP_ROT_MATRIX_SIZE_ATI: uint = 0x8776;
export def BUMP_TARGET_ATI: uint = 0x877C;
export def BUMP_TEX_UNITS_ATI: uint = 0x8778;
export def BYTE: uint = 0x1400;
export def C3F_V3F: uint = 0x2A24;
export def C4F_N3F_V3F: uint = 0x2A26;
export def C4UB_V2F: uint = 0x2A22;
export def C4UB_V3F: uint = 0x2A23;
export def CALLIGRAPHIC_FRAGMENT_SGIX: uint = 0x8183;
export def CAVEAT_SUPPORT: uint = 0x82B8;
export def CCW: uint = 0x0901;
export def CIRCULAR_CCW_ARC_TO_NV: uint = 0xF8;
export def CIRCULAR_CW_ARC_TO_NV: uint = 0xFA;
export def CIRCULAR_TANGENT_ARC_TO_NV: uint = 0xFC;
export def CLAMP: uint = 0x2900;
export def CLAMP_FRAGMENT_COLOR_ARB: uint = 0x891B;
export def CLAMP_READ_COLOR_ARB: uint = 0x891C;
export def CLAMP_TO_BORDER: uint = 0x812D;
export def CLAMP_TO_BORDER_ARB: uint = 0x812D;
export def CLAMP_TO_BORDER_SGIS: uint = 0x812D;
export def CLAMP_TO_EDGE: uint = 0x812F;
export def CLAMP_TO_EDGE_SGIS: uint = 0x812F;
export def CLAMP_VERTEX_COLOR_ARB: uint = 0x891A;
export def CLEAR: uint = 0x1500;
export def CLEAR_BUFFER: uint = 0x82B4;
export def CLEAR_TEXTURE: uint = 0x9365;
export def CLIENT_ACTIVE_TEXTURE: uint = 0x84E1;
export def CLIENT_ACTIVE_TEXTURE_ARB: uint = 0x84E1;
export def CLIENT_ALL_ATTRIB_BITS: uint = 0xFFFFFFFF;
export def CLIENT_ATTRIB_STACK_DEPTH: uint = 0x0BB1;
export def CLIENT_MAPPED_BUFFER_BARRIER_BIT: uint = 0x00004000;
export def CLIENT_PIXEL_STORE_BIT: uint = 0x00000001;
export def CLIENT_STORAGE_BIT: uint = 0x0200;
export def CLIENT_VERTEX_ARRAY_BIT: uint = 0x00000002;
export def CLIPPING_INPUT_PRIMITIVES: uint = 0x82F6;
export def CLIPPING_INPUT_PRIMITIVES_ARB: uint = 0x82F6;
export def CLIPPING_OUTPUT_PRIMITIVES: uint = 0x82F7;
export def CLIPPING_OUTPUT_PRIMITIVES_ARB: uint = 0x82F7;
export def CLIP_DEPTH_MODE: uint = 0x935D;
export def CLIP_DISTANCE_NV: uint = 0x8C7A;
export def CLIP_FAR_HINT_PGI: uint = 0x1A221;
export def CLIP_NEAR_HINT_PGI: uint = 0x1A220;
export def CLIP_ORIGIN: uint = 0x935C;
export def CLIP_PLANE0: uint = 0x3000;
export def CLIP_PLANE1: uint = 0x3001;
export def CLIP_PLANE2: uint = 0x3002;
export def CLIP_PLANE3: uint = 0x3003;
export def CLIP_PLANE4: uint = 0x3004;
export def CLIP_PLANE5: uint = 0x3005;
export def CLIP_VOLUME_CLIPPING_HINT_EXT: uint = 0x80F0;
export def CLOSE_PATH_NV: uint = 0x00;
export def CMYKA_EXT: uint = 0x800D;
export def CMYK_EXT: uint = 0x800C;
export def CND0_ATI: uint = 0x896B;
export def CND_ATI: uint = 0x896A;
export def COEFF: uint = 0x0A00;
export def COLOR: uint = 0x1800;
export def COLOR3_BIT_PGI: uint = 0x00010000;
export def COLOR4_BIT_PGI: uint = 0x00020000;
export def COLORBURN_KHR: uint = 0x929A;
export def COLORBURN_NV: uint = 0x929A;
export def COLORDODGE_KHR: uint = 0x9299;
export def COLORDODGE_NV: uint = 0x9299;
export def COLOR_ALPHA_PAIRING_ATI: uint = 0x8975;
export def COLOR_ARRAY: uint = 0x8076;
export def COLOR_ARRAY_ADDRESS_NV: uint = 0x8F23;
export def COLOR_ARRAY_BUFFER_BINDING: uint = 0x8898;
export def COLOR_ARRAY_BUFFER_BINDING_ARB: uint = 0x8898;
export def COLOR_ARRAY_COUNT_EXT: uint = 0x8084;
export def COLOR_ARRAY_EXT: uint = 0x8076;
export def COLOR_ARRAY_LENGTH_NV: uint = 0x8F2D;
export def COLOR_ARRAY_LIST_IBM: uint = 103072;
export def COLOR_ARRAY_LIST_STRIDE_IBM: uint = 103082;
export def COLOR_ARRAY_PARALLEL_POINTERS_INTEL: uint = 0x83F7;
export def COLOR_ARRAY_POINTER: uint = 0x8090;
export def COLOR_ARRAY_POINTER_EXT: uint = 0x8090;
export def COLOR_ARRAY_SIZE: uint = 0x8081;
export def COLOR_ARRAY_SIZE_EXT: uint = 0x8081;
export def COLOR_ARRAY_STRIDE: uint = 0x8083;
export def COLOR_ARRAY_STRIDE_EXT: uint = 0x8083;
export def COLOR_ARRAY_TYPE: uint = 0x8082;
export def COLOR_ARRAY_TYPE_EXT: uint = 0x8082;
export def COLOR_ATTACHMENT0: uint = 0x8CE0;
export def COLOR_ATTACHMENT0_EXT: uint = 0x8CE0;
export def COLOR_ATTACHMENT1: uint = 0x8CE1;
export def COLOR_ATTACHMENT10: uint = 0x8CEA;
export def COLOR_ATTACHMENT10_EXT: uint = 0x8CEA;
export def COLOR_ATTACHMENT11: uint = 0x8CEB;
export def COLOR_ATTACHMENT11_EXT: uint = 0x8CEB;
export def COLOR_ATTACHMENT12: uint = 0x8CEC;
export def COLOR_ATTACHMENT12_EXT: uint = 0x8CEC;
export def COLOR_ATTACHMENT13: uint = 0x8CED;
export def COLOR_ATTACHMENT13_EXT: uint = 0x8CED;
export def COLOR_ATTACHMENT14: uint = 0x8CEE;
export def COLOR_ATTACHMENT14_EXT: uint = 0x8CEE;
export def COLOR_ATTACHMENT15: uint = 0x8CEF;
export def COLOR_ATTACHMENT15_EXT: uint = 0x8CEF;
export def COLOR_ATTACHMENT1_EXT: uint = 0x8CE1;
export def COLOR_ATTACHMENT2: uint = 0x8CE2;
export def COLOR_ATTACHMENT2_EXT: uint = 0x8CE2;
export def COLOR_ATTACHMENT3: uint = 0x8CE3;
export def COLOR_ATTACHMENT3_EXT: uint = 0x8CE3;
export def COLOR_ATTACHMENT4: uint = 0x8CE4;
export def COLOR_ATTACHMENT4_EXT: uint = 0x8CE4;
export def COLOR_ATTACHMENT5: uint = 0x8CE5;
export def COLOR_ATTACHMENT5_EXT: uint = 0x8CE5;
export def COLOR_ATTACHMENT6: uint = 0x8CE6;
export def COLOR_ATTACHMENT6_EXT: uint = 0x8CE6;
export def COLOR_ATTACHMENT7: uint = 0x8CE7;
export def COLOR_ATTACHMENT7_EXT: uint = 0x8CE7;
export def COLOR_ATTACHMENT8: uint = 0x8CE8;
export def COLOR_ATTACHMENT8_EXT: uint = 0x8CE8;
export def COLOR_ATTACHMENT9: uint = 0x8CE9;
export def COLOR_ATTACHMENT9_EXT: uint = 0x8CE9;
export def COLOR_BUFFER_BIT: uint = 0x00004000;
export def COLOR_CLEAR_UNCLAMPED_VALUE_ATI: uint = 0x8835;
export def COLOR_CLEAR_VALUE: uint = 0x0C22;
export def COLOR_COMPONENTS: uint = 0x8283;
export def COLOR_ENCODING: uint = 0x8296;
export def COLOR_FLOAT_APPLE: uint = 0x8A0F;
export def COLOR_INDEX: uint = 0x1900;
export def COLOR_INDEX12_EXT: uint = 0x80E6;
export def COLOR_INDEX16_EXT: uint = 0x80E7;
export def COLOR_INDEX1_EXT: uint = 0x80E2;
export def COLOR_INDEX2_EXT: uint = 0x80E3;
export def COLOR_INDEX4_EXT: uint = 0x80E4;
export def COLOR_INDEX8_EXT: uint = 0x80E5;
export def COLOR_INDEXES: uint = 0x1603;
export def COLOR_LOGIC_OP: uint = 0x0BF2;
export def COLOR_MATERIAL: uint = 0x0B57;
export def COLOR_MATERIAL_FACE: uint = 0x0B55;
export def COLOR_MATERIAL_PARAMETER: uint = 0x0B56;
export def COLOR_MATRIX_SGI: uint = 0x80B1;
export def COLOR_MATRIX_STACK_DEPTH_SGI: uint = 0x80B2;
export def COLOR_RENDERABLE: uint = 0x8286;
export def COLOR_SAMPLES_NV: uint = 0x8E20;
export def COLOR_SUM: uint = 0x8458;
export def COLOR_SUM_ARB: uint = 0x8458;
export def COLOR_SUM_CLAMP_NV: uint = 0x854F;
export def COLOR_SUM_EXT: uint = 0x8458;
export def COLOR_TABLE_ALPHA_SIZE_SGI: uint = 0x80DD;
export def COLOR_TABLE_BIAS_SGI: uint = 0x80D7;
export def COLOR_TABLE_BLUE_SIZE_SGI: uint = 0x80DC;
export def COLOR_TABLE_FORMAT_SGI: uint = 0x80D8;
export def COLOR_TABLE_GREEN_SIZE_SGI: uint = 0x80DB;
export def COLOR_TABLE_INTENSITY_SIZE_SGI: uint = 0x80DF;
export def COLOR_TABLE_LUMINANCE_SIZE_SGI: uint = 0x80DE;
export def COLOR_TABLE_RED_SIZE_SGI: uint = 0x80DA;
export def COLOR_TABLE_SCALE_SGI: uint = 0x80D6;
export def COLOR_TABLE_SGI: uint = 0x80D0;
export def COLOR_TABLE_WIDTH_SGI: uint = 0x80D9;
export def COLOR_WRITEMASK: uint = 0x0C23;
export def COMBINE: uint = 0x8570;
export def COMBINE4_NV: uint = 0x8503;
export def COMBINER0_NV: uint = 0x8550;
export def COMBINER1_NV: uint = 0x8551;
export def COMBINER2_NV: uint = 0x8552;
export def COMBINER3_NV: uint = 0x8553;
export def COMBINER4_NV: uint = 0x8554;
export def COMBINER5_NV: uint = 0x8555;
export def COMBINER6_NV: uint = 0x8556;
export def COMBINER7_NV: uint = 0x8557;
export def COMBINER_AB_DOT_PRODUCT_NV: uint = 0x8545;
export def COMBINER_AB_OUTPUT_NV: uint = 0x854A;
export def COMBINER_BIAS_NV: uint = 0x8549;
export def COMBINER_CD_DOT_PRODUCT_NV: uint = 0x8546;
export def COMBINER_CD_OUTPUT_NV: uint = 0x854B;
export def COMBINER_COMPONENT_USAGE_NV: uint = 0x8544;
export def COMBINER_INPUT_NV: uint = 0x8542;
export def COMBINER_MAPPING_NV: uint = 0x8543;
export def COMBINER_MUX_SUM_NV: uint = 0x8547;
export def COMBINER_SCALE_NV: uint = 0x8548;
export def COMBINER_SUM_OUTPUT_NV: uint = 0x854C;
export def COMBINE_ALPHA: uint = 0x8572;
export def COMBINE_ALPHA_ARB: uint = 0x8572;
export def COMBINE_ALPHA_EXT: uint = 0x8572;
export def COMBINE_ARB: uint = 0x8570;
export def COMBINE_EXT: uint = 0x8570;
export def COMBINE_RGB: uint = 0x8571;
export def COMBINE_RGB_ARB: uint = 0x8571;
export def COMBINE_RGB_EXT: uint = 0x8571;
export def COMMAND_BARRIER_BIT: uint = 0x00000040;
export def COMMAND_BARRIER_BIT_EXT: uint = 0x00000040;
export def COMPARE_REF_DEPTH_TO_TEXTURE_EXT: uint = 0x884E;
export def COMPARE_R_TO_TEXTURE: uint = 0x884E;
export def COMPARE_R_TO_TEXTURE_ARB: uint = 0x884E;
export def COMPATIBLE_SUBROUTINES: uint = 0x8E4B;
export def COMPILE: uint = 0x1300;
export def COMPILE_AND_EXECUTE: uint = 0x1301;
export def COMPILE_STATUS: uint = 0x8B81;
export def COMPLETION_STATUS_ARB: uint = 0x91B1;
export def COMPLETION_STATUS_KHR: uint = 0x91B1;
export def COMPRESSED_ALPHA: uint = 0x84E9;
export def COMPRESSED_ALPHA_ARB: uint = 0x84E9;
export def COMPRESSED_INTENSITY: uint = 0x84EC;
export def COMPRESSED_INTENSITY_ARB: uint = 0x84EC;
export def COMPRESSED_LUMINANCE: uint = 0x84EA;
export def COMPRESSED_LUMINANCE_ALPHA: uint = 0x84EB;
export def COMPRESSED_LUMINANCE_ALPHA_ARB: uint = 0x84EB;
export def COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT: uint = 0x8C72;
export def COMPRESSED_LUMINANCE_ARB: uint = 0x84EA;
export def COMPRESSED_LUMINANCE_LATC1_EXT: uint = 0x8C70;
export def COMPRESSED_R11_EAC: uint = 0x9270;
export def COMPRESSED_RED_GREEN_RGTC2_EXT: uint = 0x8DBD;
export def COMPRESSED_RED_RGTC1: uint = 0x8DBB;
export def COMPRESSED_RED_RGTC1_EXT: uint = 0x8DBB;
export def COMPRESSED_RG11_EAC: uint = 0x9272;
export def COMPRESSED_RGB: uint = 0x84ED;
export def COMPRESSED_RGB8_ETC2: uint = 0x9274;
export def COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: uint = 0x9276;
export def COMPRESSED_RGBA: uint = 0x84EE;
export def COMPRESSED_RGBA8_ETC2_EAC: uint = 0x9278;
export def COMPRESSED_RGBA_ARB: uint = 0x84EE;
export def COMPRESSED_RGBA_ASTC_10x10_KHR: uint = 0x93BB;
export def COMPRESSED_RGBA_ASTC_10x5_KHR: uint = 0x93B8;
export def COMPRESSED_RGBA_ASTC_10x6_KHR: uint = 0x93B9;
export def COMPRESSED_RGBA_ASTC_10x8_KHR: uint = 0x93BA;
export def COMPRESSED_RGBA_ASTC_12x10_KHR: uint = 0x93BC;
export def COMPRESSED_RGBA_ASTC_12x12_KHR: uint = 0x93BD;
export def COMPRESSED_RGBA_ASTC_4x4_KHR: uint = 0x93B0;
export def COMPRESSED_RGBA_ASTC_5x4_KHR: uint = 0x93B1;
export def COMPRESSED_RGBA_ASTC_5x5_KHR: uint = 0x93B2;
export def COMPRESSED_RGBA_ASTC_6x5_KHR: uint = 0x93B3;
export def COMPRESSED_RGBA_ASTC_6x6_KHR: uint = 0x93B4;
export def COMPRESSED_RGBA_ASTC_8x5_KHR: uint = 0x93B5;
export def COMPRESSED_RGBA_ASTC_8x6_KHR: uint = 0x93B6;
export def COMPRESSED_RGBA_ASTC_8x8_KHR: uint = 0x93B7;
export def COMPRESSED_RGBA_BPTC_UNORM_ARB: uint = 0x8E8C;
export def COMPRESSED_RGBA_FXT1_3DFX: uint = 0x86B1;
export def COMPRESSED_RGBA_S3TC_DXT1_EXT: uint = 0x83F1;
export def COMPRESSED_RGBA_S3TC_DXT3_EXT: uint = 0x83F2;
export def COMPRESSED_RGBA_S3TC_DXT5_EXT: uint = 0x83F3;
export def COMPRESSED_RGB_ARB: uint = 0x84ED;
export def COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB: uint = 0x8E8E;
export def COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB: uint = 0x8E8F;
export def COMPRESSED_RGB_FXT1_3DFX: uint = 0x86B0;
export def COMPRESSED_RGB_S3TC_DXT1_EXT: uint = 0x83F0;
export def COMPRESSED_RG_RGTC2: uint = 0x8DBD;
export def COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT: uint = 0x8C73;
export def COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT: uint = 0x8C71;
export def COMPRESSED_SIGNED_R11_EAC: uint = 0x9271;
export def COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT: uint = 0x8DBE;
export def COMPRESSED_SIGNED_RED_RGTC1: uint = 0x8DBC;
export def COMPRESSED_SIGNED_RED_RGTC1_EXT: uint = 0x8DBC;
export def COMPRESSED_SIGNED_RG11_EAC: uint = 0x9273;
export def COMPRESSED_SIGNED_RG_RGTC2: uint = 0x8DBE;
export def COMPRESSED_SLUMINANCE: uint = 0x8C4A;
export def COMPRESSED_SLUMINANCE_ALPHA: uint = 0x8C4B;
export def COMPRESSED_SLUMINANCE_ALPHA_EXT: uint = 0x8C4B;
export def COMPRESSED_SLUMINANCE_EXT: uint = 0x8C4A;
export def COMPRESSED_SRGB: uint = 0x8C48;
export def COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR: uint = 0x93DB;
export def COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR: uint = 0x93D8;
export def COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR: uint = 0x93D9;
export def COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR: uint = 0x93DA;
export def COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR: uint = 0x93DC;
export def COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR: uint = 0x93DD;
export def COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR: uint = 0x93D0;
export def COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR: uint = 0x93D1;
export def COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR: uint = 0x93D2;
export def COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR: uint = 0x93D3;
export def COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR: uint = 0x93D4;
export def COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR: uint = 0x93D5;
export def COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR: uint = 0x93D6;
export def COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR: uint = 0x93D7;
export def COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: uint = 0x9279;
export def COMPRESSED_SRGB8_ETC2: uint = 0x9275;
export def COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: uint = 0x9277;
export def COMPRESSED_SRGB_ALPHA: uint = 0x8C49;
export def COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB: uint = 0x8E8D;
export def COMPRESSED_SRGB_ALPHA_EXT: uint = 0x8C49;
export def COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: uint = 0x8C4D;
export def COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: uint = 0x8C4E;
export def COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: uint = 0x8C4F;
export def COMPRESSED_SRGB_EXT: uint = 0x8C48;
export def COMPRESSED_SRGB_S3TC_DXT1_EXT: uint = 0x8C4C;
export def COMPRESSED_TEXTURE_FORMATS: uint = 0x86A3;
export def COMPRESSED_TEXTURE_FORMATS_ARB: uint = 0x86A3;
export def COMPUTE_PROGRAM_NV: uint = 0x90FB;
export def COMPUTE_PROGRAM_PARAMETER_BUFFER_NV: uint = 0x90FC;
export def COMPUTE_SHADER: uint = 0x91B9;
export def COMPUTE_SHADER_BIT: uint = 0x00000020;
export def COMPUTE_SHADER_INVOCATIONS: uint = 0x82F5;
export def COMPUTE_SHADER_INVOCATIONS_ARB: uint = 0x82F5;
export def COMPUTE_SUBROUTINE: uint = 0x92ED;
export def COMPUTE_SUBROUTINE_UNIFORM: uint = 0x92F3;
export def COMPUTE_TEXTURE: uint = 0x82A0;
export def COMPUTE_WORK_GROUP_SIZE: uint = 0x8267;
export def COMP_BIT_ATI: uint = 0x00000002;
export def CONDITION_SATISFIED: uint = 0x911C;
export def CONFORMANT_NV: uint = 0x9374;
export def CONIC_CURVE_TO_NV: uint = 0x1A;
export def CONJOINT_NV: uint = 0x9284;
export def CONSERVATIVE_RASTERIZATION_INTEL: uint = 0x83FE;
export def CONSERVATIVE_RASTERIZATION_NV: uint = 0x9346;
export def CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV: uint = 0x937B;
export def CONSERVATIVE_RASTER_DILATE_NV: uint = 0x9379;
export def CONSERVATIVE_RASTER_DILATE_RANGE_NV: uint = 0x937A;
export def CONSERVATIVE_RASTER_MODE_NV: uint = 0x954D;
export def CONSERVATIVE_RASTER_MODE_POST_SNAP_NV: uint = 0x954E;
export def CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV: uint = 0x9550;
export def CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV: uint = 0x954F;
export def CONSERVE_MEMORY_HINT_PGI: uint = 0x1A1FD;
export def CONSTANT: uint = 0x8576;
export def CONSTANT_ALPHA: uint = 0x8003;
export def CONSTANT_ALPHA_EXT: uint = 0x8003;
export def CONSTANT_ARB: uint = 0x8576;
export def CONSTANT_ATTENUATION: uint = 0x1207;
export def CONSTANT_BORDER_HP: uint = 0x8151;
export def CONSTANT_COLOR: uint = 0x8001;
export def CONSTANT_COLOR0_NV: uint = 0x852A;
export def CONSTANT_COLOR1_NV: uint = 0x852B;
export def CONSTANT_COLOR_EXT: uint = 0x8001;
export def CONSTANT_EXT: uint = 0x8576;
export def CONST_EYE_NV: uint = 0x86E5;
export def CONTEXT_FLAG_DEBUG_BIT: uint = 0x00000002;
export def CONTEXT_FLAG_NO_ERROR_BIT: uint = 0x00000008;
export def CONTEXT_FLAG_NO_ERROR_BIT_KHR: uint = 0x00000008;
export def CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB: uint = 0x00000004;
export def CONTEXT_LOST: uint = 0x0507;
export def CONTEXT_RELEASE_BEHAVIOR: uint = 0x82FB;
export def CONTEXT_RELEASE_BEHAVIOR_FLUSH: uint = 0x82FC;
export def CONTEXT_ROBUST_ACCESS: uint = 0x90F3;
export def CONTINUOUS_AMD: uint = 0x9007;
export def CONTRAST_NV: uint = 0x92A1;
export def CONVEX_HULL_NV: uint = 0x908B;
export def CONVOLUTION_1D_EXT: uint = 0x8010;
export def CONVOLUTION_2D_EXT: uint = 0x8011;
export def CONVOLUTION_BORDER_COLOR_HP: uint = 0x8154;
export def CONVOLUTION_BORDER_MODE_EXT: uint = 0x8013;
export def CONVOLUTION_FILTER_BIAS_EXT: uint = 0x8015;
export def CONVOLUTION_FILTER_SCALE_EXT: uint = 0x8014;
export def CONVOLUTION_FORMAT_EXT: uint = 0x8017;
export def CONVOLUTION_HEIGHT_EXT: uint = 0x8019;
export def CONVOLUTION_HINT_SGIX: uint = 0x8316;
export def CONVOLUTION_WIDTH_EXT: uint = 0x8018;
export def CON_0_ATI: uint = 0x8941;
export def CON_10_ATI: uint = 0x894B;
export def CON_11_ATI: uint = 0x894C;
export def CON_12_ATI: uint = 0x894D;
export def CON_13_ATI: uint = 0x894E;
export def CON_14_ATI: uint = 0x894F;
export def CON_15_ATI: uint = 0x8950;
export def CON_16_ATI: uint = 0x8951;
export def CON_17_ATI: uint = 0x8952;
export def CON_18_ATI: uint = 0x8953;
export def CON_19_ATI: uint = 0x8954;
export def CON_1_ATI: uint = 0x8942;
export def CON_20_ATI: uint = 0x8955;
export def CON_21_ATI: uint = 0x8956;
export def CON_22_ATI: uint = 0x8957;
export def CON_23_ATI: uint = 0x8958;
export def CON_24_ATI: uint = 0x8959;
export def CON_25_ATI: uint = 0x895A;
export def CON_26_ATI: uint = 0x895B;
export def CON_27_ATI: uint = 0x895C;
export def CON_28_ATI: uint = 0x895D;
export def CON_29_ATI: uint = 0x895E;
export def CON_2_ATI: uint = 0x8943;
export def CON_30_ATI: uint = 0x895F;
export def CON_31_ATI: uint = 0x8960;
export def CON_3_ATI: uint = 0x8944;
export def CON_4_ATI: uint = 0x8945;
export def CON_5_ATI: uint = 0x8946;
export def CON_6_ATI: uint = 0x8947;
export def CON_7_ATI: uint = 0x8948;
export def CON_8_ATI: uint = 0x8949;
export def CON_9_ATI: uint = 0x894A;
export def COORD_REPLACE: uint = 0x8862;
export def COORD_REPLACE_ARB: uint = 0x8862;
export def COORD_REPLACE_NV: uint = 0x8862;
export def COPY: uint = 0x1503;
export def COPY_INVERTED: uint = 0x150C;
export def COPY_PIXEL_TOKEN: uint = 0x0706;
export def COPY_READ_BUFFER: uint = 0x8F36;
export def COPY_WRITE_BUFFER: uint = 0x8F37;
export def COUNTER_RANGE_AMD: uint = 0x8BC1;
export def COUNTER_TYPE_AMD: uint = 0x8BC0;
export def COUNT_DOWN_NV: uint = 0x9089;
export def COUNT_UP_NV: uint = 0x9088;
export def COVERAGE_MODULATION_NV: uint = 0x9332;
export def COVERAGE_MODULATION_TABLE_NV: uint = 0x9331;
export def COVERAGE_MODULATION_TABLE_SIZE_NV: uint = 0x9333;
export def CUBIC_CURVE_TO_NV: uint = 0x0C;
export def CUBIC_EXT: uint = 0x8334;
export def CUBIC_HP: uint = 0x815F;
export def CULL_FACE: uint = 0x0B44;
export def CULL_FACE_MODE: uint = 0x0B45;
export def CULL_FRAGMENT_NV: uint = 0x86E7;
export def CULL_MODES_NV: uint = 0x86E0;
export def CULL_VERTEX_EXT: uint = 0x81AA;
export def CULL_VERTEX_EYE_POSITION_EXT: uint = 0x81AB;
export def CULL_VERTEX_IBM: uint = 103050;
export def CULL_VERTEX_OBJECT_POSITION_EXT: uint = 0x81AC;
export def CURRENT_ATTRIB_NV: uint = 0x8626;
export def CURRENT_BINORMAL_EXT: uint = 0x843C;
export def CURRENT_BIT: uint = 0x00000001;
export def CURRENT_COLOR: uint = 0x0B00;
export def CURRENT_FOG_COORD: uint = 0x8453;
export def CURRENT_FOG_COORDINATE: uint = 0x8453;
export def CURRENT_FOG_COORDINATE_EXT: uint = 0x8453;
export def CURRENT_INDEX: uint = 0x0B01;
export def CURRENT_MATRIX_ARB: uint = 0x8641;
export def CURRENT_MATRIX_INDEX_ARB: uint = 0x8845;
export def CURRENT_MATRIX_NV: uint = 0x8641;
export def CURRENT_MATRIX_STACK_DEPTH_ARB: uint = 0x8640;
export def CURRENT_MATRIX_STACK_DEPTH_NV: uint = 0x8640;
export def CURRENT_NORMAL: uint = 0x0B02;
export def CURRENT_OCCLUSION_QUERY_ID_NV: uint = 0x8865;
export def CURRENT_PALETTE_MATRIX_ARB: uint = 0x8843;
export def CURRENT_PROGRAM: uint = 0x8B8D;
export def CURRENT_QUERY: uint = 0x8865;
export def CURRENT_QUERY_ARB: uint = 0x8865;
export def CURRENT_RASTER_COLOR: uint = 0x0B04;
export def CURRENT_RASTER_DISTANCE: uint = 0x0B09;
export def CURRENT_RASTER_INDEX: uint = 0x0B05;
export def CURRENT_RASTER_NORMAL_SGIX: uint = 0x8406;
export def CURRENT_RASTER_POSITION: uint = 0x0B07;
export def CURRENT_RASTER_POSITION_VALID: uint = 0x0B08;
export def CURRENT_RASTER_SECONDARY_COLOR: uint = 0x845F;
export def CURRENT_RASTER_TEXTURE_COORDS: uint = 0x0B06;
export def CURRENT_SECONDARY_COLOR: uint = 0x8459;
export def CURRENT_SECONDARY_COLOR_EXT: uint = 0x8459;
export def CURRENT_TANGENT_EXT: uint = 0x843B;
export def CURRENT_TEXTURE_COORDS: uint = 0x0B03;
export def CURRENT_TIME_NV: uint = 0x8E28;
export def CURRENT_VERTEX_ATTRIB: uint = 0x8626;
export def CURRENT_VERTEX_ATTRIB_ARB: uint = 0x8626;
export def CURRENT_VERTEX_EXT: uint = 0x87E2;
export def CURRENT_VERTEX_WEIGHT_EXT: uint = 0x850B;
export def CURRENT_WEIGHT_ARB: uint = 0x86A8;
export def CW: uint = 0x0900;
export def D3D12_FENCE_VALUE_EXT: uint = 0x9595;
export def DARKEN_KHR: uint = 0x9297;
export def DARKEN_NV: uint = 0x9297;
export def DATA_BUFFER_AMD: uint = 0x9151;
export def DEBUG_CALLBACK_FUNCTION: uint = 0x8244;
export def DEBUG_CALLBACK_FUNCTION_ARB: uint = 0x8244;
export def DEBUG_CALLBACK_USER_PARAM: uint = 0x8245;
export def DEBUG_CALLBACK_USER_PARAM_ARB: uint = 0x8245;
export def DEBUG_CATEGORY_API_ERROR_AMD: uint = 0x9149;
export def DEBUG_CATEGORY_APPLICATION_AMD: uint = 0x914F;
export def DEBUG_CATEGORY_DEPRECATION_AMD: uint = 0x914B;
export def DEBUG_CATEGORY_OTHER_AMD: uint = 0x9150;
export def DEBUG_CATEGORY_PERFORMANCE_AMD: uint = 0x914D;
export def DEBUG_CATEGORY_SHADER_COMPILER_AMD: uint = 0x914E;
export def DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD: uint = 0x914C;
export def DEBUG_CATEGORY_WINDOW_SYSTEM_AMD: uint = 0x914A;
export def DEBUG_GROUP_STACK_DEPTH: uint = 0x826D;
export def DEBUG_LOGGED_MESSAGES: uint = 0x9145;
export def DEBUG_LOGGED_MESSAGES_AMD: uint = 0x9145;
export def DEBUG_LOGGED_MESSAGES_ARB: uint = 0x9145;
export def DEBUG_NEXT_LOGGED_MESSAGE_LENGTH: uint = 0x8243;
export def DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB: uint = 0x8243;
export def DEBUG_OUTPUT: uint = 0x92E0;
export def DEBUG_OUTPUT_SYNCHRONOUS: uint = 0x8242;
export def DEBUG_OUTPUT_SYNCHRONOUS_ARB: uint = 0x8242;
export def DEBUG_SEVERITY_HIGH: uint = 0x9146;
export def DEBUG_SEVERITY_HIGH_AMD: uint = 0x9146;
export def DEBUG_SEVERITY_HIGH_ARB: uint = 0x9146;
export def DEBUG_SEVERITY_LOW: uint = 0x9148;
export def DEBUG_SEVERITY_LOW_AMD: uint = 0x9148;
export def DEBUG_SEVERITY_LOW_ARB: uint = 0x9148;
export def DEBUG_SEVERITY_MEDIUM: uint = 0x9147;
export def DEBUG_SEVERITY_MEDIUM_AMD: uint = 0x9147;
export def DEBUG_SEVERITY_MEDIUM_ARB: uint = 0x9147;
export def DEBUG_SEVERITY_NOTIFICATION: uint = 0x826B;
export def DEBUG_SOURCE_API: uint = 0x8246;
export def DEBUG_SOURCE_API_ARB: uint = 0x8246;
export def DEBUG_SOURCE_APPLICATION: uint = 0x824A;
export def DEBUG_SOURCE_APPLICATION_ARB: uint = 0x824A;
export def DEBUG_SOURCE_OTHER: uint = 0x824B;
export def DEBUG_SOURCE_OTHER_ARB: uint = 0x824B;
export def DEBUG_SOURCE_SHADER_COMPILER: uint = 0x8248;
export def DEBUG_SOURCE_SHADER_COMPILER_ARB: uint = 0x8248;
export def DEBUG_SOURCE_THIRD_PARTY: uint = 0x8249;
export def DEBUG_SOURCE_THIRD_PARTY_ARB: uint = 0x8249;
export def DEBUG_SOURCE_WINDOW_SYSTEM: uint = 0x8247;
export def DEBUG_SOURCE_WINDOW_SYSTEM_ARB: uint = 0x8247;
export def DEBUG_TYPE_DEPRECATED_BEHAVIOR: uint = 0x824D;
export def DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB: uint = 0x824D;
export def DEBUG_TYPE_ERROR: uint = 0x824C;
export def DEBUG_TYPE_ERROR_ARB: uint = 0x824C;
export def DEBUG_TYPE_MARKER: uint = 0x8268;
export def DEBUG_TYPE_OTHER: uint = 0x8251;
export def DEBUG_TYPE_OTHER_ARB: uint = 0x8251;
export def DEBUG_TYPE_PERFORMANCE: uint = 0x8250;
export def DEBUG_TYPE_PERFORMANCE_ARB: uint = 0x8250;
export def DEBUG_TYPE_POP_GROUP: uint = 0x826A;
export def DEBUG_TYPE_PORTABILITY: uint = 0x824F;
export def DEBUG_TYPE_PORTABILITY_ARB: uint = 0x824F;
export def DEBUG_TYPE_PUSH_GROUP: uint = 0x8269;
export def DEBUG_TYPE_UNDEFINED_BEHAVIOR: uint = 0x824E;
export def DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB: uint = 0x824E;
export def DECAL: uint = 0x2101;
export def DECODE_EXT: uint = 0x8A49;
export def DECR: uint = 0x1E03;
export def DECR_WRAP: uint = 0x8508;
export def DECR_WRAP_EXT: uint = 0x8508;
export def DEDICATED_MEMORY_OBJECT_EXT: uint = 0x9581;
export def DEFORMATIONS_MASK_SGIX: uint = 0x8196;
export def DELETE_STATUS: uint = 0x8B80;
export def DEPENDENT_AR_TEXTURE_2D_NV: uint = 0x86E9;
export def DEPENDENT_GB_TEXTURE_2D_NV: uint = 0x86EA;
export def DEPENDENT_HILO_TEXTURE_2D_NV: uint = 0x8858;
export def DEPENDENT_RGB_TEXTURE_3D_NV: uint = 0x8859;
export def DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV: uint = 0x885A;
export def DEPTH: uint = 0x1801;
export def DEPTH24_STENCIL8: uint = 0x88F0;
export def DEPTH24_STENCIL8_EXT: uint = 0x88F0;
export def DEPTH32F_STENCIL8: uint = 0x8CAD;
export def DEPTH32F_STENCIL8_NV: uint = 0x8DAC;
export def DEPTH_ATTACHMENT: uint = 0x8D00;
export def DEPTH_ATTACHMENT_EXT: uint = 0x8D00;
export def DEPTH_BIAS: uint = 0x0D1F;
export def DEPTH_BITS: uint = 0x0D56;
export def DEPTH_BOUNDS_EXT: uint = 0x8891;
export def DEPTH_BOUNDS_TEST_EXT: uint = 0x8890;
export def DEPTH_BUFFER_BIT: uint = 0x00000100;
export def DEPTH_BUFFER_FLOAT_MODE_NV: uint = 0x8DAF;
export def DEPTH_CLAMP: uint = 0x864F;
export def DEPTH_CLAMP_FAR_AMD: uint = 0x901F;
export def DEPTH_CLAMP_NEAR_AMD: uint = 0x901E;
export def DEPTH_CLAMP_NV: uint = 0x864F;
export def DEPTH_CLEAR_VALUE: uint = 0x0B73;
export def DEPTH_COMPONENT: uint = 0x1902;
export def DEPTH_COMPONENT16: uint = 0x81A5;
export def DEPTH_COMPONENT16_ARB: uint = 0x81A5;
export def DEPTH_COMPONENT16_SGIX: uint = 0x81A5;
export def DEPTH_COMPONENT24: uint = 0x81A6;
export def DEPTH_COMPONENT24_ARB: uint = 0x81A6;
export def DEPTH_COMPONENT24_SGIX: uint = 0x81A6;
export def DEPTH_COMPONENT32: uint = 0x81A7;
export def DEPTH_COMPONENT32F: uint = 0x8CAC;
export def DEPTH_COMPONENT32F_NV: uint = 0x8DAB;
export def DEPTH_COMPONENT32_ARB: uint = 0x81A7;
export def DEPTH_COMPONENT32_SGIX: uint = 0x81A7;
export def DEPTH_COMPONENTS: uint = 0x8284;
export def DEPTH_FUNC: uint = 0x0B74;
export def DEPTH_RANGE: uint = 0x0B70;
export def DEPTH_RENDERABLE: uint = 0x8287;
export def DEPTH_SAMPLES_NV: uint = 0x932D;
export def DEPTH_SCALE: uint = 0x0D1E;
export def DEPTH_STENCIL: uint = 0x84F9;
export def DEPTH_STENCIL_ATTACHMENT: uint = 0x821A;
export def DEPTH_STENCIL_EXT: uint = 0x84F9;
export def DEPTH_STENCIL_NV: uint = 0x84F9;
export def DEPTH_STENCIL_TEXTURE_MODE: uint = 0x90EA;
export def DEPTH_STENCIL_TO_BGRA_NV: uint = 0x886F;
export def DEPTH_STENCIL_TO_RGBA_NV: uint = 0x886E;
export def DEPTH_TEST: uint = 0x0B71;
export def DEPTH_TEXTURE_MODE: uint = 0x884B;
export def DEPTH_TEXTURE_MODE_ARB: uint = 0x884B;
export def DEPTH_WRITEMASK: uint = 0x0B72;
export def DETACHED_BUFFERS_NV: uint = 0x95AB;
export def DETACHED_MEMORY_INCARNATION_NV: uint = 0x95A9;
export def DETACHED_TEXTURES_NV: uint = 0x95AA;
export def DETAIL_TEXTURE_2D_BINDING_SGIS: uint = 0x8096;
export def DETAIL_TEXTURE_2D_SGIS: uint = 0x8095;
export def DETAIL_TEXTURE_FUNC_POINTS_SGIS: uint = 0x809C;
export def DETAIL_TEXTURE_LEVEL_SGIS: uint = 0x809A;
export def DETAIL_TEXTURE_MODE_SGIS: uint = 0x809B;
export def DEVICE_LUID_EXT: uint = 0x9599;
export def DEVICE_NODE_MASK_EXT: uint = 0x959A;
export def DEVICE_UUID_EXT: uint = 0x9597;
export def DIFFERENCE_KHR: uint = 0x929E;
export def DIFFERENCE_NV: uint = 0x929E;
export def DIFFUSE: uint = 0x1201;
export def DISCARD_ATI: uint = 0x8763;
export def DISCARD_NV: uint = 0x8530;
export def DISCRETE_AMD: uint = 0x9006;
export def DISJOINT_NV: uint = 0x9283;
export def DISPATCH_INDIRECT_BUFFER: uint = 0x90EE;
export def DISPATCH_INDIRECT_BUFFER_BINDING: uint = 0x90EF;
export def DISTANCE_ATTENUATION_EXT: uint = 0x8129;
export def DISTANCE_ATTENUATION_SGIS: uint = 0x8129;
export def DITHER: uint = 0x0BD0;
export def DOMAIN: uint = 0x0A02;
export def DONT_CARE: uint = 0x1100;
export def DOT2_ADD_ATI: uint = 0x896C;
export def DOT3_ATI: uint = 0x8966;
export def DOT3_RGB: uint = 0x86AE;
export def DOT3_RGBA: uint = 0x86AF;
export def DOT3_RGBA_ARB: uint = 0x86AF;
export def DOT3_RGBA_EXT: uint = 0x8741;
export def DOT3_RGB_ARB: uint = 0x86AE;
export def DOT3_RGB_EXT: uint = 0x8740;
export def DOT4_ATI: uint = 0x8967;
export def DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV: uint = 0x885D;
export def DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV: uint = 0x86F3;
export def DOT_PRODUCT_DEPTH_REPLACE_NV: uint = 0x86ED;
export def DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV: uint = 0x86F1;
export def DOT_PRODUCT_NV: uint = 0x86EC;
export def DOT_PRODUCT_PASS_THROUGH_NV: uint = 0x885B;
export def DOT_PRODUCT_REFLECT_CUBE_MAP_NV: uint = 0x86F2;
export def DOT_PRODUCT_TEXTURE_1D_NV: uint = 0x885C;
export def DOT_PRODUCT_TEXTURE_2D_NV: uint = 0x86EE;
export def DOT_PRODUCT_TEXTURE_3D_NV: uint = 0x86EF;
export def DOT_PRODUCT_TEXTURE_CUBE_MAP_NV: uint = 0x86F0;
export def DOT_PRODUCT_TEXTURE_RECTANGLE_NV: uint = 0x864E;
export def DOUBLE: uint = 0x140A;
export def DOUBLEBUFFER: uint = 0x0C32;
export def DOUBLE_MAT2: uint = 0x8F46;
export def DOUBLE_MAT2_EXT: uint = 0x8F46;
export def DOUBLE_MAT2x3: uint = 0x8F49;
export def DOUBLE_MAT2x3_EXT: uint = 0x8F49;
export def DOUBLE_MAT2x4: uint = 0x8F4A;
export def DOUBLE_MAT2x4_EXT: uint = 0x8F4A;
export def DOUBLE_MAT3: uint = 0x8F47;
export def DOUBLE_MAT3_EXT: uint = 0x8F47;
export def DOUBLE_MAT3x2: uint = 0x8F4B;
export def DOUBLE_MAT3x2_EXT: uint = 0x8F4B;
export def DOUBLE_MAT3x4: uint = 0x8F4C;
export def DOUBLE_MAT3x4_EXT: uint = 0x8F4C;
export def DOUBLE_MAT4: uint = 0x8F48;
export def DOUBLE_MAT4_EXT: uint = 0x8F48;
export def DOUBLE_MAT4x2: uint = 0x8F4D;
export def DOUBLE_MAT4x2_EXT: uint = 0x8F4D;
export def DOUBLE_MAT4x3: uint = 0x8F4E;
export def DOUBLE_MAT4x3_EXT: uint = 0x8F4E;
export def DOUBLE_VEC2: uint = 0x8FFC;
export def DOUBLE_VEC2_EXT: uint = 0x8FFC;
export def DOUBLE_VEC3: uint = 0x8FFD;
export def DOUBLE_VEC3_EXT: uint = 0x8FFD;
export def DOUBLE_VEC4: uint = 0x8FFE;
export def DOUBLE_VEC4_EXT: uint = 0x8FFE;
export def DRAW_ARRAYS_COMMAND_NV: uint = 0x0003;
export def DRAW_ARRAYS_INSTANCED_COMMAND_NV: uint = 0x0007;
export def DRAW_ARRAYS_STRIP_COMMAND_NV: uint = 0x0005;
export def DRAW_BUFFER: uint = 0x0C01;
export def DRAW_BUFFER0: uint = 0x8825;
export def DRAW_BUFFER0_ARB: uint = 0x8825;
export def DRAW_BUFFER0_ATI: uint = 0x8825;
export def DRAW_BUFFER1: uint = 0x8826;
export def DRAW_BUFFER10: uint = 0x882F;
export def DRAW_BUFFER10_ARB: uint = 0x882F;
export def DRAW_BUFFER10_ATI: uint = 0x882F;
export def DRAW_BUFFER11: uint = 0x8830;
export def DRAW_BUFFER11_ARB: uint = 0x8830;
export def DRAW_BUFFER11_ATI: uint = 0x8830;
export def DRAW_BUFFER12: uint = 0x8831;
export def DRAW_BUFFER12_ARB: uint = 0x8831;
export def DRAW_BUFFER12_ATI: uint = 0x8831;
export def DRAW_BUFFER13: uint = 0x8832;
export def DRAW_BUFFER13_ARB: uint = 0x8832;
export def DRAW_BUFFER13_ATI: uint = 0x8832;
export def DRAW_BUFFER14: uint = 0x8833;
export def DRAW_BUFFER14_ARB: uint = 0x8833;
export def DRAW_BUFFER14_ATI: uint = 0x8833;
export def DRAW_BUFFER15: uint = 0x8834;
export def DRAW_BUFFER15_ARB: uint = 0x8834;
export def DRAW_BUFFER15_ATI: uint = 0x8834;
export def DRAW_BUFFER1_ARB: uint = 0x8826;
export def DRAW_BUFFER1_ATI: uint = 0x8826;
export def DRAW_BUFFER2: uint = 0x8827;
export def DRAW_BUFFER2_ARB: uint = 0x8827;
export def DRAW_BUFFER2_ATI: uint = 0x8827;
export def DRAW_BUFFER3: uint = 0x8828;
export def DRAW_BUFFER3_ARB: uint = 0x8828;
export def DRAW_BUFFER3_ATI: uint = 0x8828;
export def DRAW_BUFFER4: uint = 0x8829;
export def DRAW_BUFFER4_ARB: uint = 0x8829;
export def DRAW_BUFFER4_ATI: uint = 0x8829;
export def DRAW_BUFFER5: uint = 0x882A;
export def DRAW_BUFFER5_ARB: uint = 0x882A;
export def DRAW_BUFFER5_ATI: uint = 0x882A;
export def DRAW_BUFFER6: uint = 0x882B;
export def DRAW_BUFFER6_ARB: uint = 0x882B;
export def DRAW_BUFFER6_ATI: uint = 0x882B;
export def DRAW_BUFFER7: uint = 0x882C;
export def DRAW_BUFFER7_ARB: uint = 0x882C;
export def DRAW_BUFFER7_ATI: uint = 0x882C;
export def DRAW_BUFFER8: uint = 0x882D;
export def DRAW_BUFFER8_ARB: uint = 0x882D;
export def DRAW_BUFFER8_ATI: uint = 0x882D;
export def DRAW_BUFFER9: uint = 0x882E;
export def DRAW_BUFFER9_ARB: uint = 0x882E;
export def DRAW_BUFFER9_ATI: uint = 0x882E;
export def DRAW_ELEMENTS_COMMAND_NV: uint = 0x0002;
export def DRAW_ELEMENTS_INSTANCED_COMMAND_NV: uint = 0x0006;
export def DRAW_ELEMENTS_STRIP_COMMAND_NV: uint = 0x0004;
export def DRAW_FRAMEBUFFER: uint = 0x8CA9;
export def DRAW_FRAMEBUFFER_BINDING: uint = 0x8CA6;
export def DRAW_FRAMEBUFFER_BINDING_EXT: uint = 0x8CA6;
export def DRAW_FRAMEBUFFER_EXT: uint = 0x8CA9;
export def DRAW_INDIRECT_ADDRESS_NV: uint = 0x8F41;
export def DRAW_INDIRECT_BUFFER: uint = 0x8F3F;
export def DRAW_INDIRECT_BUFFER_BINDING: uint = 0x8F43;
export def DRAW_INDIRECT_LENGTH_NV: uint = 0x8F42;
export def DRAW_INDIRECT_UNIFIED_NV: uint = 0x8F40;
export def DRAW_PIXELS_APPLE: uint = 0x8A0A;
export def DRAW_PIXEL_TOKEN: uint = 0x0705;
export def DRIVER_UUID_EXT: uint = 0x9598;
export def DSDT8_MAG8_INTENSITY8_NV: uint = 0x870B;
export def DSDT8_MAG8_NV: uint = 0x870A;
export def DSDT8_NV: uint = 0x8709;
export def DSDT_MAG_INTENSITY_NV: uint = 0x86DC;
export def DSDT_MAG_NV: uint = 0x86F6;
export def DSDT_MAG_VIB_NV: uint = 0x86F7;
export def DSDT_NV: uint = 0x86F5;
export def DST_ALPHA: uint = 0x0304;
export def DST_ATOP_NV: uint = 0x928F;
export def DST_COLOR: uint = 0x0306;
export def DST_IN_NV: uint = 0x928B;
export def DST_NV: uint = 0x9287;
export def DST_OUT_NV: uint = 0x928D;
export def DST_OVER_NV: uint = 0x9289;
export def DS_BIAS_NV: uint = 0x8716;
export def DS_SCALE_NV: uint = 0x8710;
export def DT_BIAS_NV: uint = 0x8717;
export def DT_SCALE_NV: uint = 0x8711;
export def DU8DV8_ATI: uint = 0x877A;
export def DUAL_ALPHA12_SGIS: uint = 0x8112;
export def DUAL_ALPHA16_SGIS: uint = 0x8113;
export def DUAL_ALPHA4_SGIS: uint = 0x8110;
export def DUAL_ALPHA8_SGIS: uint = 0x8111;
export def DUAL_INTENSITY12_SGIS: uint = 0x811A;
export def DUAL_INTENSITY16_SGIS: uint = 0x811B;
export def DUAL_INTENSITY4_SGIS: uint = 0x8118;
export def DUAL_INTENSITY8_SGIS: uint = 0x8119;
export def DUAL_LUMINANCE12_SGIS: uint = 0x8116;
export def DUAL_LUMINANCE16_SGIS: uint = 0x8117;
export def DUAL_LUMINANCE4_SGIS: uint = 0x8114;
export def DUAL_LUMINANCE8_SGIS: uint = 0x8115;
export def DUAL_LUMINANCE_ALPHA4_SGIS: uint = 0x811C;
export def DUAL_LUMINANCE_ALPHA8_SGIS: uint = 0x811D;
export def DUAL_TEXTURE_SELECT_SGIS: uint = 0x8124;
export def DUDV_ATI: uint = 0x8779;
export def DUP_FIRST_CUBIC_CURVE_TO_NV: uint = 0xF2;
export def DUP_LAST_CUBIC_CURVE_TO_NV: uint = 0xF4;
export def DYNAMIC_ATI: uint = 0x8761;
export def DYNAMIC_COPY: uint = 0x88EA;
export def DYNAMIC_COPY_ARB: uint = 0x88EA;
export def DYNAMIC_DRAW: uint = 0x88E8;
export def DYNAMIC_DRAW_ARB: uint = 0x88E8;
export def DYNAMIC_READ: uint = 0x88E9;
export def DYNAMIC_READ_ARB: uint = 0x88E9;
export def DYNAMIC_STORAGE_BIT: uint = 0x0100;
export def EDGEFLAG_BIT_PGI: uint = 0x00040000;
export def EDGE_FLAG: uint = 0x0B43;
export def EDGE_FLAG_ARRAY: uint = 0x8079;
export def EDGE_FLAG_ARRAY_ADDRESS_NV: uint = 0x8F26;
export def EDGE_FLAG_ARRAY_BUFFER_BINDING: uint = 0x889B;
export def EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB: uint = 0x889B;
export def EDGE_FLAG_ARRAY_COUNT_EXT: uint = 0x808D;
export def EDGE_FLAG_ARRAY_EXT: uint = 0x8079;
export def EDGE_FLAG_ARRAY_LENGTH_NV: uint = 0x8F30;
export def EDGE_FLAG_ARRAY_LIST_IBM: uint = 103075;
export def EDGE_FLAG_ARRAY_LIST_STRIDE_IBM: uint = 103085;
export def EDGE_FLAG_ARRAY_POINTER: uint = 0x8093;
export def EDGE_FLAG_ARRAY_POINTER_EXT: uint = 0x8093;
export def EDGE_FLAG_ARRAY_STRIDE: uint = 0x808C;
export def EDGE_FLAG_ARRAY_STRIDE_EXT: uint = 0x808C;
export def EFFECTIVE_RASTER_SAMPLES_EXT: uint = 0x932C;
export def EIGHTH_BIT_ATI: uint = 0x00000020;
export def ELEMENT_ADDRESS_COMMAND_NV: uint = 0x0008;
export def ELEMENT_ARRAY_ADDRESS_NV: uint = 0x8F29;
export def ELEMENT_ARRAY_APPLE: uint = 0x8A0C;
export def ELEMENT_ARRAY_ATI: uint = 0x8768;
export def ELEMENT_ARRAY_BARRIER_BIT: uint = 0x00000002;
export def ELEMENT_ARRAY_BARRIER_BIT_EXT: uint = 0x00000002;
export def ELEMENT_ARRAY_BUFFER: uint = 0x8893;
export def ELEMENT_ARRAY_BUFFER_ARB: uint = 0x8893;
export def ELEMENT_ARRAY_BUFFER_BINDING: uint = 0x8895;
export def ELEMENT_ARRAY_BUFFER_BINDING_ARB: uint = 0x8895;
export def ELEMENT_ARRAY_LENGTH_NV: uint = 0x8F33;
export def ELEMENT_ARRAY_POINTER_APPLE: uint = 0x8A0E;
export def ELEMENT_ARRAY_POINTER_ATI: uint = 0x876A;
export def ELEMENT_ARRAY_TYPE_APPLE: uint = 0x8A0D;
export def ELEMENT_ARRAY_TYPE_ATI: uint = 0x8769;
export def ELEMENT_ARRAY_UNIFIED_NV: uint = 0x8F1F;
export def EMBOSS_CONSTANT_NV: uint = 0x855E;
export def EMBOSS_LIGHT_NV: uint = 0x855D;
export def EMBOSS_MAP_NV: uint = 0x855F;
export def EMISSION: uint = 0x1600;
export def ENABLE_BIT: uint = 0x00002000;
export def EQUAL: uint = 0x0202;
export def EQUIV: uint = 0x1509;
export def EVAL_2D_NV: uint = 0x86C0;
export def EVAL_BIT: uint = 0x00010000;
export def EVAL_FRACTIONAL_TESSELLATION_NV: uint = 0x86C5;
export def EVAL_TRIANGULAR_2D_NV: uint = 0x86C1;
export def EVAL_VERTEX_ATTRIB0_NV: uint = 0x86C6;
export def EVAL_VERTEX_ATTRIB10_NV: uint = 0x86D0;
export def EVAL_VERTEX_ATTRIB11_NV: uint = 0x86D1;
export def EVAL_VERTEX_ATTRIB12_NV: uint = 0x86D2;
export def EVAL_VERTEX_ATTRIB13_NV: uint = 0x86D3;
export def EVAL_VERTEX_ATTRIB14_NV: uint = 0x86D4;
export def EVAL_VERTEX_ATTRIB15_NV: uint = 0x86D5;
export def EVAL_VERTEX_ATTRIB1_NV: uint = 0x86C7;
export def EVAL_VERTEX_ATTRIB2_NV: uint = 0x86C8;
export def EVAL_VERTEX_ATTRIB3_NV: uint = 0x86C9;
export def EVAL_VERTEX_ATTRIB4_NV: uint = 0x86CA;
export def EVAL_VERTEX_ATTRIB5_NV: uint = 0x86CB;
export def EVAL_VERTEX_ATTRIB6_NV: uint = 0x86CC;
export def EVAL_VERTEX_ATTRIB7_NV: uint = 0x86CD;
export def EVAL_VERTEX_ATTRIB8_NV: uint = 0x86CE;
export def EVAL_VERTEX_ATTRIB9_NV: uint = 0x86CF;
export def EXCLUSION_KHR: uint = 0x92A0;
export def EXCLUSION_NV: uint = 0x92A0;
export def EXCLUSIVE_EXT: uint = 0x8F11;
export def EXP: uint = 0x0800;
export def EXP2: uint = 0x0801;
export def EXPAND_NEGATE_NV: uint = 0x8539;
export def EXPAND_NORMAL_NV: uint = 0x8538;
export def EXTENSIONS: uint = 0x1F03;
export def EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD: uint = 0x9160;
export def EYE_DISTANCE_TO_LINE_SGIS: uint = 0x81F2;
export def EYE_DISTANCE_TO_POINT_SGIS: uint = 0x81F0;
export def EYE_LINEAR: uint = 0x2400;
export def EYE_LINE_SGIS: uint = 0x81F6;
export def EYE_PLANE: uint = 0x2502;
export def EYE_PLANE_ABSOLUTE_NV: uint = 0x855C;
export def EYE_POINT_SGIS: uint = 0x81F4;
export def EYE_RADIAL_NV: uint = 0x855B;
export def E_TIMES_F_NV: uint = 0x8531;
export def FACTOR_MAX_AMD: uint = 0x901D;
export def FACTOR_MIN_AMD: uint = 0x901C;
export def FAILURE_NV: uint = 0x9030;
export def FALSE: u8 = 0;
export def FASTEST: uint = 0x1101;
export def FEEDBACK: uint = 0x1C01;
export def FEEDBACK_BUFFER_POINTER: uint = 0x0DF0;
export def FEEDBACK_BUFFER_SIZE: uint = 0x0DF1;
export def FEEDBACK_BUFFER_TYPE: uint = 0x0DF2;
export def FENCE_APPLE: uint = 0x8A0B;
export def FENCE_CONDITION_NV: uint = 0x84F4;
export def FENCE_STATUS_NV: uint = 0x84F3;
export def FIELDS_NV: uint = 0x8E27;
export def FIELD_LOWER_NV: uint = 0x9023;
export def FIELD_UPPER_NV: uint = 0x9022;
export def FILE_NAME_NV: uint = 0x9074;
export def FILL: uint = 0x1B02;
export def FILL_RECTANGLE_NV: uint = 0x933C;
export def FILTER: uint = 0x829A;
export def FILTER4_SGIS: uint = 0x8146;
export def FIRST_TO_REST_NV: uint = 0x90AF;
export def FIRST_VERTEX_CONVENTION: uint = 0x8E4D;
export def FIRST_VERTEX_CONVENTION_EXT: uint = 0x8E4D;
export def FIXED: uint = 0x140C;
export def FIXED_OES: uint = 0x140C;
export def FIXED_ONLY_ARB: uint = 0x891D;
export def FLAT: uint = 0x1D00;
export def FLOAT: uint = 0x1406;
export def FLOAT16_MAT2_AMD: uint = 0x91C5;
export def FLOAT16_MAT2x3_AMD: uint = 0x91C8;
export def FLOAT16_MAT2x4_AMD: uint = 0x91C9;
export def FLOAT16_MAT3_AMD: uint = 0x91C6;
export def FLOAT16_MAT3x2_AMD: uint = 0x91CA;
export def FLOAT16_MAT3x4_AMD: uint = 0x91CB;
export def FLOAT16_MAT4_AMD: uint = 0x91C7;
export def FLOAT16_MAT4x2_AMD: uint = 0x91CC;
export def FLOAT16_MAT4x3_AMD: uint = 0x91CD;
export def FLOAT16_NV: uint = 0x8FF8;
export def FLOAT16_VEC2_NV: uint = 0x8FF9;
export def FLOAT16_VEC3_NV: uint = 0x8FFA;
export def FLOAT16_VEC4_NV: uint = 0x8FFB;
export def FLOAT_32_UNSIGNED_INT_24_8_REV: uint = 0x8DAD;
export def FLOAT_32_UNSIGNED_INT_24_8_REV_NV: uint = 0x8DAD;
export def FLOAT_CLEAR_COLOR_VALUE_NV: uint = 0x888D;
export def FLOAT_MAT2: uint = 0x8B5A;
export def FLOAT_MAT2_ARB: uint = 0x8B5A;
export def FLOAT_MAT2x3: uint = 0x8B65;
export def FLOAT_MAT2x4: uint = 0x8B66;
export def FLOAT_MAT3: uint = 0x8B5B;
export def FLOAT_MAT3_ARB: uint = 0x8B5B;
export def FLOAT_MAT3x2: uint = 0x8B67;
export def FLOAT_MAT3x4: uint = 0x8B68;
export def FLOAT_MAT4: uint = 0x8B5C;
export def FLOAT_MAT4_ARB: uint = 0x8B5C;
export def FLOAT_MAT4x2: uint = 0x8B69;
export def FLOAT_MAT4x3: uint = 0x8B6A;
export def FLOAT_R16_NV: uint = 0x8884;
export def FLOAT_R32_NV: uint = 0x8885;
export def FLOAT_RG16_NV: uint = 0x8886;
export def FLOAT_RG32_NV: uint = 0x8887;
export def FLOAT_RGB16_NV: uint = 0x8888;
export def FLOAT_RGB32_NV: uint = 0x8889;
export def FLOAT_RGBA16_NV: uint = 0x888A;
export def FLOAT_RGBA32_NV: uint = 0x888B;
export def FLOAT_RGBA_MODE_NV: uint = 0x888E;
export def FLOAT_RGBA_NV: uint = 0x8883;
export def FLOAT_RGB_NV: uint = 0x8882;
export def FLOAT_RG_NV: uint = 0x8881;
export def FLOAT_R_NV: uint = 0x8880;
export def FLOAT_VEC2: uint = 0x8B50;
export def FLOAT_VEC2_ARB: uint = 0x8B50;
export def FLOAT_VEC3: uint = 0x8B51;
export def FLOAT_VEC3_ARB: uint = 0x8B51;
export def FLOAT_VEC4: uint = 0x8B52;
export def FLOAT_VEC4_ARB: uint = 0x8B52;
export def FOG: uint = 0x0B60;
export def FOG_BIT: uint = 0x00000080;
export def FOG_COLOR: uint = 0x0B66;
export def FOG_COORD: uint = 0x8451;
export def FOG_COORDINATE: uint = 0x8451;
export def FOG_COORDINATE_ARRAY: uint = 0x8457;
export def FOG_COORDINATE_ARRAY_BUFFER_BINDING: uint = 0x889D;
export def FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB: uint = 0x889D;
export def FOG_COORDINATE_ARRAY_EXT: uint = 0x8457;
export def FOG_COORDINATE_ARRAY_LIST_IBM: uint = 103076;
export def FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM: uint = 103086;
export def FOG_COORDINATE_ARRAY_POINTER: uint = 0x8456;
export def FOG_COORDINATE_ARRAY_POINTER_EXT: uint = 0x8456;
export def FOG_COORDINATE_ARRAY_STRIDE: uint = 0x8455;
export def FOG_COORDINATE_ARRAY_STRIDE_EXT: uint = 0x8455;
export def FOG_COORDINATE_ARRAY_TYPE: uint = 0x8454;
export def FOG_COORDINATE_ARRAY_TYPE_EXT: uint = 0x8454;
export def FOG_COORDINATE_EXT: uint = 0x8451;
export def FOG_COORDINATE_SOURCE: uint = 0x8450;
export def FOG_COORDINATE_SOURCE_EXT: uint = 0x8450;
export def FOG_COORD_ARRAY: uint = 0x8457;
export def FOG_COORD_ARRAY_ADDRESS_NV: uint = 0x8F28;
export def FOG_COORD_ARRAY_BUFFER_BINDING: uint = 0x889D;
export def FOG_COORD_ARRAY_LENGTH_NV: uint = 0x8F32;
export def FOG_COORD_ARRAY_POINTER: uint = 0x8456;
export def FOG_COORD_ARRAY_STRIDE: uint = 0x8455;
export def FOG_COORD_ARRAY_TYPE: uint = 0x8454;
export def FOG_COORD_SRC: uint = 0x8450;
export def FOG_DENSITY: uint = 0x0B62;
export def FOG_DISTANCE_MODE_NV: uint = 0x855A;
export def FOG_END: uint = 0x0B64;
export def FOG_FUNC_POINTS_SGIS: uint = 0x812B;
export def FOG_FUNC_SGIS: uint = 0x812A;
export def FOG_HINT: uint = 0x0C54;
export def FOG_INDEX: uint = 0x0B61;
export def FOG_MODE: uint = 0x0B65;
export def FOG_OFFSET_SGIX: uint = 0x8198;
export def FOG_OFFSET_VALUE_SGIX: uint = 0x8199;
export def FOG_SPECULAR_TEXTURE_WIN: uint = 0x80EC;
export def FOG_START: uint = 0x0B63;
export def FONT_ASCENDER_BIT_NV: uint = 0x00200000;
export def FONT_DESCENDER_BIT_NV: uint = 0x00400000;
export def FONT_GLYPHS_AVAILABLE_NV: uint = 0x9368;
export def FONT_HAS_KERNING_BIT_NV: uint = 0x10000000;
export def FONT_HEIGHT_BIT_NV: uint = 0x00800000;
export def FONT_MAX_ADVANCE_HEIGHT_BIT_NV: uint = 0x02000000;
export def FONT_MAX_ADVANCE_WIDTH_BIT_NV: uint = 0x01000000;
export def FONT_NUM_GLYPH_INDICES_BIT_NV: uint = 0x20000000;
export def FONT_TARGET_UNAVAILABLE_NV: uint = 0x9369;
export def FONT_UNAVAILABLE_NV: uint = 0x936A;
export def FONT_UNDERLINE_POSITION_BIT_NV: uint = 0x04000000;
export def FONT_UNDERLINE_THICKNESS_BIT_NV: uint = 0x08000000;
export def FONT_UNINTELLIGIBLE_NV: uint = 0x936B;
export def FONT_UNITS_PER_EM_BIT_NV: uint = 0x00100000;
export def FONT_X_MAX_BOUNDS_BIT_NV: uint = 0x00040000;
export def FONT_X_MIN_BOUNDS_BIT_NV: uint = 0x00010000;
export def FONT_Y_MAX_BOUNDS_BIT_NV: uint = 0x00080000;
export def FONT_Y_MIN_BOUNDS_BIT_NV: uint = 0x00020000;
export def FORCE_BLUE_TO_ONE_NV: uint = 0x8860;
export def FORMAT_SUBSAMPLE_244_244_OML: uint = 0x8983;
export def FORMAT_SUBSAMPLE_24_24_OML: uint = 0x8982;
export def FRACTIONAL_EVEN: uint = 0x8E7C;
export def FRACTIONAL_ODD: uint = 0x8E7B;
export def FRAGMENT_COLOR_EXT: uint = 0x834C;
export def FRAGMENT_COLOR_MATERIAL_FACE_SGIX: uint = 0x8402;
export def FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX: uint = 0x8403;
export def FRAGMENT_COLOR_MATERIAL_SGIX: uint = 0x8401;
export def FRAGMENT_COVERAGE_COLOR_NV: uint = 0x92DE;
export def FRAGMENT_COVERAGE_TO_COLOR_NV: uint = 0x92DD;
export def FRAGMENT_DEPTH: uint = 0x8452;
export def FRAGMENT_DEPTH_EXT: uint = 0x8452;
export def FRAGMENT_INPUT_NV: uint = 0x936D;
export def FRAGMENT_INTERPOLATION_OFFSET_BITS: uint = 0x8E5D;
export def FRAGMENT_LIGHT0_SGIX: uint = 0x840C;
export def FRAGMENT_LIGHT1_SGIX: uint = 0x840D;
export def FRAGMENT_LIGHT2_SGIX: uint = 0x840E;
export def FRAGMENT_LIGHT3_SGIX: uint = 0x840F;
export def FRAGMENT_LIGHT4_SGIX: uint = 0x8410;
export def FRAGMENT_LIGHT5_SGIX: uint = 0x8411;
export def FRAGMENT_LIGHT6_SGIX: uint = 0x8412;
export def FRAGMENT_LIGHT7_SGIX: uint = 0x8413;
export def FRAGMENT_LIGHTING_SGIX: uint = 0x8400;
export def FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX: uint = 0x840A;
export def FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX: uint = 0x8408;
export def FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX: uint = 0x840B;
export def FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX: uint = 0x8409;
export def FRAGMENT_MATERIAL_EXT: uint = 0x8349;
export def FRAGMENT_NORMAL_EXT: uint = 0x834A;
export def FRAGMENT_PROGRAM_ARB: uint = 0x8804;
export def FRAGMENT_PROGRAM_BINDING_NV: uint = 0x8873;
export def FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV: uint = 0x8E5D;
export def FRAGMENT_PROGRAM_NV: uint = 0x8870;
export def FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV: uint = 0x8DA4;
export def FRAGMENT_SHADER: uint = 0x8B30;
export def FRAGMENT_SHADER_ARB: uint = 0x8B30;
export def FRAGMENT_SHADER_ATI: uint = 0x8920;
export def FRAGMENT_SHADER_BIT: uint = 0x00000002;
export def FRAGMENT_SHADER_DERIVATIVE_HINT: uint = 0x8B8B;
export def FRAGMENT_SHADER_DERIVATIVE_HINT_ARB: uint = 0x8B8B;
export def FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT: uint = 0x8A52;
export def FRAGMENT_SHADER_INVOCATIONS: uint = 0x82F4;
export def FRAGMENT_SHADER_INVOCATIONS_ARB: uint = 0x82F4;
export def FRAGMENT_SUBROUTINE: uint = 0x92EC;
export def FRAGMENT_SUBROUTINE_UNIFORM: uint = 0x92F2;
export def FRAGMENT_TEXTURE: uint = 0x829F;
export def FRAMEBUFFER: uint = 0x8D40;
export def FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: uint = 0x8215;
export def FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: uint = 0x8214;
export def FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: uint = 0x8210;
export def FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: uint = 0x8211;
export def FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: uint = 0x8216;
export def FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: uint = 0x8213;
export def FRAMEBUFFER_ATTACHMENT_LAYERED_ARB: uint = 0x8DA7;
export def FRAMEBUFFER_ATTACHMENT_LAYERED_EXT: uint = 0x8DA7;
export def FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: uint = 0x8CD1;
export def FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT: uint = 0x8CD1;
export def FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: uint = 0x8CD0;
export def FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT: uint = 0x8CD0;
export def FRAMEBUFFER_ATTACHMENT_RED_SIZE: uint = 0x8212;
export def FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: uint = 0x8217;
export def FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT: uint = 0x8CD4;
export def FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR: uint = 0x9632;
export def FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: uint = 0x8CD3;
export def FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT: uint = 0x8CD3;
export def FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: uint = 0x8CD4;
export def FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT: uint = 0x8CD4;
export def FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: uint = 0x8CD2;
export def FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT: uint = 0x8CD2;
export def FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR: uint = 0x9630;
export def FRAMEBUFFER_BARRIER_BIT: uint = 0x00000400;
export def FRAMEBUFFER_BARRIER_BIT_EXT: uint = 0x00000400;
export def FRAMEBUFFER_BINDING: uint = 0x8CA6;
export def FRAMEBUFFER_BINDING_EXT: uint = 0x8CA6;
export def FRAMEBUFFER_BLEND: uint = 0x828B;
export def FRAMEBUFFER_COMPLETE: uint = 0x8CD5;
export def FRAMEBUFFER_COMPLETE_EXT: uint = 0x8CD5;
export def FRAMEBUFFER_DEFAULT: uint = 0x8218;
export def FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS: uint = 0x9314;
export def FRAMEBUFFER_DEFAULT_HEIGHT: uint = 0x9311;
export def FRAMEBUFFER_DEFAULT_LAYERS: uint = 0x9312;
export def FRAMEBUFFER_DEFAULT_SAMPLES: uint = 0x9313;
export def FRAMEBUFFER_DEFAULT_WIDTH: uint = 0x9310;
export def FRAMEBUFFER_EXT: uint = 0x8D40;
export def FRAMEBUFFER_FLIP_X_MESA: uint = 0x8BBC;
export def FRAMEBUFFER_FLIP_Y_MESA: uint = 0x8BBB;
export def FRAMEBUFFER_INCOMPLETE_ATTACHMENT: uint = 0x8CD6;
export def FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT: uint = 0x8CD6;
export def FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT: uint = 0x8CD9;
export def FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER: uint = 0x8CDB;
export def FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT: uint = 0x8CDB;
export def FRAMEBUFFER_INCOMPLETE_FORMATS_EXT: uint = 0x8CDA;
export def FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB: uint = 0x8DA9;
export def FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT: uint = 0x8DA9;
export def FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB: uint = 0x8DA8;
export def FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT: uint = 0x8DA8;
export def FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: uint = 0x8CD7;
export def FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT: uint = 0x8CD7;
export def FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: uint = 0x8D56;
export def FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT: uint = 0x8D56;
export def FRAMEBUFFER_INCOMPLETE_READ_BUFFER: uint = 0x8CDC;
export def FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT: uint = 0x8CDC;
export def FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR: uint = 0x9633;
export def FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB: uint = 0x9342;
export def FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV: uint = 0x9342;
export def FRAMEBUFFER_RENDERABLE: uint = 0x8289;
export def FRAMEBUFFER_RENDERABLE_LAYERED: uint = 0x828A;
export def FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB: uint = 0x9343;
export def FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV: uint = 0x9343;
export def FRAMEBUFFER_SRGB: uint = 0x8DB9;
export def FRAMEBUFFER_SRGB_CAPABLE_EXT: uint = 0x8DBA;
export def FRAMEBUFFER_SRGB_EXT: uint = 0x8DB9;
export def FRAMEBUFFER_SWAP_XY_MESA: uint = 0x8BBD;
export def FRAMEBUFFER_UNDEFINED: uint = 0x8219;
export def FRAMEBUFFER_UNSUPPORTED: uint = 0x8CDD;
export def FRAMEBUFFER_UNSUPPORTED_EXT: uint = 0x8CDD;
export def FRAMEZOOM_FACTOR_SGIX: uint = 0x818C;
export def FRAMEZOOM_SGIX: uint = 0x818B;
export def FRAME_NV: uint = 0x8E26;
export def FRONT: uint = 0x0404;
export def FRONT_AND_BACK: uint = 0x0408;
export def FRONT_FACE: uint = 0x0B46;
export def FRONT_FACE_COMMAND_NV: uint = 0x0012;
export def FRONT_LEFT: uint = 0x0400;
export def FRONT_RIGHT: uint = 0x0401;
export def FULL_RANGE_EXT: uint = 0x87E1;
export def FULL_STIPPLE_HINT_PGI: uint = 0x1A219;
export def FULL_SUPPORT: uint = 0x82B7;
export def FUNC_ADD: uint = 0x8006;
export def FUNC_ADD_EXT: uint = 0x8006;
export def FUNC_REVERSE_SUBTRACT: uint = 0x800B;
export def FUNC_REVERSE_SUBTRACT_EXT: uint = 0x800B;
export def FUNC_SUBTRACT: uint = 0x800A;
export def FUNC_SUBTRACT_EXT: uint = 0x800A;
export def GENERATE_MIPMAP: uint = 0x8191;
export def GENERATE_MIPMAP_HINT: uint = 0x8192;
export def GENERATE_MIPMAP_HINT_SGIS: uint = 0x8192;
export def GENERATE_MIPMAP_SGIS: uint = 0x8191;
export def GENERIC_ATTRIB_NV: uint = 0x8C7D;
export def GEOMETRY_DEFORMATION_BIT_SGIX: uint = 0x00000002;
export def GEOMETRY_DEFORMATION_SGIX: uint = 0x8194;
export def GEOMETRY_INPUT_TYPE_ARB: uint = 0x8DDB;
export def GEOMETRY_INPUT_TYPE_EXT: uint = 0x8DDB;
export def GEOMETRY_OUTPUT_TYPE_ARB: uint = 0x8DDC;
export def GEOMETRY_OUTPUT_TYPE_EXT: uint = 0x8DDC;
export def GEOMETRY_PROGRAM_NV: uint = 0x8C26;
export def GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV: uint = 0x8DA3;
export def GEOMETRY_SHADER_ARB: uint = 0x8DD9;
export def GEOMETRY_SHADER_BIT: uint = 0x00000004;
export def GEOMETRY_SHADER_EXT: uint = 0x8DD9;
export def GEOMETRY_SHADER_INVOCATIONS: uint = 0x887F;
export def GEOMETRY_SHADER_PRIMITIVES_EMITTED: uint = 0x82F3;
export def GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB: uint = 0x82F3;
export def GEOMETRY_SUBROUTINE: uint = 0x92EB;
export def GEOMETRY_SUBROUTINE_UNIFORM: uint = 0x92F1;
export def GEOMETRY_TEXTURE: uint = 0x829E;
export def GEOMETRY_VERTICES_OUT_ARB: uint = 0x8DDA;
export def GEOMETRY_VERTICES_OUT_EXT: uint = 0x8DDA;
export def GEQUAL: uint = 0x0206;
export def GET_TEXTURE_IMAGE_FORMAT: uint = 0x8291;
export def GET_TEXTURE_IMAGE_TYPE: uint = 0x8292;
export def GLOBAL_ALPHA_FACTOR_SUN: uint = 0x81DA;
export def GLOBAL_ALPHA_SUN: uint = 0x81D9;
export def GLYPH_HAS_KERNING_BIT_NV: uint = 0x100;
export def GLYPH_HEIGHT_BIT_NV: uint = 0x02;
export def GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV: uint = 0x10;
export def GLYPH_HORIZONTAL_BEARING_X_BIT_NV: uint = 0x04;
export def GLYPH_HORIZONTAL_BEARING_Y_BIT_NV: uint = 0x08;
export def GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV: uint = 0x80;
export def GLYPH_VERTICAL_BEARING_X_BIT_NV: uint = 0x20;
export def GLYPH_VERTICAL_BEARING_Y_BIT_NV: uint = 0x40;
export def GLYPH_WIDTH_BIT_NV: uint = 0x01;
export def GPU_ADDRESS_NV: uint = 0x8F34;
export def GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX: uint = 0x9049;
export def GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX: uint = 0x9047;
export def GPU_MEMORY_INFO_EVICTED_MEMORY_NVX: uint = 0x904B;
export def GPU_MEMORY_INFO_EVICTION_COUNT_NVX: uint = 0x904A;
export def GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX: uint = 0x9048;
export def GREATER: uint = 0x0204;
export def GREEN: uint = 0x1904;
export def GREEN_BIAS: uint = 0x0D19;
export def GREEN_BITS: uint = 0x0D53;
export def GREEN_BIT_ATI: uint = 0x00000002;
export def GREEN_INTEGER_EXT: uint = 0x8D95;
export def GREEN_MAX_CLAMP_INGR: uint = 0x8565;
export def GREEN_MIN_CLAMP_INGR: uint = 0x8561;
export def GREEN_NV: uint = 0x1904;
export def GREEN_SCALE: uint = 0x0D18;
export def GUILTY_CONTEXT_RESET: uint = 0x8253;
export def GUILTY_CONTEXT_RESET_ARB: uint = 0x8253;
export def HALF_APPLE: uint = 0x140B;
export def HALF_BIAS_NEGATE_NV: uint = 0x853B;
export def HALF_BIAS_NORMAL_NV: uint = 0x853A;
export def HALF_BIT_ATI: uint = 0x00000008;
export def HALF_FLOAT: uint = 0x140B;
export def HALF_FLOAT_ARB: uint = 0x140B;
export def HALF_FLOAT_NV: uint = 0x140B;
export def HANDLE_TYPE_D3D11_IMAGE_EXT: uint = 0x958B;
export def HANDLE_TYPE_D3D11_IMAGE_KMT_EXT: uint = 0x958C;
export def HANDLE_TYPE_D3D12_FENCE_EXT: uint = 0x9594;
export def HANDLE_TYPE_D3D12_RESOURCE_EXT: uint = 0x958A;
export def HANDLE_TYPE_D3D12_TILEPOOL_EXT: uint = 0x9589;
export def HANDLE_TYPE_OPAQUE_FD_EXT: uint = 0x9586;
export def HANDLE_TYPE_OPAQUE_WIN32_EXT: uint = 0x9587;
export def HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT: uint = 0x9588;
export def HARDLIGHT_KHR: uint = 0x929B;
export def HARDLIGHT_NV: uint = 0x929B;
export def HARDMIX_NV: uint = 0x92A9;
export def HIGH_FLOAT: uint = 0x8DF2;
export def HIGH_INT: uint = 0x8DF5;
export def HILO16_NV: uint = 0x86F8;
export def HILO8_NV: uint = 0x885E;
export def HILO_NV: uint = 0x86F4;
export def HINT_BIT: uint = 0x00008000;
export def HISTOGRAM_ALPHA_SIZE_EXT: uint = 0x802B;
export def HISTOGRAM_BLUE_SIZE_EXT: uint = 0x802A;
export def HISTOGRAM_EXT: uint = 0x8024;
export def HISTOGRAM_FORMAT_EXT: uint = 0x8027;
export def HISTOGRAM_GREEN_SIZE_EXT: uint = 0x8029;
export def HISTOGRAM_LUMINANCE_SIZE_EXT: uint = 0x802C;
export def HISTOGRAM_RED_SIZE_EXT: uint = 0x8028;
export def HISTOGRAM_SINK_EXT: uint = 0x802D;
export def HISTOGRAM_WIDTH_EXT: uint = 0x8026;
export def HI_BIAS_NV: uint = 0x8714;
export def HI_SCALE_NV: uint = 0x870E;
export def HORIZONTAL_LINE_TO_NV: uint = 0x06;
export def HSL_COLOR_KHR: uint = 0x92AF;
export def HSL_COLOR_NV: uint = 0x92AF;
export def HSL_HUE_KHR: uint = 0x92AD;
export def HSL_HUE_NV: uint = 0x92AD;
export def HSL_LUMINOSITY_KHR: uint = 0x92B0;
export def HSL_LUMINOSITY_NV: uint = 0x92B0;
export def HSL_SATURATION_KHR: uint = 0x92AE;
export def HSL_SATURATION_NV: uint = 0x92AE;
export def IDENTITY_NV: uint = 0x862A;
export def IGNORE_BORDER_HP: uint = 0x8150;
export def IMAGE_1D: uint = 0x904C;
export def IMAGE_1D_ARRAY: uint = 0x9052;
export def IMAGE_1D_ARRAY_EXT: uint = 0x9052;
export def IMAGE_1D_EXT: uint = 0x904C;
export def IMAGE_2D: uint = 0x904D;
export def IMAGE_2D_ARRAY: uint = 0x9053;
export def IMAGE_2D_ARRAY_EXT: uint = 0x9053;
export def IMAGE_2D_EXT: uint = 0x904D;
export def IMAGE_2D_MULTISAMPLE: uint = 0x9055;
export def IMAGE_2D_MULTISAMPLE_ARRAY: uint = 0x9056;
export def IMAGE_2D_MULTISAMPLE_ARRAY_EXT: uint = 0x9056;
export def IMAGE_2D_MULTISAMPLE_EXT: uint = 0x9055;
export def IMAGE_2D_RECT: uint = 0x904F;
export def IMAGE_2D_RECT_EXT: uint = 0x904F;
export def IMAGE_3D: uint = 0x904E;
export def IMAGE_3D_EXT: uint = 0x904E;
export def IMAGE_BINDING_ACCESS: uint = 0x8F3E;
export def IMAGE_BINDING_ACCESS_EXT: uint = 0x8F3E;
export def IMAGE_BINDING_FORMAT: uint = 0x906E;
export def IMAGE_BINDING_FORMAT_EXT: uint = 0x906E;
export def IMAGE_BINDING_LAYER: uint = 0x8F3D;
export def IMAGE_BINDING_LAYERED: uint = 0x8F3C;
export def IMAGE_BINDING_LAYERED_EXT: uint = 0x8F3C;
export def IMAGE_BINDING_LAYER_EXT: uint = 0x8F3D;
export def IMAGE_BINDING_LEVEL: uint = 0x8F3B;
export def IMAGE_BINDING_LEVEL_EXT: uint = 0x8F3B;
export def IMAGE_BINDING_NAME: uint = 0x8F3A;
export def IMAGE_BINDING_NAME_EXT: uint = 0x8F3A;
export def IMAGE_BUFFER: uint = 0x9051;
export def IMAGE_BUFFER_EXT: uint = 0x9051;
export def IMAGE_CLASS_10_10_10_2: uint = 0x82C3;
export def IMAGE_CLASS_11_11_10: uint = 0x82C2;
export def IMAGE_CLASS_1_X_16: uint = 0x82BE;
export def IMAGE_CLASS_1_X_32: uint = 0x82BB;
export def IMAGE_CLASS_1_X_8: uint = 0x82C1;
export def IMAGE_CLASS_2_X_16: uint = 0x82BD;
export def IMAGE_CLASS_2_X_32: uint = 0x82BA;
export def IMAGE_CLASS_2_X_8: uint = 0x82C0;
export def IMAGE_CLASS_4_X_16: uint = 0x82BC;
export def IMAGE_CLASS_4_X_32: uint = 0x82B9;
export def IMAGE_CLASS_4_X_8: uint = 0x82BF;
export def IMAGE_COMPATIBILITY_CLASS: uint = 0x82A8;
export def IMAGE_CUBE: uint = 0x9050;
export def IMAGE_CUBE_EXT: uint = 0x9050;
export def IMAGE_CUBE_MAP_ARRAY: uint = 0x9054;
export def IMAGE_CUBE_MAP_ARRAY_EXT: uint = 0x9054;
export def IMAGE_CUBIC_WEIGHT_HP: uint = 0x815E;
export def IMAGE_FORMAT_COMPATIBILITY_BY_CLASS: uint = 0x90C9;
export def IMAGE_FORMAT_COMPATIBILITY_BY_SIZE: uint = 0x90C8;
export def IMAGE_FORMAT_COMPATIBILITY_TYPE: uint = 0x90C7;
export def IMAGE_MAG_FILTER_HP: uint = 0x815C;
export def IMAGE_MIN_FILTER_HP: uint = 0x815D;
export def IMAGE_PIXEL_FORMAT: uint = 0x82A9;
export def IMAGE_PIXEL_TYPE: uint = 0x82AA;
export def IMAGE_ROTATE_ANGLE_HP: uint = 0x8159;
export def IMAGE_ROTATE_ORIGIN_X_HP: uint = 0x815A;
export def IMAGE_ROTATE_ORIGIN_Y_HP: uint = 0x815B;
export def IMAGE_SCALE_X_HP: uint = 0x8155;
export def IMAGE_SCALE_Y_HP: uint = 0x8156;
export def IMAGE_TEXEL_SIZE: uint = 0x82A7;
export def IMAGE_TRANSFORM_2D_HP: uint = 0x8161;
export def IMAGE_TRANSLATE_X_HP: uint = 0x8157;
export def IMAGE_TRANSLATE_Y_HP: uint = 0x8158;
export def IMPLEMENTATION_COLOR_READ_FORMAT: uint = 0x8B9B;
export def IMPLEMENTATION_COLOR_READ_FORMAT_OES: uint = 0x8B9B;
export def IMPLEMENTATION_COLOR_READ_TYPE: uint = 0x8B9A;
export def IMPLEMENTATION_COLOR_READ_TYPE_OES: uint = 0x8B9A;
export def INCLUSIVE_EXT: uint = 0x8F10;
export def INCR: uint = 0x1E02;
export def INCR_WRAP: uint = 0x8507;
export def INCR_WRAP_EXT: uint = 0x8507;
export def INDEX_ARRAY: uint = 0x8077;
export def INDEX_ARRAY_ADDRESS_NV: uint = 0x8F24;
export def INDEX_ARRAY_BUFFER_BINDING: uint = 0x8899;
export def INDEX_ARRAY_BUFFER_BINDING_ARB: uint = 0x8899;
export def INDEX_ARRAY_COUNT_EXT: uint = 0x8087;
export def INDEX_ARRAY_EXT: uint = 0x8077;
export def INDEX_ARRAY_LENGTH_NV: uint = 0x8F2E;
export def INDEX_ARRAY_LIST_IBM: uint = 103073;
export def INDEX_ARRAY_LIST_STRIDE_IBM: uint = 103083;
export def INDEX_ARRAY_POINTER: uint = 0x8091;
export def INDEX_ARRAY_POINTER_EXT: uint = 0x8091;
export def INDEX_ARRAY_STRIDE: uint = 0x8086;
export def INDEX_ARRAY_STRIDE_EXT: uint = 0x8086;
export def INDEX_ARRAY_TYPE: uint = 0x8085;
export def INDEX_ARRAY_TYPE_EXT: uint = 0x8085;
export def INDEX_BITS: uint = 0x0D51;
export def INDEX_BIT_PGI: uint = 0x00080000;
export def INDEX_CLEAR_VALUE: uint = 0x0C20;
export def INDEX_LOGIC_OP: uint = 0x0BF1;
export def INDEX_MATERIAL_EXT: uint = 0x81B8;
export def INDEX_MATERIAL_FACE_EXT: uint = 0x81BA;
export def INDEX_MATERIAL_PARAMETER_EXT: uint = 0x81B9;
export def INDEX_MODE: uint = 0x0C30;
export def INDEX_OFFSET: uint = 0x0D13;
export def INDEX_SHIFT: uint = 0x0D12;
export def INDEX_TEST_EXT: uint = 0x81B5;
export def INDEX_TEST_FUNC_EXT: uint = 0x81B6;
export def INDEX_TEST_REF_EXT: uint = 0x81B7;
export def INDEX_WRITEMASK: uint = 0x0C21;
export def INFO_LOG_LENGTH: uint = 0x8B84;
export def INNOCENT_CONTEXT_RESET: uint = 0x8254;
export def INNOCENT_CONTEXT_RESET_ARB: uint = 0x8254;
export def INSTRUMENT_BUFFER_POINTER_SGIX: uint = 0x8180;
export def INSTRUMENT_MEASUREMENTS_SGIX: uint = 0x8181;
export def INT: uint = 0x1404;
export def INT16_NV: uint = 0x8FE4;
export def INT16_VEC2_NV: uint = 0x8FE5;
export def INT16_VEC3_NV: uint = 0x8FE6;
export def INT16_VEC4_NV: uint = 0x8FE7;
export def INT64_ARB: uint = 0x140E;
export def INT64_NV: uint = 0x140E;
export def INT64_VEC2_ARB: uint = 0x8FE9;
export def INT64_VEC2_NV: uint = 0x8FE9;
export def INT64_VEC3_ARB: uint = 0x8FEA;
export def INT64_VEC3_NV: uint = 0x8FEA;
export def INT64_VEC4_ARB: uint = 0x8FEB;
export def INT64_VEC4_NV: uint = 0x8FEB;
export def INT8_NV: uint = 0x8FE0;
export def INT8_VEC2_NV: uint = 0x8FE1;
export def INT8_VEC3_NV: uint = 0x8FE2;
export def INT8_VEC4_NV: uint = 0x8FE3;
export def INTENSITY: uint = 0x8049;
export def INTENSITY12: uint = 0x804C;
export def INTENSITY12_EXT: uint = 0x804C;
export def INTENSITY16: uint = 0x804D;
export def INTENSITY16F_ARB: uint = 0x881D;
export def INTENSITY16I_EXT: uint = 0x8D8B;
export def INTENSITY16UI_EXT: uint = 0x8D79;
export def INTENSITY16_EXT: uint = 0x804D;
export def INTENSITY16_SNORM: uint = 0x901B;
export def INTENSITY32F_ARB: uint = 0x8817;
export def INTENSITY32I_EXT: uint = 0x8D85;
export def INTENSITY32UI_EXT: uint = 0x8D73;
export def INTENSITY4: uint = 0x804A;
export def INTENSITY4_EXT: uint = 0x804A;
export def INTENSITY8: uint = 0x804B;
export def INTENSITY8I_EXT: uint = 0x8D91;
export def INTENSITY8UI_EXT: uint = 0x8D7F;
export def INTENSITY8_EXT: uint = 0x804B;
export def INTENSITY8_SNORM: uint = 0x9017;
export def INTENSITY_EXT: uint = 0x8049;
export def INTENSITY_FLOAT16_APPLE: uint = 0x881D;
export def INTENSITY_FLOAT16_ATI: uint = 0x881D;
export def INTENSITY_FLOAT32_APPLE: uint = 0x8817;
export def INTENSITY_FLOAT32_ATI: uint = 0x8817;
export def INTENSITY_SNORM: uint = 0x9013;
export def INTERLACE_OML: uint = 0x8980;
export def INTERLACE_READ_INGR: uint = 0x8568;
export def INTERLACE_READ_OML: uint = 0x8981;
export def INTERLACE_SGIX: uint = 0x8094;
export def INTERLEAVED_ATTRIBS_EXT: uint = 0x8C8C;
export def INTERLEAVED_ATTRIBS_NV: uint = 0x8C8C;
export def INTERNALFORMAT_ALPHA_SIZE: uint = 0x8274;
export def INTERNALFORMAT_ALPHA_TYPE: uint = 0x827B;
export def INTERNALFORMAT_BLUE_SIZE: uint = 0x8273;
export def INTERNALFORMAT_BLUE_TYPE: uint = 0x827A;
export def INTERNALFORMAT_DEPTH_SIZE: uint = 0x8275;
export def INTERNALFORMAT_DEPTH_TYPE: uint = 0x827C;
export def INTERNALFORMAT_GREEN_SIZE: uint = 0x8272;
export def INTERNALFORMAT_GREEN_TYPE: uint = 0x8279;
export def INTERNALFORMAT_PREFERRED: uint = 0x8270;
export def INTERNALFORMAT_RED_SIZE: uint = 0x8271;
export def INTERNALFORMAT_RED_TYPE: uint = 0x8278;
export def INTERNALFORMAT_SHARED_SIZE: uint = 0x8277;
export def INTERNALFORMAT_STENCIL_SIZE: uint = 0x8276;
export def INTERNALFORMAT_STENCIL_TYPE: uint = 0x827D;
export def INTERNALFORMAT_SUPPORTED: uint = 0x826F;
export def INTERPOLATE: uint = 0x8575;
export def INTERPOLATE_ARB: uint = 0x8575;
export def INTERPOLATE_EXT: uint = 0x8575;
export def INT_2_10_10_10_REV: uint = 0x8D9F;
export def INT_IMAGE_1D: uint = 0x9057;
export def INT_IMAGE_1D_ARRAY: uint = 0x905D;
export def INT_IMAGE_1D_ARRAY_EXT: uint = 0x905D;
export def INT_IMAGE_1D_EXT: uint = 0x9057;
export def INT_IMAGE_2D: uint = 0x9058;
export def INT_IMAGE_2D_ARRAY: uint = 0x905E;
export def INT_IMAGE_2D_ARRAY_EXT: uint = 0x905E;
export def INT_IMAGE_2D_EXT: uint = 0x9058;
export def INT_IMAGE_2D_MULTISAMPLE: uint = 0x9060;
export def INT_IMAGE_2D_MULTISAMPLE_ARRAY: uint = 0x9061;
export def INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT: uint = 0x9061;
export def INT_IMAGE_2D_MULTISAMPLE_EXT: uint = 0x9060;
export def INT_IMAGE_2D_RECT: uint = 0x905A;
export def INT_IMAGE_2D_RECT_EXT: uint = 0x905A;
export def INT_IMAGE_3D: uint = 0x9059;
export def INT_IMAGE_3D_EXT: uint = 0x9059;
export def INT_IMAGE_BUFFER: uint = 0x905C;
export def INT_IMAGE_BUFFER_EXT: uint = 0x905C;
export def INT_IMAGE_CUBE: uint = 0x905B;
export def INT_IMAGE_CUBE_EXT: uint = 0x905B;
export def INT_IMAGE_CUBE_MAP_ARRAY: uint = 0x905F;
export def INT_IMAGE_CUBE_MAP_ARRAY_EXT: uint = 0x905F;
export def INT_SAMPLER_1D_ARRAY_EXT: uint = 0x8DCE;
export def INT_SAMPLER_1D_EXT: uint = 0x8DC9;
export def INT_SAMPLER_2D_ARRAY_EXT: uint = 0x8DCF;
export def INT_SAMPLER_2D_EXT: uint = 0x8DCA;
export def INT_SAMPLER_2D_MULTISAMPLE: uint = 0x9109;
export def INT_SAMPLER_2D_MULTISAMPLE_ARRAY: uint = 0x910C;
export def INT_SAMPLER_2D_RECT_EXT: uint = 0x8DCD;
export def INT_SAMPLER_3D_EXT: uint = 0x8DCB;
export def INT_SAMPLER_BUFFER_AMD: uint = 0x9002;
export def INT_SAMPLER_BUFFER_EXT: uint = 0x8DD0;
export def INT_SAMPLER_CUBE_EXT: uint = 0x8DCC;
export def INT_SAMPLER_CUBE_MAP_ARRAY_ARB: uint = 0x900E;
export def INT_SAMPLER_RENDERBUFFER_NV: uint = 0x8E57;
export def INT_VEC2: uint = 0x8B53;
export def INT_VEC2_ARB: uint = 0x8B53;
export def INT_VEC3: uint = 0x8B54;
export def INT_VEC3_ARB: uint = 0x8B54;
export def INT_VEC4: uint = 0x8B55;
export def INT_VEC4_ARB: uint = 0x8B55;
export def INVALID_ENUM: uint = 0x0500;
export def INVALID_FRAMEBUFFER_OPERATION: uint = 0x0506;
export def INVALID_FRAMEBUFFER_OPERATION_EXT: uint = 0x0506;
export def INVALID_INDEX: uint = 0xFFFFFFFF;
export def INVALID_OPERATION: uint = 0x0502;
export def INVALID_VALUE: uint = 0x0501;
export def INVARIANT_DATATYPE_EXT: uint = 0x87EB;
export def INVARIANT_EXT: uint = 0x87C2;
export def INVARIANT_VALUE_EXT: uint = 0x87EA;
export def INVERSE_NV: uint = 0x862B;
export def INVERSE_TRANSPOSE_NV: uint = 0x862D;
export def INVERT: uint = 0x150A;
export def INVERTED_SCREEN_W_REND: uint = 0x8491;
export def INVERT_OVG_NV: uint = 0x92B4;
export def INVERT_RGB_NV: uint = 0x92A3;
export def IR_INSTRUMENT1_SGIX: uint = 0x817F;
export def ISOLINES: uint = 0x8E7A;
export def IS_PER_PATCH: uint = 0x92E7;
export def IS_ROW_MAJOR: uint = 0x9300;
export def ITALIC_BIT_NV: uint = 0x02;
export def IUI_N3F_V2F_EXT: uint = 0x81AF;
export def IUI_N3F_V3F_EXT: uint = 0x81B0;
export def IUI_V2F_EXT: uint = 0x81AD;
export def IUI_V3F_EXT: uint = 0x81AE;
export def KEEP: uint = 0x1E00;
export def LARGE_CCW_ARC_TO_NV: uint = 0x16;
export def LARGE_CW_ARC_TO_NV: uint = 0x18;
export def LAST_VERTEX_CONVENTION: uint = 0x8E4E;
export def LAST_VERTEX_CONVENTION_EXT: uint = 0x8E4E;
export def LAST_VIDEO_CAPTURE_STATUS_NV: uint = 0x9027;
export def LAYER_NV: uint = 0x8DAA;
export def LAYER_PROVOKING_VERTEX: uint = 0x825E;
export def LAYOUT_COLOR_ATTACHMENT_EXT: uint = 0x958E;
export def LAYOUT_DEFAULT_INTEL: uint = 0;
export def LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT: uint = 0x9531;
export def LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT: uint = 0x9530;
export def LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT: uint = 0x958F;
export def LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT: uint = 0x9590;
export def LAYOUT_GENERAL_EXT: uint = 0x958D;
export def LAYOUT_LINEAR_CPU_CACHED_INTEL: uint = 2;
export def LAYOUT_LINEAR_INTEL: uint = 1;
export def LAYOUT_SHADER_READ_ONLY_EXT: uint = 0x9591;
export def LAYOUT_TRANSFER_DST_EXT: uint = 0x9593;
export def LAYOUT_TRANSFER_SRC_EXT: uint = 0x9592;
export def LEFT: uint = 0x0406;
export def LEQUAL: uint = 0x0203;
export def LERP_ATI: uint = 0x8969;
export def LESS: uint = 0x0201;
export def LGPU_SEPARATE_STORAGE_BIT_NVX: uint = 0x0800;
export def LIGHT0: uint = 0x4000;
export def LIGHT1: uint = 0x4001;
export def LIGHT2: uint = 0x4002;
export def LIGHT3: uint = 0x4003;
export def LIGHT4: uint = 0x4004;
export def LIGHT5: uint = 0x4005;
export def LIGHT6: uint = 0x4006;
export def LIGHT7: uint = 0x4007;
export def LIGHTEN_KHR: uint = 0x9298;
export def LIGHTEN_NV: uint = 0x9298;
export def LIGHTING: uint = 0x0B50;
export def LIGHTING_BIT: uint = 0x00000040;
export def LIGHT_ENV_MODE_SGIX: uint = 0x8407;
export def LIGHT_MODEL_AMBIENT: uint = 0x0B53;
export def LIGHT_MODEL_COLOR_CONTROL: uint = 0x81F8;
export def LIGHT_MODEL_COLOR_CONTROL_EXT: uint = 0x81F8;
export def LIGHT_MODEL_LOCAL_VIEWER: uint = 0x0B51;
export def LIGHT_MODEL_SPECULAR_VECTOR_APPLE: uint = 0x85B0;
export def LIGHT_MODEL_TWO_SIDE: uint = 0x0B52;
export def LINE: uint = 0x1B01;
export def LINEAR: uint = 0x2601;
export def LINEARBURN_NV: uint = 0x92A5;
export def LINEARDODGE_NV: uint = 0x92A4;
export def LINEARLIGHT_NV: uint = 0x92A7;
export def LINEAR_ATTENUATION: uint = 0x1208;
export def LINEAR_CLIPMAP_LINEAR_SGIX: uint = 0x8170;
export def LINEAR_CLIPMAP_NEAREST_SGIX: uint = 0x844F;
export def LINEAR_DETAIL_ALPHA_SGIS: uint = 0x8098;
export def LINEAR_DETAIL_COLOR_SGIS: uint = 0x8099;
export def LINEAR_DETAIL_SGIS: uint = 0x8097;
export def LINEAR_MIPMAP_LINEAR: uint = 0x2703;
export def LINEAR_MIPMAP_NEAREST: uint = 0x2701;
export def LINEAR_SHARPEN_ALPHA_SGIS: uint = 0x80AE;
export def LINEAR_SHARPEN_COLOR_SGIS: uint = 0x80AF;
export def LINEAR_SHARPEN_SGIS: uint = 0x80AD;
export def LINEAR_TILING_EXT: uint = 0x9585;
export def LINES: uint = 0x0001;
export def LINES_ADJACENCY_ARB: uint = 0x000A;
export def LINES_ADJACENCY_EXT: uint = 0x000A;
export def LINE_BIT: uint = 0x00000004;
export def LINE_LOOP: uint = 0x0002;
export def LINE_RESET_TOKEN: uint = 0x0707;
export def LINE_SMOOTH: uint = 0x0B20;
export def LINE_SMOOTH_HINT: uint = 0x0C52;
export def LINE_STIPPLE: uint = 0x0B24;
export def LINE_STIPPLE_PATTERN: uint = 0x0B25;
export def LINE_STIPPLE_REPEAT: uint = 0x0B26;
export def LINE_STRIP: uint = 0x0003;
export def LINE_STRIP_ADJACENCY_ARB: uint = 0x000B;
export def LINE_STRIP_ADJACENCY_EXT: uint = 0x000B;
export def LINE_TOKEN: uint = 0x0702;
export def LINE_TO_NV: uint = 0x04;
export def LINE_WIDTH: uint = 0x0B21;
export def LINE_WIDTH_COMMAND_NV: uint = 0x000D;
export def LINE_WIDTH_GRANULARITY: uint = 0x0B23;
export def LINE_WIDTH_RANGE: uint = 0x0B22;
export def LINK_STATUS: uint = 0x8B82;
export def LIST_BASE: uint = 0x0B32;
export def LIST_BIT: uint = 0x00020000;
export def LIST_INDEX: uint = 0x0B33;
export def LIST_MODE: uint = 0x0B30;
export def LIST_PRIORITY_SGIX: uint = 0x8182;
export def LOAD: uint = 0x0101;
export def LOCAL_CONSTANT_DATATYPE_EXT: uint = 0x87ED;
export def LOCAL_CONSTANT_EXT: uint = 0x87C3;
export def LOCAL_CONSTANT_VALUE_EXT: uint = 0x87EC;
export def LOCAL_EXT: uint = 0x87C4;
export def LOCATION: uint = 0x930E;
export def LOCATION_COMPONENT: uint = 0x934A;
export def LOCATION_INDEX: uint = 0x930F;
export def LOGIC_OP: uint = 0x0BF1;
export def LOGIC_OP_MODE: uint = 0x0BF0;
export def LOSE_CONTEXT_ON_RESET: uint = 0x8252;
export def LOSE_CONTEXT_ON_RESET_ARB: uint = 0x8252;
export def LOWER_LEFT: uint = 0x8CA1;
export def LOW_FLOAT: uint = 0x8DF0;
export def LOW_INT: uint = 0x8DF3;
export def LO_BIAS_NV: uint = 0x8715;
export def LO_SCALE_NV: uint = 0x870F;
export def LUID_SIZE_EXT: uint = 8;
export def LUMINANCE: uint = 0x1909;
export def LUMINANCE12: uint = 0x8041;
export def LUMINANCE12_ALPHA12: uint = 0x8047;
export def LUMINANCE12_ALPHA12_EXT: uint = 0x8047;
export def LUMINANCE12_ALPHA4: uint = 0x8046;
export def LUMINANCE12_ALPHA4_EXT: uint = 0x8046;
export def LUMINANCE12_EXT: uint = 0x8041;
export def LUMINANCE16: uint = 0x8042;
export def LUMINANCE16F_ARB: uint = 0x881E;
export def LUMINANCE16F_EXT: uint = 0x881E;
export def LUMINANCE16I_EXT: uint = 0x8D8C;
export def LUMINANCE16UI_EXT: uint = 0x8D7A;
export def LUMINANCE16_ALPHA16: uint = 0x8048;
export def LUMINANCE16_ALPHA16_EXT: uint = 0x8048;
export def LUMINANCE16_ALPHA16_SNORM: uint = 0x901A;
export def LUMINANCE16_EXT: uint = 0x8042;
export def LUMINANCE16_SNORM: uint = 0x9019;
export def LUMINANCE32F_ARB: uint = 0x8818;
export def LUMINANCE32F_EXT: uint = 0x8818;
export def LUMINANCE32I_EXT: uint = 0x8D86;
export def LUMINANCE32UI_EXT: uint = 0x8D74;
export def LUMINANCE4: uint = 0x803F;
export def LUMINANCE4_ALPHA4: uint = 0x8043;
export def LUMINANCE4_ALPHA4_EXT: uint = 0x8043;
export def LUMINANCE4_EXT: uint = 0x803F;
export def LUMINANCE6_ALPHA2: uint = 0x8044;
export def LUMINANCE6_ALPHA2_EXT: uint = 0x8044;
export def LUMINANCE8: uint = 0x8040;
export def LUMINANCE8I_EXT: uint = 0x8D92;
export def LUMINANCE8UI_EXT: uint = 0x8D80;
export def LUMINANCE8_ALPHA8: uint = 0x8045;
export def LUMINANCE8_ALPHA8_EXT: uint = 0x8045;
export def LUMINANCE8_ALPHA8_SNORM: uint = 0x9016;
export def LUMINANCE8_EXT: uint = 0x8040;
export def LUMINANCE8_SNORM: uint = 0x9015;
export def LUMINANCE_ALPHA: uint = 0x190A;
export def LUMINANCE_ALPHA16F_ARB: uint = 0x881F;
export def LUMINANCE_ALPHA16F_EXT: uint = 0x881F;
export def LUMINANCE_ALPHA16I_EXT: uint = 0x8D8D;
export def LUMINANCE_ALPHA16UI_EXT: uint = 0x8D7B;
export def LUMINANCE_ALPHA32F_ARB: uint = 0x8819;
export def LUMINANCE_ALPHA32F_EXT: uint = 0x8819;
export def LUMINANCE_ALPHA32I_EXT: uint = 0x8D87;
export def LUMINANCE_ALPHA32UI_EXT: uint = 0x8D75;
export def LUMINANCE_ALPHA8I_EXT: uint = 0x8D93;
export def LUMINANCE_ALPHA8UI_EXT: uint = 0x8D81;
export def LUMINANCE_ALPHA_FLOAT16_APPLE: uint = 0x881F;
export def LUMINANCE_ALPHA_FLOAT16_ATI: uint = 0x881F;
export def LUMINANCE_ALPHA_FLOAT32_APPLE: uint = 0x8819;
export def LUMINANCE_ALPHA_FLOAT32_ATI: uint = 0x8819;
export def LUMINANCE_ALPHA_INTEGER_EXT: uint = 0x8D9D;
export def LUMINANCE_ALPHA_SNORM: uint = 0x9012;
export def LUMINANCE_FLOAT16_APPLE: uint = 0x881E;
export def LUMINANCE_FLOAT16_ATI: uint = 0x881E;
export def LUMINANCE_FLOAT32_APPLE: uint = 0x8818;
export def LUMINANCE_FLOAT32_ATI: uint = 0x8818;
export def LUMINANCE_INTEGER_EXT: uint = 0x8D9C;
export def LUMINANCE_SNORM: uint = 0x9011;
export def MAD_ATI: uint = 0x8968;
export def MAGNITUDE_BIAS_NV: uint = 0x8718;
export def MAGNITUDE_SCALE_NV: uint = 0x8712;
export def MANUAL_GENERATE_MIPMAP: uint = 0x8294;
export def MAP1_BINORMAL_EXT: uint = 0x8446;
export def MAP1_COLOR_4: uint = 0x0D90;
export def MAP1_GRID_DOMAIN: uint = 0x0DD0;
export def MAP1_GRID_SEGMENTS: uint = 0x0DD1;
export def MAP1_INDEX: uint = 0x0D91;
export def MAP1_NORMAL: uint = 0x0D92;
export def MAP1_TANGENT_EXT: uint = 0x8444;
export def MAP1_TEXTURE_COORD_1: uint = 0x0D93;
export def MAP1_TEXTURE_COORD_2: uint = 0x0D94;
export def MAP1_TEXTURE_COORD_3: uint = 0x0D95;
export def MAP1_TEXTURE_COORD_4: uint = 0x0D96;
export def MAP1_VERTEX_3: uint = 0x0D97;
export def MAP1_VERTEX_4: uint = 0x0D98;
export def MAP1_VERTEX_ATTRIB0_4_NV: uint = 0x8660;
export def MAP1_VERTEX_ATTRIB10_4_NV: uint = 0x866A;
export def MAP1_VERTEX_ATTRIB11_4_NV: uint = 0x866B;
export def MAP1_VERTEX_ATTRIB12_4_NV: uint = 0x866C;
export def MAP1_VERTEX_ATTRIB13_4_NV: uint = 0x866D;
export def MAP1_VERTEX_ATTRIB14_4_NV: uint = 0x866E;
export def MAP1_VERTEX_ATTRIB15_4_NV: uint = 0x866F;
export def MAP1_VERTEX_ATTRIB1_4_NV: uint = 0x8661;
export def MAP1_VERTEX_ATTRIB2_4_NV: uint = 0x8662;
export def MAP1_VERTEX_ATTRIB3_4_NV: uint = 0x8663;
export def MAP1_VERTEX_ATTRIB4_4_NV: uint = 0x8664;
export def MAP1_VERTEX_ATTRIB5_4_NV: uint = 0x8665;
export def MAP1_VERTEX_ATTRIB6_4_NV: uint = 0x8666;
export def MAP1_VERTEX_ATTRIB7_4_NV: uint = 0x8667;
export def MAP1_VERTEX_ATTRIB8_4_NV: uint = 0x8668;
export def MAP1_VERTEX_ATTRIB9_4_NV: uint = 0x8669;
export def MAP2_BINORMAL_EXT: uint = 0x8447;
export def MAP2_COLOR_4: uint = 0x0DB0;
export def MAP2_GRID_DOMAIN: uint = 0x0DD2;
export def MAP2_GRID_SEGMENTS: uint = 0x0DD3;
export def MAP2_INDEX: uint = 0x0DB1;
export def MAP2_NORMAL: uint = 0x0DB2;
export def MAP2_TANGENT_EXT: uint = 0x8445;
export def MAP2_TEXTURE_COORD_1: uint = 0x0DB3;
export def MAP2_TEXTURE_COORD_2: uint = 0x0DB4;
export def MAP2_TEXTURE_COORD_3: uint = 0x0DB5;
export def MAP2_TEXTURE_COORD_4: uint = 0x0DB6;
export def MAP2_VERTEX_3: uint = 0x0DB7;
export def MAP2_VERTEX_4: uint = 0x0DB8;
export def MAP2_VERTEX_ATTRIB0_4_NV: uint = 0x8670;
export def MAP2_VERTEX_ATTRIB10_4_NV: uint = 0x867A;
export def MAP2_VERTEX_ATTRIB11_4_NV: uint = 0x867B;
export def MAP2_VERTEX_ATTRIB12_4_NV: uint = 0x867C;
export def MAP2_VERTEX_ATTRIB13_4_NV: uint = 0x867D;
export def MAP2_VERTEX_ATTRIB14_4_NV: uint = 0x867E;
export def MAP2_VERTEX_ATTRIB15_4_NV: uint = 0x867F;
export def MAP2_VERTEX_ATTRIB1_4_NV: uint = 0x8671;
export def MAP2_VERTEX_ATTRIB2_4_NV: uint = 0x8672;
export def MAP2_VERTEX_ATTRIB3_4_NV: uint = 0x8673;
export def MAP2_VERTEX_ATTRIB4_4_NV: uint = 0x8674;
export def MAP2_VERTEX_ATTRIB5_4_NV: uint = 0x8675;
export def MAP2_VERTEX_ATTRIB6_4_NV: uint = 0x8676;
export def MAP2_VERTEX_ATTRIB7_4_NV: uint = 0x8677;
export def MAP2_VERTEX_ATTRIB8_4_NV: uint = 0x8678;
export def MAP2_VERTEX_ATTRIB9_4_NV: uint = 0x8679;
export def MAP_ATTRIB_U_ORDER_NV: uint = 0x86C3;
export def MAP_ATTRIB_V_ORDER_NV: uint = 0x86C4;
export def MAP_COHERENT_BIT: uint = 0x0080;
export def MAP_COLOR: uint = 0x0D10;
export def MAP_FLUSH_EXPLICIT_BIT: uint = 0x0010;
export def MAP_INVALIDATE_BUFFER_BIT: uint = 0x0008;
export def MAP_INVALIDATE_RANGE_BIT: uint = 0x0004;
export def MAP_PERSISTENT_BIT: uint = 0x0040;
export def MAP_READ_BIT: uint = 0x0001;
export def MAP_STENCIL: uint = 0x0D11;
export def MAP_TESSELLATION_NV: uint = 0x86C2;
export def MAP_UNSYNCHRONIZED_BIT: uint = 0x0020;
export def MAP_WRITE_BIT: uint = 0x0002;
export def MATERIAL_SIDE_HINT_PGI: uint = 0x1A22C;
export def MATRIX0_ARB: uint = 0x88C0;
export def MATRIX0_NV: uint = 0x8630;
export def MATRIX10_ARB: uint = 0x88CA;
export def MATRIX11_ARB: uint = 0x88CB;
export def MATRIX12_ARB: uint = 0x88CC;
export def MATRIX13_ARB: uint = 0x88CD;
export def MATRIX14_ARB: uint = 0x88CE;
export def MATRIX15_ARB: uint = 0x88CF;
export def MATRIX16_ARB: uint = 0x88D0;
export def MATRIX17_ARB: uint = 0x88D1;
export def MATRIX18_ARB: uint = 0x88D2;
export def MATRIX19_ARB: uint = 0x88D3;
export def MATRIX1_ARB: uint = 0x88C1;
export def MATRIX1_NV: uint = 0x8631;
export def MATRIX20_ARB: uint = 0x88D4;
export def MATRIX21_ARB: uint = 0x88D5;
export def MATRIX22_ARB: uint = 0x88D6;
export def MATRIX23_ARB: uint = 0x88D7;
export def MATRIX24_ARB: uint = 0x88D8;
export def MATRIX25_ARB: uint = 0x88D9;
export def MATRIX26_ARB: uint = 0x88DA;
export def MATRIX27_ARB: uint = 0x88DB;
export def MATRIX28_ARB: uint = 0x88DC;
export def MATRIX29_ARB: uint = 0x88DD;
export def MATRIX2_ARB: uint = 0x88C2;
export def MATRIX2_NV: uint = 0x8632;
export def MATRIX30_ARB: uint = 0x88DE;
export def MATRIX31_ARB: uint = 0x88DF;
export def MATRIX3_ARB: uint = 0x88C3;
export def MATRIX3_NV: uint = 0x8633;
export def MATRIX4_ARB: uint = 0x88C4;
export def MATRIX4_NV: uint = 0x8634;
export def MATRIX5_ARB: uint = 0x88C5;
export def MATRIX5_NV: uint = 0x8635;
export def MATRIX6_ARB: uint = 0x88C6;
export def MATRIX6_NV: uint = 0x8636;
export def MATRIX7_ARB: uint = 0x88C7;
export def MATRIX7_NV: uint = 0x8637;
export def MATRIX8_ARB: uint = 0x88C8;
export def MATRIX9_ARB: uint = 0x88C9;
export def MATRIX_EXT: uint = 0x87C0;
export def MATRIX_INDEX_ARRAY_ARB: uint = 0x8844;
export def MATRIX_INDEX_ARRAY_POINTER_ARB: uint = 0x8849;
export def MATRIX_INDEX_ARRAY_SIZE_ARB: uint = 0x8846;
export def MATRIX_INDEX_ARRAY_STRIDE_ARB: uint = 0x8848;
export def MATRIX_INDEX_ARRAY_TYPE_ARB: uint = 0x8847;
export def MATRIX_MODE: uint = 0x0BA0;
export def MATRIX_PALETTE_ARB: uint = 0x8840;
export def MATRIX_STRIDE: uint = 0x92FF;
export def MAT_AMBIENT_AND_DIFFUSE_BIT_PGI: uint = 0x00200000;
export def MAT_AMBIENT_BIT_PGI: uint = 0x00100000;
export def MAT_COLOR_INDEXES_BIT_PGI: uint = 0x01000000;
export def MAT_DIFFUSE_BIT_PGI: uint = 0x00400000;
export def MAT_EMISSION_BIT_PGI: uint = 0x00800000;
export def MAT_SHININESS_BIT_PGI: uint = 0x02000000;
export def MAT_SPECULAR_BIT_PGI: uint = 0x04000000;
export def MAX: uint = 0x8008;
export def MAX_3D_TEXTURE_SIZE: uint = 0x8073;
export def MAX_3D_TEXTURE_SIZE_EXT: uint = 0x8073;
export def MAX_4D_TEXTURE_SIZE_SGIS: uint = 0x8138;
export def MAX_ACTIVE_LIGHTS_SGIX: uint = 0x8405;
export def MAX_ARRAY_TEXTURE_LAYERS_EXT: uint = 0x88FF;
export def MAX_ASYNC_DRAW_PIXELS_SGIX: uint = 0x8360;
export def MAX_ASYNC_HISTOGRAM_SGIX: uint = 0x832D;
export def MAX_ASYNC_READ_PIXELS_SGIX: uint = 0x8361;
export def MAX_ASYNC_TEX_IMAGE_SGIX: uint = 0x835F;
export def MAX_ATOMIC_COUNTER_BUFFER_BINDINGS: uint = 0x92DC;
export def MAX_ATOMIC_COUNTER_BUFFER_SIZE: uint = 0x92D8;
export def MAX_ATTRIB_STACK_DEPTH: uint = 0x0D35;
export def MAX_BINDABLE_UNIFORM_SIZE_EXT: uint = 0x8DED;
export def MAX_CLIENT_ATTRIB_STACK_DEPTH: uint = 0x0D3B;
export def MAX_CLIPMAP_DEPTH_SGIX: uint = 0x8177;
export def MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX: uint = 0x8178;
export def MAX_CLIP_PLANES: uint = 0x0D32;
export def MAX_COARSE_FRAGMENT_SAMPLES_NV: uint = 0x955F;
export def MAX_COLOR_ATTACHMENTS: uint = 0x8CDF;
export def MAX_COLOR_ATTACHMENTS_EXT: uint = 0x8CDF;
export def MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD: uint = 0x91B3;
export def MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD: uint = 0x91B4;
export def MAX_COLOR_MATRIX_STACK_DEPTH_SGI: uint = 0x80B3;
export def MAX_COLOR_TEXTURE_SAMPLES: uint = 0x910E;
export def MAX_COMBINED_ATOMIC_COUNTERS: uint = 0x92D7;
export def MAX_COMBINED_ATOMIC_COUNTER_BUFFERS: uint = 0x92D1;
export def MAX_COMBINED_CLIP_AND_CULL_DISTANCES: uint = 0x82FA;
export def MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS: uint = 0x8266;
export def MAX_COMBINED_DIMENSIONS: uint = 0x8282;
export def MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: uint = 0x8A33;
export def MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS: uint = 0x8A32;
export def MAX_COMBINED_IMAGE_UNIFORMS: uint = 0x90CF;
export def MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS: uint = 0x8F39;
export def MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT: uint = 0x8F39;
export def MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV: uint = 0x8E67;
export def MAX_COMBINED_SHADER_OUTPUT_RESOURCES: uint = 0x8F39;
export def MAX_COMBINED_SHADER_STORAGE_BLOCKS: uint = 0x90DC;
export def MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV: uint = 0x8E6F;
export def MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS: uint = 0x8E1E;
export def MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS: uint = 0x8E1F;
export def MAX_COMBINED_TEXTURE_IMAGE_UNITS: uint = 0x8B4D;
export def MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB: uint = 0x8B4D;
export def MAX_COMBINED_UNIFORM_BLOCKS: uint = 0x8A2E;
export def MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: uint = 0x8A31;
export def MAX_COMPUTE_ATOMIC_COUNTERS: uint = 0x8265;
export def MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS: uint = 0x8264;
export def MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB: uint = 0x90EB;
export def MAX_COMPUTE_FIXED_GROUP_SIZE_ARB: uint = 0x91BF;
export def MAX_COMPUTE_IMAGE_UNIFORMS: uint = 0x91BD;
export def MAX_COMPUTE_SHADER_STORAGE_BLOCKS: uint = 0x90DB;
export def MAX_COMPUTE_SHARED_MEMORY_SIZE: uint = 0x8262;
export def MAX_COMPUTE_TEXTURE_IMAGE_UNITS: uint = 0x91BC;
export def MAX_COMPUTE_UNIFORM_BLOCKS: uint = 0x91BB;
export def MAX_COMPUTE_UNIFORM_COMPONENTS: uint = 0x8263;
export def MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB: uint = 0x9344;
export def MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB: uint = 0x9345;
export def MAX_COMPUTE_WORK_GROUP_COUNT: uint = 0x91BE;
export def MAX_COMPUTE_WORK_GROUP_INVOCATIONS: uint = 0x90EB;
export def MAX_COMPUTE_WORK_GROUP_SIZE: uint = 0x91BF;
export def MAX_CONVOLUTION_HEIGHT_EXT: uint = 0x801B;
export def MAX_CONVOLUTION_WIDTH_EXT: uint = 0x801A;
export def MAX_CUBE_MAP_TEXTURE_SIZE: uint = 0x851C;
export def MAX_CUBE_MAP_TEXTURE_SIZE_ARB: uint = 0x851C;
export def MAX_CUBE_MAP_TEXTURE_SIZE_EXT: uint = 0x851C;
export def MAX_CULL_DISTANCES: uint = 0x82F9;
export def MAX_DEBUG_GROUP_STACK_DEPTH: uint = 0x826C;
export def MAX_DEBUG_LOGGED_MESSAGES: uint = 0x9144;
export def MAX_DEBUG_LOGGED_MESSAGES_AMD: uint = 0x9144;
export def MAX_DEBUG_LOGGED_MESSAGES_ARB: uint = 0x9144;
export def MAX_DEBUG_MESSAGE_LENGTH: uint = 0x9143;
export def MAX_DEBUG_MESSAGE_LENGTH_AMD: uint = 0x9143;
export def MAX_DEBUG_MESSAGE_LENGTH_ARB: uint = 0x9143;
export def MAX_DEEP_3D_TEXTURE_DEPTH_NV: uint = 0x90D1;
export def MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV: uint = 0x90D0;
export def MAX_DEFORMATION_ORDER_SGIX: uint = 0x8197;
export def MAX_DEPTH: uint = 0x8280;
export def MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD: uint = 0x91B5;
export def MAX_DEPTH_TEXTURE_SAMPLES: uint = 0x910F;
export def MAX_DETACHED_BUFFERS_NV: uint = 0x95AD;
export def MAX_DETACHED_TEXTURES_NV: uint = 0x95AC;
export def MAX_DRAW_BUFFERS: uint = 0x8824;
export def MAX_DRAW_BUFFERS_ARB: uint = 0x8824;
export def MAX_DRAW_BUFFERS_ATI: uint = 0x8824;
export def MAX_DRAW_MESH_TASKS_COUNT_NV: uint = 0x953D;
export def MAX_DUAL_SOURCE_DRAW_BUFFERS: uint = 0x88FC;
export def MAX_ELEMENTS_INDICES: uint = 0x80E9;
export def MAX_ELEMENTS_INDICES_EXT: uint = 0x80E9;
export def MAX_ELEMENTS_VERTICES: uint = 0x80E8;
export def MAX_ELEMENTS_VERTICES_EXT: uint = 0x80E8;
export def MAX_ELEMENT_INDEX: uint = 0x8D6B;
export def MAX_EVAL_ORDER: uint = 0x0D30;
export def MAX_EXT: uint = 0x8008;
export def MAX_FOG_FUNC_POINTS_SGIS: uint = 0x812C;
export def MAX_FRAGMENT_ATOMIC_COUNTERS: uint = 0x92D6;
export def MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS: uint = 0x92D0;
export def MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT: uint = 0x8DE3;
export def MAX_FRAGMENT_IMAGE_UNIFORMS: uint = 0x90CE;
export def MAX_FRAGMENT_INTERPOLATION_OFFSET: uint = 0x8E5C;
export def MAX_FRAGMENT_INTERPOLATION_OFFSET_NV: uint = 0x8E5C;
export def MAX_FRAGMENT_LIGHTS_SGIX: uint = 0x8404;
export def MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV: uint = 0x8868;
export def MAX_FRAGMENT_SHADER_STORAGE_BLOCKS: uint = 0x90DA;
export def MAX_FRAGMENT_UNIFORM_BLOCKS: uint = 0x8A2D;
export def MAX_FRAGMENT_UNIFORM_COMPONENTS: uint = 0x8B49;
export def MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB: uint = 0x8B49;
export def MAX_FRAGMENT_UNIFORM_VECTORS: uint = 0x8DFD;
export def MAX_FRAMEBUFFER_HEIGHT: uint = 0x9316;
export def MAX_FRAMEBUFFER_LAYERS: uint = 0x9317;
export def MAX_FRAMEBUFFER_SAMPLES: uint = 0x9318;
export def MAX_FRAMEBUFFER_WIDTH: uint = 0x9315;
export def MAX_FRAMEZOOM_FACTOR_SGIX: uint = 0x818D;
export def MAX_GENERAL_COMBINERS_NV: uint = 0x854D;
export def MAX_GEOMETRY_ATOMIC_COUNTERS: uint = 0x92D5;
export def MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS: uint = 0x92CF;
export def MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT: uint = 0x8DE4;
export def MAX_GEOMETRY_IMAGE_UNIFORMS: uint = 0x90CD;
export def MAX_GEOMETRY_OUTPUT_VERTICES_ARB: uint = 0x8DE0;
export def MAX_GEOMETRY_OUTPUT_VERTICES_EXT: uint = 0x8DE0;
export def MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV: uint = 0x8E5A;
export def MAX_GEOMETRY_SHADER_INVOCATIONS: uint = 0x8E5A;
export def MAX_GEOMETRY_SHADER_STORAGE_BLOCKS: uint = 0x90D7;
export def MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB: uint = 0x8C29;
export def MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT: uint = 0x8C29;
export def MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB: uint = 0x8DE1;
export def MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT: uint = 0x8DE1;
export def MAX_GEOMETRY_UNIFORM_BLOCKS: uint = 0x8A2C;
export def MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB: uint = 0x8DDF;
export def MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT: uint = 0x8DDF;
export def MAX_GEOMETRY_VARYING_COMPONENTS_ARB: uint = 0x8DDD;
export def MAX_GEOMETRY_VARYING_COMPONENTS_EXT: uint = 0x8DDD;
export def MAX_HEIGHT: uint = 0x827F;
export def MAX_IMAGE_SAMPLES: uint = 0x906D;
export def MAX_IMAGE_SAMPLES_EXT: uint = 0x906D;
export def MAX_IMAGE_UNITS: uint = 0x8F38;
export def MAX_IMAGE_UNITS_EXT: uint = 0x8F38;
export def MAX_INTEGER_SAMPLES: uint = 0x9110;
export def MAX_LABEL_LENGTH: uint = 0x82E8;
export def MAX_LAYERS: uint = 0x8281;
export def MAX_LGPU_GPUS_NVX: uint = 0x92BA;
export def MAX_LIGHTS: uint = 0x0D31;
export def MAX_LIST_NESTING: uint = 0x0B31;
export def MAX_MAP_TESSELLATION_NV: uint = 0x86D6;
export def MAX_MATRIX_PALETTE_STACK_DEPTH_ARB: uint = 0x8841;
export def MAX_MESH_ATOMIC_COUNTERS_NV: uint = 0x8E65;
export def MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV: uint = 0x8E64;
export def MAX_MESH_IMAGE_UNIFORMS_NV: uint = 0x8E62;
export def MAX_MESH_OUTPUT_PRIMITIVES_NV: uint = 0x9539;
export def MAX_MESH_OUTPUT_VERTICES_NV: uint = 0x9538;
export def MAX_MESH_SHADER_STORAGE_BLOCKS_NV: uint = 0x8E66;
export def MAX_MESH_TEXTURE_IMAGE_UNITS_NV: uint = 0x8E61;
export def MAX_MESH_TOTAL_MEMORY_SIZE_NV: uint = 0x9536;
export def MAX_MESH_UNIFORM_BLOCKS_NV: uint = 0x8E60;
export def MAX_MESH_UNIFORM_COMPONENTS_NV: uint = 0x8E63;
export def MAX_MESH_VIEWS_NV: uint = 0x9557;
export def MAX_MESH_WORK_GROUP_INVOCATIONS_NV: uint = 0x95A2;
export def MAX_MESH_WORK_GROUP_SIZE_NV: uint = 0x953B;
export def MAX_MODELVIEW_STACK_DEPTH: uint = 0x0D36;
export def MAX_MULTISAMPLE_COVERAGE_MODES_NV: uint = 0x8E11;
export def MAX_NAME_LENGTH: uint = 0x92F6;
export def MAX_NAME_STACK_DEPTH: uint = 0x0D37;
export def MAX_NUM_ACTIVE_VARIABLES: uint = 0x92F7;
export def MAX_NUM_COMPATIBLE_SUBROUTINES: uint = 0x92F8;
export def MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT: uint = 0x87CA;
export def MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT: uint = 0x87CD;
export def MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT: uint = 0x87CE;
export def MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT: uint = 0x87CC;
export def MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT: uint = 0x87CB;
export def MAX_PALETTE_MATRICES_ARB: uint = 0x8842;
export def MAX_PATCH_VERTICES: uint = 0x8E7D;
export def MAX_PIXEL_MAP_TABLE: uint = 0x0D34;
export def MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT: uint = 0x8337;
export def MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI: uint = 0x87F1;
export def MAX_PROGRAM_ADDRESS_REGISTERS_ARB: uint = 0x88B1;
export def MAX_PROGRAM_ALU_INSTRUCTIONS_ARB: uint = 0x880B;
export def MAX_PROGRAM_ATTRIBS_ARB: uint = 0x88AD;
export def MAX_PROGRAM_ATTRIB_COMPONENTS_NV: uint = 0x8908;
export def MAX_PROGRAM_CALL_DEPTH_NV: uint = 0x88F5;
export def MAX_PROGRAM_ENV_PARAMETERS_ARB: uint = 0x88B5;
export def MAX_PROGRAM_EXEC_INSTRUCTIONS_NV: uint = 0x88F4;
export def MAX_PROGRAM_GENERIC_ATTRIBS_NV: uint = 0x8DA5;
export def MAX_PROGRAM_GENERIC_RESULTS_NV: uint = 0x8DA6;
export def MAX_PROGRAM_IF_DEPTH_NV: uint = 0x88F6;
export def MAX_PROGRAM_INSTRUCTIONS_ARB: uint = 0x88A1;
export def MAX_PROGRAM_LOCAL_PARAMETERS_ARB: uint = 0x88B4;
export def MAX_PROGRAM_LOOP_COUNT_NV: uint = 0x88F8;
export def MAX_PROGRAM_LOOP_DEPTH_NV: uint = 0x88F7;
export def MAX_PROGRAM_MATRICES_ARB: uint = 0x862F;
export def MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB: uint = 0x862E;
export def MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB: uint = 0x88B3;
export def MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB: uint = 0x880E;
export def MAX_PROGRAM_NATIVE_ATTRIBS_ARB: uint = 0x88AF;
export def MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB: uint = 0x88A3;
export def MAX_PROGRAM_NATIVE_PARAMETERS_ARB: uint = 0x88AB;
export def MAX_PROGRAM_NATIVE_TEMPORARIES_ARB: uint = 0x88A7;
export def MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB: uint = 0x8810;
export def MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB: uint = 0x880F;
export def MAX_PROGRAM_OUTPUT_VERTICES_NV: uint = 0x8C27;
export def MAX_PROGRAM_PARAMETERS_ARB: uint = 0x88A9;
export def MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV: uint = 0x8DA0;
export def MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV: uint = 0x8DA1;
export def MAX_PROGRAM_PATCH_ATTRIBS_NV: uint = 0x86D8;
export def MAX_PROGRAM_RESULT_COMPONENTS_NV: uint = 0x8909;
export def MAX_PROGRAM_SUBROUTINE_NUM_NV: uint = 0x8F45;
export def MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV: uint = 0x8F44;
export def MAX_PROGRAM_TEMPORARIES_ARB: uint = 0x88A5;
export def MAX_PROGRAM_TEXEL_OFFSET_EXT: uint = 0x8905;
export def MAX_PROGRAM_TEXEL_OFFSET_NV: uint = 0x8905;
export def MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB: uint = 0x8F9F;
export def MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB: uint = 0x8E5F;
export def MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV: uint = 0x8E5F;
export def MAX_PROGRAM_TEX_INDIRECTIONS_ARB: uint = 0x880D;
export def MAX_PROGRAM_TEX_INSTRUCTIONS_ARB: uint = 0x880C;
export def MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV: uint = 0x8C28;
export def MAX_PROJECTION_STACK_DEPTH: uint = 0x0D38;
export def MAX_RASTER_SAMPLES_EXT: uint = 0x9329;
export def MAX_RATIONAL_EVAL_ORDER_NV: uint = 0x86D7;
export def MAX_RECTANGLE_TEXTURE_SIZE_ARB: uint = 0x84F8;
export def MAX_RECTANGLE_TEXTURE_SIZE_NV: uint = 0x84F8;
export def MAX_RENDERBUFFER_SIZE: uint = 0x84E8;
export def MAX_RENDERBUFFER_SIZE_EXT: uint = 0x84E8;
export def MAX_SAMPLES: uint = 0x8D57;
export def MAX_SAMPLES_EXT: uint = 0x8D57;
export def MAX_SAMPLE_MASK_WORDS: uint = 0x8E59;
export def MAX_SAMPLE_MASK_WORDS_NV: uint = 0x8E59;
export def MAX_SERVER_WAIT_TIMEOUT: uint = 0x9111;
export def MAX_SHADER_BUFFER_ADDRESS_NV: uint = 0x8F35;
export def MAX_SHADER_COMPILER_THREADS_ARB: uint = 0x91B0;
export def MAX_SHADER_COMPILER_THREADS_KHR: uint = 0x91B0;
export def MAX_SHADER_STORAGE_BLOCK_SIZE: uint = 0x90DE;
export def MAX_SHADER_STORAGE_BUFFER_BINDINGS: uint = 0x90DD;
export def MAX_SHININESS_NV: uint = 0x8504;
export def MAX_SPARSE_3D_TEXTURE_SIZE_AMD: uint = 0x9199;
export def MAX_SPARSE_3D_TEXTURE_SIZE_ARB: uint = 0x9199;
export def MAX_SPARSE_ARRAY_TEXTURE_LAYERS: uint = 0x919A;
export def MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB: uint = 0x919A;
export def MAX_SPARSE_TEXTURE_SIZE_AMD: uint = 0x9198;
export def MAX_SPARSE_TEXTURE_SIZE_ARB: uint = 0x9198;
export def MAX_SPOT_EXPONENT_NV: uint = 0x8505;
export def MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV: uint = 0x9349;
export def MAX_SUBROUTINES: uint = 0x8DE7;
export def MAX_SUBROUTINE_UNIFORM_LOCATIONS: uint = 0x8DE8;
export def MAX_TASK_ATOMIC_COUNTERS_NV: uint = 0x8E6D;
export def MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV: uint = 0x8E6C;
export def MAX_TASK_IMAGE_UNIFORMS_NV: uint = 0x8E6A;
export def MAX_TASK_OUTPUT_COUNT_NV: uint = 0x953A;
export def MAX_TASK_SHADER_STORAGE_BLOCKS_NV: uint = 0x8E6E;
export def MAX_TASK_TEXTURE_IMAGE_UNITS_NV: uint = 0x8E69;
export def MAX_TASK_TOTAL_MEMORY_SIZE_NV: uint = 0x9537;
export def MAX_TASK_UNIFORM_BLOCKS_NV: uint = 0x8E68;
export def MAX_TASK_UNIFORM_COMPONENTS_NV: uint = 0x8E6B;
export def MAX_TASK_WORK_GROUP_INVOCATIONS_NV: uint = 0x95A3;
export def MAX_TASK_WORK_GROUP_SIZE_NV: uint = 0x953C;
export def MAX_TESS_CONTROL_ATOMIC_COUNTERS: uint = 0x92D3;
export def MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS: uint = 0x92CD;
export def MAX_TESS_CONTROL_IMAGE_UNIFORMS: uint = 0x90CB;
export def MAX_TESS_CONTROL_INPUT_COMPONENTS: uint = 0x886C;
export def MAX_TESS_CONTROL_OUTPUT_COMPONENTS: uint = 0x8E83;
export def MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS: uint = 0x90D8;
export def MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS: uint = 0x8E81;
export def MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS: uint = 0x8E85;
export def MAX_TESS_CONTROL_UNIFORM_BLOCKS: uint = 0x8E89;
export def MAX_TESS_CONTROL_UNIFORM_COMPONENTS: uint = 0x8E7F;
export def MAX_TESS_EVALUATION_ATOMIC_COUNTERS: uint = 0x92D4;
export def MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS: uint = 0x92CE;
export def MAX_TESS_EVALUATION_IMAGE_UNIFORMS: uint = 0x90CC;
export def MAX_TESS_EVALUATION_INPUT_COMPONENTS: uint = 0x886D;
export def MAX_TESS_EVALUATION_OUTPUT_COMPONENTS: uint = 0x8E86;
export def MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS: uint = 0x90D9;
export def MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS: uint = 0x8E82;
export def MAX_TESS_EVALUATION_UNIFORM_BLOCKS: uint = 0x8E8A;
export def MAX_TESS_EVALUATION_UNIFORM_COMPONENTS: uint = 0x8E80;
export def MAX_TESS_GEN_LEVEL: uint = 0x8E7E;
export def MAX_TESS_PATCH_COMPONENTS: uint = 0x8E84;
export def MAX_TEXTURE_BUFFER_SIZE_ARB: uint = 0x8C2B;
export def MAX_TEXTURE_BUFFER_SIZE_EXT: uint = 0x8C2B;
export def MAX_TEXTURE_COORDS: uint = 0x8871;
export def MAX_TEXTURE_COORDS_ARB: uint = 0x8871;
export def MAX_TEXTURE_COORDS_NV: uint = 0x8871;
export def MAX_TEXTURE_IMAGE_UNITS: uint = 0x8872;
export def MAX_TEXTURE_IMAGE_UNITS_ARB: uint = 0x8872;
export def MAX_TEXTURE_IMAGE_UNITS_NV: uint = 0x8872;
export def MAX_TEXTURE_LOD_BIAS: uint = 0x84FD;
export def MAX_TEXTURE_LOD_BIAS_EXT: uint = 0x84FD;
export def MAX_TEXTURE_MAX_ANISOTROPY: uint = 0x84FF;
export def MAX_TEXTURE_MAX_ANISOTROPY_EXT: uint = 0x84FF;
export def MAX_TEXTURE_SIZE: uint = 0x0D33;
export def MAX_TEXTURE_STACK_DEPTH: uint = 0x0D39;
export def MAX_TEXTURE_UNITS: uint = 0x84E2;
export def MAX_TEXTURE_UNITS_ARB: uint = 0x84E2;
export def MAX_TIMELINE_SEMAPHORE_VALUE_DIFFERENCE_NV: uint = 0x95B6;
export def MAX_TRACK_MATRICES_NV: uint = 0x862F;
export def MAX_TRACK_MATRIX_STACK_DEPTH_NV: uint = 0x862E;
export def MAX_TRANSFORM_FEEDBACK_BUFFERS: uint = 0x8E70;
export def MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT: uint = 0x8C8A;
export def MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV: uint = 0x8C8A;
export def MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT: uint = 0x8C8B;
export def MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV: uint = 0x8C8B;
export def MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT: uint = 0x8C80;
export def MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV: uint = 0x8C80;
export def MAX_UNIFORM_BLOCK_SIZE: uint = 0x8A30;
export def MAX_UNIFORM_BUFFER_BINDINGS: uint = 0x8A2F;
export def MAX_UNIFORM_LOCATIONS: uint = 0x826E;
export def MAX_VARYING_COMPONENTS: uint = 0x8B4B;
export def MAX_VARYING_COMPONENTS_EXT: uint = 0x8B4B;
export def MAX_VARYING_FLOATS: uint = 0x8B4B;
export def MAX_VARYING_FLOATS_ARB: uint = 0x8B4B;
export def MAX_VARYING_VECTORS: uint = 0x8DFC;
export def MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV: uint = 0x8520;
export def MAX_VERTEX_ATOMIC_COUNTERS: uint = 0x92D2;
export def MAX_VERTEX_ATOMIC_COUNTER_BUFFERS: uint = 0x92CC;
export def MAX_VERTEX_ATTRIBS: uint = 0x8869;
export def MAX_VERTEX_ATTRIBS_ARB: uint = 0x8869;
export def MAX_VERTEX_ATTRIB_BINDINGS: uint = 0x82DA;
export def MAX_VERTEX_ATTRIB_RELATIVE_OFFSET: uint = 0x82D9;
export def MAX_VERTEX_BINDABLE_UNIFORMS_EXT: uint = 0x8DE2;
export def MAX_VERTEX_HINT_PGI: uint = 0x1A22D;
export def MAX_VERTEX_IMAGE_UNIFORMS: uint = 0x90CA;
export def MAX_VERTEX_SHADER_INSTRUCTIONS_EXT: uint = 0x87C5;
export def MAX_VERTEX_SHADER_INVARIANTS_EXT: uint = 0x87C7;
export def MAX_VERTEX_SHADER_LOCALS_EXT: uint = 0x87C9;
export def MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT: uint = 0x87C8;
export def MAX_VERTEX_SHADER_STORAGE_BLOCKS: uint = 0x90D6;
export def MAX_VERTEX_SHADER_VARIANTS_EXT: uint = 0x87C6;
export def MAX_VERTEX_STREAMS: uint = 0x8E71;
export def MAX_VERTEX_STREAMS_ATI: uint = 0x876B;
export def MAX_VERTEX_TEXTURE_IMAGE_UNITS: uint = 0x8B4C;
export def MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB: uint = 0x8B4C;
export def MAX_VERTEX_UNIFORM_BLOCKS: uint = 0x8A2B;
export def MAX_VERTEX_UNIFORM_COMPONENTS: uint = 0x8B4A;
export def MAX_VERTEX_UNIFORM_COMPONENTS_ARB: uint = 0x8B4A;
export def MAX_VERTEX_UNIFORM_VECTORS: uint = 0x8DFB;
export def MAX_VERTEX_UNITS_ARB: uint = 0x86A4;
export def MAX_VERTEX_VARYING_COMPONENTS_ARB: uint = 0x8DDE;
export def MAX_VERTEX_VARYING_COMPONENTS_EXT: uint = 0x8DDE;
export def MAX_VIEWPORTS: uint = 0x825B;
export def MAX_VIEWPORT_DIMS: uint = 0x0D3A;
export def MAX_VIEWS_OVR: uint = 0x9631;
export def MAX_WIDTH: uint = 0x827E;
export def MAX_WINDOW_RECTANGLES_EXT: uint = 0x8F14;
export def MEDIUM_FLOAT: uint = 0x8DF1;
export def MEDIUM_INT: uint = 0x8DF4;
export def MEMORY_ATTACHABLE_ALIGNMENT_NV: uint = 0x95A6;
export def MEMORY_ATTACHABLE_NV: uint = 0x95A8;
export def MEMORY_ATTACHABLE_SIZE_NV: uint = 0x95A7;
export def MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV: uint = 0x9543;
export def MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV: uint = 0x92DF;
export def MESH_OUTPUT_TYPE_NV: uint = 0x957B;
export def MESH_PRIMITIVES_OUT_NV: uint = 0x957A;
export def MESH_SHADER_BIT_NV: uint = 0x00000040;
export def MESH_SHADER_NV: uint = 0x9559;
export def MESH_SUBROUTINE_NV: uint = 0x957C;
export def MESH_SUBROUTINE_UNIFORM_NV: uint = 0x957E;
export def MESH_VERTICES_OUT_NV: uint = 0x9579;
export def MESH_WORK_GROUP_SIZE_NV: uint = 0x953E;
export def MIN: uint = 0x8007;
export def MINMAX_EXT: uint = 0x802E;
export def MINMAX_FORMAT_EXT: uint = 0x802F;
export def MINMAX_SINK_EXT: uint = 0x8030;
export def MINUS_CLAMPED_NV: uint = 0x92B3;
export def MINUS_NV: uint = 0x929F;
export def MIN_EXT: uint = 0x8007;
export def MIN_FRAGMENT_INTERPOLATION_OFFSET: uint = 0x8E5B;
export def MIN_FRAGMENT_INTERPOLATION_OFFSET_NV: uint = 0x8E5B;
export def MIN_LOD_WARNING_AMD: uint = 0x919C;
export def MIN_MAP_BUFFER_ALIGNMENT: uint = 0x90BC;
export def MIN_PROGRAM_TEXEL_OFFSET_EXT: uint = 0x8904;
export def MIN_PROGRAM_TEXEL_OFFSET_NV: uint = 0x8904;
export def MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB: uint = 0x8E5E;
export def MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV: uint = 0x8E5E;
export def MIN_SAMPLE_SHADING_VALUE_ARB: uint = 0x8C37;
export def MIN_SPARSE_LEVEL_AMD: uint = 0x919B;
export def MIPMAP: uint = 0x8293;
export def MIRRORED_REPEAT: uint = 0x8370;
export def MIRRORED_REPEAT_ARB: uint = 0x8370;
export def MIRRORED_REPEAT_IBM: uint = 0x8370;
export def MIRROR_CLAMP_ATI: uint = 0x8742;
export def MIRROR_CLAMP_EXT: uint = 0x8742;
export def MIRROR_CLAMP_TO_BORDER_EXT: uint = 0x8912;
export def MIRROR_CLAMP_TO_EDGE: uint = 0x8743;
export def MIRROR_CLAMP_TO_EDGE_ATI: uint = 0x8743;
export def MIRROR_CLAMP_TO_EDGE_EXT: uint = 0x8743;
export def MITER_REVERT_NV: uint = 0x90A7;
export def MITER_TRUNCATE_NV: uint = 0x90A8;
export def MIXED_DEPTH_SAMPLES_SUPPORTED_NV: uint = 0x932F;
export def MIXED_STENCIL_SAMPLES_SUPPORTED_NV: uint = 0x9330;
export def MODELVIEW: uint = 0x1700;
export def MODELVIEW0_ARB: uint = 0x1700;
export def MODELVIEW0_EXT: uint = 0x1700;
export def MODELVIEW0_MATRIX_EXT: uint = 0x0BA6;
export def MODELVIEW0_STACK_DEPTH_EXT: uint = 0x0BA3;
export def MODELVIEW10_ARB: uint = 0x872A;
export def MODELVIEW11_ARB: uint = 0x872B;
export def MODELVIEW12_ARB: uint = 0x872C;
export def MODELVIEW13_ARB: uint = 0x872D;
export def MODELVIEW14_ARB: uint = 0x872E;
export def MODELVIEW15_ARB: uint = 0x872F;
export def MODELVIEW16_ARB: uint = 0x8730;
export def MODELVIEW17_ARB: uint = 0x8731;
export def MODELVIEW18_ARB: uint = 0x8732;
export def MODELVIEW19_ARB: uint = 0x8733;
export def MODELVIEW1_ARB: uint = 0x850A;
export def MODELVIEW1_EXT: uint = 0x850A;
export def MODELVIEW1_MATRIX_EXT: uint = 0x8506;
export def MODELVIEW1_STACK_DEPTH_EXT: uint = 0x8502;
export def MODELVIEW20_ARB: uint = 0x8734;
export def MODELVIEW21_ARB: uint = 0x8735;
export def MODELVIEW22_ARB: uint = 0x8736;
export def MODELVIEW23_ARB: uint = 0x8737;
export def MODELVIEW24_ARB: uint = 0x8738;
export def MODELVIEW25_ARB: uint = 0x8739;
export def MODELVIEW26_ARB: uint = 0x873A;
export def MODELVIEW27_ARB: uint = 0x873B;
export def MODELVIEW28_ARB: uint = 0x873C;
export def MODELVIEW29_ARB: uint = 0x873D;
export def MODELVIEW2_ARB: uint = 0x8722;
export def MODELVIEW30_ARB: uint = 0x873E;
export def MODELVIEW31_ARB: uint = 0x873F;
export def MODELVIEW3_ARB: uint = 0x8723;
export def MODELVIEW4_ARB: uint = 0x8724;
export def MODELVIEW5_ARB: uint = 0x8725;
export def MODELVIEW6_ARB: uint = 0x8726;
export def MODELVIEW7_ARB: uint = 0x8727;
export def MODELVIEW8_ARB: uint = 0x8728;
export def MODELVIEW9_ARB: uint = 0x8729;
export def MODELVIEW_MATRIX: uint = 0x0BA6;
export def MODELVIEW_PROJECTION_NV: uint = 0x8629;
export def MODELVIEW_STACK_DEPTH: uint = 0x0BA3;
export def MODULATE: uint = 0x2100;
export def MODULATE_ADD_ATI: uint = 0x8744;
export def MODULATE_SIGNED_ADD_ATI: uint = 0x8745;
export def MODULATE_SUBTRACT_ATI: uint = 0x8746;
export def MOVE_TO_CONTINUES_NV: uint = 0x90B6;
export def MOVE_TO_NV: uint = 0x02;
export def MOVE_TO_RESETS_NV: uint = 0x90B5;
export def MOV_ATI: uint = 0x8961;
export def MULT: uint = 0x0103;
export def MULTICAST_GPUS_NV: uint = 0x92BA;
export def MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV: uint = 0x9549;
export def MULTIPLY_KHR: uint = 0x9294;
export def MULTIPLY_NV: uint = 0x9294;
export def MULTISAMPLE: uint = 0x809D;
export def MULTISAMPLES_NV: uint = 0x9371;
export def MULTISAMPLE_3DFX: uint = 0x86B2;
export def MULTISAMPLE_ARB: uint = 0x809D;
export def MULTISAMPLE_BIT: uint = 0x20000000;
export def MULTISAMPLE_BIT_3DFX: uint = 0x20000000;
export def MULTISAMPLE_BIT_ARB: uint = 0x20000000;
export def MULTISAMPLE_BIT_EXT: uint = 0x20000000;
export def MULTISAMPLE_COVERAGE_MODES_NV: uint = 0x8E12;
export def MULTISAMPLE_EXT: uint = 0x809D;
export def MULTISAMPLE_FILTER_HINT_NV: uint = 0x8534;
export def MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB: uint = 0x9382;
export def MULTISAMPLE_LINE_WIDTH_RANGE_ARB: uint = 0x9381;
export def MULTISAMPLE_RASTERIZATION_ALLOWED_EXT: uint = 0x932B;
export def MULTISAMPLE_SGIS: uint = 0x809D;
export def MUL_ATI: uint = 0x8964;
export def MVP_MATRIX_EXT: uint = 0x87E3;
export def N3F_V3F: uint = 0x2A25;
export def NAMED_STRING_LENGTH_ARB: uint = 0x8DE9;
export def NAMED_STRING_TYPE_ARB: uint = 0x8DEA;
export def NAME_LENGTH: uint = 0x92F9;
export def NAME_STACK_DEPTH: uint = 0x0D70;
export def NAND: uint = 0x150E;
export def NATIVE_GRAPHICS_BEGIN_HINT_PGI: uint = 0x1A203;
export def NATIVE_GRAPHICS_END_HINT_PGI: uint = 0x1A204;
export def NATIVE_GRAPHICS_HANDLE_PGI: uint = 0x1A202;
export def NEAREST: uint = 0x2600;
export def NEAREST_CLIPMAP_LINEAR_SGIX: uint = 0x844E;
export def NEAREST_CLIPMAP_NEAREST_SGIX: uint = 0x844D;
export def NEAREST_MIPMAP_LINEAR: uint = 0x2702;
export def NEAREST_MIPMAP_NEAREST: uint = 0x2700;
export def NEGATE_BIT_ATI: uint = 0x00000004;
export def NEGATIVE_ONE_EXT: uint = 0x87DF;
export def NEGATIVE_ONE_TO_ONE: uint = 0x935E;
export def NEGATIVE_W_EXT: uint = 0x87DC;
export def NEGATIVE_X_EXT: uint = 0x87D9;
export def NEGATIVE_Y_EXT: uint = 0x87DA;
export def NEGATIVE_Z_EXT: uint = 0x87DB;
export def NEVER: uint = 0x0200;
export def NEXT_BUFFER_NV: int = -2;
export def NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV: uint = 0x9025;
export def NICEST: uint = 0x1102;
export def NONE: uint = 0;
export def NOOP: uint = 0x1505;
export def NOP_COMMAND_NV: uint = 0x0001;
export def NOR: uint = 0x1508;
export def NORMALIZE: uint = 0x0BA1;
export def NORMALIZED_RANGE_EXT: uint = 0x87E0;
export def NORMAL_ARRAY: uint = 0x8075;
export def NORMAL_ARRAY_ADDRESS_NV: uint = 0x8F22;
export def NORMAL_ARRAY_BUFFER_BINDING: uint = 0x8897;
export def NORMAL_ARRAY_BUFFER_BINDING_ARB: uint = 0x8897;
export def NORMAL_ARRAY_COUNT_EXT: uint = 0x8080;
export def NORMAL_ARRAY_EXT: uint = 0x8075;
export def NORMAL_ARRAY_LENGTH_NV: uint = 0x8F2C;
export def NORMAL_ARRAY_LIST_IBM: uint = 103071;
export def NORMAL_ARRAY_LIST_STRIDE_IBM: uint = 103081;
export def NORMAL_ARRAY_PARALLEL_POINTERS_INTEL: uint = 0x83F6;
export def NORMAL_ARRAY_POINTER: uint = 0x808F;
export def NORMAL_ARRAY_POINTER_EXT: uint = 0x808F;
export def NORMAL_ARRAY_STRIDE: uint = 0x807F;
export def NORMAL_ARRAY_STRIDE_EXT: uint = 0x807F;
export def NORMAL_ARRAY_TYPE: uint = 0x807E;
export def NORMAL_ARRAY_TYPE_EXT: uint = 0x807E;
export def NORMAL_BIT_PGI: uint = 0x08000000;
export def NORMAL_MAP: uint = 0x8511;
export def NORMAL_MAP_ARB: uint = 0x8511;
export def NORMAL_MAP_EXT: uint = 0x8511;
export def NORMAL_MAP_NV: uint = 0x8511;
export def NOTEQUAL: uint = 0x0205;
export def NO_ERROR: uint = 0;
export def NO_RESET_NOTIFICATION: uint = 0x8261;
export def NO_RESET_NOTIFICATION_ARB: uint = 0x8261;
export def NUM_ACTIVE_VARIABLES: uint = 0x9304;
export def NUM_COMPATIBLE_SUBROUTINES: uint = 0x8E4A;
export def NUM_COMPRESSED_TEXTURE_FORMATS: uint = 0x86A2;
export def NUM_COMPRESSED_TEXTURE_FORMATS_ARB: uint = 0x86A2;
export def NUM_DEVICE_UUIDS_EXT: uint = 0x9596;
export def NUM_FILL_STREAMS_NV: uint = 0x8E29;
export def NUM_FRAGMENT_CONSTANTS_ATI: uint = 0x896F;
export def NUM_FRAGMENT_REGISTERS_ATI: uint = 0x896E;
export def NUM_GENERAL_COMBINERS_NV: uint = 0x854E;
export def NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI: uint = 0x8973;
export def NUM_INSTRUCTIONS_PER_PASS_ATI: uint = 0x8971;
export def NUM_INSTRUCTIONS_TOTAL_ATI: uint = 0x8972;
export def NUM_LOOPBACK_COMPONENTS_ATI: uint = 0x8974;
export def NUM_PASSES_ATI: uint = 0x8970;
export def NUM_PROGRAM_BINARY_FORMATS: uint = 0x87FE;
export def NUM_SAMPLE_COUNTS: uint = 0x9380;
export def NUM_SHADER_BINARY_FORMATS: uint = 0x8DF9;
export def NUM_SPARSE_LEVELS_ARB: uint = 0x91AA;
export def NUM_SPIR_V_EXTENSIONS: uint = 0x9554;
export def NUM_SUPPORTED_MULTISAMPLE_MODES_AMD: uint = 0x91B6;
export def NUM_TILING_TYPES_EXT: uint = 0x9582;
export def NUM_VIDEO_CAPTURE_STREAMS_NV: uint = 0x9024;
export def NUM_VIRTUAL_PAGE_SIZES_ARB: uint = 0x91A8;
export def NUM_WINDOW_RECTANGLES_EXT: uint = 0x8F15;
export def OBJECT_ACTIVE_ATTRIBUTES_ARB: uint = 0x8B89;
export def OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB: uint = 0x8B8A;
export def OBJECT_ACTIVE_UNIFORMS_ARB: uint = 0x8B86;
export def OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB: uint = 0x8B87;
export def OBJECT_ATTACHED_OBJECTS_ARB: uint = 0x8B85;
export def OBJECT_BUFFER_SIZE_ATI: uint = 0x8764;
export def OBJECT_BUFFER_USAGE_ATI: uint = 0x8765;
export def OBJECT_COMPILE_STATUS_ARB: uint = 0x8B81;
export def OBJECT_DELETE_STATUS_ARB: uint = 0x8B80;
export def OBJECT_DISTANCE_TO_LINE_SGIS: uint = 0x81F3;
export def OBJECT_DISTANCE_TO_POINT_SGIS: uint = 0x81F1;
export def OBJECT_INFO_LOG_LENGTH_ARB: uint = 0x8B84;
export def OBJECT_LINEAR: uint = 0x2401;
export def OBJECT_LINE_SGIS: uint = 0x81F7;
export def OBJECT_LINK_STATUS_ARB: uint = 0x8B82;
export def OBJECT_PLANE: uint = 0x2501;
export def OBJECT_POINT_SGIS: uint = 0x81F5;
export def OBJECT_SHADER_SOURCE_LENGTH_ARB: uint = 0x8B88;
export def OBJECT_SUBTYPE_ARB: uint = 0x8B4F;
export def OBJECT_TYPE: uint = 0x9112;
export def OBJECT_TYPE_ARB: uint = 0x8B4E;
export def OBJECT_VALIDATE_STATUS_ARB: uint = 0x8B83;
export def OCCLUSION_QUERY_EVENT_MASK_AMD: uint = 0x874F;
export def OCCLUSION_TEST_HP: uint = 0x8165;
export def OCCLUSION_TEST_RESULT_HP: uint = 0x8166;
export def OFFSET: uint = 0x92FC;
export def OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV: uint = 0x8856;
export def OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV: uint = 0x8857;
export def OFFSET_HILO_TEXTURE_2D_NV: uint = 0x8854;
export def OFFSET_HILO_TEXTURE_RECTANGLE_NV: uint = 0x8855;
export def OFFSET_PROJECTIVE_TEXTURE_2D_NV: uint = 0x8850;
export def OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV: uint = 0x8851;
export def OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV: uint = 0x8852;
export def OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV: uint = 0x8853;
export def OFFSET_TEXTURE_2D_BIAS_NV: uint = 0x86E3;
export def OFFSET_TEXTURE_2D_MATRIX_NV: uint = 0x86E1;
export def OFFSET_TEXTURE_2D_NV: uint = 0x86E8;
export def OFFSET_TEXTURE_2D_SCALE_NV: uint = 0x86E2;
export def OFFSET_TEXTURE_BIAS_NV: uint = 0x86E3;
export def OFFSET_TEXTURE_MATRIX_NV: uint = 0x86E1;
export def OFFSET_TEXTURE_RECTANGLE_NV: uint = 0x864C;
export def OFFSET_TEXTURE_RECTANGLE_SCALE_NV: uint = 0x864D;
export def OFFSET_TEXTURE_SCALE_NV: uint = 0x86E2;
export def ONE: uint = 1;
export def ONE_EXT: uint = 0x87DE;
export def ONE_MINUS_CONSTANT_ALPHA: uint = 0x8004;
export def ONE_MINUS_CONSTANT_ALPHA_EXT: uint = 0x8004;
export def ONE_MINUS_CONSTANT_COLOR: uint = 0x8002;
export def ONE_MINUS_CONSTANT_COLOR_EXT: uint = 0x8002;
export def ONE_MINUS_DST_ALPHA: uint = 0x0305;
export def ONE_MINUS_DST_COLOR: uint = 0x0307;
export def ONE_MINUS_SRC1_ALPHA: uint = 0x88FB;
export def ONE_MINUS_SRC1_COLOR: uint = 0x88FA;
export def ONE_MINUS_SRC_ALPHA: uint = 0x0303;
export def ONE_MINUS_SRC_COLOR: uint = 0x0301;
export def OPERAND0_ALPHA: uint = 0x8598;
export def OPERAND0_ALPHA_ARB: uint = 0x8598;
export def OPERAND0_ALPHA_EXT: uint = 0x8598;
export def OPERAND0_RGB: uint = 0x8590;
export def OPERAND0_RGB_ARB: uint = 0x8590;
export def OPERAND0_RGB_EXT: uint = 0x8590;
export def OPERAND1_ALPHA: uint = 0x8599;
export def OPERAND1_ALPHA_ARB: uint = 0x8599;
export def OPERAND1_ALPHA_EXT: uint = 0x8599;
export def OPERAND1_RGB: uint = 0x8591;
export def OPERAND1_RGB_ARB: uint = 0x8591;
export def OPERAND1_RGB_EXT: uint = 0x8591;
export def OPERAND2_ALPHA: uint = 0x859A;
export def OPERAND2_ALPHA_ARB: uint = 0x859A;
export def OPERAND2_ALPHA_EXT: uint = 0x859A;
export def OPERAND2_RGB: uint = 0x8592;
export def OPERAND2_RGB_ARB: uint = 0x8592;
export def OPERAND2_RGB_EXT: uint = 0x8592;
export def OPERAND3_ALPHA_NV: uint = 0x859B;
export def OPERAND3_RGB_NV: uint = 0x8593;
export def OPTIMAL_TILING_EXT: uint = 0x9584;
export def OP_ADD_EXT: uint = 0x8787;
export def OP_CLAMP_EXT: uint = 0x878E;
export def OP_CROSS_PRODUCT_EXT: uint = 0x8797;
export def OP_DOT3_EXT: uint = 0x8784;
export def OP_DOT4_EXT: uint = 0x8785;
export def OP_EXP_BASE_2_EXT: uint = 0x8791;
export def OP_FLOOR_EXT: uint = 0x878F;
export def OP_FRAC_EXT: uint = 0x8789;
export def OP_INDEX_EXT: uint = 0x8782;
export def OP_LOG_BASE_2_EXT: uint = 0x8792;
export def OP_MADD_EXT: uint = 0x8788;
export def OP_MAX_EXT: uint = 0x878A;
export def OP_MIN_EXT: uint = 0x878B;
export def OP_MOV_EXT: uint = 0x8799;
export def OP_MULTIPLY_MATRIX_EXT: uint = 0x8798;
export def OP_MUL_EXT: uint = 0x8786;
export def OP_NEGATE_EXT: uint = 0x8783;
export def OP_POWER_EXT: uint = 0x8793;
export def OP_RECIP_EXT: uint = 0x8794;
export def OP_RECIP_SQRT_EXT: uint = 0x8795;
export def OP_ROUND_EXT: uint = 0x8790;
export def OP_SET_GE_EXT: uint = 0x878C;
export def OP_SET_LT_EXT: uint = 0x878D;
export def OP_SUB_EXT: uint = 0x8796;
export def OR: uint = 0x1507;
export def ORDER: uint = 0x0A01;
export def OR_INVERTED: uint = 0x150D;
export def OR_REVERSE: uint = 0x150B;
export def OUTPUT_COLOR0_EXT: uint = 0x879B;
export def OUTPUT_COLOR1_EXT: uint = 0x879C;
export def OUTPUT_FOG_EXT: uint = 0x87BD;
export def OUTPUT_TEXTURE_COORD0_EXT: uint = 0x879D;
export def OUTPUT_TEXTURE_COORD10_EXT: uint = 0x87A7;
export def OUTPUT_TEXTURE_COORD11_EXT: uint = 0x87A8;
export def OUTPUT_TEXTURE_COORD12_EXT: uint = 0x87A9;
export def OUTPUT_TEXTURE_COORD13_EXT: uint = 0x87AA;
export def OUTPUT_TEXTURE_COORD14_EXT: uint = 0x87AB;
export def OUTPUT_TEXTURE_COORD15_EXT: uint = 0x87AC;
export def OUTPUT_TEXTURE_COORD16_EXT: uint = 0x87AD;
export def OUTPUT_TEXTURE_COORD17_EXT: uint = 0x87AE;
export def OUTPUT_TEXTURE_COORD18_EXT: uint = 0x87AF;
export def OUTPUT_TEXTURE_COORD19_EXT: uint = 0x87B0;
export def OUTPUT_TEXTURE_COORD1_EXT: uint = 0x879E;
export def OUTPUT_TEXTURE_COORD20_EXT: uint = 0x87B1;
export def OUTPUT_TEXTURE_COORD21_EXT: uint = 0x87B2;
export def OUTPUT_TEXTURE_COORD22_EXT: uint = 0x87B3;
export def OUTPUT_TEXTURE_COORD23_EXT: uint = 0x87B4;
export def OUTPUT_TEXTURE_COORD24_EXT: uint = 0x87B5;
export def OUTPUT_TEXTURE_COORD25_EXT: uint = 0x87B6;
export def OUTPUT_TEXTURE_COORD26_EXT: uint = 0x87B7;
export def OUTPUT_TEXTURE_COORD27_EXT: uint = 0x87B8;
export def OUTPUT_TEXTURE_COORD28_EXT: uint = 0x87B9;
export def OUTPUT_TEXTURE_COORD29_EXT: uint = 0x87BA;
export def OUTPUT_TEXTURE_COORD2_EXT: uint = 0x879F;
export def OUTPUT_TEXTURE_COORD30_EXT: uint = 0x87BB;
export def OUTPUT_TEXTURE_COORD31_EXT: uint = 0x87BC;
export def OUTPUT_TEXTURE_COORD3_EXT: uint = 0x87A0;
export def OUTPUT_TEXTURE_COORD4_EXT: uint = 0x87A1;
export def OUTPUT_TEXTURE_COORD5_EXT: uint = 0x87A2;
export def OUTPUT_TEXTURE_COORD6_EXT: uint = 0x87A3;
export def OUTPUT_TEXTURE_COORD7_EXT: uint = 0x87A4;
export def OUTPUT_TEXTURE_COORD8_EXT: uint = 0x87A5;
export def OUTPUT_TEXTURE_COORD9_EXT: uint = 0x87A6;
export def OUTPUT_VERTEX_EXT: uint = 0x879A;
export def OUT_OF_MEMORY: uint = 0x0505;
export def OVERLAY_KHR: uint = 0x9296;
export def OVERLAY_NV: uint = 0x9296;
export def PACK_ALIGNMENT: uint = 0x0D05;
export def PACK_CMYK_HINT_EXT: uint = 0x800E;
export def PACK_COMPRESSED_BLOCK_DEPTH: uint = 0x912D;
export def PACK_COMPRESSED_BLOCK_HEIGHT: uint = 0x912C;
export def PACK_COMPRESSED_BLOCK_SIZE: uint = 0x912E;
export def PACK_COMPRESSED_BLOCK_WIDTH: uint = 0x912B;
export def PACK_IMAGE_DEPTH_SGIS: uint = 0x8131;
export def PACK_IMAGE_HEIGHT: uint = 0x806C;
export def PACK_IMAGE_HEIGHT_EXT: uint = 0x806C;
export def PACK_INVERT_MESA: uint = 0x8758;
export def PACK_LSB_FIRST: uint = 0x0D01;
export def PACK_RESAMPLE_OML: uint = 0x8984;
export def PACK_RESAMPLE_SGIX: uint = 0x842E;
export def PACK_ROW_BYTES_APPLE: uint = 0x8A15;
export def PACK_ROW_LENGTH: uint = 0x0D02;
export def PACK_SKIP_IMAGES: uint = 0x806B;
export def PACK_SKIP_IMAGES_EXT: uint = 0x806B;
export def PACK_SKIP_PIXELS: uint = 0x0D04;
export def PACK_SKIP_ROWS: uint = 0x0D03;
export def PACK_SKIP_VOLUMES_SGIS: uint = 0x8130;
export def PACK_SUBSAMPLE_RATE_SGIX: uint = 0x85A0;
export def PACK_SWAP_BYTES: uint = 0x0D00;
export def PALETTE4_R5_G6_B5_OES: uint = 0x8B92;
export def PALETTE4_RGB5_A1_OES: uint = 0x8B94;
export def PALETTE4_RGB8_OES: uint = 0x8B90;
export def PALETTE4_RGBA4_OES: uint = 0x8B93;
export def PALETTE4_RGBA8_OES: uint = 0x8B91;
export def PALETTE8_R5_G6_B5_OES: uint = 0x8B97;
export def PALETTE8_RGB5_A1_OES: uint = 0x8B99;
export def PALETTE8_RGB8_OES: uint = 0x8B95;
export def PALETTE8_RGBA4_OES: uint = 0x8B98;
export def PALETTE8_RGBA8_OES: uint = 0x8B96;
export def PARALLEL_ARRAYS_INTEL: uint = 0x83F4;
export def PARAMETER_BUFFER: uint = 0x80EE;
export def PARAMETER_BUFFER_ARB: uint = 0x80EE;
export def PARAMETER_BUFFER_BINDING: uint = 0x80EF;
export def PARAMETER_BUFFER_BINDING_ARB: uint = 0x80EF;
export def PARTIAL_SUCCESS_NV: uint = 0x902E;
export def PASS_THROUGH_NV: uint = 0x86E6;
export def PASS_THROUGH_TOKEN: uint = 0x0700;
export def PATCHES: uint = 0x000E;
export def PATCH_DEFAULT_INNER_LEVEL: uint = 0x8E73;
export def PATCH_DEFAULT_OUTER_LEVEL: uint = 0x8E74;
export def PATCH_VERTICES: uint = 0x8E72;
export def PATH_CLIENT_LENGTH_NV: uint = 0x907F;
export def PATH_COMMAND_COUNT_NV: uint = 0x909D;
export def PATH_COMPUTED_LENGTH_NV: uint = 0x90A0;
export def PATH_COORD_COUNT_NV: uint = 0x909E;
export def PATH_COVER_DEPTH_FUNC_NV: uint = 0x90BF;
export def PATH_DASH_ARRAY_COUNT_NV: uint = 0x909F;
export def PATH_DASH_CAPS_NV: uint = 0x907B;
export def PATH_DASH_OFFSET_NV: uint = 0x907E;
export def PATH_DASH_OFFSET_RESET_NV: uint = 0x90B4;
export def PATH_END_CAPS_NV: uint = 0x9076;
export def PATH_ERROR_POSITION_NV: uint = 0x90AB;
export def PATH_FILL_BOUNDING_BOX_NV: uint = 0x90A1;
export def PATH_FILL_COVER_MODE_NV: uint = 0x9082;
export def PATH_FILL_MASK_NV: uint = 0x9081;
export def PATH_FILL_MODE_NV: uint = 0x9080;
export def PATH_FORMAT_PS_NV: uint = 0x9071;
export def PATH_FORMAT_SVG_NV: uint = 0x9070;
export def PATH_GEN_COEFF_NV: uint = 0x90B1;
export def PATH_GEN_COMPONENTS_NV: uint = 0x90B3;
export def PATH_GEN_MODE_NV: uint = 0x90B0;
export def PATH_INITIAL_DASH_CAP_NV: uint = 0x907C;
export def PATH_INITIAL_END_CAP_NV: uint = 0x9077;
export def PATH_JOIN_STYLE_NV: uint = 0x9079;
export def PATH_MAX_MODELVIEW_STACK_DEPTH_NV: uint = 0x0D36;
export def PATH_MAX_PROJECTION_STACK_DEPTH_NV: uint = 0x0D38;
export def PATH_MITER_LIMIT_NV: uint = 0x907A;
export def PATH_MODELVIEW_MATRIX_NV: uint = 0x0BA6;
export def PATH_MODELVIEW_NV: uint = 0x1700;
export def PATH_MODELVIEW_STACK_DEPTH_NV: uint = 0x0BA3;
export def PATH_OBJECT_BOUNDING_BOX_NV: uint = 0x908A;
export def PATH_PROJECTION_MATRIX_NV: uint = 0x0BA7;
export def PATH_PROJECTION_NV: uint = 0x1701;
export def PATH_PROJECTION_STACK_DEPTH_NV: uint = 0x0BA4;
export def PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV: uint = 0x90BD;
export def PATH_STENCIL_DEPTH_OFFSET_UNITS_NV: uint = 0x90BE;
export def PATH_STENCIL_FUNC_NV: uint = 0x90B7;
export def PATH_STENCIL_REF_NV: uint = 0x90B8;
export def PATH_STENCIL_VALUE_MASK_NV: uint = 0x90B9;
export def PATH_STROKE_BOUNDING_BOX_NV: uint = 0x90A2;
export def PATH_STROKE_COVER_MODE_NV: uint = 0x9083;
export def PATH_STROKE_MASK_NV: uint = 0x9084;
export def PATH_STROKE_WIDTH_NV: uint = 0x9075;
export def PATH_TERMINAL_DASH_CAP_NV: uint = 0x907D;
export def PATH_TERMINAL_END_CAP_NV: uint = 0x9078;
export def PATH_TRANSPOSE_MODELVIEW_MATRIX_NV: uint = 0x84E3;
export def PATH_TRANSPOSE_PROJECTION_MATRIX_NV: uint = 0x84E4;
export def PERCENTAGE_AMD: uint = 0x8BC3;
export def PERFMON_RESULT_AMD: uint = 0x8BC6;
export def PERFMON_RESULT_AVAILABLE_AMD: uint = 0x8BC4;
export def PERFMON_RESULT_SIZE_AMD: uint = 0x8BC5;
export def PERFORMANCE_MONITOR_AMD: uint = 0x9152;
export def PERFQUERY_COUNTER_DATA_BOOL32_INTEL: uint = 0x94FC;
export def PERFQUERY_COUNTER_DATA_DOUBLE_INTEL: uint = 0x94FB;
export def PERFQUERY_COUNTER_DATA_FLOAT_INTEL: uint = 0x94FA;
export def PERFQUERY_COUNTER_DATA_UINT32_INTEL: uint = 0x94F8;
export def PERFQUERY_COUNTER_DATA_UINT64_INTEL: uint = 0x94F9;
export def PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL: uint = 0x94FF;
export def PERFQUERY_COUNTER_DURATION_NORM_INTEL: uint = 0x94F1;
export def PERFQUERY_COUNTER_DURATION_RAW_INTEL: uint = 0x94F2;
export def PERFQUERY_COUNTER_EVENT_INTEL: uint = 0x94F0;
export def PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL: uint = 0x94FE;
export def PERFQUERY_COUNTER_RAW_INTEL: uint = 0x94F4;
export def PERFQUERY_COUNTER_THROUGHPUT_INTEL: uint = 0x94F3;
export def PERFQUERY_COUNTER_TIMESTAMP_INTEL: uint = 0x94F5;
export def PERFQUERY_DONOT_FLUSH_INTEL: uint = 0x83F9;
export def PERFQUERY_FLUSH_INTEL: uint = 0x83FA;
export def PERFQUERY_GLOBAL_CONTEXT_INTEL: uint = 0x00000001;
export def PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL: uint = 0x9500;
export def PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL: uint = 0x94FD;
export def PERFQUERY_SINGLE_CONTEXT_INTEL: uint = 0x00000000;
export def PERFQUERY_WAIT_INTEL: uint = 0x83FB;
export def PERSPECTIVE_CORRECTION_HINT: uint = 0x0C50;
export def PERTURB_EXT: uint = 0x85AE;
export def PER_GPU_STORAGE_BIT_NV: uint = 0x0800;
export def PER_GPU_STORAGE_NV: uint = 0x9548;
export def PER_STAGE_CONSTANTS_NV: uint = 0x8535;
export def PHONG_HINT_WIN: uint = 0x80EB;
export def PHONG_WIN: uint = 0x80EA;
export def PINLIGHT_NV: uint = 0x92A8;
export def PIXELS_PER_SAMPLE_PATTERN_X_AMD: uint = 0x91AE;
export def PIXELS_PER_SAMPLE_PATTERN_Y_AMD: uint = 0x91AF;
export def PIXEL_BUFFER_BARRIER_BIT: uint = 0x00000080;
export def PIXEL_BUFFER_BARRIER_BIT_EXT: uint = 0x00000080;
export def PIXEL_COUNTER_BITS_NV: uint = 0x8864;
export def PIXEL_COUNT_AVAILABLE_NV: uint = 0x8867;
export def PIXEL_COUNT_NV: uint = 0x8866;
export def PIXEL_CUBIC_WEIGHT_EXT: uint = 0x8333;
export def PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS: uint = 0x8355;
export def PIXEL_FRAGMENT_RGB_SOURCE_SGIS: uint = 0x8354;
export def PIXEL_GROUP_COLOR_SGIS: uint = 0x8356;
export def PIXEL_MAG_FILTER_EXT: uint = 0x8331;
export def PIXEL_MAP_A_TO_A: uint = 0x0C79;
export def PIXEL_MAP_A_TO_A_SIZE: uint = 0x0CB9;
export def PIXEL_MAP_B_TO_B: uint = 0x0C78;
export def PIXEL_MAP_B_TO_B_SIZE: uint = 0x0CB8;
export def PIXEL_MAP_G_TO_G: uint = 0x0C77;
export def PIXEL_MAP_G_TO_G_SIZE: uint = 0x0CB7;
export def PIXEL_MAP_I_TO_A: uint = 0x0C75;
export def PIXEL_MAP_I_TO_A_SIZE: uint = 0x0CB5;
export def PIXEL_MAP_I_TO_B: uint = 0x0C74;
export def PIXEL_MAP_I_TO_B_SIZE: uint = 0x0CB4;
export def PIXEL_MAP_I_TO_G: uint = 0x0C73;
export def PIXEL_MAP_I_TO_G_SIZE: uint = 0x0CB3;
export def PIXEL_MAP_I_TO_I: uint = 0x0C70;
export def PIXEL_MAP_I_TO_I_SIZE: uint = 0x0CB0;
export def PIXEL_MAP_I_TO_R: uint = 0x0C72;
export def PIXEL_MAP_I_TO_R_SIZE: uint = 0x0CB2;
export def PIXEL_MAP_R_TO_R: uint = 0x0C76;
export def PIXEL_MAP_R_TO_R_SIZE: uint = 0x0CB6;
export def PIXEL_MAP_S_TO_S: uint = 0x0C71;
export def PIXEL_MAP_S_TO_S_SIZE: uint = 0x0CB1;
export def PIXEL_MIN_FILTER_EXT: uint = 0x8332;
export def PIXEL_MODE_BIT: uint = 0x00000020;
export def PIXEL_PACK_BUFFER: uint = 0x88EB;
export def PIXEL_PACK_BUFFER_ARB: uint = 0x88EB;
export def PIXEL_PACK_BUFFER_BINDING: uint = 0x88ED;
export def PIXEL_PACK_BUFFER_BINDING_ARB: uint = 0x88ED;
export def PIXEL_PACK_BUFFER_BINDING_EXT: uint = 0x88ED;
export def PIXEL_PACK_BUFFER_EXT: uint = 0x88EB;
export def PIXEL_SUBSAMPLE_2424_SGIX: uint = 0x85A3;
export def PIXEL_SUBSAMPLE_4242_SGIX: uint = 0x85A4;
export def PIXEL_SUBSAMPLE_4444_SGIX: uint = 0x85A2;
export def PIXEL_TEXTURE_SGIS: uint = 0x8353;
export def PIXEL_TEX_GEN_MODE_SGIX: uint = 0x832B;
export def PIXEL_TEX_GEN_SGIX: uint = 0x8139;
export def PIXEL_TILE_BEST_ALIGNMENT_SGIX: uint = 0x813E;
export def PIXEL_TILE_CACHE_INCREMENT_SGIX: uint = 0x813F;
export def PIXEL_TILE_CACHE_SIZE_SGIX: uint = 0x8145;
export def PIXEL_TILE_GRID_DEPTH_SGIX: uint = 0x8144;
export def PIXEL_TILE_GRID_HEIGHT_SGIX: uint = 0x8143;
export def PIXEL_TILE_GRID_WIDTH_SGIX: uint = 0x8142;
export def PIXEL_TILE_HEIGHT_SGIX: uint = 0x8141;
export def PIXEL_TILE_WIDTH_SGIX: uint = 0x8140;
export def PIXEL_TRANSFORM_2D_EXT: uint = 0x8330;
export def PIXEL_TRANSFORM_2D_MATRIX_EXT: uint = 0x8338;
export def PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT: uint = 0x8336;
export def PIXEL_UNPACK_BUFFER: uint = 0x88EC;
export def PIXEL_UNPACK_BUFFER_ARB: uint = 0x88EC;
export def PIXEL_UNPACK_BUFFER_BINDING: uint = 0x88EF;
export def PIXEL_UNPACK_BUFFER_BINDING_ARB: uint = 0x88EF;
export def PIXEL_UNPACK_BUFFER_BINDING_EXT: uint = 0x88EF;
export def PIXEL_UNPACK_BUFFER_EXT: uint = 0x88EC;
export def PLUS_CLAMPED_ALPHA_NV: uint = 0x92B2;
export def PLUS_CLAMPED_NV: uint = 0x92B1;
export def PLUS_DARKER_NV: uint = 0x9292;
export def PLUS_NV: uint = 0x9291;
export def PN_TRIANGLES_ATI: uint = 0x87F0;
export def PN_TRIANGLES_NORMAL_MODE_ATI: uint = 0x87F3;
export def PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI: uint = 0x87F7;
export def PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI: uint = 0x87F8;
export def PN_TRIANGLES_POINT_MODE_ATI: uint = 0x87F2;
export def PN_TRIANGLES_POINT_MODE_CUBIC_ATI: uint = 0x87F6;
export def PN_TRIANGLES_POINT_MODE_LINEAR_ATI: uint = 0x87F5;
export def PN_TRIANGLES_TESSELATION_LEVEL_ATI: uint = 0x87F4;
export def POINT: uint = 0x1B00;
export def POINTS: uint = 0x0000;
export def POINT_BIT: uint = 0x00000002;
export def POINT_DISTANCE_ATTENUATION: uint = 0x8129;
export def POINT_DISTANCE_ATTENUATION_ARB: uint = 0x8129;
export def POINT_FADE_THRESHOLD_SIZE: uint = 0x8128;
export def POINT_FADE_THRESHOLD_SIZE_ARB: uint = 0x8128;
export def POINT_FADE_THRESHOLD_SIZE_EXT: uint = 0x8128;
export def POINT_FADE_THRESHOLD_SIZE_SGIS: uint = 0x8128;
export def POINT_SIZE: uint = 0x0B11;
export def POINT_SIZE_GRANULARITY: uint = 0x0B13;
export def POINT_SIZE_MAX: uint = 0x8127;
export def POINT_SIZE_MAX_ARB: uint = 0x8127;
export def POINT_SIZE_MAX_EXT: uint = 0x8127;
export def POINT_SIZE_MAX_SGIS: uint = 0x8127;
export def POINT_SIZE_MIN: uint = 0x8126;
export def POINT_SIZE_MIN_ARB: uint = 0x8126;
export def POINT_SIZE_MIN_EXT: uint = 0x8126;
export def POINT_SIZE_MIN_SGIS: uint = 0x8126;
export def POINT_SIZE_RANGE: uint = 0x0B12;
export def POINT_SMOOTH: uint = 0x0B10;
export def POINT_SMOOTH_HINT: uint = 0x0C51;
export def POINT_SPRITE: uint = 0x8861;
export def POINT_SPRITE_ARB: uint = 0x8861;
export def POINT_SPRITE_COORD_ORIGIN: uint = 0x8CA0;
export def POINT_SPRITE_NV: uint = 0x8861;
export def POINT_SPRITE_R_MODE_NV: uint = 0x8863;
export def POINT_TOKEN: uint = 0x0701;
export def POLYGON: uint = 0x0009;
export def POLYGON_BIT: uint = 0x00000008;
export def POLYGON_MODE: uint = 0x0B40;
export def POLYGON_OFFSET_BIAS_EXT: uint = 0x8039;
export def POLYGON_OFFSET_CLAMP: uint = 0x8E1B;
export def POLYGON_OFFSET_CLAMP_EXT: uint = 0x8E1B;
export def POLYGON_OFFSET_COMMAND_NV: uint = 0x000E;
export def POLYGON_OFFSET_EXT: uint = 0x8037;
export def POLYGON_OFFSET_FACTOR: uint = 0x8038;
export def POLYGON_OFFSET_FACTOR_EXT: uint = 0x8038;
export def POLYGON_OFFSET_FILL: uint = 0x8037;
export def POLYGON_OFFSET_LINE: uint = 0x2A02;
export def POLYGON_OFFSET_POINT: uint = 0x2A01;
export def POLYGON_OFFSET_UNITS: uint = 0x2A00;
export def POLYGON_SMOOTH: uint = 0x0B41;
export def POLYGON_SMOOTH_HINT: uint = 0x0C53;
export def POLYGON_STIPPLE: uint = 0x0B42;
export def POLYGON_STIPPLE_BIT: uint = 0x00000010;
export def POLYGON_TOKEN: uint = 0x0703;
export def POSITION: uint = 0x1203;
export def POST_COLOR_MATRIX_ALPHA_BIAS_SGI: uint = 0x80BB;
export def POST_COLOR_MATRIX_ALPHA_SCALE_SGI: uint = 0x80B7;
export def POST_COLOR_MATRIX_BLUE_BIAS_SGI: uint = 0x80BA;
export def POST_COLOR_MATRIX_BLUE_SCALE_SGI: uint = 0x80B6;
export def POST_COLOR_MATRIX_COLOR_TABLE_SGI: uint = 0x80D2;
export def POST_COLOR_MATRIX_GREEN_BIAS_SGI: uint = 0x80B9;
export def POST_COLOR_MATRIX_GREEN_SCALE_SGI: uint = 0x80B5;
export def POST_COLOR_MATRIX_RED_BIAS_SGI: uint = 0x80B8;
export def POST_COLOR_MATRIX_RED_SCALE_SGI: uint = 0x80B4;
export def POST_CONVOLUTION_ALPHA_BIAS_EXT: uint = 0x8023;
export def POST_CONVOLUTION_ALPHA_SCALE_EXT: uint = 0x801F;
export def POST_CONVOLUTION_BLUE_BIAS_EXT: uint = 0x8022;
export def POST_CONVOLUTION_BLUE_SCALE_EXT: uint = 0x801E;
export def POST_CONVOLUTION_COLOR_TABLE_SGI: uint = 0x80D1;
export def POST_CONVOLUTION_GREEN_BIAS_EXT: uint = 0x8021;
export def POST_CONVOLUTION_GREEN_SCALE_EXT: uint = 0x801D;
export def POST_CONVOLUTION_RED_BIAS_EXT: uint = 0x8020;
export def POST_CONVOLUTION_RED_SCALE_EXT: uint = 0x801C;
export def POST_IMAGE_TRANSFORM_COLOR_TABLE_HP: uint = 0x8162;
export def POST_TEXTURE_FILTER_BIAS_RANGE_SGIX: uint = 0x817B;
export def POST_TEXTURE_FILTER_BIAS_SGIX: uint = 0x8179;
export def POST_TEXTURE_FILTER_SCALE_RANGE_SGIX: uint = 0x817C;
export def POST_TEXTURE_FILTER_SCALE_SGIX: uint = 0x817A;
export def PREFER_DOUBLEBUFFER_HINT_PGI: uint = 0x1A1F8;
export def PRESENT_DURATION_NV: uint = 0x8E2B;
export def PRESENT_TIME_NV: uint = 0x8E2A;
export def PRESERVE_ATI: uint = 0x8762;
export def PREVIOUS: uint = 0x8578;
export def PREVIOUS_ARB: uint = 0x8578;
export def PREVIOUS_EXT: uint = 0x8578;
export def PREVIOUS_TEXTURE_INPUT_NV: uint = 0x86E4;
export def PRIMARY_COLOR: uint = 0x8577;
export def PRIMARY_COLOR_ARB: uint = 0x8577;
export def PRIMARY_COLOR_EXT: uint = 0x8577;
export def PRIMARY_COLOR_NV: uint = 0x852C;
export def PRIMITIVES_GENERATED_EXT: uint = 0x8C87;
export def PRIMITIVES_GENERATED_NV: uint = 0x8C87;
export def PRIMITIVES_SUBMITTED: uint = 0x82EF;
export def PRIMITIVES_SUBMITTED_ARB: uint = 0x82EF;
export def PRIMITIVE_BOUNDING_BOX_ARB: uint = 0x92BE;
export def PRIMITIVE_ID_NV: uint = 0x8C7C;
export def PRIMITIVE_RESTART_FIXED_INDEX: uint = 0x8D69;
export def PRIMITIVE_RESTART_INDEX_NV: uint = 0x8559;
export def PRIMITIVE_RESTART_NV: uint = 0x8558;
export def PROGRAM: uint = 0x82E2;
export def PROGRAMMABLE_SAMPLE_LOCATION_ARB: uint = 0x9341;
export def PROGRAMMABLE_SAMPLE_LOCATION_NV: uint = 0x9341;
export def PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB: uint = 0x9340;
export def PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV: uint = 0x9340;
export def PROGRAM_ADDRESS_REGISTERS_ARB: uint = 0x88B0;
export def PROGRAM_ALU_INSTRUCTIONS_ARB: uint = 0x8805;
export def PROGRAM_ATTRIBS_ARB: uint = 0x88AC;
export def PROGRAM_ATTRIB_COMPONENTS_NV: uint = 0x8906;
export def PROGRAM_BINARY_FORMATS: uint = 0x87FF;
export def PROGRAM_BINARY_FORMAT_MESA: uint = 0x875F;
export def PROGRAM_BINARY_LENGTH: uint = 0x8741;
export def PROGRAM_BINARY_RETRIEVABLE_HINT: uint = 0x8257;
export def PROGRAM_BINDING_ARB: uint = 0x8677;
export def PROGRAM_ERROR_POSITION_ARB: uint = 0x864B;
export def PROGRAM_ERROR_POSITION_NV: uint = 0x864B;
export def PROGRAM_ERROR_STRING_ARB: uint = 0x8874;
export def PROGRAM_ERROR_STRING_NV: uint = 0x8874;
export def PROGRAM_FORMAT_ARB: uint = 0x8876;
export def PROGRAM_FORMAT_ASCII_ARB: uint = 0x8875;
export def PROGRAM_INPUT: uint = 0x92E3;
export def PROGRAM_INSTRUCTIONS_ARB: uint = 0x88A0;
export def PROGRAM_LENGTH_ARB: uint = 0x8627;
export def PROGRAM_LENGTH_NV: uint = 0x8627;
export def PROGRAM_MATRIX_EXT: uint = 0x8E2D;
export def PROGRAM_MATRIX_STACK_DEPTH_EXT: uint = 0x8E2F;
export def PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB: uint = 0x88B2;
export def PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB: uint = 0x8808;
export def PROGRAM_NATIVE_ATTRIBS_ARB: uint = 0x88AE;
export def PROGRAM_NATIVE_INSTRUCTIONS_ARB: uint = 0x88A2;
export def PROGRAM_NATIVE_PARAMETERS_ARB: uint = 0x88AA;
export def PROGRAM_NATIVE_TEMPORARIES_ARB: uint = 0x88A6;
export def PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB: uint = 0x880A;
export def PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB: uint = 0x8809;
export def PROGRAM_OBJECT_ARB: uint = 0x8B40;
export def PROGRAM_OBJECT_EXT: uint = 0x8B40;
export def PROGRAM_OUTPUT: uint = 0x92E4;
export def PROGRAM_PARAMETERS_ARB: uint = 0x88A8;
export def PROGRAM_PARAMETER_NV: uint = 0x8644;
export def PROGRAM_PIPELINE: uint = 0x82E4;
export def PROGRAM_PIPELINE_BINDING: uint = 0x825A;
export def PROGRAM_PIPELINE_OBJECT_EXT: uint = 0x8A4F;
export def PROGRAM_POINT_SIZE_ARB: uint = 0x8642;
export def PROGRAM_POINT_SIZE_EXT: uint = 0x8642;
export def PROGRAM_RESIDENT_NV: uint = 0x8647;
export def PROGRAM_RESULT_COMPONENTS_NV: uint = 0x8907;
export def PROGRAM_SEPARABLE: uint = 0x8258;
export def PROGRAM_STRING_ARB: uint = 0x8628;
export def PROGRAM_STRING_NV: uint = 0x8628;
export def PROGRAM_TARGET_NV: uint = 0x8646;
export def PROGRAM_TEMPORARIES_ARB: uint = 0x88A4;
export def PROGRAM_TEX_INDIRECTIONS_ARB: uint = 0x8807;
export def PROGRAM_TEX_INSTRUCTIONS_ARB: uint = 0x8806;
export def PROGRAM_UNDER_NATIVE_LIMITS_ARB: uint = 0x88B6;
export def PROJECTION: uint = 0x1701;
export def PROJECTION_MATRIX: uint = 0x0BA7;
export def PROJECTION_STACK_DEPTH: uint = 0x0BA4;
export def PROTECTED_MEMORY_OBJECT_EXT: uint = 0x959B;
export def PROVOKING_VERTEX: uint = 0x8E4F;
export def PROVOKING_VERTEX_EXT: uint = 0x8E4F;
export def PROXY_COLOR_TABLE_SGI: uint = 0x80D3;
export def PROXY_HISTOGRAM_EXT: uint = 0x8025;
export def PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI: uint = 0x80D5;
export def PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI: uint = 0x80D4;
export def PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP: uint = 0x8163;
export def PROXY_TEXTURE_1D: uint = 0x8063;
export def PROXY_TEXTURE_1D_ARRAY_EXT: uint = 0x8C19;
export def PROXY_TEXTURE_1D_EXT: uint = 0x8063;
export def PROXY_TEXTURE_1D_STACK_MESAX: uint = 0x875B;
export def PROXY_TEXTURE_2D: uint = 0x8064;
export def PROXY_TEXTURE_2D_ARRAY_EXT: uint = 0x8C1B;
export def PROXY_TEXTURE_2D_EXT: uint = 0x8064;
export def PROXY_TEXTURE_2D_MULTISAMPLE: uint = 0x9101;
export def PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY: uint = 0x9103;
export def PROXY_TEXTURE_2D_STACK_MESAX: uint = 0x875C;
export def PROXY_TEXTURE_3D: uint = 0x8070;
export def PROXY_TEXTURE_3D_EXT: uint = 0x8070;
export def PROXY_TEXTURE_4D_SGIS: uint = 0x8135;
export def PROXY_TEXTURE_COLOR_TABLE_SGI: uint = 0x80BD;
export def PROXY_TEXTURE_CUBE_MAP: uint = 0x851B;
export def PROXY_TEXTURE_CUBE_MAP_ARB: uint = 0x851B;
export def PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB: uint = 0x900B;
export def PROXY_TEXTURE_CUBE_MAP_EXT: uint = 0x851B;
export def PROXY_TEXTURE_RECTANGLE_ARB: uint = 0x84F7;
export def PROXY_TEXTURE_RECTANGLE_NV: uint = 0x84F7;
export def PURGEABLE_APPLE: uint = 0x8A1D;
export def PURGED_CONTEXT_RESET_NV: uint = 0x92BB;
export def Q: uint = 0x2003;
export def QUADRATIC_ATTENUATION: uint = 0x1209;
export def QUADRATIC_CURVE_TO_NV: uint = 0x0A;
export def QUADS: uint = 0x0007;
export def QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION: uint = 0x8E4C;
export def QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT: uint = 0x8E4C;
export def QUAD_ALPHA4_SGIS: uint = 0x811E;
export def QUAD_ALPHA8_SGIS: uint = 0x811F;
export def QUAD_INTENSITY4_SGIS: uint = 0x8122;
export def QUAD_INTENSITY8_SGIS: uint = 0x8123;
export def QUAD_LUMINANCE4_SGIS: uint = 0x8120;
export def QUAD_LUMINANCE8_SGIS: uint = 0x8121;
export def QUAD_MESH_SUN: uint = 0x8614;
export def QUAD_STRIP: uint = 0x0008;
export def QUAD_TEXTURE_SELECT_SGIS: uint = 0x8125;
export def QUARTER_BIT_ATI: uint = 0x00000010;
export def QUERY: uint = 0x82E3;
export def QUERY_ALL_EVENT_BITS_AMD: uint = 0xFFFFFFFF;
export def QUERY_BUFFER: uint = 0x9192;
export def QUERY_BUFFER_AMD: uint = 0x9192;
export def QUERY_BUFFER_BARRIER_BIT: uint = 0x00008000;
export def QUERY_BUFFER_BINDING: uint = 0x9193;
export def QUERY_BUFFER_BINDING_AMD: uint = 0x9193;
export def QUERY_BY_REGION_NO_WAIT_INVERTED: uint = 0x8E1A;
export def QUERY_BY_REGION_NO_WAIT_NV: uint = 0x8E16;
export def QUERY_BY_REGION_WAIT_INVERTED: uint = 0x8E19;
export def QUERY_BY_REGION_WAIT_NV: uint = 0x8E15;
export def QUERY_COUNTER_BITS: uint = 0x8864;
export def QUERY_COUNTER_BITS_ARB: uint = 0x8864;
export def QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD: uint = 0x00000008;
export def QUERY_DEPTH_FAIL_EVENT_BIT_AMD: uint = 0x00000002;
export def QUERY_DEPTH_PASS_EVENT_BIT_AMD: uint = 0x00000001;
export def QUERY_NO_WAIT_INVERTED: uint = 0x8E18;
export def QUERY_NO_WAIT_NV: uint = 0x8E14;
export def QUERY_OBJECT_AMD: uint = 0x9153;
export def QUERY_OBJECT_EXT: uint = 0x9153;
export def QUERY_RESOURCE_BUFFEROBJECT_NV: uint = 0x9547;
export def QUERY_RESOURCE_MEMTYPE_VIDMEM_NV: uint = 0x9542;
export def QUERY_RESOURCE_RENDERBUFFER_NV: uint = 0x9546;
export def QUERY_RESOURCE_SYS_RESERVED_NV: uint = 0x9544;
export def QUERY_RESOURCE_TEXTURE_NV: uint = 0x9545;
export def QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV: uint = 0x9540;
export def QUERY_RESULT: uint = 0x8866;
export def QUERY_RESULT_ARB: uint = 0x8866;
export def QUERY_RESULT_AVAILABLE: uint = 0x8867;
export def QUERY_RESULT_AVAILABLE_ARB: uint = 0x8867;
export def QUERY_RESULT_NO_WAIT: uint = 0x9194;
export def QUERY_RESULT_NO_WAIT_AMD: uint = 0x9194;
export def QUERY_STENCIL_FAIL_EVENT_BIT_AMD: uint = 0x00000004;
export def QUERY_TARGET: uint = 0x82EA;
export def QUERY_WAIT_INVERTED: uint = 0x8E17;
export def QUERY_WAIT_NV: uint = 0x8E13;
export def R: uint = 0x2002;
export def R11F_G11F_B10F_EXT: uint = 0x8C3A;
export def R16: uint = 0x822A;
export def R16F: uint = 0x822D;
export def R16F_EXT: uint = 0x822D;
export def R16I: uint = 0x8233;
export def R16UI: uint = 0x8234;
export def R16_SNORM: uint = 0x8F98;
export def R1UI_C3F_V3F_SUN: uint = 0x85C6;
export def R1UI_C4F_N3F_V3F_SUN: uint = 0x85C8;
export def R1UI_C4UB_V3F_SUN: uint = 0x85C5;
export def R1UI_N3F_V3F_SUN: uint = 0x85C7;
export def R1UI_T2F_C4F_N3F_V3F_SUN: uint = 0x85CB;
export def R1UI_T2F_N3F_V3F_SUN: uint = 0x85CA;
export def R1UI_T2F_V3F_SUN: uint = 0x85C9;
export def R1UI_V3F_SUN: uint = 0x85C4;
export def R32F: uint = 0x822E;
export def R32F_EXT: uint = 0x822E;
export def R32I: uint = 0x8235;
export def R32UI: uint = 0x8236;
export def R3_G3_B2: uint = 0x2A10;
export def R8: uint = 0x8229;
export def R8I: uint = 0x8231;
export def R8UI: uint = 0x8232;
export def R8_EXT: uint = 0x8229;
export def R8_SNORM: uint = 0x8F94;
export def RASTERIZER_DISCARD_EXT: uint = 0x8C89;
export def RASTERIZER_DISCARD_NV: uint = 0x8C89;
export def RASTER_FIXED_SAMPLE_LOCATIONS_EXT: uint = 0x932A;
export def RASTER_MULTISAMPLE_EXT: uint = 0x9327;
export def RASTER_POSITION_UNCLIPPED_IBM: uint = 0x19262;
export def RASTER_SAMPLES_EXT: uint = 0x9328;
export def READ_BUFFER: uint = 0x0C02;
export def READ_FRAMEBUFFER: uint = 0x8CA8;
export def READ_FRAMEBUFFER_BINDING: uint = 0x8CAA;
export def READ_FRAMEBUFFER_BINDING_EXT: uint = 0x8CAA;
export def READ_FRAMEBUFFER_EXT: uint = 0x8CA8;
export def READ_ONLY: uint = 0x88B8;
export def READ_ONLY_ARB: uint = 0x88B8;
export def READ_PIXELS: uint = 0x828C;
export def READ_PIXELS_FORMAT: uint = 0x828D;
export def READ_PIXELS_TYPE: uint = 0x828E;
export def READ_PIXEL_DATA_RANGE_LENGTH_NV: uint = 0x887B;
export def READ_PIXEL_DATA_RANGE_NV: uint = 0x8879;
export def READ_PIXEL_DATA_RANGE_POINTER_NV: uint = 0x887D;
export def READ_WRITE: uint = 0x88BA;
export def READ_WRITE_ARB: uint = 0x88BA;
export def RECLAIM_MEMORY_HINT_PGI: uint = 0x1A1FE;
export def RECT_NV: uint = 0xF6;
export def RED: uint = 0x1903;
export def REDUCE_EXT: uint = 0x8016;
export def RED_BIAS: uint = 0x0D15;
export def RED_BITS: uint = 0x0D52;
export def RED_BIT_ATI: uint = 0x00000001;
export def RED_INTEGER_EXT: uint = 0x8D94;
export def RED_MAX_CLAMP_INGR: uint = 0x8564;
export def RED_MIN_CLAMP_INGR: uint = 0x8560;
export def RED_NV: uint = 0x1903;
export def RED_SCALE: uint = 0x0D14;
export def RED_SNORM: uint = 0x8F90;
export def REFERENCED_BY_COMPUTE_SHADER: uint = 0x930B;
export def REFERENCED_BY_FRAGMENT_SHADER: uint = 0x930A;
export def REFERENCED_BY_GEOMETRY_SHADER: uint = 0x9309;
export def REFERENCED_BY_MESH_SHADER_NV: uint = 0x95A0;
export def REFERENCED_BY_TASK_SHADER_NV: uint = 0x95A1;
export def REFERENCED_BY_TESS_CONTROL_SHADER: uint = 0x9307;
export def REFERENCED_BY_TESS_EVALUATION_SHADER: uint = 0x9308;
export def REFERENCED_BY_VERTEX_SHADER: uint = 0x9306;
export def REFERENCE_PLANE_EQUATION_SGIX: uint = 0x817E;
export def REFERENCE_PLANE_SGIX: uint = 0x817D;
export def REFLECTION_MAP: uint = 0x8512;
export def REFLECTION_MAP_ARB: uint = 0x8512;
export def REFLECTION_MAP_EXT: uint = 0x8512;
export def REFLECTION_MAP_NV: uint = 0x8512;
export def REGISTER_COMBINERS_NV: uint = 0x8522;
export def REG_0_ATI: uint = 0x8921;
export def REG_10_ATI: uint = 0x892B;
export def REG_11_ATI: uint = 0x892C;
export def REG_12_ATI: uint = 0x892D;
export def REG_13_ATI: uint = 0x892E;
export def REG_14_ATI: uint = 0x892F;
export def REG_15_ATI: uint = 0x8930;
export def REG_16_ATI: uint = 0x8931;
export def REG_17_ATI: uint = 0x8932;
export def REG_18_ATI: uint = 0x8933;
export def REG_19_ATI: uint = 0x8934;
export def REG_1_ATI: uint = 0x8922;
export def REG_20_ATI: uint = 0x8935;
export def REG_21_ATI: uint = 0x8936;
export def REG_22_ATI: uint = 0x8937;
export def REG_23_ATI: uint = 0x8938;
export def REG_24_ATI: uint = 0x8939;
export def REG_25_ATI: uint = 0x893A;
export def REG_26_ATI: uint = 0x893B;
export def REG_27_ATI: uint = 0x893C;
export def REG_28_ATI: uint = 0x893D;
export def REG_29_ATI: uint = 0x893E;
export def REG_2_ATI: uint = 0x8923;
export def REG_30_ATI: uint = 0x893F;
export def REG_31_ATI: uint = 0x8940;
export def REG_3_ATI: uint = 0x8924;
export def REG_4_ATI: uint = 0x8925;
export def REG_5_ATI: uint = 0x8926;
export def REG_6_ATI: uint = 0x8927;
export def REG_7_ATI: uint = 0x8928;
export def REG_8_ATI: uint = 0x8929;
export def REG_9_ATI: uint = 0x892A;
export def RELATIVE_ARC_TO_NV: uint = 0xFF;
export def RELATIVE_CONIC_CURVE_TO_NV: uint = 0x1B;
export def RELATIVE_CUBIC_CURVE_TO_NV: uint = 0x0D;
export def RELATIVE_HORIZONTAL_LINE_TO_NV: uint = 0x07;
export def RELATIVE_LARGE_CCW_ARC_TO_NV: uint = 0x17;
export def RELATIVE_LARGE_CW_ARC_TO_NV: uint = 0x19;
export def RELATIVE_LINE_TO_NV: uint = 0x05;
export def RELATIVE_MOVE_TO_NV: uint = 0x03;
export def RELATIVE_QUADRATIC_CURVE_TO_NV: uint = 0x0B;
export def RELATIVE_RECT_NV: uint = 0xF7;
export def RELATIVE_ROUNDED_RECT2_NV: uint = 0xEB;
export def RELATIVE_ROUNDED_RECT4_NV: uint = 0xED;
export def RELATIVE_ROUNDED_RECT8_NV: uint = 0xEF;
export def RELATIVE_ROUNDED_RECT_NV: uint = 0xE9;
export def RELATIVE_SMALL_CCW_ARC_TO_NV: uint = 0x13;
export def RELATIVE_SMALL_CW_ARC_TO_NV: uint = 0x15;
export def RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV: uint = 0x11;
export def RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV: uint = 0x0F;
export def RELATIVE_VERTICAL_LINE_TO_NV: uint = 0x09;
export def RELEASED_APPLE: uint = 0x8A19;
export def RENDER: uint = 0x1C00;
export def RENDERBUFFER: uint = 0x8D41;
export def RENDERBUFFER_ALPHA_SIZE: uint = 0x8D53;
export def RENDERBUFFER_ALPHA_SIZE_EXT: uint = 0x8D53;
export def RENDERBUFFER_BINDING: uint = 0x8CA7;
export def RENDERBUFFER_BINDING_EXT: uint = 0x8CA7;
export def RENDERBUFFER_BLUE_SIZE: uint = 0x8D52;
export def RENDERBUFFER_BLUE_SIZE_EXT: uint = 0x8D52;
export def RENDERBUFFER_COLOR_SAMPLES_NV: uint = 0x8E10;
export def RENDERBUFFER_COVERAGE_SAMPLES_NV: uint = 0x8CAB;
export def RENDERBUFFER_DEPTH_SIZE: uint = 0x8D54;
export def RENDERBUFFER_DEPTH_SIZE_EXT: uint = 0x8D54;
export def RENDERBUFFER_EXT: uint = 0x8D41;
export def RENDERBUFFER_FREE_MEMORY_ATI: uint = 0x87FD;
export def RENDERBUFFER_GREEN_SIZE: uint = 0x8D51;
export def RENDERBUFFER_GREEN_SIZE_EXT: uint = 0x8D51;
export def RENDERBUFFER_HEIGHT: uint = 0x8D43;
export def RENDERBUFFER_HEIGHT_EXT: uint = 0x8D43;
export def RENDERBUFFER_INTERNAL_FORMAT: uint = 0x8D44;
export def RENDERBUFFER_INTERNAL_FORMAT_EXT: uint = 0x8D44;
export def RENDERBUFFER_RED_SIZE: uint = 0x8D50;
export def RENDERBUFFER_RED_SIZE_EXT: uint = 0x8D50;
export def RENDERBUFFER_SAMPLES: uint = 0x8CAB;
export def RENDERBUFFER_SAMPLES_EXT: uint = 0x8CAB;
export def RENDERBUFFER_STENCIL_SIZE: uint = 0x8D55;
export def RENDERBUFFER_STENCIL_SIZE_EXT: uint = 0x8D55;
export def RENDERBUFFER_STORAGE_SAMPLES_AMD: uint = 0x91B2;
export def RENDERBUFFER_WIDTH: uint = 0x8D42;
export def RENDERBUFFER_WIDTH_EXT: uint = 0x8D42;
export def RENDERER: uint = 0x1F01;
export def RENDER_GPU_MASK_NV: uint = 0x9558;
export def RENDER_MODE: uint = 0x0C40;
export def REPEAT: uint = 0x2901;
export def REPLACE: uint = 0x1E01;
export def REPLACEMENT_CODE_ARRAY_POINTER_SUN: uint = 0x85C3;
export def REPLACEMENT_CODE_ARRAY_STRIDE_SUN: uint = 0x85C2;
export def REPLACEMENT_CODE_ARRAY_SUN: uint = 0x85C0;
export def REPLACEMENT_CODE_ARRAY_TYPE_SUN: uint = 0x85C1;
export def REPLACEMENT_CODE_SUN: uint = 0x81D8;
export def REPLACE_EXT: uint = 0x8062;
export def REPLACE_MIDDLE_SUN: uint = 0x0002;
export def REPLACE_OLDEST_SUN: uint = 0x0003;
export def REPLACE_VALUE_AMD: uint = 0x874B;
export def REPLICATE_BORDER_HP: uint = 0x8153;
export def REPRESENTATIVE_FRAGMENT_TEST_NV: uint = 0x937F;
export def RESAMPLE_AVERAGE_OML: uint = 0x8988;
export def RESAMPLE_DECIMATE_OML: uint = 0x8989;
export def RESAMPLE_DECIMATE_SGIX: uint = 0x8430;
export def RESAMPLE_REPLICATE_OML: uint = 0x8986;
export def RESAMPLE_REPLICATE_SGIX: uint = 0x8433;
export def RESAMPLE_ZERO_FILL_OML: uint = 0x8987;
export def RESAMPLE_ZERO_FILL_SGIX: uint = 0x8434;
export def RESCALE_NORMAL: uint = 0x803A;
export def RESCALE_NORMAL_EXT: uint = 0x803A;
export def RESET_NOTIFICATION_STRATEGY: uint = 0x8256;
export def RESET_NOTIFICATION_STRATEGY_ARB: uint = 0x8256;
export def RESTART_PATH_NV: uint = 0xF0;
export def RESTART_SUN: uint = 0x0001;
export def RETAINED_APPLE: uint = 0x8A1B;
export def RETURN: uint = 0x0102;
export def RG: uint = 0x8227;
export def RG16: uint = 0x822C;
export def RG16F: uint = 0x822F;
export def RG16F_EXT: uint = 0x822F;
export def RG16I: uint = 0x8239;
export def RG16UI: uint = 0x823A;
export def RG16_SNORM: uint = 0x8F99;
export def RG32F: uint = 0x8230;
export def RG32F_EXT: uint = 0x8230;
export def RG32I: uint = 0x823B;
export def RG32UI: uint = 0x823C;
export def RG8: uint = 0x822B;
export def RG8I: uint = 0x8237;
export def RG8UI: uint = 0x8238;
export def RG8_EXT: uint = 0x822B;
export def RG8_SNORM: uint = 0x8F95;
export def RGB: uint = 0x1907;
export def RGB10: uint = 0x8052;
export def RGB10_A2: uint = 0x8059;
export def RGB10_A2UI: uint = 0x906F;
export def RGB10_A2_EXT: uint = 0x8059;
export def RGB10_EXT: uint = 0x8052;
export def RGB12: uint = 0x8053;
export def RGB12_EXT: uint = 0x8053;
export def RGB16: uint = 0x8054;
export def RGB16F_ARB: uint = 0x881B;
export def RGB16F_EXT: uint = 0x881B;
export def RGB16I_EXT: uint = 0x8D89;
export def RGB16UI_EXT: uint = 0x8D77;
export def RGB16_EXT: uint = 0x8054;
export def RGB16_SNORM: uint = 0x8F9A;
export def RGB2_EXT: uint = 0x804E;
export def RGB32F: uint = 0x8815;
export def RGB32F_ARB: uint = 0x8815;
export def RGB32F_EXT: uint = 0x8815;
export def RGB32I: uint = 0x8D83;
export def RGB32I_EXT: uint = 0x8D83;
export def RGB32UI: uint = 0x8D71;
export def RGB32UI_EXT: uint = 0x8D71;
export def RGB4: uint = 0x804F;
export def RGB4_EXT: uint = 0x804F;
export def RGB4_S3TC: uint = 0x83A1;
export def RGB5: uint = 0x8050;
export def RGB565: uint = 0x8D62;
export def RGB5_A1: uint = 0x8057;
export def RGB5_A1_EXT: uint = 0x8057;
export def RGB5_EXT: uint = 0x8050;
export def RGB8: uint = 0x8051;
export def RGB8I_EXT: uint = 0x8D8F;
export def RGB8UI_EXT: uint = 0x8D7D;
export def RGB8_EXT: uint = 0x8051;
export def RGB8_SNORM: uint = 0x8F96;
export def RGB9_E5_EXT: uint = 0x8C3D;
export def RGBA: uint = 0x1908;
export def RGBA12: uint = 0x805A;
export def RGBA12_EXT: uint = 0x805A;
export def RGBA16: uint = 0x805B;
export def RGBA16F_ARB: uint = 0x881A;
export def RGBA16F_EXT: uint = 0x881A;
export def RGBA16I_EXT: uint = 0x8D88;
export def RGBA16UI_EXT: uint = 0x8D76;
export def RGBA16_EXT: uint = 0x805B;
export def RGBA16_SNORM: uint = 0x8F9B;
export def RGBA2: uint = 0x8055;
export def RGBA2_EXT: uint = 0x8055;
export def RGBA32F_ARB: uint = 0x8814;
export def RGBA32F_EXT: uint = 0x8814;
export def RGBA32I_EXT: uint = 0x8D82;
export def RGBA32UI_EXT: uint = 0x8D70;
export def RGBA4: uint = 0x8056;
export def RGBA4_DXT5_S3TC: uint = 0x83A5;
export def RGBA4_EXT: uint = 0x8056;
export def RGBA4_S3TC: uint = 0x83A3;
export def RGBA8: uint = 0x8058;
export def RGBA8I_EXT: uint = 0x8D8E;
export def RGBA8UI: uint = 0x8D7C;
export def RGBA8UI_EXT: uint = 0x8D7C;
export def RGBA8_EXT: uint = 0x8058;
export def RGBA8_SNORM: uint = 0x8F97;
export def RGBA_DXT5_S3TC: uint = 0x83A4;
export def RGBA_FLOAT16_APPLE: uint = 0x881A;
export def RGBA_FLOAT16_ATI: uint = 0x881A;
export def RGBA_FLOAT32_APPLE: uint = 0x8814;
export def RGBA_FLOAT32_ATI: uint = 0x8814;
export def RGBA_FLOAT_MODE_ARB: uint = 0x8820;
export def RGBA_FLOAT_MODE_ATI: uint = 0x8820;
export def RGBA_INTEGER_EXT: uint = 0x8D99;
export def RGBA_INTEGER_MODE_EXT: uint = 0x8D9E;
export def RGBA_MODE: uint = 0x0C31;
export def RGBA_S3TC: uint = 0x83A2;
export def RGBA_SIGNED_COMPONENTS_EXT: uint = 0x8C3C;
export def RGBA_SNORM: uint = 0x8F93;
export def RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV: uint = 0x86D9;
export def RGB_422_APPLE: uint = 0x8A1F;
export def RGB_FLOAT16_APPLE: uint = 0x881B;
export def RGB_FLOAT16_ATI: uint = 0x881B;
export def RGB_FLOAT32_APPLE: uint = 0x8815;
export def RGB_FLOAT32_ATI: uint = 0x8815;
export def RGB_INTEGER_EXT: uint = 0x8D98;
export def RGB_RAW_422_APPLE: uint = 0x8A51;
export def RGB_S3TC: uint = 0x83A0;
export def RGB_SCALE: uint = 0x8573;
export def RGB_SCALE_ARB: uint = 0x8573;
export def RGB_SCALE_EXT: uint = 0x8573;
export def RGB_SNORM: uint = 0x8F92;
export def RG_INTEGER: uint = 0x8228;
export def RG_SNORM: uint = 0x8F91;
export def RIGHT: uint = 0x0407;
export def ROUNDED_RECT2_NV: uint = 0xEA;
export def ROUNDED_RECT4_NV: uint = 0xEC;
export def ROUNDED_RECT8_NV: uint = 0xEE;
export def ROUNDED_RECT_NV: uint = 0xE8;
export def ROUND_NV: uint = 0x90A4;
export def S: uint = 0x2000;
export def SAMPLER: uint = 0x82E6;
export def SAMPLER_1D: uint = 0x8B5D;
export def SAMPLER_1D_ARB: uint = 0x8B5D;
export def SAMPLER_1D_ARRAY_EXT: uint = 0x8DC0;
export def SAMPLER_1D_ARRAY_SHADOW_EXT: uint = 0x8DC3;
export def SAMPLER_1D_SHADOW: uint = 0x8B61;
export def SAMPLER_1D_SHADOW_ARB: uint = 0x8B61;
export def SAMPLER_2D: uint = 0x8B5E;
export def SAMPLER_2D_ARB: uint = 0x8B5E;
export def SAMPLER_2D_ARRAY_EXT: uint = 0x8DC1;
export def SAMPLER_2D_ARRAY_SHADOW_EXT: uint = 0x8DC4;
export def SAMPLER_2D_MULTISAMPLE: uint = 0x9108;
export def SAMPLER_2D_MULTISAMPLE_ARRAY: uint = 0x910B;
export def SAMPLER_2D_RECT_ARB: uint = 0x8B63;
export def SAMPLER_2D_RECT_SHADOW_ARB: uint = 0x8B64;
export def SAMPLER_2D_SHADOW: uint = 0x8B62;
export def SAMPLER_2D_SHADOW_ARB: uint = 0x8B62;
export def SAMPLER_3D: uint = 0x8B5F;
export def SAMPLER_3D_ARB: uint = 0x8B5F;
export def SAMPLER_BINDING: uint = 0x8919;
export def SAMPLER_BUFFER_AMD: uint = 0x9001;
export def SAMPLER_BUFFER_EXT: uint = 0x8DC2;
export def SAMPLER_CUBE: uint = 0x8B60;
export def SAMPLER_CUBE_ARB: uint = 0x8B60;
export def SAMPLER_CUBE_MAP_ARRAY_ARB: uint = 0x900C;
export def SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB: uint = 0x900D;
export def SAMPLER_CUBE_SHADOW_EXT: uint = 0x8DC5;
export def SAMPLER_OBJECT_AMD: uint = 0x9155;
export def SAMPLER_RENDERBUFFER_NV: uint = 0x8E56;
export def SAMPLES: uint = 0x80A9;
export def SAMPLES_3DFX: uint = 0x86B4;
export def SAMPLES_ARB: uint = 0x80A9;
export def SAMPLES_EXT: uint = 0x80A9;
export def SAMPLES_PASSED: uint = 0x8914;
export def SAMPLES_PASSED_ARB: uint = 0x8914;
export def SAMPLES_SGIS: uint = 0x80A9;
export def SAMPLE_ALPHA_TO_COVERAGE: uint = 0x809E;
export def SAMPLE_ALPHA_TO_COVERAGE_ARB: uint = 0x809E;
export def SAMPLE_ALPHA_TO_MASK_EXT: uint = 0x809E;
export def SAMPLE_ALPHA_TO_MASK_SGIS: uint = 0x809E;
export def SAMPLE_ALPHA_TO_ONE: uint = 0x809F;
export def SAMPLE_ALPHA_TO_ONE_ARB: uint = 0x809F;
export def SAMPLE_ALPHA_TO_ONE_EXT: uint = 0x809F;
export def SAMPLE_ALPHA_TO_ONE_SGIS: uint = 0x809F;
export def SAMPLE_BUFFERS: uint = 0x80A8;
export def SAMPLE_BUFFERS_3DFX: uint = 0x86B3;
export def SAMPLE_BUFFERS_ARB: uint = 0x80A8;
export def SAMPLE_BUFFERS_EXT: uint = 0x80A8;
export def SAMPLE_BUFFERS_SGIS: uint = 0x80A8;
export def SAMPLE_COVERAGE: uint = 0x80A0;
export def SAMPLE_COVERAGE_ARB: uint = 0x80A0;
export def SAMPLE_COVERAGE_INVERT: uint = 0x80AB;
export def SAMPLE_COVERAGE_INVERT_ARB: uint = 0x80AB;
export def SAMPLE_COVERAGE_VALUE: uint = 0x80AA;
export def SAMPLE_COVERAGE_VALUE_ARB: uint = 0x80AA;
export def SAMPLE_LOCATION_ARB: uint = 0x8E50;
export def SAMPLE_LOCATION_NV: uint = 0x8E50;
export def SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB: uint = 0x933F;
export def SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV: uint = 0x933F;
export def SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB: uint = 0x933E;
export def SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV: uint = 0x933E;
export def SAMPLE_LOCATION_SUBPIXEL_BITS_ARB: uint = 0x933D;
export def SAMPLE_LOCATION_SUBPIXEL_BITS_NV: uint = 0x933D;
export def SAMPLE_MASK: uint = 0x8E51;
export def SAMPLE_MASK_EXT: uint = 0x80A0;
export def SAMPLE_MASK_INVERT_EXT: uint = 0x80AB;
export def SAMPLE_MASK_INVERT_SGIS: uint = 0x80AB;
export def SAMPLE_MASK_NV: uint = 0x8E51;
export def SAMPLE_MASK_SGIS: uint = 0x80A0;
export def SAMPLE_MASK_VALUE: uint = 0x8E52;
export def SAMPLE_MASK_VALUE_EXT: uint = 0x80AA;
export def SAMPLE_MASK_VALUE_NV: uint = 0x8E52;
export def SAMPLE_MASK_VALUE_SGIS: uint = 0x80AA;
export def SAMPLE_PATTERN_EXT: uint = 0x80AC;
export def SAMPLE_PATTERN_SGIS: uint = 0x80AC;
export def SAMPLE_POSITION: uint = 0x8E50;
export def SAMPLE_POSITION_NV: uint = 0x8E50;
export def SAMPLE_SHADING_ARB: uint = 0x8C36;
export def SATURATE_BIT_ATI: uint = 0x00000040;
export def SCALAR_EXT: uint = 0x87BE;
export def SCALEBIAS_HINT_SGIX: uint = 0x8322;
export def SCALED_RESOLVE_FASTEST_EXT: uint = 0x90BA;
export def SCALED_RESOLVE_NICEST_EXT: uint = 0x90BB;
export def SCALE_BY_FOUR_NV: uint = 0x853F;
export def SCALE_BY_ONE_HALF_NV: uint = 0x8540;
export def SCALE_BY_TWO_NV: uint = 0x853E;
export def SCISSOR_BIT: uint = 0x00080000;
export def SCISSOR_BOX: uint = 0x0C10;
export def SCISSOR_BOX_EXCLUSIVE_NV: uint = 0x9556;
export def SCISSOR_COMMAND_NV: uint = 0x0011;
export def SCISSOR_TEST: uint = 0x0C11;
export def SCISSOR_TEST_EXCLUSIVE_NV: uint = 0x9555;
export def SCREEN_COORDINATES_REND: uint = 0x8490;
export def SCREEN_KHR: uint = 0x9295;
export def SCREEN_NV: uint = 0x9295;
export def SECONDARY_COLOR_ARRAY: uint = 0x845E;
export def SECONDARY_COLOR_ARRAY_ADDRESS_NV: uint = 0x8F27;
export def SECONDARY_COLOR_ARRAY_BUFFER_BINDING: uint = 0x889C;
export def SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB: uint = 0x889C;
export def SECONDARY_COLOR_ARRAY_EXT: uint = 0x845E;
export def SECONDARY_COLOR_ARRAY_LENGTH_NV: uint = 0x8F31;
export def SECONDARY_COLOR_ARRAY_LIST_IBM: uint = 103077;
export def SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM: uint = 103087;
export def SECONDARY_COLOR_ARRAY_POINTER: uint = 0x845D;
export def SECONDARY_COLOR_ARRAY_POINTER_EXT: uint = 0x845D;
export def SECONDARY_COLOR_ARRAY_SIZE: uint = 0x845A;
export def SECONDARY_COLOR_ARRAY_SIZE_EXT: uint = 0x845A;
export def SECONDARY_COLOR_ARRAY_STRIDE: uint = 0x845C;
export def SECONDARY_COLOR_ARRAY_STRIDE_EXT: uint = 0x845C;
export def SECONDARY_COLOR_ARRAY_TYPE: uint = 0x845B;
export def SECONDARY_COLOR_ARRAY_TYPE_EXT: uint = 0x845B;
export def SECONDARY_COLOR_NV: uint = 0x852D;
export def SECONDARY_INTERPOLATOR_ATI: uint = 0x896D;
export def SELECT: uint = 0x1C02;
export def SELECTION_BUFFER_POINTER: uint = 0x0DF3;
export def SELECTION_BUFFER_SIZE: uint = 0x0DF4;
export def SEMAPHORE_TYPE_BINARY_NV: uint = 0x95B4;
export def SEMAPHORE_TYPE_NV: uint = 0x95B3;
export def SEMAPHORE_TYPE_TIMELINE_NV: uint = 0x95B5;
export def SEPARABLE_2D_EXT: uint = 0x8012;
export def SEPARATE_ATTRIBS_EXT: uint = 0x8C8D;
export def SEPARATE_ATTRIBS_NV: uint = 0x8C8D;
export def SEPARATE_SPECULAR_COLOR: uint = 0x81FA;
export def SEPARATE_SPECULAR_COLOR_EXT: uint = 0x81FA;
export def SET: uint = 0x150F;
export def SET_AMD: uint = 0x874A;
export def SHADER: uint = 0x82E1;
export def SHADER_BINARY_FORMATS: uint = 0x8DF8;
export def SHADER_BINARY_FORMAT_SPIR_V: uint = 0x9551;
export def SHADER_BINARY_FORMAT_SPIR_V_ARB: uint = 0x9551;
export def SHADER_COMPILER: uint = 0x8DFA;
export def SHADER_CONSISTENT_NV: uint = 0x86DD;
export def SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV: uint = 0x00000010;
export def SHADER_IMAGE_ACCESS_BARRIER_BIT: uint = 0x00000020;
export def SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT: uint = 0x00000020;
export def SHADER_IMAGE_ATOMIC: uint = 0x82A6;
export def SHADER_IMAGE_LOAD: uint = 0x82A4;
export def SHADER_IMAGE_STORE: uint = 0x82A5;
export def SHADER_INCLUDE_ARB: uint = 0x8DAE;
export def SHADER_OBJECT_ARB: uint = 0x8B48;
export def SHADER_OBJECT_EXT: uint = 0x8B48;
export def SHADER_OPERATION_NV: uint = 0x86DF;
export def SHADER_SOURCE_LENGTH: uint = 0x8B88;
export def SHADER_STORAGE_BARRIER_BIT: uint = 0x00002000;
export def SHADER_STORAGE_BLOCK: uint = 0x92E6;
export def SHADER_STORAGE_BUFFER: uint = 0x90D2;
export def SHADER_STORAGE_BUFFER_BINDING: uint = 0x90D3;
export def SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT: uint = 0x90DF;
export def SHADER_STORAGE_BUFFER_SIZE: uint = 0x90D5;
export def SHADER_STORAGE_BUFFER_START: uint = 0x90D4;
export def SHADER_TYPE: uint = 0x8B4F;
export def SHADE_MODEL: uint = 0x0B54;
export def SHADING_LANGUAGE_VERSION: uint = 0x8B8C;
export def SHADING_LANGUAGE_VERSION_ARB: uint = 0x8B8C;
export def SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV: uint = 0x956F;
export def SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV: uint = 0x9566;
export def SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV: uint = 0x9567;
export def SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV: uint = 0x9568;
export def SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV: uint = 0x9569;
export def SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV: uint = 0x956A;
export def SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV: uint = 0x956B;
export def SHADING_RATE_1_INVOCATION_PER_PIXEL_NV: uint = 0x9565;
export def SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV: uint = 0x956C;
export def SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV: uint = 0x956D;
export def SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV: uint = 0x956E;
export def SHADING_RATE_IMAGE_BINDING_NV: uint = 0x955B;
export def SHADING_RATE_IMAGE_NV: uint = 0x9563;
export def SHADING_RATE_IMAGE_PALETTE_COUNT_NV: uint = 0x95B2;
export def SHADING_RATE_IMAGE_PALETTE_SIZE_NV: uint = 0x955E;
export def SHADING_RATE_IMAGE_PER_PRIMITIVE_NV: uint = 0x95B1;
export def SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV: uint = 0x955D;
export def SHADING_RATE_IMAGE_TEXEL_WIDTH_NV: uint = 0x955C;
export def SHADING_RATE_NO_INVOCATIONS_NV: uint = 0x9564;
export def SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV: uint = 0x95AE;
export def SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV: uint = 0x95AF;
export def SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV: uint = 0x95B0;
export def SHADOW_AMBIENT_SGIX: uint = 0x80BF;
export def SHADOW_ATTENUATION_EXT: uint = 0x834E;
export def SHARED_EDGE_NV: uint = 0xC0;
export def SHARED_TEXTURE_PALETTE_EXT: uint = 0x81FB;
export def SHARPEN_TEXTURE_FUNC_POINTS_SGIS: uint = 0x80B0;
export def SHININESS: uint = 0x1601;
export def SHORT: uint = 0x1402;
export def SIGNALED: uint = 0x9119;
export def SIGNED_ALPHA8_NV: uint = 0x8706;
export def SIGNED_ALPHA_NV: uint = 0x8705;
export def SIGNED_HILO16_NV: uint = 0x86FA;
export def SIGNED_HILO8_NV: uint = 0x885F;
export def SIGNED_HILO_NV: uint = 0x86F9;
export def SIGNED_IDENTITY_NV: uint = 0x853C;
export def SIGNED_INTENSITY8_NV: uint = 0x8708;
export def SIGNED_INTENSITY_NV: uint = 0x8707;
export def SIGNED_LUMINANCE8_ALPHA8_NV: uint = 0x8704;
export def SIGNED_LUMINANCE8_NV: uint = 0x8702;
export def SIGNED_LUMINANCE_ALPHA_NV: uint = 0x8703;
export def SIGNED_LUMINANCE_NV: uint = 0x8701;
export def SIGNED_NEGATE_NV: uint = 0x853D;
export def SIGNED_NORMALIZED: uint = 0x8F9C;
export def SIGNED_RGB8_NV: uint = 0x86FF;
export def SIGNED_RGB8_UNSIGNED_ALPHA8_NV: uint = 0x870D;
export def SIGNED_RGBA8_NV: uint = 0x86FC;
export def SIGNED_RGBA_NV: uint = 0x86FB;
export def SIGNED_RGB_NV: uint = 0x86FE;
export def SIGNED_RGB_UNSIGNED_ALPHA_NV: uint = 0x870C;
export def SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST: uint = 0x82AC;
export def SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE: uint = 0x82AE;
export def SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST: uint = 0x82AD;
export def SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE: uint = 0x82AF;
export def SINGLE_COLOR: uint = 0x81F9;
export def SINGLE_COLOR_EXT: uint = 0x81F9;
export def SKIP_COMPONENTS1_NV: int = -6;
export def SKIP_COMPONENTS2_NV: int = -5;
export def SKIP_COMPONENTS3_NV: int = -4;
export def SKIP_COMPONENTS4_NV: int = -3;
export def SKIP_DECODE_EXT: uint = 0x8A4A;
export def SKIP_MISSING_GLYPH_NV: uint = 0x90A9;
export def SLICE_ACCUM_SUN: uint = 0x85CC;
export def SLUMINANCE: uint = 0x8C46;
export def SLUMINANCE8: uint = 0x8C47;
export def SLUMINANCE8_ALPHA8: uint = 0x8C45;
export def SLUMINANCE8_ALPHA8_EXT: uint = 0x8C45;
export def SLUMINANCE8_EXT: uint = 0x8C47;
export def SLUMINANCE_ALPHA: uint = 0x8C44;
export def SLUMINANCE_ALPHA_EXT: uint = 0x8C44;
export def SLUMINANCE_EXT: uint = 0x8C46;
export def SMALL_CCW_ARC_TO_NV: uint = 0x12;
export def SMALL_CW_ARC_TO_NV: uint = 0x14;
export def SMOOTH: uint = 0x1D01;
export def SMOOTH_CUBIC_CURVE_TO_NV: uint = 0x10;
export def SMOOTH_LINE_WIDTH_GRANULARITY: uint = 0x0B23;
export def SMOOTH_LINE_WIDTH_RANGE: uint = 0x0B22;
export def SMOOTH_POINT_SIZE_GRANULARITY: uint = 0x0B13;
export def SMOOTH_POINT_SIZE_RANGE: uint = 0x0B12;
export def SMOOTH_QUADRATIC_CURVE_TO_NV: uint = 0x0E;
export def SM_COUNT_NV: uint = 0x933B;
export def SOFTLIGHT_KHR: uint = 0x929C;
export def SOFTLIGHT_NV: uint = 0x929C;
export def SOURCE0_ALPHA: uint = 0x8588;
export def SOURCE0_ALPHA_ARB: uint = 0x8588;
export def SOURCE0_ALPHA_EXT: uint = 0x8588;
export def SOURCE0_RGB: uint = 0x8580;
export def SOURCE0_RGB_ARB: uint = 0x8580;
export def SOURCE0_RGB_EXT: uint = 0x8580;
export def SOURCE1_ALPHA: uint = 0x8589;
export def SOURCE1_ALPHA_ARB: uint = 0x8589;
export def SOURCE1_ALPHA_EXT: uint = 0x8589;
export def SOURCE1_RGB: uint = 0x8581;
export def SOURCE1_RGB_ARB: uint = 0x8581;
export def SOURCE1_RGB_EXT: uint = 0x8581;
export def SOURCE2_ALPHA: uint = 0x858A;
export def SOURCE2_ALPHA_ARB: uint = 0x858A;
export def SOURCE2_ALPHA_EXT: uint = 0x858A;
export def SOURCE2_RGB: uint = 0x8582;
export def SOURCE2_RGB_ARB: uint = 0x8582;
export def SOURCE2_RGB_EXT: uint = 0x8582;
export def SOURCE3_ALPHA_NV: uint = 0x858B;
export def SOURCE3_RGB_NV: uint = 0x8583;
export def SPARE0_NV: uint = 0x852E;
export def SPARE0_PLUS_SECONDARY_COLOR_NV: uint = 0x8532;
export def SPARE1_NV: uint = 0x852F;
export def SPARSE_BUFFER_PAGE_SIZE_ARB: uint = 0x82F8;
export def SPARSE_STORAGE_BIT_ARB: uint = 0x0400;
export def SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB: uint = 0x91A9;
export def SPECULAR: uint = 0x1202;
export def SPHERE_MAP: uint = 0x2402;
export def SPIR_V_BINARY: uint = 0x9552;
export def SPIR_V_BINARY_ARB: uint = 0x9552;
export def SPIR_V_EXTENSIONS: uint = 0x9553;
export def SPOT_CUTOFF: uint = 0x1206;
export def SPOT_DIRECTION: uint = 0x1204;
export def SPOT_EXPONENT: uint = 0x1205;
export def SPRITE_AXIAL_SGIX: uint = 0x814C;
export def SPRITE_AXIS_SGIX: uint = 0x814A;
export def SPRITE_EYE_ALIGNED_SGIX: uint = 0x814E;
export def SPRITE_MODE_SGIX: uint = 0x8149;
export def SPRITE_OBJECT_ALIGNED_SGIX: uint = 0x814D;
export def SPRITE_SGIX: uint = 0x8148;
export def SPRITE_TRANSLATION_SGIX: uint = 0x814B;
export def SQUARE_NV: uint = 0x90A3;
export def SR8_EXT: uint = 0x8FBD;
export def SRC0_ALPHA: uint = 0x8588;
export def SRC0_RGB: uint = 0x8580;
export def SRC1_ALPHA: uint = 0x8589;
export def SRC1_COLOR: uint = 0x88F9;
export def SRC1_RGB: uint = 0x8581;
export def SRC2_ALPHA: uint = 0x858A;
export def SRC2_RGB: uint = 0x8582;
export def SRC_ALPHA: uint = 0x0302;
export def SRC_ALPHA_SATURATE: uint = 0x0308;
export def SRC_ATOP_NV: uint = 0x928E;
export def SRC_COLOR: uint = 0x0300;
export def SRC_IN_NV: uint = 0x928A;
export def SRC_NV: uint = 0x9286;
export def SRC_OUT_NV: uint = 0x928C;
export def SRC_OVER_NV: uint = 0x9288;
export def SRG8_EXT: uint = 0x8FBE;
export def SRGB: uint = 0x8C40;
export def SRGB8: uint = 0x8C41;
export def SRGB8_ALPHA8: uint = 0x8C43;
export def SRGB8_ALPHA8_EXT: uint = 0x8C43;
export def SRGB8_EXT: uint = 0x8C41;
export def SRGB_ALPHA: uint = 0x8C42;
export def SRGB_ALPHA_EXT: uint = 0x8C42;
export def SRGB_DECODE_ARB: uint = 0x8299;
export def SRGB_EXT: uint = 0x8C40;
export def SRGB_READ: uint = 0x8297;
export def SRGB_WRITE: uint = 0x8298;
export def STACK_OVERFLOW: uint = 0x0503;
export def STACK_UNDERFLOW: uint = 0x0504;
export def STANDARD_FONT_FORMAT_NV: uint = 0x936C;
export def STANDARD_FONT_NAME_NV: uint = 0x9072;
export def STATIC_ATI: uint = 0x8760;
export def STATIC_COPY: uint = 0x88E6;
export def STATIC_COPY_ARB: uint = 0x88E6;
export def STATIC_DRAW: uint = 0x88E4;
export def STATIC_DRAW_ARB: uint = 0x88E4;
export def STATIC_READ: uint = 0x88E5;
export def STATIC_READ_ARB: uint = 0x88E5;
export def STATIC_VERTEX_ARRAY_IBM: uint = 103061;
export def STENCIL: uint = 0x1802;
export def STENCIL_ATTACHMENT: uint = 0x8D20;
export def STENCIL_ATTACHMENT_EXT: uint = 0x8D20;
export def STENCIL_BACK_FAIL: uint = 0x8801;
export def STENCIL_BACK_FAIL_ATI: uint = 0x8801;
export def STENCIL_BACK_FUNC: uint = 0x8800;
export def STENCIL_BACK_FUNC_ATI: uint = 0x8800;
export def STENCIL_BACK_OP_VALUE_AMD: uint = 0x874D;
export def STENCIL_BACK_PASS_DEPTH_FAIL: uint = 0x8802;
export def STENCIL_BACK_PASS_DEPTH_FAIL_ATI: uint = 0x8802;
export def STENCIL_BACK_PASS_DEPTH_PASS: uint = 0x8803;
export def STENCIL_BACK_PASS_DEPTH_PASS_ATI: uint = 0x8803;
export def STENCIL_BACK_REF: uint = 0x8CA3;
export def STENCIL_BACK_VALUE_MASK: uint = 0x8CA4;
export def STENCIL_BACK_WRITEMASK: uint = 0x8CA5;
export def STENCIL_BITS: uint = 0x0D57;
export def STENCIL_BUFFER_BIT: uint = 0x00000400;
export def STENCIL_CLEAR_TAG_VALUE_EXT: uint = 0x88F3;
export def STENCIL_CLEAR_VALUE: uint = 0x0B91;
export def STENCIL_COMPONENTS: uint = 0x8285;
export def STENCIL_FAIL: uint = 0x0B94;
export def STENCIL_FUNC: uint = 0x0B92;
export def STENCIL_INDEX: uint = 0x1901;
export def STENCIL_INDEX1: uint = 0x8D46;
export def STENCIL_INDEX16: uint = 0x8D49;
export def STENCIL_INDEX16_EXT: uint = 0x8D49;
export def STENCIL_INDEX1_EXT: uint = 0x8D46;
export def STENCIL_INDEX4: uint = 0x8D47;
export def STENCIL_INDEX4_EXT: uint = 0x8D47;
export def STENCIL_INDEX8: uint = 0x8D48;
export def STENCIL_INDEX8_EXT: uint = 0x8D48;
export def STENCIL_OP_VALUE_AMD: uint = 0x874C;
export def STENCIL_PASS_DEPTH_FAIL: uint = 0x0B95;
export def STENCIL_PASS_DEPTH_PASS: uint = 0x0B96;
export def STENCIL_REF: uint = 0x0B97;
export def STENCIL_REF_COMMAND_NV: uint = 0x000C;
export def STENCIL_RENDERABLE: uint = 0x8288;
export def STENCIL_SAMPLES_NV: uint = 0x932E;
export def STENCIL_TAG_BITS_EXT: uint = 0x88F2;
export def STENCIL_TEST: uint = 0x0B90;
export def STENCIL_TEST_TWO_SIDE_EXT: uint = 0x8910;
export def STENCIL_VALUE_MASK: uint = 0x0B93;
export def STENCIL_WRITEMASK: uint = 0x0B98;
export def STEREO: uint = 0x0C33;
export def STORAGE_CACHED_APPLE: uint = 0x85BE;
export def STORAGE_CLIENT_APPLE: uint = 0x85B4;
export def STORAGE_PRIVATE_APPLE: uint = 0x85BD;
export def STORAGE_SHARED_APPLE: uint = 0x85BF;
export def STREAM_COPY: uint = 0x88E2;
export def STREAM_COPY_ARB: uint = 0x88E2;
export def STREAM_DRAW: uint = 0x88E0;
export def STREAM_DRAW_ARB: uint = 0x88E0;
export def STREAM_RASTERIZATION_AMD: uint = 0x91A0;
export def STREAM_READ: uint = 0x88E1;
export def STREAM_READ_ARB: uint = 0x88E1;
export def STRICT_DEPTHFUNC_HINT_PGI: uint = 0x1A216;
export def STRICT_LIGHTING_HINT_PGI: uint = 0x1A217;
export def STRICT_SCISSOR_HINT_PGI: uint = 0x1A218;
export def SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR: uint = 0x00000004;
export def SUBGROUP_FEATURE_BALLOT_BIT_KHR: uint = 0x00000008;
export def SUBGROUP_FEATURE_BASIC_BIT_KHR: uint = 0x00000001;
export def SUBGROUP_FEATURE_CLUSTERED_BIT_KHR: uint = 0x00000040;
export def SUBGROUP_FEATURE_PARTITIONED_BIT_NV: uint = 0x00000100;
export def SUBGROUP_FEATURE_QUAD_BIT_KHR: uint = 0x00000080;
export def SUBGROUP_FEATURE_SHUFFLE_BIT_KHR: uint = 0x00000010;
export def SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR: uint = 0x00000020;
export def SUBGROUP_FEATURE_VOTE_BIT_KHR: uint = 0x00000002;
export def SUBGROUP_QUAD_ALL_STAGES_KHR: uint = 0x9535;
export def SUBGROUP_SIZE_KHR: uint = 0x9532;
export def SUBGROUP_SUPPORTED_FEATURES_KHR: uint = 0x9534;
export def SUBGROUP_SUPPORTED_STAGES_KHR: uint = 0x9533;
export def SUBPIXEL_BITS: uint = 0x0D50;
export def SUBPIXEL_PRECISION_BIAS_X_BITS_NV: uint = 0x9347;
export def SUBPIXEL_PRECISION_BIAS_Y_BITS_NV: uint = 0x9348;
export def SUBSAMPLE_DISTANCE_AMD: uint = 0x883F;
export def SUBTRACT: uint = 0x84E7;
export def SUBTRACT_ARB: uint = 0x84E7;
export def SUB_ATI: uint = 0x8965;
export def SUCCESS_NV: uint = 0x902F;
export def SUPERSAMPLE_SCALE_X_NV: uint = 0x9372;
export def SUPERSAMPLE_SCALE_Y_NV: uint = 0x9373;
export def SUPPORTED_MULTISAMPLE_MODES_AMD: uint = 0x91B7;
export def SURFACE_MAPPED_NV: uint = 0x8700;
export def SURFACE_REGISTERED_NV: uint = 0x86FD;
export def SURFACE_STATE_NV: uint = 0x86EB;
export def SWIZZLE_STQ_ATI: uint = 0x8977;
export def SWIZZLE_STQ_DQ_ATI: uint = 0x8979;
export def SWIZZLE_STRQ_ATI: uint = 0x897A;
export def SWIZZLE_STRQ_DQ_ATI: uint = 0x897B;
export def SWIZZLE_STR_ATI: uint = 0x8976;
export def SWIZZLE_STR_DR_ATI: uint = 0x8978;
export def SYNC_CL_EVENT_ARB: uint = 0x8240;
export def SYNC_CL_EVENT_COMPLETE_ARB: uint = 0x8241;
export def SYNC_CONDITION: uint = 0x9113;
export def SYNC_FENCE: uint = 0x9116;
export def SYNC_FLAGS: uint = 0x9115;
export def SYNC_FLUSH_COMMANDS_BIT: uint = 0x00000001;
export def SYNC_GPU_COMMANDS_COMPLETE: uint = 0x9117;
export def SYNC_STATUS: uint = 0x9114;
export def SYNC_X11_FENCE_EXT: uint = 0x90E1;
export def SYSTEM_FONT_NAME_NV: uint = 0x9073;
export def T: uint = 0x2001;
export def T2F_C3F_V3F: uint = 0x2A2A;
export def T2F_C4F_N3F_V3F: uint = 0x2A2C;
export def T2F_C4UB_V3F: uint = 0x2A29;
export def T2F_IUI_N3F_V2F_EXT: uint = 0x81B3;
export def T2F_IUI_N3F_V3F_EXT: uint = 0x81B4;
export def T2F_IUI_V2F_EXT: uint = 0x81B1;
export def T2F_IUI_V3F_EXT: uint = 0x81B2;
export def T2F_N3F_V3F: uint = 0x2A2B;
export def T2F_V3F: uint = 0x2A27;
export def T4F_C4F_N3F_V4F: uint = 0x2A2D;
export def T4F_V4F: uint = 0x2A28;
export def TABLE_TOO_LARGE_EXT: uint = 0x8031;
export def TANGENT_ARRAY_EXT: uint = 0x8439;
export def TANGENT_ARRAY_POINTER_EXT: uint = 0x8442;
export def TANGENT_ARRAY_STRIDE_EXT: uint = 0x843F;
export def TANGENT_ARRAY_TYPE_EXT: uint = 0x843E;
export def TASK_SHADER_BIT_NV: uint = 0x00000080;
export def TASK_SHADER_NV: uint = 0x955A;
export def TASK_SUBROUTINE_NV: uint = 0x957D;
export def TASK_SUBROUTINE_UNIFORM_NV: uint = 0x957F;
export def TASK_WORK_GROUP_SIZE_NV: uint = 0x953F;
export def TERMINATE_SEQUENCE_COMMAND_NV: uint = 0x0000;
export def TESSELLATION_FACTOR_AMD: uint = 0x9005;
export def TESSELLATION_MODE_AMD: uint = 0x9004;
export def TESS_CONTROL_OUTPUT_VERTICES: uint = 0x8E75;
export def TESS_CONTROL_PROGRAM_NV: uint = 0x891E;
export def TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV: uint = 0x8C74;
export def TESS_CONTROL_SHADER: uint = 0x8E88;
export def TESS_CONTROL_SHADER_BIT: uint = 0x00000008;
export def TESS_CONTROL_SHADER_PATCHES: uint = 0x82F1;
export def TESS_CONTROL_SHADER_PATCHES_ARB: uint = 0x82F1;
export def TESS_CONTROL_SUBROUTINE: uint = 0x92E9;
export def TESS_CONTROL_SUBROUTINE_UNIFORM: uint = 0x92EF;
export def TESS_CONTROL_TEXTURE: uint = 0x829C;
export def TESS_EVALUATION_PROGRAM_NV: uint = 0x891F;
export def TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV: uint = 0x8C75;
export def TESS_EVALUATION_SHADER: uint = 0x8E87;
export def TESS_EVALUATION_SHADER_BIT: uint = 0x00000010;
export def TESS_EVALUATION_SHADER_INVOCATIONS: uint = 0x82F2;
export def TESS_EVALUATION_SHADER_INVOCATIONS_ARB: uint = 0x82F2;
export def TESS_EVALUATION_SUBROUTINE: uint = 0x92EA;
export def TESS_EVALUATION_SUBROUTINE_UNIFORM: uint = 0x92F0;
export def TESS_EVALUATION_TEXTURE: uint = 0x829D;
export def TESS_GEN_MODE: uint = 0x8E76;
export def TESS_GEN_POINT_MODE: uint = 0x8E79;
export def TESS_GEN_SPACING: uint = 0x8E77;
export def TESS_GEN_VERTEX_ORDER: uint = 0x8E78;
export def TEXCOORD1_BIT_PGI: uint = 0x10000000;
export def TEXCOORD2_BIT_PGI: uint = 0x20000000;
export def TEXCOORD3_BIT_PGI: uint = 0x40000000;
export def TEXCOORD4_BIT_PGI: uint = 0x80000000;
export def TEXTURE: uint = 0x1702;
export def TEXTURE0: uint = 0x84C0;
export def TEXTURE0_ARB: uint = 0x84C0;
export def TEXTURE1: uint = 0x84C1;
export def TEXTURE10: uint = 0x84CA;
export def TEXTURE10_ARB: uint = 0x84CA;
export def TEXTURE11: uint = 0x84CB;
export def TEXTURE11_ARB: uint = 0x84CB;
export def TEXTURE12: uint = 0x84CC;
export def TEXTURE12_ARB: uint = 0x84CC;
export def TEXTURE13: uint = 0x84CD;
export def TEXTURE13_ARB: uint = 0x84CD;
export def TEXTURE14: uint = 0x84CE;
export def TEXTURE14_ARB: uint = 0x84CE;
export def TEXTURE15: uint = 0x84CF;
export def TEXTURE15_ARB: uint = 0x84CF;
export def TEXTURE16: uint = 0x84D0;
export def TEXTURE16_ARB: uint = 0x84D0;
export def TEXTURE17: uint = 0x84D1;
export def TEXTURE17_ARB: uint = 0x84D1;
export def TEXTURE18: uint = 0x84D2;
export def TEXTURE18_ARB: uint = 0x84D2;
export def TEXTURE19: uint = 0x84D3;
export def TEXTURE19_ARB: uint = 0x84D3;
export def TEXTURE1_ARB: uint = 0x84C1;
export def TEXTURE2: uint = 0x84C2;
export def TEXTURE20: uint = 0x84D4;
export def TEXTURE20_ARB: uint = 0x84D4;
export def TEXTURE21: uint = 0x84D5;
export def TEXTURE21_ARB: uint = 0x84D5;
export def TEXTURE22: uint = 0x84D6;
export def TEXTURE22_ARB: uint = 0x84D6;
export def TEXTURE23: uint = 0x84D7;
export def TEXTURE23_ARB: uint = 0x84D7;
export def TEXTURE24: uint = 0x84D8;
export def TEXTURE24_ARB: uint = 0x84D8;
export def TEXTURE25: uint = 0x84D9;
export def TEXTURE25_ARB: uint = 0x84D9;
export def TEXTURE26: uint = 0x84DA;
export def TEXTURE26_ARB: uint = 0x84DA;
export def TEXTURE27: uint = 0x84DB;
export def TEXTURE27_ARB: uint = 0x84DB;
export def TEXTURE28: uint = 0x84DC;
export def TEXTURE28_ARB: uint = 0x84DC;
export def TEXTURE29: uint = 0x84DD;
export def TEXTURE29_ARB: uint = 0x84DD;
export def TEXTURE2_ARB: uint = 0x84C2;
export def TEXTURE3: uint = 0x84C3;
export def TEXTURE30: uint = 0x84DE;
export def TEXTURE30_ARB: uint = 0x84DE;
export def TEXTURE31: uint = 0x84DF;
export def TEXTURE31_ARB: uint = 0x84DF;
export def TEXTURE3_ARB: uint = 0x84C3;
export def TEXTURE4: uint = 0x84C4;
export def TEXTURE4_ARB: uint = 0x84C4;
export def TEXTURE5: uint = 0x84C5;
export def TEXTURE5_ARB: uint = 0x84C5;
export def TEXTURE6: uint = 0x84C6;
export def TEXTURE6_ARB: uint = 0x84C6;
export def TEXTURE7: uint = 0x84C7;
export def TEXTURE7_ARB: uint = 0x84C7;
export def TEXTURE8: uint = 0x84C8;
export def TEXTURE8_ARB: uint = 0x84C8;
export def TEXTURE9: uint = 0x84C9;
export def TEXTURE9_ARB: uint = 0x84C9;
export def TEXTURE_1D: uint = 0x0DE0;
export def TEXTURE_1D_ARRAY: uint = 0x8C18;
export def TEXTURE_1D_ARRAY_EXT: uint = 0x8C18;
export def TEXTURE_1D_BINDING_EXT: uint = 0x8068;
export def TEXTURE_1D_STACK_BINDING_MESAX: uint = 0x875D;
export def TEXTURE_1D_STACK_MESAX: uint = 0x8759;
export def TEXTURE_2D: uint = 0x0DE1;
export def TEXTURE_2D_ARRAY: uint = 0x8C1A;
export def TEXTURE_2D_ARRAY_EXT: uint = 0x8C1A;
export def TEXTURE_2D_BINDING_EXT: uint = 0x8069;
export def TEXTURE_2D_MULTISAMPLE: uint = 0x9100;
export def TEXTURE_2D_MULTISAMPLE_ARRAY: uint = 0x9102;
export def TEXTURE_2D_STACK_BINDING_MESAX: uint = 0x875E;
export def TEXTURE_2D_STACK_MESAX: uint = 0x875A;
export def TEXTURE_3D: uint = 0x806F;
export def TEXTURE_3D_BINDING_EXT: uint = 0x806A;
export def TEXTURE_3D_EXT: uint = 0x806F;
export def TEXTURE_4DSIZE_SGIS: uint = 0x8136;
export def TEXTURE_4D_BINDING_SGIS: uint = 0x814F;
export def TEXTURE_4D_SGIS: uint = 0x8134;
export def TEXTURE_ALPHA_SIZE: uint = 0x805F;
export def TEXTURE_ALPHA_SIZE_EXT: uint = 0x805F;
export def TEXTURE_ALPHA_TYPE_ARB: uint = 0x8C13;
export def TEXTURE_APPLICATION_MODE_EXT: uint = 0x834F;
export def TEXTURE_BASE_LEVEL: uint = 0x813C;
export def TEXTURE_BASE_LEVEL_SGIS: uint = 0x813C;
export def TEXTURE_BINDING_1D: uint = 0x8068;
export def TEXTURE_BINDING_1D_ARRAY: uint = 0x8C1C;
export def TEXTURE_BINDING_1D_ARRAY_EXT: uint = 0x8C1C;
export def TEXTURE_BINDING_2D: uint = 0x8069;
export def TEXTURE_BINDING_2D_ARRAY: uint = 0x8C1D;
export def TEXTURE_BINDING_2D_ARRAY_EXT: uint = 0x8C1D;
export def TEXTURE_BINDING_2D_MULTISAMPLE: uint = 0x9104;
export def TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY: uint = 0x9105;
export def TEXTURE_BINDING_3D: uint = 0x806A;
export def TEXTURE_BINDING_BUFFER: uint = 0x8C2C;
export def TEXTURE_BINDING_BUFFER_ARB: uint = 0x8C2C;
export def TEXTURE_BINDING_BUFFER_EXT: uint = 0x8C2C;
export def TEXTURE_BINDING_CUBE_MAP: uint = 0x8514;
export def TEXTURE_BINDING_CUBE_MAP_ARB: uint = 0x8514;
export def TEXTURE_BINDING_CUBE_MAP_ARRAY: uint = 0x900A;
export def TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB: uint = 0x900A;
export def TEXTURE_BINDING_CUBE_MAP_EXT: uint = 0x8514;
export def TEXTURE_BINDING_RECTANGLE: uint = 0x84F6;
export def TEXTURE_BINDING_RECTANGLE_ARB: uint = 0x84F6;
export def TEXTURE_BINDING_RECTANGLE_NV: uint = 0x84F6;
export def TEXTURE_BINDING_RENDERBUFFER_NV: uint = 0x8E53;
export def TEXTURE_BIT: uint = 0x00040000;
export def TEXTURE_BLUE_SIZE: uint = 0x805E;
export def TEXTURE_BLUE_SIZE_EXT: uint = 0x805E;
export def TEXTURE_BLUE_TYPE_ARB: uint = 0x8C12;
export def TEXTURE_BORDER: uint = 0x1005;
export def TEXTURE_BORDER_COLOR: uint = 0x1004;
export def TEXTURE_BORDER_VALUES_NV: uint = 0x871A;
export def TEXTURE_BUFFER: uint = 0x8C2A;
export def TEXTURE_BUFFER_ARB: uint = 0x8C2A;
export def TEXTURE_BUFFER_DATA_STORE_BINDING_ARB: uint = 0x8C2D;
export def TEXTURE_BUFFER_DATA_STORE_BINDING_EXT: uint = 0x8C2D;
export def TEXTURE_BUFFER_EXT: uint = 0x8C2A;
export def TEXTURE_BUFFER_FORMAT_ARB: uint = 0x8C2E;
export def TEXTURE_BUFFER_FORMAT_EXT: uint = 0x8C2E;
export def TEXTURE_BUFFER_OFFSET: uint = 0x919D;
export def TEXTURE_BUFFER_OFFSET_ALIGNMENT: uint = 0x919F;
export def TEXTURE_BUFFER_SIZE: uint = 0x919E;
export def TEXTURE_CLIPMAP_CENTER_SGIX: uint = 0x8171;
export def TEXTURE_CLIPMAP_DEPTH_SGIX: uint = 0x8176;
export def TEXTURE_CLIPMAP_FRAME_SGIX: uint = 0x8172;
export def TEXTURE_CLIPMAP_LOD_OFFSET_SGIX: uint = 0x8175;
export def TEXTURE_CLIPMAP_OFFSET_SGIX: uint = 0x8173;
export def TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX: uint = 0x8174;
export def TEXTURE_COLOR_SAMPLES_NV: uint = 0x9046;
export def TEXTURE_COLOR_TABLE_SGI: uint = 0x80BC;
export def TEXTURE_COLOR_WRITEMASK_SGIS: uint = 0x81EF;
export def TEXTURE_COMPARE_FAIL_VALUE_ARB: uint = 0x80BF;
export def TEXTURE_COMPARE_FUNC: uint = 0x884D;
export def TEXTURE_COMPARE_FUNC_ARB: uint = 0x884D;
export def TEXTURE_COMPARE_MODE: uint = 0x884C;
export def TEXTURE_COMPARE_MODE_ARB: uint = 0x884C;
export def TEXTURE_COMPARE_OPERATOR_SGIX: uint = 0x819B;
export def TEXTURE_COMPARE_SGIX: uint = 0x819A;
export def TEXTURE_COMPONENTS: uint = 0x1003;
export def TEXTURE_COMPRESSED: uint = 0x86A1;
export def TEXTURE_COMPRESSED_ARB: uint = 0x86A1;
export def TEXTURE_COMPRESSED_BLOCK_HEIGHT: uint = 0x82B2;
export def TEXTURE_COMPRESSED_BLOCK_SIZE: uint = 0x82B3;
export def TEXTURE_COMPRESSED_BLOCK_WIDTH: uint = 0x82B1;
export def TEXTURE_COMPRESSED_IMAGE_SIZE: uint = 0x86A0;
export def TEXTURE_COMPRESSED_IMAGE_SIZE_ARB: uint = 0x86A0;
export def TEXTURE_COMPRESSION_HINT: uint = 0x84EF;
export def TEXTURE_COMPRESSION_HINT_ARB: uint = 0x84EF;
export def TEXTURE_CONSTANT_DATA_SUNX: uint = 0x81D6;
export def TEXTURE_COORD_ARRAY: uint = 0x8078;
export def TEXTURE_COORD_ARRAY_ADDRESS_NV: uint = 0x8F25;
export def TEXTURE_COORD_ARRAY_BUFFER_BINDING: uint = 0x889A;
export def TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB: uint = 0x889A;
export def TEXTURE_COORD_ARRAY_COUNT_EXT: uint = 0x808B;
export def TEXTURE_COORD_ARRAY_EXT: uint = 0x8078;
export def TEXTURE_COORD_ARRAY_LENGTH_NV: uint = 0x8F2F;
export def TEXTURE_COORD_ARRAY_LIST_IBM: uint = 103074;
export def TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM: uint = 103084;
export def TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL: uint = 0x83F8;
export def TEXTURE_COORD_ARRAY_POINTER: uint = 0x8092;
export def TEXTURE_COORD_ARRAY_POINTER_EXT: uint = 0x8092;
export def TEXTURE_COORD_ARRAY_SIZE: uint = 0x8088;
export def TEXTURE_COORD_ARRAY_SIZE_EXT: uint = 0x8088;
export def TEXTURE_COORD_ARRAY_STRIDE: uint = 0x808A;
export def TEXTURE_COORD_ARRAY_STRIDE_EXT: uint = 0x808A;
export def TEXTURE_COORD_ARRAY_TYPE: uint = 0x8089;
export def TEXTURE_COORD_ARRAY_TYPE_EXT: uint = 0x8089;
export def TEXTURE_COORD_NV: uint = 0x8C79;
export def TEXTURE_COVERAGE_SAMPLES_NV: uint = 0x9045;
export def TEXTURE_CUBE_MAP: uint = 0x8513;
export def TEXTURE_CUBE_MAP_ARB: uint = 0x8513;
export def TEXTURE_CUBE_MAP_ARRAY: uint = 0x9009;
export def TEXTURE_CUBE_MAP_ARRAY_ARB: uint = 0x9009;
export def TEXTURE_CUBE_MAP_EXT: uint = 0x8513;
export def TEXTURE_CUBE_MAP_NEGATIVE_X: uint = 0x8516;
export def TEXTURE_CUBE_MAP_NEGATIVE_X_ARB: uint = 0x8516;
export def TEXTURE_CUBE_MAP_NEGATIVE_X_EXT: uint = 0x8516;
export def TEXTURE_CUBE_MAP_NEGATIVE_Y: uint = 0x8518;
export def TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB: uint = 0x8518;
export def TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT: uint = 0x8518;
export def TEXTURE_CUBE_MAP_NEGATIVE_Z: uint = 0x851A;
export def TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB: uint = 0x851A;
export def TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT: uint = 0x851A;
export def TEXTURE_CUBE_MAP_POSITIVE_X: uint = 0x8515;
export def TEXTURE_CUBE_MAP_POSITIVE_X_ARB: uint = 0x8515;
export def TEXTURE_CUBE_MAP_POSITIVE_X_EXT: uint = 0x8515;
export def TEXTURE_CUBE_MAP_POSITIVE_Y: uint = 0x8517;
export def TEXTURE_CUBE_MAP_POSITIVE_Y_ARB: uint = 0x8517;
export def TEXTURE_CUBE_MAP_POSITIVE_Y_EXT: uint = 0x8517;
export def TEXTURE_CUBE_MAP_POSITIVE_Z: uint = 0x8519;
export def TEXTURE_CUBE_MAP_POSITIVE_Z_ARB: uint = 0x8519;
export def TEXTURE_CUBE_MAP_POSITIVE_Z_EXT: uint = 0x8519;
export def TEXTURE_CUBE_MAP_SEAMLESS: uint = 0x884F;
export def TEXTURE_DEFORMATION_BIT_SGIX: uint = 0x00000001;
export def TEXTURE_DEFORMATION_SGIX: uint = 0x8195;
export def TEXTURE_DEPTH: uint = 0x8071;
export def TEXTURE_DEPTH_EXT: uint = 0x8071;
export def TEXTURE_DEPTH_SIZE: uint = 0x884A;
export def TEXTURE_DEPTH_SIZE_ARB: uint = 0x884A;
export def TEXTURE_DEPTH_TYPE_ARB: uint = 0x8C16;
export def TEXTURE_DS_SIZE_NV: uint = 0x871D;
export def TEXTURE_DT_SIZE_NV: uint = 0x871E;
export def TEXTURE_ENV: uint = 0x2300;
export def TEXTURE_ENV_BIAS_SGIX: uint = 0x80BE;
export def TEXTURE_ENV_COLOR: uint = 0x2201;
export def TEXTURE_ENV_MODE: uint = 0x2200;
export def TEXTURE_FETCH_BARRIER_BIT: uint = 0x00000008;
export def TEXTURE_FETCH_BARRIER_BIT_EXT: uint = 0x00000008;
export def TEXTURE_FILTER4_SIZE_SGIS: uint = 0x8147;
export def TEXTURE_FILTER_CONTROL: uint = 0x8500;
export def TEXTURE_FILTER_CONTROL_EXT: uint = 0x8500;
export def TEXTURE_FIXED_SAMPLE_LOCATIONS: uint = 0x9107;
export def TEXTURE_FLOAT_COMPONENTS_NV: uint = 0x888C;
export def TEXTURE_FREE_MEMORY_ATI: uint = 0x87FC;
export def TEXTURE_GATHER: uint = 0x82A2;
export def TEXTURE_GATHER_SHADOW: uint = 0x82A3;
export def TEXTURE_GEN_MODE: uint = 0x2500;
export def TEXTURE_GEN_Q: uint = 0x0C63;
export def TEXTURE_GEN_R: uint = 0x0C62;
export def TEXTURE_GEN_S: uint = 0x0C60;
export def TEXTURE_GEN_T: uint = 0x0C61;
export def TEXTURE_GEQUAL_R_SGIX: uint = 0x819D;
export def TEXTURE_GREEN_SIZE: uint = 0x805D;
export def TEXTURE_GREEN_SIZE_EXT: uint = 0x805D;
export def TEXTURE_GREEN_TYPE_ARB: uint = 0x8C11;
export def TEXTURE_HEIGHT: uint = 0x1001;
export def TEXTURE_HI_SIZE_NV: uint = 0x871B;
export def TEXTURE_IMAGE_FORMAT: uint = 0x828F;
export def TEXTURE_IMAGE_TYPE: uint = 0x8290;
export def TEXTURE_IMMUTABLE_FORMAT: uint = 0x912F;
export def TEXTURE_IMMUTABLE_FORMAT_EXT: uint = 0x912F;
export def TEXTURE_IMMUTABLE_LEVELS: uint = 0x82DF;
export def TEXTURE_INDEX_SIZE_EXT: uint = 0x80ED;
export def TEXTURE_INTENSITY_SIZE: uint = 0x8061;
export def TEXTURE_INTENSITY_SIZE_EXT: uint = 0x8061;
export def TEXTURE_INTENSITY_TYPE_ARB: uint = 0x8C15;
export def TEXTURE_INTERNAL_FORMAT: uint = 0x1003;
export def TEXTURE_LEQUAL_R_SGIX: uint = 0x819C;
export def TEXTURE_LIGHTING_MODE_HP: uint = 0x8167;
export def TEXTURE_LIGHT_EXT: uint = 0x8350;
export def TEXTURE_LOD_BIAS: uint = 0x8501;
export def TEXTURE_LOD_BIAS_EXT: uint = 0x8501;
export def TEXTURE_LOD_BIAS_R_SGIX: uint = 0x8190;
export def TEXTURE_LOD_BIAS_S_SGIX: uint = 0x818E;
export def TEXTURE_LOD_BIAS_T_SGIX: uint = 0x818F;
export def TEXTURE_LO_SIZE_NV: uint = 0x871C;
export def TEXTURE_LUMINANCE_SIZE: uint = 0x8060;
export def TEXTURE_LUMINANCE_SIZE_EXT: uint = 0x8060;
export def TEXTURE_LUMINANCE_TYPE_ARB: uint = 0x8C14;
export def TEXTURE_MAG_FILTER: uint = 0x2800;
export def TEXTURE_MAG_SIZE_NV: uint = 0x871F;
export def TEXTURE_MATERIAL_FACE_EXT: uint = 0x8351;
export def TEXTURE_MATERIAL_PARAMETER_EXT: uint = 0x8352;
export def TEXTURE_MATRIX: uint = 0x0BA8;
export def TEXTURE_MAX_ANISOTROPY: uint = 0x84FE;
export def TEXTURE_MAX_ANISOTROPY_EXT: uint = 0x84FE;
export def TEXTURE_MAX_CLAMP_R_SGIX: uint = 0x836B;
export def TEXTURE_MAX_CLAMP_S_SGIX: uint = 0x8369;
export def TEXTURE_MAX_CLAMP_T_SGIX: uint = 0x836A;
export def TEXTURE_MAX_LEVEL: uint = 0x813D;
export def TEXTURE_MAX_LEVEL_SGIS: uint = 0x813D;
export def TEXTURE_MAX_LOD: uint = 0x813B;
export def TEXTURE_MAX_LOD_SGIS: uint = 0x813B;
export def TEXTURE_MEMORY_LAYOUT_INTEL: uint = 0x83FF;
export def TEXTURE_MIN_FILTER: uint = 0x2801;
export def TEXTURE_MIN_LOD: uint = 0x813A;
export def TEXTURE_MIN_LOD_SGIS: uint = 0x813A;
export def TEXTURE_MULTI_BUFFER_HINT_SGIX: uint = 0x812E;
export def TEXTURE_NORMAL_EXT: uint = 0x85AF;
export def TEXTURE_POST_SPECULAR_HP: uint = 0x8168;
export def TEXTURE_PRE_SPECULAR_HP: uint = 0x8169;
export def TEXTURE_PRIORITY: uint = 0x8066;
export def TEXTURE_PRIORITY_EXT: uint = 0x8066;
export def TEXTURE_RANGE_LENGTH_APPLE: uint = 0x85B7;
export def TEXTURE_RANGE_POINTER_APPLE: uint = 0x85B8;
export def TEXTURE_RECTANGLE: uint = 0x84F5;
export def TEXTURE_RECTANGLE_ARB: uint = 0x84F5;
export def TEXTURE_RECTANGLE_NV: uint = 0x84F5;
export def TEXTURE_REDUCTION_MODE_ARB: uint = 0x9366;
export def TEXTURE_REDUCTION_MODE_EXT: uint = 0x9366;
export def TEXTURE_RED_SIZE: uint = 0x805C;
export def TEXTURE_RED_SIZE_EXT: uint = 0x805C;
export def TEXTURE_RED_TYPE_ARB: uint = 0x8C10;
export def TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV: uint = 0x8E54;
export def TEXTURE_RENDERBUFFER_NV: uint = 0x8E55;
export def TEXTURE_RESIDENT: uint = 0x8067;
export def TEXTURE_RESIDENT_EXT: uint = 0x8067;
export def TEXTURE_SAMPLES: uint = 0x9106;
export def TEXTURE_SHADER_NV: uint = 0x86DE;
export def TEXTURE_SHADOW: uint = 0x82A1;
export def TEXTURE_SHARED_SIZE_EXT: uint = 0x8C3F;
export def TEXTURE_SPARSE_ARB: uint = 0x91A6;
export def TEXTURE_SRGB_DECODE_EXT: uint = 0x8A48;
export def TEXTURE_STACK_DEPTH: uint = 0x0BA5;
export def TEXTURE_STENCIL_SIZE: uint = 0x88F1;
export def TEXTURE_STENCIL_SIZE_EXT: uint = 0x88F1;
export def TEXTURE_STORAGE_HINT_APPLE: uint = 0x85BC;
export def TEXTURE_STORAGE_SPARSE_BIT_AMD: uint = 0x00000001;
export def TEXTURE_SWIZZLE_A: uint = 0x8E45;
export def TEXTURE_SWIZZLE_A_EXT: uint = 0x8E45;
export def TEXTURE_SWIZZLE_B: uint = 0x8E44;
export def TEXTURE_SWIZZLE_B_EXT: uint = 0x8E44;
export def TEXTURE_SWIZZLE_G: uint = 0x8E43;
export def TEXTURE_SWIZZLE_G_EXT: uint = 0x8E43;
export def TEXTURE_SWIZZLE_R: uint = 0x8E42;
export def TEXTURE_SWIZZLE_RGBA: uint = 0x8E46;
export def TEXTURE_SWIZZLE_RGBA_EXT: uint = 0x8E46;
export def TEXTURE_SWIZZLE_R_EXT: uint = 0x8E42;
export def TEXTURE_TARGET: uint = 0x1006;
export def TEXTURE_TILING_EXT: uint = 0x9580;
export def TEXTURE_TOO_LARGE_EXT: uint = 0x8065;
export def TEXTURE_UNSIGNED_REMAP_MODE_NV: uint = 0x888F;
export def TEXTURE_UPDATE_BARRIER_BIT: uint = 0x00000100;
export def TEXTURE_UPDATE_BARRIER_BIT_EXT: uint = 0x00000100;
export def TEXTURE_VIEW: uint = 0x82B5;
export def TEXTURE_VIEW_MIN_LAYER: uint = 0x82DD;
export def TEXTURE_VIEW_MIN_LEVEL: uint = 0x82DB;
export def TEXTURE_VIEW_NUM_LAYERS: uint = 0x82DE;
export def TEXTURE_VIEW_NUM_LEVELS: uint = 0x82DC;
export def TEXTURE_WIDTH: uint = 0x1000;
export def TEXTURE_WRAP_Q_SGIS: uint = 0x8137;
export def TEXTURE_WRAP_R: uint = 0x8072;
export def TEXTURE_WRAP_R_EXT: uint = 0x8072;
export def TEXTURE_WRAP_S: uint = 0x2802;
export def TEXTURE_WRAP_T: uint = 0x2803;
export def TEXT_FRAGMENT_SHADER_ATI: uint = 0x8200;
export def TILE_RASTER_ORDER_FIXED_MESA: uint = 0x8BB8;
export def TILE_RASTER_ORDER_INCREASING_X_MESA: uint = 0x8BB9;
export def TILE_RASTER_ORDER_INCREASING_Y_MESA: uint = 0x8BBA;
export def TILING_TYPES_EXT: uint = 0x9583;
export def TIMELINE_SEMAPHORE_VALUE_NV: uint = 0x9595;
export def TIMEOUT_EXPIRED: uint = 0x911B;
export def TIMEOUT_IGNORED: u64 = 0xFFFFFFFFFFFFFFFF;
export def TIMESTAMP: uint = 0x8E28;
export def TIME_ELAPSED: uint = 0x88BF;
export def TIME_ELAPSED_EXT: uint = 0x88BF;
export def TOP_LEVEL_ARRAY_SIZE: uint = 0x930C;
export def TOP_LEVEL_ARRAY_STRIDE: uint = 0x930D;
export def TRACK_MATRIX_NV: uint = 0x8648;
export def TRACK_MATRIX_TRANSFORM_NV: uint = 0x8649;
export def TRANSFORM_BIT: uint = 0x00001000;
export def TRANSFORM_FEEDBACK: uint = 0x8E22;
export def TRANSFORM_FEEDBACK_ATTRIBS_NV: uint = 0x8C7E;
export def TRANSFORM_FEEDBACK_BARRIER_BIT: uint = 0x00000800;
export def TRANSFORM_FEEDBACK_BARRIER_BIT_EXT: uint = 0x00000800;
export def TRANSFORM_FEEDBACK_BINDING: uint = 0x8E25;
export def TRANSFORM_FEEDBACK_BINDING_NV: uint = 0x8E25;
export def TRANSFORM_FEEDBACK_BUFFER: uint = 0x8C8E;
export def TRANSFORM_FEEDBACK_BUFFER_ACTIVE: uint = 0x8E24;
export def TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV: uint = 0x8E24;
export def TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT: uint = 0x8C8F;
export def TRANSFORM_FEEDBACK_BUFFER_BINDING_NV: uint = 0x8C8F;
export def TRANSFORM_FEEDBACK_BUFFER_EXT: uint = 0x8C8E;
export def TRANSFORM_FEEDBACK_BUFFER_INDEX: uint = 0x934B;
export def TRANSFORM_FEEDBACK_BUFFER_MODE_EXT: uint = 0x8C7F;
export def TRANSFORM_FEEDBACK_BUFFER_MODE_NV: uint = 0x8C7F;
export def TRANSFORM_FEEDBACK_BUFFER_NV: uint = 0x8C8E;
export def TRANSFORM_FEEDBACK_BUFFER_PAUSED: uint = 0x8E23;
export def TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV: uint = 0x8E23;
export def TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT: uint = 0x8C85;
export def TRANSFORM_FEEDBACK_BUFFER_SIZE_NV: uint = 0x8C85;
export def TRANSFORM_FEEDBACK_BUFFER_START_EXT: uint = 0x8C84;
export def TRANSFORM_FEEDBACK_BUFFER_START_NV: uint = 0x8C84;
export def TRANSFORM_FEEDBACK_BUFFER_STRIDE: uint = 0x934C;
export def TRANSFORM_FEEDBACK_NV: uint = 0x8E22;
export def TRANSFORM_FEEDBACK_OVERFLOW: uint = 0x82EC;
export def TRANSFORM_FEEDBACK_OVERFLOW_ARB: uint = 0x82EC;
export def TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT: uint = 0x8C88;
export def TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV: uint = 0x8C88;
export def TRANSFORM_FEEDBACK_RECORD_NV: uint = 0x8C86;
export def TRANSFORM_FEEDBACK_STREAM_OVERFLOW: uint = 0x82ED;
export def TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB: uint = 0x82ED;
export def TRANSFORM_FEEDBACK_VARYING: uint = 0x92F4;
export def TRANSFORM_FEEDBACK_VARYINGS_EXT: uint = 0x8C83;
export def TRANSFORM_FEEDBACK_VARYINGS_NV: uint = 0x8C83;
export def TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT: uint = 0x8C76;
export def TRANSFORM_HINT_APPLE: uint = 0x85B1;
export def TRANSLATE_2D_NV: uint = 0x9090;
export def TRANSLATE_3D_NV: uint = 0x9091;
export def TRANSLATE_X_NV: uint = 0x908E;
export def TRANSLATE_Y_NV: uint = 0x908F;
export def TRANSPOSE_AFFINE_2D_NV: uint = 0x9096;
export def TRANSPOSE_AFFINE_3D_NV: uint = 0x9098;
export def TRANSPOSE_COLOR_MATRIX: uint = 0x84E6;
export def TRANSPOSE_COLOR_MATRIX_ARB: uint = 0x84E6;
export def TRANSPOSE_CURRENT_MATRIX_ARB: uint = 0x88B7;
export def TRANSPOSE_MODELVIEW_MATRIX: uint = 0x84E3;
export def TRANSPOSE_MODELVIEW_MATRIX_ARB: uint = 0x84E3;
export def TRANSPOSE_NV: uint = 0x862C;
export def TRANSPOSE_PROGRAM_MATRIX_EXT: uint = 0x8E2E;
export def TRANSPOSE_PROJECTION_MATRIX: uint = 0x84E4;
export def TRANSPOSE_PROJECTION_MATRIX_ARB: uint = 0x84E4;
export def TRANSPOSE_TEXTURE_MATRIX: uint = 0x84E5;
export def TRANSPOSE_TEXTURE_MATRIX_ARB: uint = 0x84E5;
export def TRIANGLES: uint = 0x0004;
export def TRIANGLES_ADJACENCY_ARB: uint = 0x000C;
export def TRIANGLES_ADJACENCY_EXT: uint = 0x000C;
export def TRIANGLE_FAN: uint = 0x0006;
export def TRIANGLE_LIST_SUN: uint = 0x81D7;
export def TRIANGLE_MESH_SUN: uint = 0x8615;
export def TRIANGLE_STRIP: uint = 0x0005;
export def TRIANGLE_STRIP_ADJACENCY_ARB: uint = 0x000D;
export def TRIANGLE_STRIP_ADJACENCY_EXT: uint = 0x000D;
export def TRIANGULAR_NV: uint = 0x90A5;
export def TRUE: u8 = 1;
export def TYPE: uint = 0x92FA;
export def UNCORRELATED_NV: uint = 0x9282;
export def UNDEFINED_APPLE: uint = 0x8A1C;
export def UNDEFINED_VERTEX: uint = 0x8260;
export def UNIFORM: uint = 0x92E1;
export def UNIFORM_ADDRESS_COMMAND_NV: uint = 0x000A;
export def UNIFORM_ARRAY_STRIDE: uint = 0x8A3C;
export def UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX: uint = 0x92DA;
export def UNIFORM_BARRIER_BIT: uint = 0x00000004;
export def UNIFORM_BARRIER_BIT_EXT: uint = 0x00000004;
export def UNIFORM_BLOCK: uint = 0x92E2;
export def UNIFORM_BLOCK_ACTIVE_UNIFORMS: uint = 0x8A42;
export def UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: uint = 0x8A43;
export def UNIFORM_BLOCK_BINDING: uint = 0x8A3F;
export def UNIFORM_BLOCK_DATA_SIZE: uint = 0x8A40;
export def UNIFORM_BLOCK_INDEX: uint = 0x8A3A;
export def UNIFORM_BLOCK_NAME_LENGTH: uint = 0x8A41;
export def UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER: uint = 0x90EC;
export def UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: uint = 0x8A46;
export def UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER: uint = 0x8A45;
export def UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV: uint = 0x959C;
export def UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV: uint = 0x959D;
export def UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER: uint = 0x84F0;
export def UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER: uint = 0x84F1;
export def UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: uint = 0x8A44;
export def UNIFORM_BUFFER: uint = 0x8A11;
export def UNIFORM_BUFFER_ADDRESS_NV: uint = 0x936F;
export def UNIFORM_BUFFER_BINDING: uint = 0x8A28;
export def UNIFORM_BUFFER_BINDING_EXT: uint = 0x8DEF;
export def UNIFORM_BUFFER_EXT: uint = 0x8DEE;
export def UNIFORM_BUFFER_LENGTH_NV: uint = 0x9370;
export def UNIFORM_BUFFER_OFFSET_ALIGNMENT: uint = 0x8A34;
export def UNIFORM_BUFFER_SIZE: uint = 0x8A2A;
export def UNIFORM_BUFFER_START: uint = 0x8A29;
export def UNIFORM_BUFFER_UNIFIED_NV: uint = 0x936E;
export def UNIFORM_IS_ROW_MAJOR: uint = 0x8A3E;
export def UNIFORM_MATRIX_STRIDE: uint = 0x8A3D;
export def UNIFORM_NAME_LENGTH: uint = 0x8A39;
export def UNIFORM_OFFSET: uint = 0x8A3B;
export def UNIFORM_SIZE: uint = 0x8A38;
export def UNIFORM_TYPE: uint = 0x8A37;
export def UNKNOWN_CONTEXT_RESET: uint = 0x8255;
export def UNKNOWN_CONTEXT_RESET_ARB: uint = 0x8255;
export def UNPACK_ALIGNMENT: uint = 0x0CF5;
export def UNPACK_CLIENT_STORAGE_APPLE: uint = 0x85B2;
export def UNPACK_CMYK_HINT_EXT: uint = 0x800F;
export def UNPACK_COMPRESSED_BLOCK_DEPTH: uint = 0x9129;
export def UNPACK_COMPRESSED_BLOCK_HEIGHT: uint = 0x9128;
export def UNPACK_COMPRESSED_BLOCK_SIZE: uint = 0x912A;
export def UNPACK_COMPRESSED_BLOCK_WIDTH: uint = 0x9127;
export def UNPACK_CONSTANT_DATA_SUNX: uint = 0x81D5;
export def UNPACK_IMAGE_DEPTH_SGIS: uint = 0x8133;
export def UNPACK_IMAGE_HEIGHT: uint = 0x806E;
export def UNPACK_IMAGE_HEIGHT_EXT: uint = 0x806E;
export def UNPACK_LSB_FIRST: uint = 0x0CF1;
export def UNPACK_RESAMPLE_OML: uint = 0x8985;
export def UNPACK_RESAMPLE_SGIX: uint = 0x842F;
export def UNPACK_ROW_BYTES_APPLE: uint = 0x8A16;
export def UNPACK_ROW_LENGTH: uint = 0x0CF2;
export def UNPACK_SKIP_IMAGES: uint = 0x806D;
export def UNPACK_SKIP_IMAGES_EXT: uint = 0x806D;
export def UNPACK_SKIP_PIXELS: uint = 0x0CF4;
export def UNPACK_SKIP_ROWS: uint = 0x0CF3;
export def UNPACK_SKIP_VOLUMES_SGIS: uint = 0x8132;
export def UNPACK_SUBSAMPLE_RATE_SGIX: uint = 0x85A1;
export def UNPACK_SWAP_BYTES: uint = 0x0CF0;
export def UNSIGNALED: uint = 0x9118;
export def UNSIGNED_BYTE: uint = 0x1401;
export def UNSIGNED_BYTE_2_3_3_REV: uint = 0x8362;
export def UNSIGNED_BYTE_3_3_2: uint = 0x8032;
export def UNSIGNED_BYTE_3_3_2_EXT: uint = 0x8032;
export def UNSIGNED_IDENTITY_NV: uint = 0x8536;
export def UNSIGNED_INT: uint = 0x1405;
export def UNSIGNED_INT16_NV: uint = 0x8FF0;
export def UNSIGNED_INT16_VEC2_NV: uint = 0x8FF1;
export def UNSIGNED_INT16_VEC3_NV: uint = 0x8FF2;
export def UNSIGNED_INT16_VEC4_NV: uint = 0x8FF3;
export def UNSIGNED_INT64_AMD: uint = 0x8BC2;
export def UNSIGNED_INT64_ARB: uint = 0x140F;
export def UNSIGNED_INT64_NV: uint = 0x140F;
export def UNSIGNED_INT64_VEC2_ARB: uint = 0x8FF5;
export def UNSIGNED_INT64_VEC2_NV: uint = 0x8FF5;
export def UNSIGNED_INT64_VEC3_ARB: uint = 0x8FF6;
export def UNSIGNED_INT64_VEC3_NV: uint = 0x8FF6;
export def UNSIGNED_INT64_VEC4_ARB: uint = 0x8FF7;
export def UNSIGNED_INT64_VEC4_NV: uint = 0x8FF7;
export def UNSIGNED_INT8_NV: uint = 0x8FEC;
export def UNSIGNED_INT8_VEC2_NV: uint = 0x8FED;
export def UNSIGNED_INT8_VEC3_NV: uint = 0x8FEE;
export def UNSIGNED_INT8_VEC4_NV: uint = 0x8FEF;
export def UNSIGNED_INT_10F_11F_11F_REV: uint = 0x8C3B;
export def UNSIGNED_INT_10F_11F_11F_REV_EXT: uint = 0x8C3B;
export def UNSIGNED_INT_10_10_10_2: uint = 0x8036;
export def UNSIGNED_INT_10_10_10_2_EXT: uint = 0x8036;
export def UNSIGNED_INT_24_8: uint = 0x84FA;
export def UNSIGNED_INT_24_8_EXT: uint = 0x84FA;
export def UNSIGNED_INT_24_8_NV: uint = 0x84FA;
export def UNSIGNED_INT_2_10_10_10_REV: uint = 0x8368;
export def UNSIGNED_INT_5_9_9_9_REV_EXT: uint = 0x8C3E;
export def UNSIGNED_INT_8_8_8_8: uint = 0x8035;
export def UNSIGNED_INT_8_8_8_8_EXT: uint = 0x8035;
export def UNSIGNED_INT_8_8_8_8_REV: uint = 0x8367;
export def UNSIGNED_INT_8_8_S8_S8_REV_NV: uint = 0x86DB;
export def UNSIGNED_INT_ATOMIC_COUNTER: uint = 0x92DB;
export def UNSIGNED_INT_IMAGE_1D: uint = 0x9062;
export def UNSIGNED_INT_IMAGE_1D_ARRAY: uint = 0x9068;
export def UNSIGNED_INT_IMAGE_1D_ARRAY_EXT: uint = 0x9068;
export def UNSIGNED_INT_IMAGE_1D_EXT: uint = 0x9062;
export def UNSIGNED_INT_IMAGE_2D: uint = 0x9063;
export def UNSIGNED_INT_IMAGE_2D_ARRAY: uint = 0x9069;
export def UNSIGNED_INT_IMAGE_2D_ARRAY_EXT: uint = 0x9069;
export def UNSIGNED_INT_IMAGE_2D_EXT: uint = 0x9063;
export def UNSIGNED_INT_IMAGE_2D_MULTISAMPLE: uint = 0x906B;
export def UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY: uint = 0x906C;
export def UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT: uint = 0x906C;
export def UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT: uint = 0x906B;
export def UNSIGNED_INT_IMAGE_2D_RECT: uint = 0x9065;
export def UNSIGNED_INT_IMAGE_2D_RECT_EXT: uint = 0x9065;
export def UNSIGNED_INT_IMAGE_3D: uint = 0x9064;
export def UNSIGNED_INT_IMAGE_3D_EXT: uint = 0x9064;
export def UNSIGNED_INT_IMAGE_BUFFER: uint = 0x9067;
export def UNSIGNED_INT_IMAGE_BUFFER_EXT: uint = 0x9067;
export def UNSIGNED_INT_IMAGE_CUBE: uint = 0x9066;
export def UNSIGNED_INT_IMAGE_CUBE_EXT: uint = 0x9066;
export def UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY: uint = 0x906A;
export def UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT: uint = 0x906A;
export def UNSIGNED_INT_S8_S8_8_8_NV: uint = 0x86DA;
export def UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT: uint = 0x8DD6;
export def UNSIGNED_INT_SAMPLER_1D_EXT: uint = 0x8DD1;
export def UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT: uint = 0x8DD7;
export def UNSIGNED_INT_SAMPLER_2D_EXT: uint = 0x8DD2;
export def UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE: uint = 0x910A;
export def UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY: uint = 0x910D;
export def UNSIGNED_INT_SAMPLER_2D_RECT_EXT: uint = 0x8DD5;
export def UNSIGNED_INT_SAMPLER_3D_EXT: uint = 0x8DD3;
export def UNSIGNED_INT_SAMPLER_BUFFER_AMD: uint = 0x9003;
export def UNSIGNED_INT_SAMPLER_BUFFER_EXT: uint = 0x8DD8;
export def UNSIGNED_INT_SAMPLER_CUBE_EXT: uint = 0x8DD4;
export def UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB: uint = 0x900F;
export def UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV: uint = 0x8E58;
export def UNSIGNED_INT_VEC2_EXT: uint = 0x8DC6;
export def UNSIGNED_INT_VEC3_EXT: uint = 0x8DC7;
export def UNSIGNED_INT_VEC4_EXT: uint = 0x8DC8;
export def UNSIGNED_INVERT_NV: uint = 0x8537;
export def UNSIGNED_NORMALIZED: uint = 0x8C17;
export def UNSIGNED_NORMALIZED_ARB: uint = 0x8C17;
export def UNSIGNED_SHORT: uint = 0x1403;
export def UNSIGNED_SHORT_1_5_5_5_REV: uint = 0x8366;
export def UNSIGNED_SHORT_4_4_4_4: uint = 0x8033;
export def UNSIGNED_SHORT_4_4_4_4_EXT: uint = 0x8033;
export def UNSIGNED_SHORT_4_4_4_4_REV: uint = 0x8365;
export def UNSIGNED_SHORT_5_5_5_1: uint = 0x8034;
export def UNSIGNED_SHORT_5_5_5_1_EXT: uint = 0x8034;
export def UNSIGNED_SHORT_5_6_5: uint = 0x8363;
export def UNSIGNED_SHORT_5_6_5_REV: uint = 0x8364;
export def UNSIGNED_SHORT_8_8_APPLE: uint = 0x85BA;
export def UNSIGNED_SHORT_8_8_MESA: uint = 0x85BA;
export def UNSIGNED_SHORT_8_8_REV_APPLE: uint = 0x85BB;
export def UNSIGNED_SHORT_8_8_REV_MESA: uint = 0x85BB;
export def UPLOAD_GPU_MASK_NVX: uint = 0x954A;
export def UPPER_LEFT: uint = 0x8CA2;
export def USE_MISSING_GLYPH_NV: uint = 0x90AA;
export def UTF16_NV: uint = 0x909B;
export def UTF8_NV: uint = 0x909A;
export def UUID_SIZE_EXT: uint = 16;
export def V2F: uint = 0x2A20;
export def V3F: uint = 0x2A21;
export def VALIDATE_STATUS: uint = 0x8B83;
export def VARIABLE_A_NV: uint = 0x8523;
export def VARIABLE_B_NV: uint = 0x8524;
export def VARIABLE_C_NV: uint = 0x8525;
export def VARIABLE_D_NV: uint = 0x8526;
export def VARIABLE_E_NV: uint = 0x8527;
export def VARIABLE_F_NV: uint = 0x8528;
export def VARIABLE_G_NV: uint = 0x8529;
export def VARIANT_ARRAY_EXT: uint = 0x87E8;
export def VARIANT_ARRAY_POINTER_EXT: uint = 0x87E9;
export def VARIANT_ARRAY_STRIDE_EXT: uint = 0x87E6;
export def VARIANT_ARRAY_TYPE_EXT: uint = 0x87E7;
export def VARIANT_DATATYPE_EXT: uint = 0x87E5;
export def VARIANT_EXT: uint = 0x87C1;
export def VARIANT_VALUE_EXT: uint = 0x87E4;
export def VBO_FREE_MEMORY_ATI: uint = 0x87FB;
export def VECTOR_EXT: uint = 0x87BF;
export def VENDOR: uint = 0x1F00;
export def VERSION: uint = 0x1F02;
export def VERTEX23_BIT_PGI: uint = 0x00000004;
export def VERTEX4_BIT_PGI: uint = 0x00000008;
export def VERTEX_ARRAY: uint = 0x8074;
export def VERTEX_ARRAY_ADDRESS_NV: uint = 0x8F21;
export def VERTEX_ARRAY_BINDING: uint = 0x85B5;
export def VERTEX_ARRAY_BINDING_APPLE: uint = 0x85B5;
export def VERTEX_ARRAY_BUFFER_BINDING: uint = 0x8896;
export def VERTEX_ARRAY_BUFFER_BINDING_ARB: uint = 0x8896;
export def VERTEX_ARRAY_COUNT_EXT: uint = 0x807D;
export def VERTEX_ARRAY_EXT: uint = 0x8074;
export def VERTEX_ARRAY_LENGTH_NV: uint = 0x8F2B;
export def VERTEX_ARRAY_LIST_IBM: uint = 103070;
export def VERTEX_ARRAY_LIST_STRIDE_IBM: uint = 103080;
export def VERTEX_ARRAY_OBJECT_AMD: uint = 0x9154;
export def VERTEX_ARRAY_OBJECT_EXT: uint = 0x9154;
export def VERTEX_ARRAY_PARALLEL_POINTERS_INTEL: uint = 0x83F5;
export def VERTEX_ARRAY_POINTER: uint = 0x808E;
export def VERTEX_ARRAY_POINTER_EXT: uint = 0x808E;
export def VERTEX_ARRAY_RANGE_APPLE: uint = 0x851D;
export def VERTEX_ARRAY_RANGE_LENGTH_APPLE: uint = 0x851E;
export def VERTEX_ARRAY_RANGE_LENGTH_NV: uint = 0x851E;
export def VERTEX_ARRAY_RANGE_NV: uint = 0x851D;
export def VERTEX_ARRAY_RANGE_POINTER_APPLE: uint = 0x8521;
export def VERTEX_ARRAY_RANGE_POINTER_NV: uint = 0x8521;
export def VERTEX_ARRAY_RANGE_VALID_NV: uint = 0x851F;
export def VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV: uint = 0x8533;
export def VERTEX_ARRAY_SIZE: uint = 0x807A;
export def VERTEX_ARRAY_SIZE_EXT: uint = 0x807A;
export def VERTEX_ARRAY_STORAGE_HINT_APPLE: uint = 0x851F;
export def VERTEX_ARRAY_STRIDE: uint = 0x807C;
export def VERTEX_ARRAY_STRIDE_EXT: uint = 0x807C;
export def VERTEX_ARRAY_TYPE: uint = 0x807B;
export def VERTEX_ARRAY_TYPE_EXT: uint = 0x807B;
export def VERTEX_ATTRIB_ARRAY0_NV: uint = 0x8650;
export def VERTEX_ATTRIB_ARRAY10_NV: uint = 0x865A;
export def VERTEX_ATTRIB_ARRAY11_NV: uint = 0x865B;
export def VERTEX_ATTRIB_ARRAY12_NV: uint = 0x865C;
export def VERTEX_ATTRIB_ARRAY13_NV: uint = 0x865D;
export def VERTEX_ATTRIB_ARRAY14_NV: uint = 0x865E;
export def VERTEX_ATTRIB_ARRAY15_NV: uint = 0x865F;
export def VERTEX_ATTRIB_ARRAY1_NV: uint = 0x8651;
export def VERTEX_ATTRIB_ARRAY2_NV: uint = 0x8652;
export def VERTEX_ATTRIB_ARRAY3_NV: uint = 0x8653;
export def VERTEX_ATTRIB_ARRAY4_NV: uint = 0x8654;
export def VERTEX_ATTRIB_ARRAY5_NV: uint = 0x8655;
export def VERTEX_ATTRIB_ARRAY6_NV: uint = 0x8656;
export def VERTEX_ATTRIB_ARRAY7_NV: uint = 0x8657;
export def VERTEX_ATTRIB_ARRAY8_NV: uint = 0x8658;
export def VERTEX_ATTRIB_ARRAY9_NV: uint = 0x8659;
export def VERTEX_ATTRIB_ARRAY_ADDRESS_NV: uint = 0x8F20;
export def VERTEX_ATTRIB_ARRAY_BARRIER_BIT: uint = 0x00000001;
export def VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT: uint = 0x00000001;
export def VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: uint = 0x889F;
export def VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB: uint = 0x889F;
export def VERTEX_ATTRIB_ARRAY_DIVISOR_ARB: uint = 0x88FE;
export def VERTEX_ATTRIB_ARRAY_ENABLED: uint = 0x8622;
export def VERTEX_ATTRIB_ARRAY_ENABLED_ARB: uint = 0x8622;
export def VERTEX_ATTRIB_ARRAY_INTEGER_EXT: uint = 0x88FD;
export def VERTEX_ATTRIB_ARRAY_INTEGER_NV: uint = 0x88FD;
export def VERTEX_ATTRIB_ARRAY_LENGTH_NV: uint = 0x8F2A;
export def VERTEX_ATTRIB_ARRAY_NORMALIZED: uint = 0x886A;
export def VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB: uint = 0x886A;
export def VERTEX_ATTRIB_ARRAY_POINTER: uint = 0x8645;
export def VERTEX_ATTRIB_ARRAY_POINTER_ARB: uint = 0x8645;
export def VERTEX_ATTRIB_ARRAY_SIZE: uint = 0x8623;
export def VERTEX_ATTRIB_ARRAY_SIZE_ARB: uint = 0x8623;
export def VERTEX_ATTRIB_ARRAY_STRIDE: uint = 0x8624;
export def VERTEX_ATTRIB_ARRAY_STRIDE_ARB: uint = 0x8624;
export def VERTEX_ATTRIB_ARRAY_TYPE: uint = 0x8625;
export def VERTEX_ATTRIB_ARRAY_TYPE_ARB: uint = 0x8625;
export def VERTEX_ATTRIB_ARRAY_UNIFIED_NV: uint = 0x8F1E;
export def VERTEX_ATTRIB_BINDING: uint = 0x82D4;
export def VERTEX_ATTRIB_MAP1_APPLE: uint = 0x8A00;
export def VERTEX_ATTRIB_MAP1_COEFF_APPLE: uint = 0x8A03;
export def VERTEX_ATTRIB_MAP1_DOMAIN_APPLE: uint = 0x8A05;
export def VERTEX_ATTRIB_MAP1_ORDER_APPLE: uint = 0x8A04;
export def VERTEX_ATTRIB_MAP1_SIZE_APPLE: uint = 0x8A02;
export def VERTEX_ATTRIB_MAP2_APPLE: uint = 0x8A01;
export def VERTEX_ATTRIB_MAP2_COEFF_APPLE: uint = 0x8A07;
export def VERTEX_ATTRIB_MAP2_DOMAIN_APPLE: uint = 0x8A09;
export def VERTEX_ATTRIB_MAP2_ORDER_APPLE: uint = 0x8A08;
export def VERTEX_ATTRIB_MAP2_SIZE_APPLE: uint = 0x8A06;
export def VERTEX_ATTRIB_RELATIVE_OFFSET: uint = 0x82D5;
export def VERTEX_BINDING_DIVISOR: uint = 0x82D6;
export def VERTEX_BINDING_OFFSET: uint = 0x82D7;
export def VERTEX_BINDING_STRIDE: uint = 0x82D8;
export def VERTEX_BLEND_ARB: uint = 0x86A7;
export def VERTEX_CONSISTENT_HINT_PGI: uint = 0x1A22B;
export def VERTEX_DATA_HINT_PGI: uint = 0x1A22A;
export def VERTEX_ELEMENT_SWIZZLE_AMD: uint = 0x91A4;
export def VERTEX_ID_NV: uint = 0x8C7B;
export def VERTEX_ID_SWIZZLE_AMD: uint = 0x91A5;
export def VERTEX_PRECLIP_HINT_SGIX: uint = 0x83EF;
export def VERTEX_PRECLIP_SGIX: uint = 0x83EE;
export def VERTEX_PROGRAM_ARB: uint = 0x8620;
export def VERTEX_PROGRAM_BINDING_NV: uint = 0x864A;
export def VERTEX_PROGRAM_NV: uint = 0x8620;
export def VERTEX_PROGRAM_PARAMETER_BUFFER_NV: uint = 0x8DA2;
export def VERTEX_PROGRAM_POINT_SIZE: uint = 0x8642;
export def VERTEX_PROGRAM_POINT_SIZE_ARB: uint = 0x8642;
export def VERTEX_PROGRAM_POINT_SIZE_NV: uint = 0x8642;
export def VERTEX_PROGRAM_TWO_SIDE: uint = 0x8643;
export def VERTEX_PROGRAM_TWO_SIDE_ARB: uint = 0x8643;
export def VERTEX_PROGRAM_TWO_SIDE_NV: uint = 0x8643;
export def VERTEX_SHADER: uint = 0x8B31;
export def VERTEX_SHADER_ARB: uint = 0x8B31;
export def VERTEX_SHADER_BINDING_EXT: uint = 0x8781;
export def VERTEX_SHADER_BIT: uint = 0x00000001;
export def VERTEX_SHADER_EXT: uint = 0x8780;
export def VERTEX_SHADER_INSTRUCTIONS_EXT: uint = 0x87CF;
export def VERTEX_SHADER_INVARIANTS_EXT: uint = 0x87D1;
export def VERTEX_SHADER_INVOCATIONS: uint = 0x82F0;
export def VERTEX_SHADER_INVOCATIONS_ARB: uint = 0x82F0;
export def VERTEX_SHADER_LOCALS_EXT: uint = 0x87D3;
export def VERTEX_SHADER_LOCAL_CONSTANTS_EXT: uint = 0x87D2;
export def VERTEX_SHADER_OPTIMIZED_EXT: uint = 0x87D4;
export def VERTEX_SHADER_VARIANTS_EXT: uint = 0x87D0;
export def VERTEX_SOURCE_ATI: uint = 0x8774;
export def VERTEX_STATE_PROGRAM_NV: uint = 0x8621;
export def VERTEX_STREAM0_ATI: uint = 0x876C;
export def VERTEX_STREAM1_ATI: uint = 0x876D;
export def VERTEX_STREAM2_ATI: uint = 0x876E;
export def VERTEX_STREAM3_ATI: uint = 0x876F;
export def VERTEX_STREAM4_ATI: uint = 0x8770;
export def VERTEX_STREAM5_ATI: uint = 0x8771;
export def VERTEX_STREAM6_ATI: uint = 0x8772;
export def VERTEX_STREAM7_ATI: uint = 0x8773;
export def VERTEX_SUBROUTINE: uint = 0x92E8;
export def VERTEX_SUBROUTINE_UNIFORM: uint = 0x92EE;
export def VERTEX_TEXTURE: uint = 0x829B;
export def VERTEX_WEIGHTING_EXT: uint = 0x8509;
export def VERTEX_WEIGHT_ARRAY_EXT: uint = 0x850C;
export def VERTEX_WEIGHT_ARRAY_POINTER_EXT: uint = 0x8510;
export def VERTEX_WEIGHT_ARRAY_SIZE_EXT: uint = 0x850D;
export def VERTEX_WEIGHT_ARRAY_STRIDE_EXT: uint = 0x850F;
export def VERTEX_WEIGHT_ARRAY_TYPE_EXT: uint = 0x850E;
export def VERTICAL_LINE_TO_NV: uint = 0x08;
export def VERTICES_SUBMITTED: uint = 0x82EE;
export def VERTICES_SUBMITTED_ARB: uint = 0x82EE;
export def VIBRANCE_BIAS_NV: uint = 0x8719;
export def VIBRANCE_SCALE_NV: uint = 0x8713;
export def VIDEO_BUFFER_BINDING_NV: uint = 0x9021;
export def VIDEO_BUFFER_INTERNAL_FORMAT_NV: uint = 0x902D;
export def VIDEO_BUFFER_NV: uint = 0x9020;
export def VIDEO_BUFFER_PITCH_NV: uint = 0x9028;
export def VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV: uint = 0x903B;
export def VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV: uint = 0x903A;
export def VIDEO_CAPTURE_FRAME_HEIGHT_NV: uint = 0x9039;
export def VIDEO_CAPTURE_FRAME_WIDTH_NV: uint = 0x9038;
export def VIDEO_CAPTURE_SURFACE_ORIGIN_NV: uint = 0x903C;
export def VIDEO_CAPTURE_TO_422_SUPPORTED_NV: uint = 0x9026;
export def VIDEO_COLOR_CONVERSION_MATRIX_NV: uint = 0x9029;
export def VIDEO_COLOR_CONVERSION_MAX_NV: uint = 0x902A;
export def VIDEO_COLOR_CONVERSION_MIN_NV: uint = 0x902B;
export def VIDEO_COLOR_CONVERSION_OFFSET_NV: uint = 0x902C;
export def VIEWPORT: uint = 0x0BA2;
export def VIEWPORT_BIT: uint = 0x00000800;
export def VIEWPORT_BOUNDS_RANGE: uint = 0x825D;
export def VIEWPORT_COMMAND_NV: uint = 0x0010;
export def VIEWPORT_INDEX_PROVOKING_VERTEX: uint = 0x825F;
export def VIEWPORT_POSITION_W_SCALE_NV: uint = 0x937C;
export def VIEWPORT_POSITION_W_SCALE_X_COEFF_NV: uint = 0x937D;
export def VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV: uint = 0x937E;
export def VIEWPORT_SUBPIXEL_BITS: uint = 0x825C;
export def VIEWPORT_SWIZZLE_NEGATIVE_W_NV: uint = 0x9357;
export def VIEWPORT_SWIZZLE_NEGATIVE_X_NV: uint = 0x9351;
export def VIEWPORT_SWIZZLE_NEGATIVE_Y_NV: uint = 0x9353;
export def VIEWPORT_SWIZZLE_NEGATIVE_Z_NV: uint = 0x9355;
export def VIEWPORT_SWIZZLE_POSITIVE_W_NV: uint = 0x9356;
export def VIEWPORT_SWIZZLE_POSITIVE_X_NV: uint = 0x9350;
export def VIEWPORT_SWIZZLE_POSITIVE_Y_NV: uint = 0x9352;
export def VIEWPORT_SWIZZLE_POSITIVE_Z_NV: uint = 0x9354;
export def VIEWPORT_SWIZZLE_W_NV: uint = 0x935B;
export def VIEWPORT_SWIZZLE_X_NV: uint = 0x9358;
export def VIEWPORT_SWIZZLE_Y_NV: uint = 0x9359;
export def VIEWPORT_SWIZZLE_Z_NV: uint = 0x935A;
export def VIEW_CLASS_128_BITS: uint = 0x82C4;
export def VIEW_CLASS_16_BITS: uint = 0x82CA;
export def VIEW_CLASS_24_BITS: uint = 0x82C9;
export def VIEW_CLASS_32_BITS: uint = 0x82C8;
export def VIEW_CLASS_48_BITS: uint = 0x82C7;
export def VIEW_CLASS_64_BITS: uint = 0x82C6;
export def VIEW_CLASS_8_BITS: uint = 0x82CB;
export def VIEW_CLASS_96_BITS: uint = 0x82C5;
export def VIEW_CLASS_ASTC_10x10_RGBA: uint = 0x9393;
export def VIEW_CLASS_ASTC_10x5_RGBA: uint = 0x9390;
export def VIEW_CLASS_ASTC_10x6_RGBA: uint = 0x9391;
export def VIEW_CLASS_ASTC_10x8_RGBA: uint = 0x9392;
export def VIEW_CLASS_ASTC_12x10_RGBA: uint = 0x9394;
export def VIEW_CLASS_ASTC_12x12_RGBA: uint = 0x9395;
export def VIEW_CLASS_ASTC_4x4_RGBA: uint = 0x9388;
export def VIEW_CLASS_ASTC_5x4_RGBA: uint = 0x9389;
export def VIEW_CLASS_ASTC_5x5_RGBA: uint = 0x938A;
export def VIEW_CLASS_ASTC_6x5_RGBA: uint = 0x938B;
export def VIEW_CLASS_ASTC_6x6_RGBA: uint = 0x938C;
export def VIEW_CLASS_ASTC_8x5_RGBA: uint = 0x938D;
export def VIEW_CLASS_ASTC_8x6_RGBA: uint = 0x938E;
export def VIEW_CLASS_ASTC_8x8_RGBA: uint = 0x938F;
export def VIEW_CLASS_BPTC_FLOAT: uint = 0x82D3;
export def VIEW_CLASS_BPTC_UNORM: uint = 0x82D2;
export def VIEW_CLASS_EAC_R11: uint = 0x9383;
export def VIEW_CLASS_EAC_RG11: uint = 0x9384;
export def VIEW_CLASS_ETC2_EAC_RGBA: uint = 0x9387;
export def VIEW_CLASS_ETC2_RGB: uint = 0x9385;
export def VIEW_CLASS_ETC2_RGBA: uint = 0x9386;
export def VIEW_CLASS_RGTC1_RED: uint = 0x82D0;
export def VIEW_CLASS_RGTC2_RG: uint = 0x82D1;
export def VIEW_CLASS_S3TC_DXT1_RGB: uint = 0x82CC;
export def VIEW_CLASS_S3TC_DXT1_RGBA: uint = 0x82CD;
export def VIEW_CLASS_S3TC_DXT3_RGBA: uint = 0x82CE;
export def VIEW_CLASS_S3TC_DXT5_RGBA: uint = 0x82CF;
export def VIEW_COMPATIBILITY_CLASS: uint = 0x82B6;
export def VIRTUAL_PAGE_SIZE_INDEX_ARB: uint = 0x91A7;
export def VIRTUAL_PAGE_SIZE_X_AMD: uint = 0x9195;
export def VIRTUAL_PAGE_SIZE_X_ARB: uint = 0x9195;
export def VIRTUAL_PAGE_SIZE_Y_AMD: uint = 0x9196;
export def VIRTUAL_PAGE_SIZE_Y_ARB: uint = 0x9196;
export def VIRTUAL_PAGE_SIZE_Z_AMD: uint = 0x9197;
export def VIRTUAL_PAGE_SIZE_Z_ARB: uint = 0x9197;
export def VIVIDLIGHT_NV: uint = 0x92A6;
export def VOLATILE_APPLE: uint = 0x8A1A;
export def WAIT_FAILED: uint = 0x911D;
export def WARPS_PER_SM_NV: uint = 0x933A;
export def WARP_SIZE_NV: uint = 0x9339;
export def WEIGHTED_AVERAGE_ARB: uint = 0x9367;
export def WEIGHTED_AVERAGE_EXT: uint = 0x9367;
export def WEIGHT_ARRAY_ARB: uint = 0x86AD;
export def WEIGHT_ARRAY_BUFFER_BINDING: uint = 0x889E;
export def WEIGHT_ARRAY_BUFFER_BINDING_ARB: uint = 0x889E;
export def WEIGHT_ARRAY_POINTER_ARB: uint = 0x86AC;
export def WEIGHT_ARRAY_SIZE_ARB: uint = 0x86AB;
export def WEIGHT_ARRAY_STRIDE_ARB: uint = 0x86AA;
export def WEIGHT_ARRAY_TYPE_ARB: uint = 0x86A9;
export def WEIGHT_SUM_UNITY_ARB: uint = 0x86A6;
export def WIDE_LINE_HINT_PGI: uint = 0x1A222;
export def WINDOW_RECTANGLE_EXT: uint = 0x8F12;
export def WINDOW_RECTANGLE_MODE_EXT: uint = 0x8F13;
export def WRAP_BORDER_SUN: uint = 0x81D4;
export def WRITE_DISCARD_NV: uint = 0x88BE;
export def WRITE_ONLY: uint = 0x88B9;
export def WRITE_ONLY_ARB: uint = 0x88B9;
export def WRITE_PIXEL_DATA_RANGE_LENGTH_NV: uint = 0x887A;
export def WRITE_PIXEL_DATA_RANGE_NV: uint = 0x8878;
export def WRITE_PIXEL_DATA_RANGE_POINTER_NV: uint = 0x887C;
export def W_EXT: uint = 0x87D8;
export def XOR: uint = 0x1506;
export def XOR_NV: uint = 0x1506;
export def X_EXT: uint = 0x87D5;
export def YCBAYCR8A_4224_NV: uint = 0x9032;
export def YCBCR_422_APPLE: uint = 0x85B9;
export def YCBCR_MESA: uint = 0x8757;
export def YCBYCR8_422_NV: uint = 0x9031;
export def YCRCBA_SGIX: uint = 0x8319;
export def YCRCB_422_SGIX: uint = 0x81BB;
export def YCRCB_444_SGIX: uint = 0x81BC;
export def YCRCB_SGIX: uint = 0x8318;
export def Y_EXT: uint = 0x87D6;
export def Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV: uint = 0x9036;
export def Z4Y12Z4CB12Z4CR12_444_NV: uint = 0x9037;
export def Z4Y12Z4CB12Z4Y12Z4CR12_422_NV: uint = 0x9035;
export def Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV: uint = 0x9034;
export def Z6Y10Z6CB10Z6Y10Z6CR10_422_NV: uint = 0x9033;
export def ZERO: uint = 0;
export def ZERO_EXT: uint = 0x87DD;
export def ZERO_TO_ONE: uint = 0x935F;
export def ZOOM_X: uint = 0x0D16;
export def ZOOM_Y: uint = 0x0D17;
export def Z_EXT: uint = 0x87D7;

// Function pointers
export type fp_glAccum = fn(op: gl_enum, value: f32) void;
export type fp_glAccumxOES = fn(op: gl_enum, value: i32) void;
export type fp_glAcquireKeyedMutexWin32EXT = fn(memory: uint, key: u64, timeout: uint) u8;
export type fp_glActiveProgramEXT = fn(program: uint) void;
export type fp_glActiveShaderProgram = fn(pipeline: uint, program: uint) void;
export type fp_glActiveStencilFaceEXT = fn(face: gl_enum) void;
export type fp_glActiveTexture = fn(texture: gl_enum) void;
export type fp_glActiveTextureARB = fn(texture: gl_enum) void;
export type fp_glActiveVaryingNV = fn(program: uint, name: *const i8) void;
export type fp_glAlphaFragmentOp1ATI = fn(op: gl_enum, dst: uint, dstMod: uint, arg1: uint, arg1Rep: uint, arg1Mod: uint) void;
export type fp_glAlphaFragmentOp2ATI = fn(op: gl_enum, dst: uint, dstMod: uint, arg1: uint, arg1Rep: uint, arg1Mod: uint, arg2: uint, arg2Rep: uint, arg2Mod: uint) void;
export type fp_glAlphaFragmentOp3ATI = fn(op: gl_enum, dst: uint, dstMod: uint, arg1: uint, arg1Rep: uint, arg1Mod: uint, arg2: uint, arg2Rep: uint, arg2Mod: uint, arg3: uint, arg3Rep: uint, arg3Mod: uint) void;
export type fp_glAlphaFunc = fn(func: gl_enum, ref: f32) void;
export type fp_glAlphaFuncxOES = fn(func: gl_enum, ref: i32) void;
export type fp_glAlphaToCoverageDitherControlNV = fn(mode: gl_enum) void;
export type fp_glApplyFramebufferAttachmentCMAAINTEL = fn() void;
export type fp_glApplyTextureEXT = fn(mode: gl_enum) void;
export type fp_glAreProgramsResidentNV = fn(n: i32, programs: *const uint, residences: *u8) u8;
export type fp_glAreTexturesResident = fn(n: i32, textures: *const uint, residences: *u8) u8;
export type fp_glAreTexturesResidentEXT = fn(n: i32, textures: *const uint, residences: *u8) u8;
export type fp_glArrayElement = fn(i: i32) void;
export type fp_glArrayElementEXT = fn(i: i32) void;
export type fp_glArrayObjectATI = fn(array: gl_enum, size_: i32, type_: gl_enum, stride: i32, buffer: uint, offset_: uint) void;
export type fp_glAsyncCopyBufferSubDataNVX = fn(waitSemaphoreCount: i32, waitSemaphoreArray: *const uint, fenceValueArray: *const u64, readGpu: uint, writeGpuMask: gl_bitfield, readBuffer: uint, writeBuffer: uint, readOffset: size, writeOffset: size, size_: uintptr, signalSemaphoreCount: i32, signalSemaphoreArray: *const uint, signalValueArray: *const u64) uint;
export type fp_glAsyncCopyImageSubDataNVX = fn(waitSemaphoreCount: i32, waitSemaphoreArray: *const uint, waitValueArray: *const u64, srcGpu: uint, dstGpuMask: gl_bitfield, srcName: uint, srcTarget: gl_enum, srcLevel: i32, srcX: i32, srcY: i32, srcZ: i32, dstName: uint, dstTarget: gl_enum, dstLevel: i32, dstX: i32, dstY: i32, dstZ: i32, srcWidth: i32, srcHeight: i32, srcDepth: i32, signalSemaphoreCount: i32, signalSemaphoreArray: *const uint, signalValueArray: *const u64) uint;
export type fp_glAsyncMarkerSGIX = fn(marker: uint) void;
export type fp_glAttachObjectARB = fn(containerObj: uint, obj: uint) void;
export type fp_glAttachShader = fn(program: uint, shader: uint) void;
export type fp_glBegin = fn(mode: gl_enum) void;
export type fp_glBeginConditionalRenderNV = fn(id: uint, mode: gl_enum) void;
export type fp_glBeginConditionalRenderNVX = fn(id: uint) void;
export type fp_glBeginFragmentShaderATI = fn() void;
export type fp_glBeginOcclusionQueryNV = fn(id: uint) void;
export type fp_glBeginPerfMonitorAMD = fn(monitor: uint) void;
export type fp_glBeginPerfQueryINTEL = fn(queryHandle: uint) void;
export type fp_glBeginQuery = fn(target: gl_enum, id: uint) void;
export type fp_glBeginQueryARB = fn(target: gl_enum, id: uint) void;
export type fp_glBeginQueryIndexed = fn(target: gl_enum, index: uint, id: uint) void;
export type fp_glBeginTransformFeedbackEXT = fn(primitiveMode: gl_enum) void;
export type fp_glBeginTransformFeedbackNV = fn(primitiveMode: gl_enum) void;
export type fp_glBeginVertexShaderEXT = fn() void;
export type fp_glBeginVideoCaptureNV = fn(video_capture_slot: uint) void;
export type fp_glBindAttribLocation = fn(program: uint, index: uint, name: *const i8) void;
export type fp_glBindAttribLocationARB = fn(programObj: uint, index: uint, name: *const i8) void;
export type fp_glBindBuffer = fn(target: gl_enum, buffer: uint) void;
export type fp_glBindBufferARB = fn(target: gl_enum, buffer: uint) void;
export type fp_glBindBufferBase = fn(target: gl_enum, index: uint, buffer: uint) void;
export type fp_glBindBufferBaseEXT = fn(target: gl_enum, index: uint, buffer: uint) void;
export type fp_glBindBufferBaseNV = fn(target: gl_enum, index: uint, buffer: uint) void;
export type fp_glBindBufferOffsetEXT = fn(target: gl_enum, index: uint, buffer: uint, offset_: size) void;
export type fp_glBindBufferOffsetNV = fn(target: gl_enum, index: uint, buffer: uint, offset_: size) void;
export type fp_glBindBufferRange = fn(target: gl_enum, index: uint, buffer: uint, offset_: size, size_: uintptr) void;
export type fp_glBindBufferRangeEXT = fn(target: gl_enum, index: uint, buffer: uint, offset_: size, size_: uintptr) void;
export type fp_glBindBufferRangeNV = fn(target: gl_enum, index: uint, buffer: uint, offset_: size, size_: uintptr) void;
export type fp_glBindBuffersBase = fn(target: gl_enum, first: uint, count: i32, buffers: *const uint) void;
export type fp_glBindBuffersRange = fn(target: gl_enum, first: uint, count: i32, buffers: *const uint, offsets: *const size, sizes: *const uintptr) void;
export type fp_glBindFragDataLocationEXT = fn(program: uint, color: uint, name: *const i8) void;
export type fp_glBindFragDataLocationIndexed = fn(program: uint, colorNumber: uint, index: uint, name: *const i8) void;
export type fp_glBindFragmentShaderATI = fn(id: uint) void;
export type fp_glBindFramebuffer = fn(target: gl_enum, framebuffer: uint) void;
export type fp_glBindFramebufferEXT = fn(target: gl_enum, framebuffer: uint) void;
export type fp_glBindImageTexture = fn(unit: uint, texture: uint, level: i32, layered: u8, layer: i32, access: gl_enum, format: gl_enum) void;
export type fp_glBindImageTextureEXT = fn(index: uint, texture: uint, level: i32, layered: u8, layer: i32, access: gl_enum, format: i32) void;
export type fp_glBindImageTextures = fn(first: uint, count: i32, textures: *const uint) void;
export type fp_glBindLightParameterEXT = fn(light: gl_enum, value: gl_enum) uint;
export type fp_glBindMaterialParameterEXT = fn(face: gl_enum, value: gl_enum) uint;
export type fp_glBindMultiTextureEXT = fn(texunit: gl_enum, target: gl_enum, texture: uint) void;
export type fp_glBindParameterEXT = fn(value: gl_enum) uint;
export type fp_glBindProgramARB = fn(target: gl_enum, program: uint) void;
export type fp_glBindProgramNV = fn(target: gl_enum, id: uint) void;
export type fp_glBindProgramPipeline = fn(pipeline: uint) void;
export type fp_glBindRenderbuffer = fn(target: gl_enum, renderbuffer: uint) void;
export type fp_glBindRenderbufferEXT = fn(target: gl_enum, renderbuffer: uint) void;
export type fp_glBindSampler = fn(unit: uint, sampler: uint) void;
export type fp_glBindSamplers = fn(first: uint, count: i32, samplers: *const uint) void;
export type fp_glBindShadingRateImageNV = fn(texture: uint) void;
export type fp_glBindTexGenParameterEXT = fn(unit: gl_enum, coord: gl_enum, value: gl_enum) uint;
export type fp_glBindTexture = fn(target: gl_enum, texture: uint) void;
export type fp_glBindTextureEXT = fn(target: gl_enum, texture: uint) void;
export type fp_glBindTextureUnit = fn(unit: uint, texture: uint) void;
export type fp_glBindTextureUnitParameterEXT = fn(unit: gl_enum, value: gl_enum) uint;
export type fp_glBindTextures = fn(first: uint, count: i32, textures: *const uint) void;
export type fp_glBindTransformFeedback = fn(target: gl_enum, id: uint) void;
export type fp_glBindTransformFeedbackNV = fn(target: gl_enum, id: uint) void;
export type fp_glBindVertexArray = fn(array: uint) void;
export type fp_glBindVertexArrayAPPLE = fn(array: uint) void;
export type fp_glBindVertexBuffer = fn(bindingindex: uint, buffer: uint, offset_: size, stride: i32) void;
export type fp_glBindVertexBuffers = fn(first: uint, count: i32, buffers: *const uint, offsets: *const size, strides: *const i32) void;
export type fp_glBindVertexShaderEXT = fn(id: uint) void;
export type fp_glBindVideoCaptureStreamBufferNV = fn(video_capture_slot: uint, stream: uint, frame_region: gl_enum, offset_: size) void;
export type fp_glBindVideoCaptureStreamTextureNV = fn(video_capture_slot: uint, stream: uint, frame_region: gl_enum, target: gl_enum, texture: uint) void;
export type fp_glBinormal3bEXT = fn(bx: i8, by: i8, bz: i8) void;
export type fp_glBinormal3bvEXT = fn(v: *const i8) void;
export type fp_glBinormal3dEXT = fn(bx: f64, by: f64, bz: f64) void;
export type fp_glBinormal3dvEXT = fn(v: *const f64) void;
export type fp_glBinormal3fEXT = fn(bx: f32, by: f32, bz: f32) void;
export type fp_glBinormal3fvEXT = fn(v: *const f32) void;
export type fp_glBinormal3iEXT = fn(bx: i32, by: i32, bz: i32) void;
export type fp_glBinormal3ivEXT = fn(v: *const i32) void;
export type fp_glBinormal3sEXT = fn(bx: i16, by: i16, bz: i16) void;
export type fp_glBinormal3svEXT = fn(v: *const i16) void;
export type fp_glBinormalPointerEXT = fn(type_: gl_enum, stride: i32, pointer: *const void) void;
export type fp_glBitmap = fn(width: i32, height: i32, xorig: f32, yorig: f32, xmove: f32, ymove: f32, bitmap: *const u8) void;
export type fp_glBitmapxOES = fn(width: i32, height: i32, xorig: i32, yorig: i32, xmove: i32, ymove: i32, bitmap: *const u8) void;
export type fp_glBlendBarrierKHR = fn() void;
export type fp_glBlendBarrierNV = fn() void;
export type fp_glBlendColor = fn(red: f32, green: f32, blue: f32, alpha: f32) void;
export type fp_glBlendColorEXT = fn(red: f32, green: f32, blue: f32, alpha: f32) void;
export type fp_glBlendColorxOES = fn(red: i32, green: i32, blue: i32, alpha: i32) void;
export type fp_glBlendEquation = fn(mode: gl_enum) void;
export type fp_glBlendEquationEXT = fn(mode: gl_enum) void;
export type fp_glBlendEquationIndexedAMD = fn(buf: uint, mode: gl_enum) void;
export type fp_glBlendEquationSeparate = fn(modeRGB: gl_enum, modeAlpha: gl_enum) void;
export type fp_glBlendEquationSeparateEXT = fn(modeRGB: gl_enum, modeAlpha: gl_enum) void;
export type fp_glBlendEquationSeparateIndexedAMD = fn(buf: uint, modeRGB: gl_enum, modeAlpha: gl_enum) void;
export type fp_glBlendEquationSeparateiARB = fn(buf: uint, modeRGB: gl_enum, modeAlpha: gl_enum) void;
export type fp_glBlendEquationiARB = fn(buf: uint, mode: gl_enum) void;
export type fp_glBlendFunc = fn(sfactor: gl_enum, dfactor: gl_enum) void;
export type fp_glBlendFuncIndexedAMD = fn(buf: uint, src: gl_enum, dst: gl_enum) void;
export type fp_glBlendFuncSeparate = fn(sfactorRGB: gl_enum, dfactorRGB: gl_enum, sfactorAlpha: gl_enum, dfactorAlpha: gl_enum) void;
export type fp_glBlendFuncSeparateEXT = fn(sfactorRGB: gl_enum, dfactorRGB: gl_enum, sfactorAlpha: gl_enum, dfactorAlpha: gl_enum) void;
export type fp_glBlendFuncSeparateINGR = fn(sfactorRGB: gl_enum, dfactorRGB: gl_enum, sfactorAlpha: gl_enum, dfactorAlpha: gl_enum) void;
export type fp_glBlendFuncSeparateIndexedAMD = fn(buf: uint, srcRGB: gl_enum, dstRGB: gl_enum, srcAlpha: gl_enum, dstAlpha: gl_enum) void;
export type fp_glBlendFuncSeparateiARB = fn(buf: uint, srcRGB: gl_enum, dstRGB: gl_enum, srcAlpha: gl_enum, dstAlpha: gl_enum) void;
export type fp_glBlendFunciARB = fn(buf: uint, src: gl_enum, dst: gl_enum) void;
export type fp_glBlendParameteriNV = fn(pname: gl_enum, value: i32) void;
export type fp_glBlitFramebuffer = fn(srcX0: i32, srcY0: i32, srcX1: i32, srcY1: i32, dstX0: i32, dstY0: i32, dstX1: i32, dstY1: i32, mask: gl_bitfield, filter: gl_enum) void;
export type fp_glBlitFramebufferEXT = fn(srcX0: i32, srcY0: i32, srcX1: i32, srcY1: i32, dstX0: i32, dstY0: i32, dstX1: i32, dstY1: i32, mask: gl_bitfield, filter: gl_enum) void;
export type fp_glBlitNamedFramebuffer = fn(readFramebuffer: uint, drawFramebuffer: uint, srcX0: i32, srcY0: i32, srcX1: i32, srcY1: i32, dstX0: i32, dstY0: i32, dstX1: i32, dstY1: i32, mask: gl_bitfield, filter: gl_enum) void;
export type fp_glBufferAddressRangeNV = fn(pname: gl_enum, index: uint, address: u64, length: uintptr) void;
export type fp_glBufferAttachMemoryNV = fn(target: gl_enum, memory: uint, offset_: u64) void;
export type fp_glBufferData = fn(target: gl_enum, size_: uintptr, data: *const void, usage: gl_enum) void;
export type fp_glBufferDataARB = fn(target: gl_enum, size_: uintptr, data: *const void, usage: gl_enum) void;
export type fp_glBufferPageCommitmentARB = fn(target: gl_enum, offset_: size, size_: uintptr, commit: u8) void;
export type fp_glBufferPageCommitmentMemNV = fn(target: gl_enum, offset_: size, size_: uintptr, memory: uint, memOffset: u64, commit: u8) void;
export type fp_glBufferParameteriAPPLE = fn(target: gl_enum, pname: gl_enum, param: i32) void;
export type fp_glBufferStorage = fn(target: gl_enum, size_: uintptr, data: *const void, flags: gl_bitfield) void;
export type fp_glBufferStorageExternalEXT = fn(target: gl_enum, offset_: size, size_: uintptr, clientBuffer: *void, flags: gl_bitfield) void;
export type fp_glBufferStorageMemEXT = fn(target: gl_enum, size_: uintptr, memory: uint, offset_: u64) void;
export type fp_glBufferSubData = fn(target: gl_enum, offset_: size, size_: uintptr, data: *const void) void;
export type fp_glBufferSubDataARB = fn(target: gl_enum, offset_: size, size_: uintptr, data: *const void) void;
export type fp_glCallCommandListNV = fn(list: uint) void;
export type fp_glCallList = fn(list: uint) void;
export type fp_glCallLists = fn(n: i32, type_: gl_enum, lists: *const void) void;
export type fp_glCheckFramebufferStatus = fn(target: gl_enum) gl_enum;
export type fp_glCheckFramebufferStatusEXT = fn(target: gl_enum) gl_enum;
export type fp_glCheckNamedFramebufferStatus = fn(framebuffer: uint, target: gl_enum) gl_enum;
export type fp_glCheckNamedFramebufferStatusEXT = fn(framebuffer: uint, target: gl_enum) gl_enum;
export type fp_glClampColorARB = fn(target: gl_enum, clamp: gl_enum) void;
export type fp_glClear = fn(mask: gl_bitfield) void;
export type fp_glClearAccum = fn(red: f32, green: f32, blue: f32, alpha: f32) void;
export type fp_glClearAccumxOES = fn(red: i32, green: i32, blue: i32, alpha: i32) void;
export type fp_glClearBufferData = fn(target: gl_enum, internalformat: gl_enum, format: gl_enum, type_: gl_enum, data: *const void) void;
export type fp_glClearBufferSubData = fn(target: gl_enum, internalformat: gl_enum, offset_: size, size_: uintptr, format: gl_enum, type_: gl_enum, data: *const void) void;
export type fp_glClearColor = fn(red: f32, green: f32, blue: f32, alpha: f32) void;
export type fp_glClearColorIiEXT = fn(red: i32, green: i32, blue: i32, alpha: i32) void;
export type fp_glClearColorIuiEXT = fn(red: uint, green: uint, blue: uint, alpha: uint) void;
export type fp_glClearColorxOES = fn(red: i32, green: i32, blue: i32, alpha: i32) void;
export type fp_glClearDepth = fn(depth: f64) void;
export type fp_glClearDepthdNV = fn(depth: f64) void;
export type fp_glClearDepthf = fn(d: f32) void;
export type fp_glClearDepthfOES = fn(depth: f64) void;
export type fp_glClearDepthxOES = fn(depth: i32) void;
export type fp_glClearIndex = fn(c: f32) void;
export type fp_glClearNamedBufferData = fn(buffer: uint, internalformat: gl_enum, format: gl_enum, type_: gl_enum, data: *const void) void;
export type fp_glClearNamedBufferDataEXT = fn(buffer: uint, internalformat: gl_enum, format: gl_enum, type_: gl_enum, data: *const void) void;
export type fp_glClearNamedBufferSubData = fn(buffer: uint, internalformat: gl_enum, offset_: size, size_: uintptr, format: gl_enum, type_: gl_enum, data: *const void) void;
export type fp_glClearNamedBufferSubDataEXT = fn(buffer: uint, internalformat: gl_enum, offset_: uintptr, size_: uintptr, format: gl_enum, type_: gl_enum, data: *const void) void;
export type fp_glClearNamedFramebufferfi = fn(framebuffer: uint, buffer: gl_enum, drawbuffer: i32, depth: f32, stencil: i32) void;
export type fp_glClearNamedFramebufferfv = fn(framebuffer: uint, buffer: gl_enum, drawbuffer: i32, value: *const f32) void;
export type fp_glClearNamedFramebufferiv = fn(framebuffer: uint, buffer: gl_enum, drawbuffer: i32, value: *const i32) void;
export type fp_glClearNamedFramebufferuiv = fn(framebuffer: uint, buffer: gl_enum, drawbuffer: i32, value: *const uint) void;
export type fp_glClearStencil = fn(s: i32) void;
export type fp_glClearTexImage = fn(texture: uint, level: i32, format: gl_enum, type_: gl_enum, data: *const void) void;
export type fp_glClearTexSubImage = fn(texture: uint, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: gl_enum, type_: gl_enum, data: *const void) void;
export type fp_glClientActiveTexture = fn(texture: gl_enum) void;
export type fp_glClientActiveTextureARB = fn(texture: gl_enum) void;
export type fp_glClientActiveVertexStreamATI = fn(stream: gl_enum) void;
export type fp_glClientAttribDefaultEXT = fn(mask: gl_bitfield) void;
export type fp_glClientWaitSemaphoreui64NVX = fn(fenceObjectCount: i32, semaphoreArray: *const uint, fenceValueArray: *const u64) void;
export type fp_glClientWaitSync = fn(sync: size, flags: gl_bitfield, timeout: u64) gl_enum;
export type fp_glClipControl = fn(origin: gl_enum, depth: gl_enum) void;
export type fp_glClipPlane = fn(plane: gl_enum, equation: *const f64) void;
export type fp_glClipPlanefOES = fn(plane: gl_enum, equation: *const f32) void;
export type fp_glClipPlanexOES = fn(plane: gl_enum, equation: *const i32) void;
export type fp_glColor3b = fn(red: i8, green: i8, blue: i8) void;
export type fp_glColor3bv = fn(v: *const i8) void;
export type fp_glColor3d = fn(red: f64, green: f64, blue: f64) void;
export type fp_glColor3dv = fn(v: *const f64) void;
export type fp_glColor3f = fn(red: f32, green: f32, blue: f32) void;
export type fp_glColor3fVertex3fSUN = fn(r: f32, g: f32, b: f32, x: f32, y: f32, z: f32) void;
export type fp_glColor3fVertex3fvSUN = fn(c: *const f32, v: *const f32) void;
export type fp_glColor3fv = fn(v: *const f32) void;
export type fp_glColor3hNV = fn(red: u16, green: u16, blue: u16) void;
export type fp_glColor3hvNV = fn(v: *const u16) void;
export type fp_glColor3i = fn(red: i32, green: i32, blue: i32) void;
export type fp_glColor3iv = fn(v: *const i32) void;
export type fp_glColor3s = fn(red: i16, green: i16, blue: i16) void;
export type fp_glColor3sv = fn(v: *const i16) void;
export type fp_glColor3ub = fn(red: u8, green: u8, blue: u8) void;
export type fp_glColor3ubv = fn(v: *const u8) void;
export type fp_glColor3ui = fn(red: uint, green: uint, blue: uint) void;
export type fp_glColor3uiv = fn(v: *const uint) void;
export type fp_glColor3us = fn(red: u16, green: u16, blue: u16) void;
export type fp_glColor3usv = fn(v: *const u16) void;
export type fp_glColor3xOES = fn(red: i32, green: i32, blue: i32) void;
export type fp_glColor3xvOES = fn(components: *const i32) void;
export type fp_glColor4b = fn(red: i8, green: i8, blue: i8, alpha: i8) void;
export type fp_glColor4bv = fn(v: *const i8) void;
export type fp_glColor4d = fn(red: f64, green: f64, blue: f64, alpha: f64) void;
export type fp_glColor4dv = fn(v: *const f64) void;
export type fp_glColor4f = fn(red: f32, green: f32, blue: f32, alpha: f32) void;
export type fp_glColor4fNormal3fVertex3fSUN = fn(r: f32, g: f32, b: f32, a: f32, nx: f32, ny: f32, nz: f32, x: f32, y: f32, z: f32) void;
export type fp_glColor4fNormal3fVertex3fvSUN = fn(c: *const f32, n: *const f32, v: *const f32) void;
export type fp_glColor4fv = fn(v: *const f32) void;
export type fp_glColor4hNV = fn(red: u16, green: u16, blue: u16, alpha: u16) void;
export type fp_glColor4hvNV = fn(v: *const u16) void;
export type fp_glColor4i = fn(red: i32, green: i32, blue: i32, alpha: i32) void;
export type fp_glColor4iv = fn(v: *const i32) void;
export type fp_glColor4s = fn(red: i16, green: i16, blue: i16, alpha: i16) void;
export type fp_glColor4sv = fn(v: *const i16) void;
export type fp_glColor4ub = fn(red: u8, green: u8, blue: u8, alpha: u8) void;
export type fp_glColor4ubVertex2fSUN = fn(r: u8, g: u8, b: u8, a: u8, x: f32, y: f32) void;
export type fp_glColor4ubVertex2fvSUN = fn(c: *const u8, v: *const f32) void;
export type fp_glColor4ubVertex3fSUN = fn(r: u8, g: u8, b: u8, a: u8, x: f32, y: f32, z: f32) void;
export type fp_glColor4ubVertex3fvSUN = fn(c: *const u8, v: *const f32) void;
export type fp_glColor4ubv = fn(v: *const u8) void;
export type fp_glColor4ui = fn(red: uint, green: uint, blue: uint, alpha: uint) void;
export type fp_glColor4uiv = fn(v: *const uint) void;
export type fp_glColor4us = fn(red: u16, green: u16, blue: u16, alpha: u16) void;
export type fp_glColor4usv = fn(v: *const u16) void;
export type fp_glColor4xOES = fn(red: i32, green: i32, blue: i32, alpha: i32) void;
export type fp_glColor4xvOES = fn(components: *const i32) void;
export type fp_glColorFormatNV = fn(size_: i32, type_: gl_enum, stride: i32) void;
export type fp_glColorFragmentOp1ATI = fn(op: gl_enum, dst: uint, dstMask: uint, dstMod: uint, arg1: uint, arg1Rep: uint, arg1Mod: uint) void;
export type fp_glColorFragmentOp2ATI = fn(op: gl_enum, dst: uint, dstMask: uint, dstMod: uint, arg1: uint, arg1Rep: uint, arg1Mod: uint, arg2: uint, arg2Rep: uint, arg2Mod: uint) void;
export type fp_glColorFragmentOp3ATI = fn(op: gl_enum, dst: uint, dstMask: uint, dstMod: uint, arg1: uint, arg1Rep: uint, arg1Mod: uint, arg2: uint, arg2Rep: uint, arg2Mod: uint, arg3: uint, arg3Rep: uint, arg3Mod: uint) void;
export type fp_glColorMask = fn(red: u8, green: u8, blue: u8, alpha: u8) void;
export type fp_glColorMaskIndexedEXT = fn(index: uint, r: u8, g: u8, b: u8, a: u8) void;
export type fp_glColorMaterial = fn(face: gl_enum, mode: gl_enum) void;
export type fp_glColorPointer = fn(size_: i32, type_: gl_enum, stride: i32, pointer: *const void) void;
export type fp_glColorPointerEXT = fn(size_: i32, type_: gl_enum, stride: i32, count: i32, pointer: *const void) void;
export type fp_glColorPointerListIBM = fn(size_: i32, type_: gl_enum, stride: i32, pointer: *const *const void, ptrstride: i32) void;
export type fp_glColorPointervINTEL = fn(size_: i32, type_: gl_enum, pointer: *const *const void) void;
export type fp_glColorSubTableEXT = fn(target: gl_enum, start: i32, count: i32, format: gl_enum, type_: gl_enum, data: *const void) void;
export type fp_glColorTableEXT = fn(target: gl_enum, internalFormat: gl_enum, width: i32, format: gl_enum, type_: gl_enum, table: *const void) void;
export type fp_glColorTableParameterfvSGI = fn(target: gl_enum, pname: gl_enum, params: *const f32) void;
export type fp_glColorTableParameterivSGI = fn(target: gl_enum, pname: gl_enum, params: *const i32) void;
export type fp_glColorTableSGI = fn(target: gl_enum, internalformat: gl_enum, width: i32, format: gl_enum, type_: gl_enum, table: *const void) void;
export type fp_glCombinerInputNV = fn(stage: gl_enum, portion: gl_enum, variable: gl_enum, input: gl_enum, mapping: gl_enum, componentUsage: gl_enum) void;
export type fp_glCombinerOutputNV = fn(stage: gl_enum, portion: gl_enum, abOutput: gl_enum, cdOutput: gl_enum, sumOutput: gl_enum, scale: gl_enum, bias: gl_enum, abDotProduct: u8, cdDotProduct: u8, muxSum: u8) void;
export type fp_glCombinerParameterfNV = fn(pname: gl_enum, param: f32) void;
export type fp_glCombinerParameterfvNV = fn(pname: gl_enum, params: *const f32) void;
export type fp_glCombinerParameteriNV = fn(pname: gl_enum, param: i32) void;
export type fp_glCombinerParameterivNV = fn(pname: gl_enum, params: *const i32) void;
export type fp_glCombinerStageParameterfvNV = fn(stage: gl_enum, pname: gl_enum, params: *const f32) void;
export type fp_glCommandListSegmentsNV = fn(list: uint, segments: uint) void;
export type fp_glCompileCommandListNV = fn(list: uint) void;
export type fp_glCompileShader = fn(shader: uint) void;
export type fp_glCompileShaderARB = fn(shaderObj: uint) void;
export type fp_glCompileShaderIncludeARB = fn(shader: uint, count: i32, path: *const *const i8, length: *const i32) void;
export type fp_glCompressedMultiTexImage1DEXT = fn(texunit: gl_enum, target: gl_enum, level: i32, internalformat: gl_enum, width: i32, border: i32, imageSize: i32, bits: *const void) void;
export type fp_glCompressedMultiTexImage2DEXT = fn(texunit: gl_enum, target: gl_enum, level: i32, internalformat: gl_enum, width: i32, height: i32, border: i32, imageSize: i32, bits: *const void) void;
export type fp_glCompressedMultiTexImage3DEXT = fn(texunit: gl_enum, target: gl_enum, level: i32, internalformat: gl_enum, width: i32, height: i32, depth: i32, border: i32, imageSize: i32, bits: *const void) void;
export type fp_glCompressedMultiTexSubImage1DEXT = fn(texunit: gl_enum, target: gl_enum, level: i32, xoffset: i32, width: i32, format: gl_enum, imageSize: i32, bits: *const void) void;
export type fp_glCompressedMultiTexSubImage2DEXT = fn(texunit: gl_enum, target: gl_enum, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: gl_enum, imageSize: i32, bits: *const void) void;
export type fp_glCompressedMultiTexSubImage3DEXT = fn(texunit: gl_enum, target: gl_enum, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: gl_enum, imageSize: i32, bits: *const void) void;
export type fp_glCompressedTexImage1D = fn(target: gl_enum, level: i32, internalformat: gl_enum, width: i32, border: i32, imageSize: i32, data: *const void) void;
export type fp_glCompressedTexImage1DARB = fn(target: gl_enum, level: i32, internalformat: gl_enum, width: i32, border: i32, imageSize: i32, data: *const void) void;
export type fp_glCompressedTexImage2D = fn(target: gl_enum, level: i32, internalformat: gl_enum, width: i32, height: i32, border: i32, imageSize: i32, data: *const void) void;
export type fp_glCompressedTexImage2DARB = fn(target: gl_enum, level: i32, internalformat: gl_enum, width: i32, height: i32, border: i32, imageSize: i32, data: *const void) void;
export type fp_glCompressedTexImage3D = fn(target: gl_enum, level: i32, internalformat: gl_enum, width: i32, height: i32, depth: i32, border: i32, imageSize: i32, data: *const void) void;
export type fp_glCompressedTexImage3DARB = fn(target: gl_enum, level: i32, internalformat: gl_enum, width: i32, height: i32, depth: i32, border: i32, imageSize: i32, data: *const void) void;
export type fp_glCompressedTexSubImage1D = fn(target: gl_enum, level: i32, xoffset: i32, width: i32, format: gl_enum, imageSize: i32, data: *const void) void;
export type fp_glCompressedTexSubImage1DARB = fn(target: gl_enum, level: i32, xoffset: i32, width: i32, format: gl_enum, imageSize: i32, data: *const void) void;
export type fp_glCompressedTexSubImage2D = fn(target: gl_enum, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: gl_enum, imageSize: i32, data: *const void) void;
export type fp_glCompressedTexSubImage2DARB = fn(target: gl_enum, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: gl_enum, imageSize: i32, data: *const void) void;
export type fp_glCompressedTexSubImage3D = fn(target: gl_enum, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: gl_enum, imageSize: i32, data: *const void) void;
export type fp_glCompressedTexSubImage3DARB = fn(target: gl_enum, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: gl_enum, imageSize: i32, data: *const void) void;
export type fp_glCompressedTextureImage1DEXT = fn(texture: uint, target: gl_enum, level: i32, internalformat: gl_enum, width: i32, border: i32, imageSize: i32, bits: *const void) void;
export type fp_glCompressedTextureImage2DEXT = fn(texture: uint, target: gl_enum, level: i32, internalformat: gl_enum, width: i32, height: i32, border: i32, imageSize: i32, bits: *const void) void;
export type fp_glCompressedTextureImage3DEXT = fn(texture: uint, target: gl_enum, level: i32, internalformat: gl_enum, width: i32, height: i32, depth: i32, border: i32, imageSize: i32, bits: *const void) void;
export type fp_glCompressedTextureSubImage1D = fn(texture: uint, level: i32, xoffset: i32, width: i32, format: gl_enum, imageSize: i32, data: *const void) void;
export type fp_glCompressedTextureSubImage1DEXT = fn(texture: uint, target: gl_enum, level: i32, xoffset: i32, width: i32, format: gl_enum, imageSize: i32, bits: *const void) void;
export type fp_glCompressedTextureSubImage2D = fn(texture: uint, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: gl_enum, imageSize: i32, data: *const void) void;
export type fp_glCompressedTextureSubImage2DEXT = fn(texture: uint, target: gl_enum, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: gl_enum, imageSize: i32, bits: *const void) void;
export type fp_glCompressedTextureSubImage3D = fn(texture: uint, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: gl_enum, imageSize: i32, data: *const void) void;
export type fp_glCompressedTextureSubImage3DEXT = fn(texture: uint, target: gl_enum, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: gl_enum, imageSize: i32, bits: *const void) void;
export type fp_glConservativeRasterParameterfNV = fn(pname: gl_enum, value: f32) void;
export type fp_glConservativeRasterParameteriNV = fn(pname: gl_enum, param: i32) void;
export type fp_glConvolutionFilter1DEXT = fn(target: gl_enum, internalformat: gl_enum, width: i32, format: gl_enum, type_: gl_enum, image: *const void) void;
export type fp_glConvolutionFilter2DEXT = fn(target: gl_enum, internalformat: gl_enum, width: i32, height: i32, format: gl_enum, type_: gl_enum, image: *const void) void;
export type fp_glConvolutionParameterfEXT = fn(target: gl_enum, pname: gl_enum, params: f32) void;
export type fp_glConvolutionParameterfvEXT = fn(target: gl_enum, pname: gl_enum, params: *const f32) void;
export type fp_glConvolutionParameteriEXT = fn(target: gl_enum, pname: gl_enum, params: i32) void;
export type fp_glConvolutionParameterivEXT = fn(target: gl_enum, pname: gl_enum, params: *const i32) void;
export type fp_glConvolutionParameterxOES = fn(target: gl_enum, pname: gl_enum, param: i32) void;
export type fp_glConvolutionParameterxvOES = fn(target: gl_enum, pname: gl_enum, params: *const i32) void;
export type fp_glCopyBufferSubData = fn(readTarget: gl_enum, writeTarget: gl_enum, readOffset: size, writeOffset: size, size_: uintptr) void;
export type fp_glCopyColorSubTableEXT = fn(target: gl_enum, start: i32, x: i32, y: i32, width: i32) void;
export type fp_glCopyColorTableSGI = fn(target: gl_enum, internalformat: gl_enum, x: i32, y: i32, width: i32) void;
export type fp_glCopyConvolutionFilter1DEXT = fn(target: gl_enum, internalformat: gl_enum, x: i32, y: i32, width: i32) void;
export type fp_glCopyConvolutionFilter2DEXT = fn(target: gl_enum, internalformat: gl_enum, x: i32, y: i32, width: i32, height: i32) void;
export type fp_glCopyImageSubData = fn(srcName: uint, srcTarget: gl_enum, srcLevel: i32, srcX: i32, srcY: i32, srcZ: i32, dstName: uint, dstTarget: gl_enum, dstLevel: i32, dstX: i32, dstY: i32, dstZ: i32, srcWidth: i32, srcHeight: i32, srcDepth: i32) void;
export type fp_glCopyImageSubDataNV = fn(srcName: uint, srcTarget: gl_enum, srcLevel: i32, srcX: i32, srcY: i32, srcZ: i32, dstName: uint, dstTarget: gl_enum, dstLevel: i32, dstX: i32, dstY: i32, dstZ: i32, width: i32, height: i32, depth: i32) void;
export type fp_glCopyMultiTexImage1DEXT = fn(texunit: gl_enum, target: gl_enum, level: i32, internalformat: gl_enum, x: i32, y: i32, width: i32, border: i32) void;
export type fp_glCopyMultiTexImage2DEXT = fn(texunit: gl_enum, target: gl_enum, level: i32, internalformat: gl_enum, x: i32, y: i32, width: i32, height: i32, border: i32) void;
export type fp_glCopyMultiTexSubImage1DEXT = fn(texunit: gl_enum, target: gl_enum, level: i32, xoffset: i32, x: i32, y: i32, width: i32) void;
export type fp_glCopyMultiTexSubImage2DEXT = fn(texunit: gl_enum, target: gl_enum, level: i32, xoffset: i32, yoffset: i32, x: i32, y: i32, width: i32, height: i32) void;
export type fp_glCopyMultiTexSubImage3DEXT = fn(texunit: gl_enum, target: gl_enum, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, x: i32, y: i32, width: i32, height: i32) void;
export type fp_glCopyNamedBufferSubData = fn(readBuffer: uint, writeBuffer: uint, readOffset: size, writeOffset: size, size_: uintptr) void;
export type fp_glCopyPathNV = fn(resultPath: uint, srcPath: uint) void;
export type fp_glCopyPixels = fn(x: i32, y: i32, width: i32, height: i32, type_: gl_enum) void;
export type fp_glCopyTexImage1D = fn(target: gl_enum, level: i32, internalformat: gl_enum, x: i32, y: i32, width: i32, border: i32) void;
export type fp_glCopyTexImage1DEXT = fn(target: gl_enum, level: i32, internalformat: gl_enum, x: i32, y: i32, width: i32, border: i32) void;
export type fp_glCopyTexImage2D = fn(target: gl_enum, level: i32, internalformat: gl_enum, x: i32, y: i32, width: i32, height: i32, border: i32) void;
export type fp_glCopyTexImage2DEXT = fn(target: gl_enum, level: i32, internalformat: gl_enum, x: i32, y: i32, width: i32, height: i32, border: i32) void;
export type fp_glCopyTexSubImage1D = fn(target: gl_enum, level: i32, xoffset: i32, x: i32, y: i32, width: i32) void;
export type fp_glCopyTexSubImage1DEXT = fn(target: gl_enum, level: i32, xoffset: i32, x: i32, y: i32, width: i32) void;
export type fp_glCopyTexSubImage2D = fn(target: gl_enum, level: i32, xoffset: i32, yoffset: i32, x: i32, y: i32, width: i32, height: i32) void;
export type fp_glCopyTexSubImage2DEXT = fn(target: gl_enum, level: i32, xoffset: i32, yoffset: i32, x: i32, y: i32, width: i32, height: i32) void;
export type fp_glCopyTexSubImage3D = fn(target: gl_enum, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, x: i32, y: i32, width: i32, height: i32) void;
export type fp_glCopyTexSubImage3DEXT = fn(target: gl_enum, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, x: i32, y: i32, width: i32, height: i32) void;
export type fp_glCopyTextureImage1DEXT = fn(texture: uint, target: gl_enum, level: i32, internalformat: gl_enum, x: i32, y: i32, width: i32, border: i32) void;
export type fp_glCopyTextureImage2DEXT = fn(texture: uint, target: gl_enum, level: i32, internalformat: gl_enum, x: i32, y: i32, width: i32, height: i32, border: i32) void;
export type fp_glCopyTextureSubImage1D = fn(texture: uint, level: i32, xoffset: i32, x: i32, y: i32, width: i32) void;
export type fp_glCopyTextureSubImage1DEXT = fn(texture: uint, target: gl_enum, level: i32, xoffset: i32, x: i32, y: i32, width: i32) void;
export type fp_glCopyTextureSubImage2D = fn(texture: uint, level: i32, xoffset: i32, yoffset: i32, x: i32, y: i32, width: i32, height: i32) void;
export type fp_glCopyTextureSubImage2DEXT = fn(texture: uint, target: gl_enum, level: i32, xoffset: i32, yoffset: i32, x: i32, y: i32, width: i32, height: i32) void;
export type fp_glCopyTextureSubImage3D = fn(texture: uint, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, x: i32, y: i32, width: i32, height: i32) void;
export type fp_glCopyTextureSubImage3DEXT = fn(texture: uint, target: gl_enum, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, x: i32, y: i32, width: i32, height: i32) void;
export type fp_glCoverFillPathInstancedNV = fn(numPaths: i32, pathNameType: gl_enum, paths: *const void, pathBase: uint, coverMode: gl_enum, transformType: gl_enum, transformValues: *const f32) void;
export type fp_glCoverFillPathNV = fn(path: uint, coverMode: gl_enum) void;
export type fp_glCoverStrokePathInstancedNV = fn(numPaths: i32, pathNameType: gl_enum, paths: *const void, pathBase: uint, coverMode: gl_enum, transformType: gl_enum, transformValues: *const f32) void;
export type fp_glCoverStrokePathNV = fn(path: uint, coverMode: gl_enum) void;
export type fp_glCoverageModulationNV = fn(components: gl_enum) void;
export type fp_glCoverageModulationTableNV = fn(n: i32, v: *const f32) void;
export type fp_glCreateBuffers = fn(n: i32, buffers: *uint) void;
export type fp_glCreateCommandListsNV = fn(n: i32, lists: *uint) void;
export type fp_glCreateFramebuffers = fn(n: i32, framebuffers: *uint) void;
export type fp_glCreateMemoryObjectsEXT = fn(n: i32, memoryObjects: *uint) void;
export type fp_glCreatePerfQueryINTEL = fn(queryId: uint, queryHandle: *uint) void;
export type fp_glCreateProgram = fn() uint;
export type fp_glCreateProgramObjectARB = fn() uint;
export type fp_glCreateProgramPipelines = fn(n: i32, pipelines: *uint) void;
export type fp_glCreateProgressFenceNVX = fn() uint;
export type fp_glCreateQueries = fn(target: gl_enum, n: i32, ids: *uint) void;
export type fp_glCreateRenderbuffers = fn(n: i32, renderbuffers: *uint) void;
export type fp_glCreateSamplers = fn(n: i32, samplers: *uint) void;
export type fp_glCreateSemaphoresNV = fn(n: i32, semaphores: *uint) void;
export type fp_glCreateShader = fn(type_: gl_enum) uint;
export type fp_glCreateShaderObjectARB = fn(shaderType: gl_enum) uint;
export type fp_glCreateShaderProgramEXT = fn(type_: gl_enum, string: *const i8) uint;
export type fp_glCreateShaderProgramv = fn(type_: gl_enum, count: i32, strings: *const *const i8) uint;
export type fp_glCreateStatesNV = fn(n: i32, states: *uint) void;
export type fp_glCreateSyncFromCLeventARB = fn(context: *void, event: *void, flags: gl_bitfield) size;
export type fp_glCreateTextures = fn(target: gl_enum, n: i32, textures: *uint) void;
export type fp_glCreateTransformFeedbacks = fn(n: i32, ids: *uint) void;
export type fp_glCreateVertexArrays = fn(n: i32, arrays: *uint) void;
export type fp_glCullFace = fn(mode: gl_enum) void;
export type fp_glCullParameterdvEXT = fn(pname: gl_enum, params: *f64) void;
export type fp_glCullParameterfvEXT = fn(pname: gl_enum, params: *f32) void;
export type fp_glCurrentPaletteMatrixARB = fn(index: i32) void;
export type fp_glDebugMessageCallback = fn(callback: GLDEBUGPROC, userParam: *const void) void;
export type fp_glDebugMessageCallbackAMD = fn(callback: GLDEBUGPROCAMD, userParam: *void) void;
export type fp_glDebugMessageCallbackARB = fn(callback: GLDEBUGPROCARB, userParam: *const void) void;
export type fp_glDebugMessageControl = fn(source: gl_enum, type_: gl_enum, severity: gl_enum, count: i32, ids: *const uint, enabled: u8) void;
export type fp_glDebugMessageControlARB = fn(source: gl_enum, type_: gl_enum, severity: gl_enum, count: i32, ids: *const uint, enabled: u8) void;
export type fp_glDebugMessageEnableAMD = fn(category: gl_enum, severity: gl_enum, count: i32, ids: *const uint, enabled: u8) void;
export type fp_glDebugMessageInsert = fn(source: gl_enum, type_: gl_enum, id: uint, severity: gl_enum, length: i32, buf: *const i8) void;
export type fp_glDebugMessageInsertAMD = fn(category: gl_enum, severity: gl_enum, id: uint, length: i32, buf: *const i8) void;
export type fp_glDebugMessageInsertARB = fn(source: gl_enum, type_: gl_enum, id: uint, severity: gl_enum, length: i32, buf: *const i8) void;
export type fp_glDeformSGIX = fn(mask: gl_bitfield) void;
export type fp_glDeformationMap3dSGIX = fn(target: gl_enum, u1: f64, u2: f64, ustride: i32, uorder: i32, v1: f64, v2: f64, vstride: i32, vorder: i32, w1: f64, w2: f64, wstride: i32, worder: i32, points: *const f64) void;
export type fp_glDeformationMap3fSGIX = fn(target: gl_enum, u1: f32, u2: f32, ustride: i32, uorder: i32, v1: f32, v2: f32, vstride: i32, vorder: i32, w1: f32, w2: f32, wstride: i32, worder: i32, points: *const f32) void;
export type fp_glDeleteAsyncMarkersSGIX = fn(marker: uint, range: i32) void;
export type fp_glDeleteBuffers = fn(n: i32, buffers: *const uint) void;
export type fp_glDeleteBuffersARB = fn(n: i32, buffers: *const uint) void;
export type fp_glDeleteCommandListsNV = fn(n: i32, lists: *const uint) void;
export type fp_glDeleteFencesAPPLE = fn(n: i32, fences: *const uint) void;
export type fp_glDeleteFencesNV = fn(n: i32, fences: *const uint) void;
export type fp_glDeleteFragmentShaderATI = fn(id: uint) void;
export type fp_glDeleteFramebuffers = fn(n: i32, framebuffers: *const uint) void;
export type fp_glDeleteFramebuffersEXT = fn(n: i32, framebuffers: *const uint) void;
export type fp_glDeleteLists = fn(list: uint, range: i32) void;
export type fp_glDeleteMemoryObjectsEXT = fn(n: i32, memoryObjects: *const uint) void;
export type fp_glDeleteNamedStringARB = fn(namelen: i32, name: *const i8) void;
export type fp_glDeleteNamesAMD = fn(identifier: gl_enum, num: uint, names: *const uint) void;
export type fp_glDeleteObjectARB = fn(obj: uint) void;
export type fp_glDeleteOcclusionQueriesNV = fn(n: i32, ids: *const uint) void;
export type fp_glDeletePathsNV = fn(path: uint, range: i32) void;
export type fp_glDeletePerfMonitorsAMD = fn(n: i32, monitors: *uint) void;
export type fp_glDeletePerfQueryINTEL = fn(queryHandle: uint) void;
export type fp_glDeleteProgram = fn(program: uint) void;
export type fp_glDeleteProgramPipelines = fn(n: i32, pipelines: *const uint) void;
export type fp_glDeleteProgramsARB = fn(n: i32, programs: *const uint) void;
export type fp_glDeleteProgramsNV = fn(n: i32, programs: *const uint) void;
export type fp_glDeleteQueries = fn(n: i32, ids: *const uint) void;
export type fp_glDeleteQueriesARB = fn(n: i32, ids: *const uint) void;
export type fp_glDeleteQueryResourceTagNV = fn(n: i32, tagIds: *const i32) void;
export type fp_glDeleteRenderbuffers = fn(n: i32, renderbuffers: *const uint) void;
export type fp_glDeleteRenderbuffersEXT = fn(n: i32, renderbuffers: *const uint) void;
export type fp_glDeleteSamplers = fn(count: i32, samplers: *const uint) void;
export type fp_glDeleteSemaphoresEXT = fn(n: i32, semaphores: *const uint) void;
export type fp_glDeleteShader = fn(shader: uint) void;
export type fp_glDeleteStatesNV = fn(n: i32, states: *const uint) void;
export type fp_glDeleteSync = fn(sync: size) void;
export type fp_glDeleteTextures = fn(n: i32, textures: *const uint) void;
export type fp_glDeleteTexturesEXT = fn(n: i32, textures: *const uint) void;
export type fp_glDeleteTransformFeedbacks = fn(n: i32, ids: *const uint) void;
export type fp_glDeleteTransformFeedbacksNV = fn(n: i32, ids: *const uint) void;
export type fp_glDeleteVertexArrays = fn(n: i32, arrays: *const uint) void;
export type fp_glDeleteVertexArraysAPPLE = fn(n: i32, arrays: *const uint) void;
export type fp_glDeleteVertexShaderEXT = fn(id: uint) void;
export type fp_glDepthBoundsEXT = fn(zmin: f64, zmax: f64) void;
export type fp_glDepthBoundsdNV = fn(zmin: f64, zmax: f64) void;
export type fp_glDepthFunc = fn(func: gl_enum) void;
export type fp_glDepthMask = fn(flag: u8) void;
export type fp_glDepthRange = fn(n: f64, f: f64) void;
export type fp_glDepthRangeArraydvNV = fn(first: uint, count: i32, v: *const f64) void;
export type fp_glDepthRangeArrayv = fn(first: uint, count: i32, v: *const f64) void;
export type fp_glDepthRangeIndexed = fn(index: uint, n: f64, f: f64) void;
export type fp_glDepthRangeIndexeddNV = fn(index: uint, n: f64, f: f64) void;
export type fp_glDepthRangedNV = fn(zNear: f64, zFar: f64) void;
export type fp_glDepthRangef = fn(n: f32, f: f32) void;
export type fp_glDepthRangefOES = fn(n: f64, f: f64) void;
export type fp_glDepthRangexOES = fn(n: i32, f: i32) void;
export type fp_glDetachObjectARB = fn(containerObj: uint, attachedObj: uint) void;
export type fp_glDetachShader = fn(program: uint, shader: uint) void;
export type fp_glDetailTexFuncSGIS = fn(target: gl_enum, n: i32, points: *const f32) void;
export type fp_glDisable = fn(cap: gl_enum) void;
export type fp_glDisableClientState = fn(array: gl_enum) void;
export type fp_glDisableClientStateIndexedEXT = fn(array: gl_enum, index: uint) void;
export type fp_glDisableClientStateiEXT = fn(array: gl_enum, index: uint) void;
export type fp_glDisableIndexedEXT = fn(target: gl_enum, index: uint) void;
export type fp_glDisableVariantClientStateEXT = fn(id: uint) void;
export type fp_glDisableVertexArrayAttrib = fn(vaobj: uint, index: uint) void;
export type fp_glDisableVertexArrayAttribEXT = fn(vaobj: uint, index: uint) void;
export type fp_glDisableVertexArrayEXT = fn(vaobj: uint, array: gl_enum) void;
export type fp_glDisableVertexAttribAPPLE = fn(index: uint, pname: gl_enum) void;
export type fp_glDisableVertexAttribArray = fn(index: uint) void;
export type fp_glDisableVertexAttribArrayARB = fn(index: uint) void;
export type fp_glDispatchCompute = fn(num_groups_x: uint, num_groups_y: uint, num_groups_z: uint) void;
export type fp_glDispatchComputeGroupSizeARB = fn(num_groups_x: uint, num_groups_y: uint, num_groups_z: uint, group_size_x: uint, group_size_y: uint, group_size_z: uint) void;
export type fp_glDispatchComputeIndirect = fn(indirect: size) void;
export type fp_glDrawArrays = fn(mode: gl_enum, first: i32, count: i32) void;
export type fp_glDrawArraysEXT = fn(mode: gl_enum, first: i32, count: i32) void;
export type fp_glDrawArraysIndirect = fn(mode: gl_enum, indirect: *const void) void;
export type fp_glDrawArraysInstancedARB = fn(mode: gl_enum, first: i32, count: i32, primcount: i32) void;
export type fp_glDrawArraysInstancedBaseInstance = fn(mode: gl_enum, first: i32, count: i32, instancecount: i32, baseinstance: uint) void;
export type fp_glDrawArraysInstancedEXT = fn(mode: gl_enum, start: i32, count: i32, primcount: i32) void;
export type fp_glDrawBuffer = fn(buf: gl_enum) void;
export type fp_glDrawBuffers = fn(n: i32, bufs: *const gl_enum) void;
export type fp_glDrawBuffersARB = fn(n: i32, bufs: *const gl_enum) void;
export type fp_glDrawBuffersATI = fn(n: i32, bufs: *const gl_enum) void;
export type fp_glDrawCommandsAddressNV = fn(primitiveMode: gl_enum, indirects: *const u64, sizes: *const i32, count: uint) void;
export type fp_glDrawCommandsNV = fn(primitiveMode: gl_enum, buffer: uint, indirects: *const size, sizes: *const i32, count: uint) void;
export type fp_glDrawCommandsStatesAddressNV = fn(indirects: *const u64, sizes: *const i32, states: *const uint, fbos: *const uint, count: uint) void;
export type fp_glDrawCommandsStatesNV = fn(buffer: uint, indirects: *const size, sizes: *const i32, states: *const uint, fbos: *const uint, count: uint) void;
export type fp_glDrawElementArrayAPPLE = fn(mode: gl_enum, first: i32, count: i32) void;
export type fp_glDrawElementArrayATI = fn(mode: gl_enum, count: i32) void;
export type fp_glDrawElements = fn(mode: gl_enum, count: i32, type_: gl_enum, indices: *const void) void;
export type fp_glDrawElementsBaseVertex = fn(mode: gl_enum, count: i32, type_: gl_enum, indices: *const void, basevertex: i32) void;
export type fp_glDrawElementsIndirect = fn(mode: gl_enum, type_: gl_enum, indirect: *const void) void;
export type fp_glDrawElementsInstancedARB = fn(mode: gl_enum, count: i32, type_: gl_enum, indices: *const void, primcount: i32) void;
export type fp_glDrawElementsInstancedBaseInstance = fn(mode: gl_enum, count: i32, type_: gl_enum, indices: *const void, instancecount: i32, baseinstance: uint) void;
export type fp_glDrawElementsInstancedBaseVertex = fn(mode: gl_enum, count: i32, type_: gl_enum, indices: *const void, instancecount: i32, basevertex: i32) void;
export type fp_glDrawElementsInstancedBaseVertexBaseInstance = fn(mode: gl_enum, count: i32, type_: gl_enum, indices: *const void, instancecount: i32, basevertex: i32, baseinstance: uint) void;
export type fp_glDrawElementsInstancedEXT = fn(mode: gl_enum, count: i32, type_: gl_enum, indices: *const void, primcount: i32) void;
export type fp_glDrawMeshArraysSUN = fn(mode: gl_enum, first: i32, count: i32, width: i32) void;
export type fp_glDrawMeshTasksIndirectNV = fn(indirect: size) void;
export type fp_glDrawMeshTasksNV = fn(first: uint, count: uint) void;
export type fp_glDrawPixels = fn(width: i32, height: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glDrawRangeElementArrayAPPLE = fn(mode: gl_enum, start: uint, end: uint, first: i32, count: i32) void;
export type fp_glDrawRangeElementArrayATI = fn(mode: gl_enum, start: uint, end: uint, count: i32) void;
export type fp_glDrawRangeElements = fn(mode: gl_enum, start: uint, end: uint, count: i32, type_: gl_enum, indices: *const void) void;
export type fp_glDrawRangeElementsBaseVertex = fn(mode: gl_enum, start: uint, end: uint, count: i32, type_: gl_enum, indices: *const void, basevertex: i32) void;
export type fp_glDrawRangeElementsEXT = fn(mode: gl_enum, start: uint, end: uint, count: i32, type_: gl_enum, indices: *const void) void;
export type fp_glDrawTextureNV = fn(texture: uint, sampler: uint, x0: f32, y0: f32, x1: f32, y1: f32, z: f32, s0: f32, t0: f32, s1: f32, t1: f32) void;
export type fp_glDrawTransformFeedback = fn(mode: gl_enum, id: uint) void;
export type fp_glDrawTransformFeedbackInstanced = fn(mode: gl_enum, id: uint, instancecount: i32) void;
export type fp_glDrawTransformFeedbackNV = fn(mode: gl_enum, id: uint) void;
export type fp_glDrawTransformFeedbackStream = fn(mode: gl_enum, id: uint, stream: uint) void;
export type fp_glDrawTransformFeedbackStreamInstanced = fn(mode: gl_enum, id: uint, stream: uint, instancecount: i32) void;
export type fp_glDrawVkImageNV = fn(vkImage: u64, sampler: uint, x0: f32, y0: f32, x1: f32, y1: f32, z: f32, s0: f32, t0: f32, s1: f32, t1: f32) void;
export type fp_glEGLImageTargetTexStorageEXT = fn(target: gl_enum, image: *const void, attrib_list: *const i32) void;
export type fp_glEGLImageTargetTextureStorageEXT = fn(texture: uint, image: *const void, attrib_list: *const i32) void;
export type fp_glEdgeFlag = fn(flag: u8) void;
export type fp_glEdgeFlagFormatNV = fn(stride: i32) void;
export type fp_glEdgeFlagPointer = fn(stride: i32, pointer: *const void) void;
export type fp_glEdgeFlagPointerEXT = fn(stride: i32, count: i32, pointer: *const u8) void;
export type fp_glEdgeFlagPointerListIBM = fn(stride: i32, pointer: *const *const u8, ptrstride: i32) void;
export type fp_glEdgeFlagv = fn(flag: *const u8) void;
export type fp_glElementPointerAPPLE = fn(type_: gl_enum, pointer: *const void) void;
export type fp_glElementPointerATI = fn(type_: gl_enum, pointer: *const void) void;
export type fp_glEnable = fn(cap: gl_enum) void;
export type fp_glEnableClientState = fn(array: gl_enum) void;
export type fp_glEnableClientStateIndexedEXT = fn(array: gl_enum, index: uint) void;
export type fp_glEnableClientStateiEXT = fn(array: gl_enum, index: uint) void;
export type fp_glEnableIndexedEXT = fn(target: gl_enum, index: uint) void;
export type fp_glEnableVariantClientStateEXT = fn(id: uint) void;
export type fp_glEnableVertexArrayAttrib = fn(vaobj: uint, index: uint) void;
export type fp_glEnableVertexArrayAttribEXT = fn(vaobj: uint, index: uint) void;
export type fp_glEnableVertexArrayEXT = fn(vaobj: uint, array: gl_enum) void;
export type fp_glEnableVertexAttribAPPLE = fn(index: uint, pname: gl_enum) void;
export type fp_glEnableVertexAttribArray = fn(index: uint) void;
export type fp_glEnableVertexAttribArrayARB = fn(index: uint) void;
export type fp_glEnd = fn() void;
export type fp_glEndConditionalRenderNV = fn() void;
export type fp_glEndConditionalRenderNVX = fn() void;
export type fp_glEndFragmentShaderATI = fn() void;
export type fp_glEndList = fn() void;
export type fp_glEndOcclusionQueryNV = fn() void;
export type fp_glEndPerfMonitorAMD = fn(monitor: uint) void;
export type fp_glEndPerfQueryINTEL = fn(queryHandle: uint) void;
export type fp_glEndQuery = fn(target: gl_enum) void;
export type fp_glEndQueryARB = fn(target: gl_enum) void;
export type fp_glEndQueryIndexed = fn(target: gl_enum, index: uint) void;
export type fp_glEndTransformFeedbackEXT = fn() void;
export type fp_glEndTransformFeedbackNV = fn() void;
export type fp_glEndVertexShaderEXT = fn() void;
export type fp_glEndVideoCaptureNV = fn(video_capture_slot: uint) void;
export type fp_glEvalCoord1d = fn(u: f64) void;
export type fp_glEvalCoord1dv = fn(u: *const f64) void;
export type fp_glEvalCoord1f = fn(u: f32) void;
export type fp_glEvalCoord1fv = fn(u: *const f32) void;
export type fp_glEvalCoord1xOES = fn(u: i32) void;
export type fp_glEvalCoord1xvOES = fn(coords: *const i32) void;
export type fp_glEvalCoord2d = fn(u: f64, v: f64) void;
export type fp_glEvalCoord2dv = fn(u: *const f64) void;
export type fp_glEvalCoord2f = fn(u: f32, v: f32) void;
export type fp_glEvalCoord2fv = fn(u: *const f32) void;
export type fp_glEvalCoord2xOES = fn(u: i32, v: i32) void;
export type fp_glEvalCoord2xvOES = fn(coords: *const i32) void;
export type fp_glEvalMapsNV = fn(target: gl_enum, mode: gl_enum) void;
export type fp_glEvalMesh1 = fn(mode: gl_enum, i1: i32, i2: i32) void;
export type fp_glEvalMesh2 = fn(mode: gl_enum, i1: i32, i2: i32, j1: i32, j2: i32) void;
export type fp_glEvalPoint1 = fn(i: i32) void;
export type fp_glEvalPoint2 = fn(i: i32, j: i32) void;
export type fp_glEvaluateDepthValuesARB = fn() void;
export type fp_glExecuteProgramNV = fn(target: gl_enum, id: uint, params: *const f32) void;
export type fp_glExtractComponentEXT = fn(res: uint, src: uint, num: uint) void;
export type fp_glFeedbackBuffer = fn(size_: i32, type_: gl_enum, buffer: *f32) void;
export type fp_glFeedbackBufferxOES = fn(n: i32, type_: gl_enum, buffer: *const i32) void;
export type fp_glFenceSync = fn(condition: gl_enum, flags: gl_bitfield) size;
export type fp_glFinalCombinerInputNV = fn(variable: gl_enum, input: gl_enum, mapping: gl_enum, componentUsage: gl_enum) void;
export type fp_glFinish = fn() void;
export type fp_glFinishAsyncSGIX = fn(markerp: *uint) i32;
export type fp_glFinishFenceAPPLE = fn(fence: uint) void;
export type fp_glFinishFenceNV = fn(fence: uint) void;
export type fp_glFinishObjectAPPLE = fn(object: gl_enum, name: i32) void;
export type fp_glFinishTextureSUNX = fn() void;
export type fp_glFlush = fn() void;
export type fp_glFlushMappedBufferRange = fn(target: gl_enum, offset_: size, length: uintptr) void;
export type fp_glFlushMappedBufferRangeAPPLE = fn(target: gl_enum, offset_: size, size_: uintptr) void;
export type fp_glFlushMappedNamedBufferRange = fn(buffer: uint, offset_: size, length: uintptr) void;
export type fp_glFlushMappedNamedBufferRangeEXT = fn(buffer: uint, offset_: size, length: uintptr) void;
export type fp_glFlushPixelDataRangeNV = fn(target: gl_enum) void;
export type fp_glFlushRasterSGIX = fn() void;
export type fp_glFlushStaticDataIBM = fn(target: gl_enum) void;
export type fp_glFlushVertexArrayRangeAPPLE = fn(length: i32, pointer: *void) void;
export type fp_glFlushVertexArrayRangeNV = fn() void;
export type fp_glFogCoordFormatNV = fn(type_: gl_enum, stride: i32) void;
export type fp_glFogCoordPointer = fn(type_: gl_enum, stride: i32, pointer: *const void) void;
export type fp_glFogCoordPointerEXT = fn(type_: gl_enum, stride: i32, pointer: *const void) void;
export type fp_glFogCoordPointerListIBM = fn(type_: gl_enum, stride: i32, pointer: *const *const void, ptrstride: i32) void;
export type fp_glFogCoordd = fn(coord: f64) void;
export type fp_glFogCoorddEXT = fn(coord: f64) void;
export type fp_glFogCoorddv = fn(coord: *const f64) void;
export type fp_glFogCoorddvEXT = fn(coord: *const f64) void;
export type fp_glFogCoordf = fn(coord: f32) void;
export type fp_glFogCoordfEXT = fn(coord: f32) void;
export type fp_glFogCoordfv = fn(coord: *const f32) void;
export type fp_glFogCoordfvEXT = fn(coord: *const f32) void;
export type fp_glFogCoordhNV = fn(fog: u16) void;
export type fp_glFogCoordhvNV = fn(fog: *const u16) void;
export type fp_glFogFuncSGIS = fn(n: i32, points: *const f32) void;
export type fp_glFogf = fn(pname: gl_enum, param: f32) void;
export type fp_glFogfv = fn(pname: gl_enum, params: *const f32) void;
export type fp_glFogi = fn(pname: gl_enum, param: i32) void;
export type fp_glFogiv = fn(pname: gl_enum, params: *const i32) void;
export type fp_glFogxOES = fn(pname: gl_enum, param: i32) void;
export type fp_glFogxvOES = fn(pname: gl_enum, param: *const i32) void;
export type fp_glFragmentColorMaterialSGIX = fn(face: gl_enum, mode: gl_enum) void;
export type fp_glFragmentCoverageColorNV = fn(color: uint) void;
export type fp_glFragmentLightModelfSGIX = fn(pname: gl_enum, param: f32) void;
export type fp_glFragmentLightModelfvSGIX = fn(pname: gl_enum, params: *const f32) void;
export type fp_glFragmentLightModeliSGIX = fn(pname: gl_enum, param: i32) void;
export type fp_glFragmentLightModelivSGIX = fn(pname: gl_enum, params: *const i32) void;
export type fp_glFragmentLightfSGIX = fn(light: gl_enum, pname: gl_enum, param: f32) void;
export type fp_glFragmentLightfvSGIX = fn(light: gl_enum, pname: gl_enum, params: *const f32) void;
export type fp_glFragmentLightiSGIX = fn(light: gl_enum, pname: gl_enum, param: i32) void;
export type fp_glFragmentLightivSGIX = fn(light: gl_enum, pname: gl_enum, params: *const i32) void;
export type fp_glFragmentMaterialfSGIX = fn(face: gl_enum, pname: gl_enum, param: f32) void;
export type fp_glFragmentMaterialfvSGIX = fn(face: gl_enum, pname: gl_enum, params: *const f32) void;
export type fp_glFragmentMaterialiSGIX = fn(face: gl_enum, pname: gl_enum, param: i32) void;
export type fp_glFragmentMaterialivSGIX = fn(face: gl_enum, pname: gl_enum, params: *const i32) void;
export type fp_glFrameTerminatorGREMEDY = fn() void;
export type fp_glFrameZoomSGIX = fn(factor: i32) void;
export type fp_glFramebufferDrawBufferEXT = fn(framebuffer: uint, mode: gl_enum) void;
export type fp_glFramebufferDrawBuffersEXT = fn(framebuffer: uint, n: i32, bufs: *const gl_enum) void;
export type fp_glFramebufferFetchBarrierEXT = fn() void;
export type fp_glFramebufferParameteri = fn(target: gl_enum, pname: gl_enum, param: i32) void;
export type fp_glFramebufferParameteriMESA = fn(target: gl_enum, pname: gl_enum, param: i32) void;
export type fp_glFramebufferReadBufferEXT = fn(framebuffer: uint, mode: gl_enum) void;
export type fp_glFramebufferRenderbuffer = fn(target: gl_enum, attachment: gl_enum, renderbuffertarget: gl_enum, renderbuffer: uint) void;
export type fp_glFramebufferRenderbufferEXT = fn(target: gl_enum, attachment: gl_enum, renderbuffertarget: gl_enum, renderbuffer: uint) void;
export type fp_glFramebufferSampleLocationsfvARB = fn(target: gl_enum, start: uint, count: i32, v: *const f32) void;
export type fp_glFramebufferSampleLocationsfvNV = fn(target: gl_enum, start: uint, count: i32, v: *const f32) void;
export type fp_glFramebufferSamplePositionsfvAMD = fn(target: gl_enum, numsamples: uint, pixelindex: uint, values: *const f32) void;
export type fp_glFramebufferTexture1D = fn(target: gl_enum, attachment: gl_enum, textarget: gl_enum, texture: uint, level: i32) void;
export type fp_glFramebufferTexture1DEXT = fn(target: gl_enum, attachment: gl_enum, textarget: gl_enum, texture: uint, level: i32) void;
export type fp_glFramebufferTexture2D = fn(target: gl_enum, attachment: gl_enum, textarget: gl_enum, texture: uint, level: i32) void;
export type fp_glFramebufferTexture2DEXT = fn(target: gl_enum, attachment: gl_enum, textarget: gl_enum, texture: uint, level: i32) void;
export type fp_glFramebufferTexture3D = fn(target: gl_enum, attachment: gl_enum, textarget: gl_enum, texture: uint, level: i32, zoffset: i32) void;
export type fp_glFramebufferTexture3DEXT = fn(target: gl_enum, attachment: gl_enum, textarget: gl_enum, texture: uint, level: i32, zoffset: i32) void;
export type fp_glFramebufferTextureARB = fn(target: gl_enum, attachment: gl_enum, texture: uint, level: i32) void;
export type fp_glFramebufferTextureEXT = fn(target: gl_enum, attachment: gl_enum, texture: uint, level: i32) void;
export type fp_glFramebufferTextureFaceARB = fn(target: gl_enum, attachment: gl_enum, texture: uint, level: i32, face: gl_enum) void;
export type fp_glFramebufferTextureFaceEXT = fn(target: gl_enum, attachment: gl_enum, texture: uint, level: i32, face: gl_enum) void;
export type fp_glFramebufferTextureLayer = fn(target: gl_enum, attachment: gl_enum, texture: uint, level: i32, layer: i32) void;
export type fp_glFramebufferTextureLayerARB = fn(target: gl_enum, attachment: gl_enum, texture: uint, level: i32, layer: i32) void;
export type fp_glFramebufferTextureLayerEXT = fn(target: gl_enum, attachment: gl_enum, texture: uint, level: i32, layer: i32) void;
export type fp_glFramebufferTextureMultiviewOVR = fn(target: gl_enum, attachment: gl_enum, texture: uint, level: i32, baseViewIndex: i32, numViews: i32) void;
export type fp_glFreeObjectBufferATI = fn(buffer: uint) void;
export type fp_glFrontFace = fn(mode: gl_enum) void;
export type fp_glFrustum = fn(left: f64, right: f64, bottom: f64, top: f64, zNear: f64, zFar: f64) void;
export type fp_glFrustumfOES = fn(l: f32, r: f32, b: f32, t: f32, n: f32, f: f32) void;
export type fp_glFrustumxOES = fn(l: i32, r: i32, b: i32, t: i32, n: i32, f: i32) void;
export type fp_glGenAsyncMarkersSGIX = fn(range: i32) uint;
export type fp_glGenBuffers = fn(n: i32, buffers: *uint) void;
export type fp_glGenBuffersARB = fn(n: i32, buffers: *uint) void;
export type fp_glGenFencesAPPLE = fn(n: i32, fences: *uint) void;
export type fp_glGenFencesNV = fn(n: i32, fences: *uint) void;
export type fp_glGenFragmentShadersATI = fn(range: uint) uint;
export type fp_glGenFramebuffers = fn(n: i32, framebuffers: *uint) void;
export type fp_glGenFramebuffersEXT = fn(n: i32, framebuffers: *uint) void;
export type fp_glGenLists = fn(range: i32) uint;
export type fp_glGenNamesAMD = fn(identifier: gl_enum, num: uint, names: *uint) void;
export type fp_glGenOcclusionQueriesNV = fn(n: i32, ids: *uint) void;
export type fp_glGenPathsNV = fn(range: i32) uint;
export type fp_glGenPerfMonitorsAMD = fn(n: i32, monitors: *uint) void;
export type fp_glGenProgramPipelines = fn(n: i32, pipelines: *uint) void;
export type fp_glGenProgramsARB = fn(n: i32, programs: *uint) void;
export type fp_glGenProgramsNV = fn(n: i32, programs: *uint) void;
export type fp_glGenQueries = fn(n: i32, ids: *uint) void;
export type fp_glGenQueriesARB = fn(n: i32, ids: *uint) void;
export type fp_glGenQueryResourceTagNV = fn(n: i32, tagIds: *i32) void;
export type fp_glGenRenderbuffers = fn(n: i32, renderbuffers: *uint) void;
export type fp_glGenRenderbuffersEXT = fn(n: i32, renderbuffers: *uint) void;
export type fp_glGenSamplers = fn(count: i32, samplers: *uint) void;
export type fp_glGenSemaphoresEXT = fn(n: i32, semaphores: *uint) void;
export type fp_glGenSymbolsEXT = fn(datatype: gl_enum, storagetype: gl_enum, range: gl_enum, components: uint) uint;
export type fp_glGenTextures = fn(n: i32, textures: *uint) void;
export type fp_glGenTexturesEXT = fn(n: i32, textures: *uint) void;
export type fp_glGenTransformFeedbacks = fn(n: i32, ids: *uint) void;
export type fp_glGenTransformFeedbacksNV = fn(n: i32, ids: *uint) void;
export type fp_glGenVertexArrays = fn(n: i32, arrays: *uint) void;
export type fp_glGenVertexArraysAPPLE = fn(n: i32, arrays: *uint) void;
export type fp_glGenVertexShadersEXT = fn(range: uint) uint;
export type fp_glGenerateMipmap = fn(target: gl_enum) void;
export type fp_glGenerateMipmapEXT = fn(target: gl_enum) void;
export type fp_glGenerateMultiTexMipmapEXT = fn(texunit: gl_enum, target: gl_enum) void;
export type fp_glGenerateTextureMipmap = fn(texture: uint) void;
export type fp_glGenerateTextureMipmapEXT = fn(texture: uint, target: gl_enum) void;
export type fp_glGetActiveAtomicCounterBufferiv = fn(program: uint, bufferIndex: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetActiveAttrib = fn(program: uint, index: uint, bufSize: i32, length: *i32, size_: *i32, type_: *gl_enum, name: *i8) void;
export type fp_glGetActiveAttribARB = fn(programObj: uint, index: uint, maxLength: i32, length: *i32, size_: *i32, type_: *gl_enum, name: *i8) void;
export type fp_glGetActiveSubroutineName = fn(program: uint, shadertype: gl_enum, index: uint, bufSize: i32, length: *i32, name: *i8) void;
export type fp_glGetActiveSubroutineUniformName = fn(program: uint, shadertype: gl_enum, index: uint, bufSize: i32, length: *i32, name: *i8) void;
export type fp_glGetActiveSubroutineUniformiv = fn(program: uint, shadertype: gl_enum, index: uint, pname: gl_enum, values: *i32) void;
export type fp_glGetActiveUniform = fn(program: uint, index: uint, bufSize: i32, length: *i32, size_: *i32, type_: *gl_enum, name: *i8) void;
export type fp_glGetActiveUniformARB = fn(programObj: uint, index: uint, maxLength: i32, length: *i32, size_: *i32, type_: *gl_enum, name: *i8) void;
export type fp_glGetActiveUniformBlockName = fn(program: uint, uniformBlockIndex: uint, bufSize: i32, length: *i32, uniformBlockName: *i8) void;
export type fp_glGetActiveUniformBlockiv = fn(program: uint, uniformBlockIndex: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetActiveUniformName = fn(program: uint, uniformIndex: uint, bufSize: i32, length: *i32, uniformName: *i8) void;
export type fp_glGetActiveUniformsiv = fn(program: uint, uniformCount: i32, uniformIndices: *const uint, pname: gl_enum, params: *i32) void;
export type fp_glGetActiveVaryingNV = fn(program: uint, index: uint, bufSize: i32, length: *i32, size_: *i32, type_: *gl_enum, name: *i8) void;
export type fp_glGetArrayObjectfvATI = fn(array: gl_enum, pname: gl_enum, params: *f32) void;
export type fp_glGetArrayObjectivATI = fn(array: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetAttachedObjectsARB = fn(containerObj: uint, maxCount: i32, count: *i32, obj: *uint) void;
export type fp_glGetAttachedShaders = fn(program: uint, maxCount: i32, count: *i32, shaders: *uint) void;
export type fp_glGetAttribLocation = fn(program: uint, name: *const i8) i32;
export type fp_glGetAttribLocationARB = fn(programObj: uint, name: *const i8) i32;
export type fp_glGetBooleanIndexedvEXT = fn(target: gl_enum, index: uint, data: *u8) void;
export type fp_glGetBooleanv = fn(pname: gl_enum, data: *u8) void;
export type fp_glGetBufferParameteriv = fn(target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetBufferParameterivARB = fn(target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetBufferParameterui64vNV = fn(target: gl_enum, pname: gl_enum, params: *u64) void;
export type fp_glGetBufferPointerv = fn(target: gl_enum, pname: gl_enum, params: **void) void;
export type fp_glGetBufferPointervARB = fn(target: gl_enum, pname: gl_enum, params: **void) void;
export type fp_glGetBufferSubData = fn(target: gl_enum, offset_: size, size_: uintptr, data: *void) void;
export type fp_glGetBufferSubDataARB = fn(target: gl_enum, offset_: size, size_: uintptr, data: *void) void;
export type fp_glGetClipPlane = fn(plane: gl_enum, equation: *f64) void;
export type fp_glGetClipPlanefOES = fn(plane: gl_enum, equation: *f32) void;
export type fp_glGetClipPlanexOES = fn(plane: gl_enum, equation: *i32) void;
export type fp_glGetColorTableEXT = fn(target: gl_enum, format: gl_enum, type_: gl_enum, data: *void) void;
export type fp_glGetColorTableParameterfvEXT = fn(target: gl_enum, pname: gl_enum, params: *f32) void;
export type fp_glGetColorTableParameterfvSGI = fn(target: gl_enum, pname: gl_enum, params: *f32) void;
export type fp_glGetColorTableParameterivEXT = fn(target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetColorTableParameterivSGI = fn(target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetColorTableSGI = fn(target: gl_enum, format: gl_enum, type_: gl_enum, table: *void) void;
export type fp_glGetCombinerInputParameterfvNV = fn(stage: gl_enum, portion: gl_enum, variable: gl_enum, pname: gl_enum, params: *f32) void;
export type fp_glGetCombinerInputParameterivNV = fn(stage: gl_enum, portion: gl_enum, variable: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetCombinerOutputParameterfvNV = fn(stage: gl_enum, portion: gl_enum, pname: gl_enum, params: *f32) void;
export type fp_glGetCombinerOutputParameterivNV = fn(stage: gl_enum, portion: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetCombinerStageParameterfvNV = fn(stage: gl_enum, pname: gl_enum, params: *f32) void;
export type fp_glGetCommandHeaderNV = fn(tokenID: gl_enum, size_: uint) uint;
export type fp_glGetCompressedMultiTexImageEXT = fn(texunit: gl_enum, target: gl_enum, lod: i32, img: *void) void;
export type fp_glGetCompressedTexImage = fn(target: gl_enum, level: i32, img: *void) void;
export type fp_glGetCompressedTexImageARB = fn(target: gl_enum, level: i32, img: *void) void;
export type fp_glGetCompressedTextureImage = fn(texture: uint, level: i32, bufSize: i32, pixels: *void) void;
export type fp_glGetCompressedTextureImageEXT = fn(texture: uint, target: gl_enum, lod: i32, img: *void) void;
export type fp_glGetCompressedTextureSubImage = fn(texture: uint, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, bufSize: i32, pixels: *void) void;
export type fp_glGetConvolutionFilterEXT = fn(target: gl_enum, format: gl_enum, type_: gl_enum, image: *void) void;
export type fp_glGetConvolutionParameterfvEXT = fn(target: gl_enum, pname: gl_enum, params: *f32) void;
export type fp_glGetConvolutionParameterivEXT = fn(target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetConvolutionParameterxvOES = fn(target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetCoverageModulationTableNV = fn(bufSize: i32, v: *f32) void;
export type fp_glGetDebugMessageLog = fn(count: uint, bufSize: i32, sources: *gl_enum, types: *gl_enum, ids: *uint, severities: *gl_enum, lengths: *i32, messageLog: *i8) uint;
export type fp_glGetDebugMessageLogAMD = fn(count: uint, bufSize: i32, categories: *gl_enum, severities: *uint, ids: *uint, lengths: *i32, message: *i8) uint;
export type fp_glGetDebugMessageLogARB = fn(count: uint, bufSize: i32, sources: *gl_enum, types: *gl_enum, ids: *uint, severities: *gl_enum, lengths: *i32, messageLog: *i8) uint;
export type fp_glGetDetailTexFuncSGIS = fn(target: gl_enum, points: *f32) void;
export type fp_glGetDoubleIndexedvEXT = fn(target: gl_enum, index: uint, data: *f64) void;
export type fp_glGetDoublei_v = fn(target: gl_enum, index: uint, data: *f64) void;
export type fp_glGetDoublei_vEXT = fn(pname: gl_enum, index: uint, params: *f64) void;
export type fp_glGetDoublev = fn(pname: gl_enum, data: *f64) void;
export type fp_glGetError = fn() gl_enum;
export type fp_glGetFenceivNV = fn(fence: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetFinalCombinerInputParameterfvNV = fn(variable: gl_enum, pname: gl_enum, params: *f32) void;
export type fp_glGetFinalCombinerInputParameterivNV = fn(variable: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetFirstPerfQueryIdINTEL = fn(queryId: *uint) void;
export type fp_glGetFixedvOES = fn(pname: gl_enum, params: *i32) void;
export type fp_glGetFloatIndexedvEXT = fn(target: gl_enum, index: uint, data: *f32) void;
export type fp_glGetFloati_v = fn(target: gl_enum, index: uint, data: *f32) void;
export type fp_glGetFloati_vEXT = fn(pname: gl_enum, index: uint, params: *f32) void;
export type fp_glGetFloatv = fn(pname: gl_enum, data: *f32) void;
export type fp_glGetFogFuncSGIS = fn(points: *f32) void;
export type fp_glGetFragDataIndex = fn(program: uint, name: *const i8) i32;
export type fp_glGetFragDataLocationEXT = fn(program: uint, name: *const i8) i32;
export type fp_glGetFragmentLightfvSGIX = fn(light: gl_enum, pname: gl_enum, params: *f32) void;
export type fp_glGetFragmentLightivSGIX = fn(light: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetFragmentMaterialfvSGIX = fn(face: gl_enum, pname: gl_enum, params: *f32) void;
export type fp_glGetFragmentMaterialivSGIX = fn(face: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetFramebufferAttachmentParameteriv = fn(target: gl_enum, attachment: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetFramebufferAttachmentParameterivEXT = fn(target: gl_enum, attachment: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetFramebufferParameterfvAMD = fn(target: gl_enum, pname: gl_enum, numsamples: uint, pixelindex: uint, size_: i32, values: *f32) void;
export type fp_glGetFramebufferParameteriv = fn(target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetFramebufferParameterivEXT = fn(framebuffer: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetFramebufferParameterivMESA = fn(target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetGraphicsResetStatus = fn() gl_enum;
export type fp_glGetGraphicsResetStatusARB = fn() gl_enum;
export type fp_glGetHandleARB = fn(pname: gl_enum) uint;
export type fp_glGetHistogramEXT = fn(target: gl_enum, reset: u8, format: gl_enum, type_: gl_enum, values: *void) void;
export type fp_glGetHistogramParameterfvEXT = fn(target: gl_enum, pname: gl_enum, params: *f32) void;
export type fp_glGetHistogramParameterivEXT = fn(target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetHistogramParameterxvOES = fn(target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetImageHandleARB = fn(texture: uint, level: i32, layered: u8, layer: i32, format: gl_enum) u64;
export type fp_glGetImageHandleNV = fn(texture: uint, level: i32, layered: u8, layer: i32, format: gl_enum) u64;
export type fp_glGetImageTransformParameterfvHP = fn(target: gl_enum, pname: gl_enum, params: *f32) void;
export type fp_glGetImageTransformParameterivHP = fn(target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetInfoLogARB = fn(obj: uint, maxLength: i32, length: *i32, infoLog: *i8) void;
export type fp_glGetInstrumentsSGIX = fn() i32;
export type fp_glGetInteger64v = fn(pname: gl_enum, data: *i64) void;
export type fp_glGetIntegerIndexedvEXT = fn(target: gl_enum, index: uint, data: *i32) void;
export type fp_glGetIntegeri_v = fn(target: gl_enum, index: uint, data: *i32) void;
export type fp_glGetIntegerui64i_vNV = fn(value: gl_enum, index: uint, result: *u64) void;
export type fp_glGetIntegerui64vNV = fn(value: gl_enum, result: *u64) void;
export type fp_glGetIntegerv = fn(pname: gl_enum, data: *i32) void;
export type fp_glGetInternalformatSampleivNV = fn(target: gl_enum, internalformat: gl_enum, samples: i32, pname: gl_enum, count: i32, params: *i32) void;
export type fp_glGetInternalformati64v = fn(target: gl_enum, internalformat: gl_enum, pname: gl_enum, count: i32, params: *i64) void;
export type fp_glGetInternalformativ = fn(target: gl_enum, internalformat: gl_enum, pname: gl_enum, count: i32, params: *i32) void;
export type fp_glGetInvariantBooleanvEXT = fn(id: uint, value: gl_enum, data: *u8) void;
export type fp_glGetInvariantFloatvEXT = fn(id: uint, value: gl_enum, data: *f32) void;
export type fp_glGetInvariantIntegervEXT = fn(id: uint, value: gl_enum, data: *i32) void;
export type fp_glGetLightfv = fn(light: gl_enum, pname: gl_enum, params: *f32) void;
export type fp_glGetLightiv = fn(light: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetLightxOES = fn(light: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetListParameterfvSGIX = fn(list: uint, pname: gl_enum, params: *f32) void;
export type fp_glGetListParameterivSGIX = fn(list: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetLocalConstantBooleanvEXT = fn(id: uint, value: gl_enum, data: *u8) void;
export type fp_glGetLocalConstantFloatvEXT = fn(id: uint, value: gl_enum, data: *f32) void;
export type fp_glGetLocalConstantIntegervEXT = fn(id: uint, value: gl_enum, data: *i32) void;
export type fp_glGetMapAttribParameterfvNV = fn(target: gl_enum, index: uint, pname: gl_enum, params: *f32) void;
export type fp_glGetMapAttribParameterivNV = fn(target: gl_enum, index: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetMapControlPointsNV = fn(target: gl_enum, index: uint, type_: gl_enum, ustride: i32, vstride: i32, packed: u8, points: *void) void;
export type fp_glGetMapParameterfvNV = fn(target: gl_enum, pname: gl_enum, params: *f32) void;
export type fp_glGetMapParameterivNV = fn(target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetMapdv = fn(target: gl_enum, query: gl_enum, v: *f64) void;
export type fp_glGetMapfv = fn(target: gl_enum, query: gl_enum, v: *f32) void;
export type fp_glGetMapiv = fn(target: gl_enum, query: gl_enum, v: *i32) void;
export type fp_glGetMapxvOES = fn(target: gl_enum, query: gl_enum, v: *i32) void;
export type fp_glGetMaterialfv = fn(face: gl_enum, pname: gl_enum, params: *f32) void;
export type fp_glGetMaterialiv = fn(face: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetMaterialxOES = fn(face: gl_enum, pname: gl_enum, param: i32) void;
export type fp_glGetMemoryObjectDetachedResourcesuivNV = fn(memory: uint, pname: gl_enum, first: i32, count: i32, params: *uint) void;
export type fp_glGetMemoryObjectParameterivEXT = fn(memoryObject: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetMinmaxEXT = fn(target: gl_enum, reset: u8, format: gl_enum, type_: gl_enum, values: *void) void;
export type fp_glGetMinmaxParameterfvEXT = fn(target: gl_enum, pname: gl_enum, params: *f32) void;
export type fp_glGetMinmaxParameterivEXT = fn(target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetMultiTexEnvfvEXT = fn(texunit: gl_enum, target: gl_enum, pname: gl_enum, params: *f32) void;
export type fp_glGetMultiTexEnvivEXT = fn(texunit: gl_enum, target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetMultiTexGendvEXT = fn(texunit: gl_enum, coord: gl_enum, pname: gl_enum, params: *f64) void;
export type fp_glGetMultiTexGenfvEXT = fn(texunit: gl_enum, coord: gl_enum, pname: gl_enum, params: *f32) void;
export type fp_glGetMultiTexGenivEXT = fn(texunit: gl_enum, coord: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetMultiTexImageEXT = fn(texunit: gl_enum, target: gl_enum, level: i32, format: gl_enum, type_: gl_enum, pixels: *void) void;
export type fp_glGetMultiTexLevelParameterfvEXT = fn(texunit: gl_enum, target: gl_enum, level: i32, pname: gl_enum, params: *f32) void;
export type fp_glGetMultiTexLevelParameterivEXT = fn(texunit: gl_enum, target: gl_enum, level: i32, pname: gl_enum, params: *i32) void;
export type fp_glGetMultiTexParameterIivEXT = fn(texunit: gl_enum, target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetMultiTexParameterIuivEXT = fn(texunit: gl_enum, target: gl_enum, pname: gl_enum, params: *uint) void;
export type fp_glGetMultiTexParameterfvEXT = fn(texunit: gl_enum, target: gl_enum, pname: gl_enum, params: *f32) void;
export type fp_glGetMultiTexParameterivEXT = fn(texunit: gl_enum, target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetMultisamplefv = fn(pname: gl_enum, index: uint, val: *f32) void;
export type fp_glGetMultisamplefvNV = fn(pname: gl_enum, index: uint, val: *f32) void;
export type fp_glGetNamedBufferParameteri64v = fn(buffer: uint, pname: gl_enum, params: *i64) void;
export type fp_glGetNamedBufferParameteriv = fn(buffer: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetNamedBufferParameterivEXT = fn(buffer: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetNamedBufferParameterui64vNV = fn(buffer: uint, pname: gl_enum, params: *u64) void;
export type fp_glGetNamedBufferPointerv = fn(buffer: uint, pname: gl_enum, params: **void) void;
export type fp_glGetNamedBufferPointervEXT = fn(buffer: uint, pname: gl_enum, params: **void) void;
export type fp_glGetNamedBufferSubData = fn(buffer: uint, offset_: size, size_: uintptr, data: *void) void;
export type fp_glGetNamedBufferSubDataEXT = fn(buffer: uint, offset_: size, size_: uintptr, data: *void) void;
export type fp_glGetNamedFramebufferAttachmentParameteriv = fn(framebuffer: uint, attachment: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetNamedFramebufferAttachmentParameterivEXT = fn(framebuffer: uint, attachment: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetNamedFramebufferParameterfvAMD = fn(framebuffer: uint, pname: gl_enum, numsamples: uint, pixelindex: uint, size_: i32, values: *f32) void;
export type fp_glGetNamedFramebufferParameteriv = fn(framebuffer: uint, pname: gl_enum, param: *i32) void;
export type fp_glGetNamedFramebufferParameterivEXT = fn(framebuffer: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetNamedProgramLocalParameterIivEXT = fn(program: uint, target: gl_enum, index: uint, params: *i32) void;
export type fp_glGetNamedProgramLocalParameterIuivEXT = fn(program: uint, target: gl_enum, index: uint, params: *uint) void;
export type fp_glGetNamedProgramLocalParameterdvEXT = fn(program: uint, target: gl_enum, index: uint, params: *f64) void;
export type fp_glGetNamedProgramLocalParameterfvEXT = fn(program: uint, target: gl_enum, index: uint, params: *f32) void;
export type fp_glGetNamedProgramStringEXT = fn(program: uint, target: gl_enum, pname: gl_enum, string: *void) void;
export type fp_glGetNamedProgramivEXT = fn(program: uint, target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetNamedRenderbufferParameteriv = fn(renderbuffer: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetNamedRenderbufferParameterivEXT = fn(renderbuffer: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetNamedStringARB = fn(namelen: i32, name: *const i8, bufSize: i32, stringlen: *i32, string: *i8) void;
export type fp_glGetNamedStringivARB = fn(namelen: i32, name: *const i8, pname: gl_enum, params: *i32) void;
export type fp_glGetNextPerfQueryIdINTEL = fn(queryId: uint, nextQueryId: *uint) void;
export type fp_glGetObjectBufferfvATI = fn(buffer: uint, pname: gl_enum, params: *f32) void;
export type fp_glGetObjectBufferivATI = fn(buffer: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetObjectLabel = fn(identifier: gl_enum, name: uint, bufSize: i32, length: *i32, label: *i8) void;
export type fp_glGetObjectLabelEXT = fn(type_: gl_enum, object: uint, bufSize: i32, length: *i32, label: *i8) void;
export type fp_glGetObjectParameterfvARB = fn(obj: uint, pname: gl_enum, params: *f32) void;
export type fp_glGetObjectParameterivAPPLE = fn(objectType: gl_enum, name: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetObjectParameterivARB = fn(obj: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetObjectPtrLabel = fn(ptr: *const void, bufSize: i32, length: *i32, label: *i8) void;
export type fp_glGetOcclusionQueryivNV = fn(id: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetOcclusionQueryuivNV = fn(id: uint, pname: gl_enum, params: *uint) void;
export type fp_glGetPathCommandsNV = fn(path: uint, commands: *u8) void;
export type fp_glGetPathCoordsNV = fn(path: uint, coords: *f32) void;
export type fp_glGetPathDashArrayNV = fn(path: uint, dashArray: *f32) void;
export type fp_glGetPathLengthNV = fn(path: uint, startSegment: i32, numSegments: i32) f32;
export type fp_glGetPathMetricRangeNV = fn(metricQueryMask: gl_bitfield, firstPathName: uint, numPaths: i32, stride: i32, metrics: *f32) void;
export type fp_glGetPathMetricsNV = fn(metricQueryMask: gl_bitfield, numPaths: i32, pathNameType: gl_enum, paths: *const void, pathBase: uint, stride: i32, metrics: *f32) void;
export type fp_glGetPathParameterfvNV = fn(path: uint, pname: gl_enum, value: *f32) void;
export type fp_glGetPathParameterivNV = fn(path: uint, pname: gl_enum, value: *i32) void;
export type fp_glGetPathSpacingNV = fn(pathListMode: gl_enum, numPaths: i32, pathNameType: gl_enum, paths: *const void, pathBase: uint, advanceScale: f32, kerningScale: f32, transformType: gl_enum, returnedSpacing: *f32) void;
export type fp_glGetPerfCounterInfoINTEL = fn(queryId: uint, counterId: uint, counterNameLength: uint, counterName: *i8, counterDescLength: uint, counterDesc: *i8, counterOffset: *uint, counterDataSize: *uint, counterTypeEnum: *uint, counterDataTypeEnum: *uint, rawCounterMaxValue: *u64) void;
export type fp_glGetPerfMonitorCounterDataAMD = fn(monitor: uint, pname: gl_enum, dataSize: i32, data: *uint, bytesWritten: *i32) void;
export type fp_glGetPerfMonitorCounterInfoAMD = fn(group: uint, counter: uint, pname: gl_enum, data: *void) void;
export type fp_glGetPerfMonitorCounterStringAMD = fn(group: uint, counter: uint, bufSize: i32, length: *i32, counterString: *i8) void;
export type fp_glGetPerfMonitorCountersAMD = fn(group: uint, numCounters: *i32, maxActiveCounters: *i32, counterSize: i32, counters: *uint) void;
export type fp_glGetPerfMonitorGroupStringAMD = fn(group: uint, bufSize: i32, length: *i32, groupString: *i8) void;
export type fp_glGetPerfMonitorGroupsAMD = fn(numGroups: *i32, groupsSize: i32, groups: *uint) void;
export type fp_glGetPerfQueryDataINTEL = fn(queryHandle: uint, flags: uint, dataSize: i32, data: *void, bytesWritten: *uint) void;
export type fp_glGetPerfQueryIdByNameINTEL = fn(queryName: *i8, queryId: *uint) void;
export type fp_glGetPerfQueryInfoINTEL = fn(queryId: uint, queryNameLength: uint, queryName: *i8, dataSize: *uint, noCounters: *uint, noInstances: *uint, capsMask: *uint) void;
export type fp_glGetPixelMapfv = fn(map: gl_enum, values: *f32) void;
export type fp_glGetPixelMapuiv = fn(map: gl_enum, values: *uint) void;
export type fp_glGetPixelMapusv = fn(map: gl_enum, values: *u16) void;
export type fp_glGetPixelMapxv = fn(map: gl_enum, size_: i32, values: *i32) void;
export type fp_glGetPixelTexGenParameterfvSGIS = fn(pname: gl_enum, params: *f32) void;
export type fp_glGetPixelTexGenParameterivSGIS = fn(pname: gl_enum, params: *i32) void;
export type fp_glGetPixelTransformParameterfvEXT = fn(target: gl_enum, pname: gl_enum, params: *f32) void;
export type fp_glGetPixelTransformParameterivEXT = fn(target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetPointerIndexedvEXT = fn(target: gl_enum, index: uint, data: **void) void;
export type fp_glGetPointeri_vEXT = fn(pname: gl_enum, index: uint, params: **void) void;
export type fp_glGetPointerv = fn(pname: gl_enum, params: **void) void;
export type fp_glGetPointervEXT = fn(pname: gl_enum, params: **void) void;
export type fp_glGetPolygonStipple = fn(mask: *u8) void;
export type fp_glGetProgramBinary = fn(program: uint, bufSize: i32, length: *i32, binaryFormat: *gl_enum, binary: *void) void;
export type fp_glGetProgramEnvParameterIivNV = fn(target: gl_enum, index: uint, params: *i32) void;
export type fp_glGetProgramEnvParameterIuivNV = fn(target: gl_enum, index: uint, params: *uint) void;
export type fp_glGetProgramEnvParameterdvARB = fn(target: gl_enum, index: uint, params: *f64) void;
export type fp_glGetProgramEnvParameterfvARB = fn(target: gl_enum, index: uint, params: *f32) void;
export type fp_glGetProgramInfoLog = fn(program: uint, bufSize: i32, length: *i32, infoLog: *i8) void;
export type fp_glGetProgramInterfaceiv = fn(program: uint, programInterface: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetProgramLocalParameterIivNV = fn(target: gl_enum, index: uint, params: *i32) void;
export type fp_glGetProgramLocalParameterIuivNV = fn(target: gl_enum, index: uint, params: *uint) void;
export type fp_glGetProgramLocalParameterdvARB = fn(target: gl_enum, index: uint, params: *f64) void;
export type fp_glGetProgramLocalParameterfvARB = fn(target: gl_enum, index: uint, params: *f32) void;
export type fp_glGetProgramNamedParameterdvNV = fn(id: uint, len_: i32, name: *const u8, params: *f64) void;
export type fp_glGetProgramNamedParameterfvNV = fn(id: uint, len_: i32, name: *const u8, params: *f32) void;
export type fp_glGetProgramParameterdvNV = fn(target: gl_enum, index: uint, pname: gl_enum, params: *f64) void;
export type fp_glGetProgramParameterfvNV = fn(target: gl_enum, index: uint, pname: gl_enum, params: *f32) void;
export type fp_glGetProgramPipelineInfoLog = fn(pipeline: uint, bufSize: i32, length: *i32, infoLog: *i8) void;
export type fp_glGetProgramPipelineiv = fn(pipeline: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetProgramResourceIndex = fn(program: uint, programInterface: gl_enum, name: *const i8) uint;
export type fp_glGetProgramResourceLocation = fn(program: uint, programInterface: gl_enum, name: *const i8) i32;
export type fp_glGetProgramResourceLocationIndex = fn(program: uint, programInterface: gl_enum, name: *const i8) i32;
export type fp_glGetProgramResourceName = fn(program: uint, programInterface: gl_enum, index: uint, bufSize: i32, length: *i32, name: *i8) void;
export type fp_glGetProgramResourcefvNV = fn(program: uint, programInterface: gl_enum, index: uint, propCount: i32, props: *const gl_enum, count: i32, length: *i32, params: *f32) void;
export type fp_glGetProgramResourceiv = fn(program: uint, programInterface: gl_enum, index: uint, propCount: i32, props: *const gl_enum, count: i32, length: *i32, params: *i32) void;
export type fp_glGetProgramStageiv = fn(program: uint, shadertype: gl_enum, pname: gl_enum, values: *i32) void;
export type fp_glGetProgramStringARB = fn(target: gl_enum, pname: gl_enum, string: *void) void;
export type fp_glGetProgramStringNV = fn(id: uint, pname: gl_enum, program: *u8) void;
export type fp_glGetProgramSubroutineParameteruivNV = fn(target: gl_enum, index: uint, param: *uint) void;
export type fp_glGetProgramiv = fn(program: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetProgramivARB = fn(target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetProgramivNV = fn(id: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetQueryBufferObjecti64v = fn(id: uint, buffer: uint, pname: gl_enum, offset_: size) void;
export type fp_glGetQueryBufferObjectiv = fn(id: uint, buffer: uint, pname: gl_enum, offset_: size) void;
export type fp_glGetQueryBufferObjectui64v = fn(id: uint, buffer: uint, pname: gl_enum, offset_: size) void;
export type fp_glGetQueryBufferObjectuiv = fn(id: uint, buffer: uint, pname: gl_enum, offset_: size) void;
export type fp_glGetQueryIndexediv = fn(target: gl_enum, index: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetQueryObjecti64v = fn(id: uint, pname: gl_enum, params: *i64) void;
export type fp_glGetQueryObjecti64vEXT = fn(id: uint, pname: gl_enum, params: *i64) void;
export type fp_glGetQueryObjectiv = fn(id: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetQueryObjectivARB = fn(id: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetQueryObjectui64v = fn(id: uint, pname: gl_enum, params: *u64) void;
export type fp_glGetQueryObjectui64vEXT = fn(id: uint, pname: gl_enum, params: *u64) void;
export type fp_glGetQueryObjectuiv = fn(id: uint, pname: gl_enum, params: *uint) void;
export type fp_glGetQueryObjectuivARB = fn(id: uint, pname: gl_enum, params: *uint) void;
export type fp_glGetQueryiv = fn(target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetQueryivARB = fn(target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetRenderbufferParameteriv = fn(target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetRenderbufferParameterivEXT = fn(target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetSamplerParameterIiv = fn(sampler: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetSamplerParameterIuiv = fn(sampler: uint, pname: gl_enum, params: *uint) void;
export type fp_glGetSamplerParameterfv = fn(sampler: uint, pname: gl_enum, params: *f32) void;
export type fp_glGetSamplerParameteriv = fn(sampler: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetSemaphoreParameterivNV = fn(semaphore: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetSemaphoreParameterui64vEXT = fn(semaphore: uint, pname: gl_enum, params: *u64) void;
export type fp_glGetSeparableFilterEXT = fn(target: gl_enum, format: gl_enum, type_: gl_enum, row: *void, column: *void, span: *void) void;
export type fp_glGetShaderInfoLog = fn(shader: uint, bufSize: i32, length: *i32, infoLog: *i8) void;
export type fp_glGetShaderPrecisionFormat = fn(shadertype: gl_enum, precisiontype: gl_enum, range: *i32, precision: *i32) void;
export type fp_glGetShaderSource = fn(shader: uint, bufSize: i32, length: *i32, source: *i8) void;
export type fp_glGetShaderSourceARB = fn(obj: uint, maxLength: i32, length: *i32, source: *i8) void;
export type fp_glGetShaderiv = fn(shader: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetShadingRateImagePaletteNV = fn(viewport: uint, entry: uint, rate: *gl_enum) void;
export type fp_glGetShadingRateSampleLocationivNV = fn(rate: gl_enum, samples: uint, index: uint, location: *i32) void;
export type fp_glGetSharpenTexFuncSGIS = fn(target: gl_enum, points: *f32) void;
export type fp_glGetStageIndexNV = fn(shadertype: gl_enum) u16;
export type fp_glGetString = fn(name: gl_enum) *const u8;
export type fp_glGetSubroutineIndex = fn(program: uint, shadertype: gl_enum, name: *const i8) uint;
export type fp_glGetSubroutineUniformLocation = fn(program: uint, shadertype: gl_enum, name: *const i8) i32;
export type fp_glGetSynciv = fn(sync: size, pname: gl_enum, count: i32, length: *i32, values: *i32) void;
export type fp_glGetTexBumpParameterfvATI = fn(pname: gl_enum, param: *f32) void;
export type fp_glGetTexBumpParameterivATI = fn(pname: gl_enum, param: *i32) void;
export type fp_glGetTexEnvfv = fn(target: gl_enum, pname: gl_enum, params: *f32) void;
export type fp_glGetTexEnviv = fn(target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetTexEnvxvOES = fn(target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetTexFilterFuncSGIS = fn(target: gl_enum, filter: gl_enum, weights: *f32) void;
export type fp_glGetTexGendv = fn(coord: gl_enum, pname: gl_enum, params: *f64) void;
export type fp_glGetTexGenfv = fn(coord: gl_enum, pname: gl_enum, params: *f32) void;
export type fp_glGetTexGeniv = fn(coord: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetTexGenxvOES = fn(coord: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetTexImage = fn(target: gl_enum, level: i32, format: gl_enum, type_: gl_enum, pixels: *void) void;
export type fp_glGetTexLevelParameterfv = fn(target: gl_enum, level: i32, pname: gl_enum, params: *f32) void;
export type fp_glGetTexLevelParameteriv = fn(target: gl_enum, level: i32, pname: gl_enum, params: *i32) void;
export type fp_glGetTexLevelParameterxvOES = fn(target: gl_enum, level: i32, pname: gl_enum, params: *i32) void;
export type fp_glGetTexParameterIivEXT = fn(target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetTexParameterIuivEXT = fn(target: gl_enum, pname: gl_enum, params: *uint) void;
export type fp_glGetTexParameterPointervAPPLE = fn(target: gl_enum, pname: gl_enum, params: **void) void;
export type fp_glGetTexParameterfv = fn(target: gl_enum, pname: gl_enum, params: *f32) void;
export type fp_glGetTexParameteriv = fn(target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetTexParameterxvOES = fn(target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetTextureHandleARB = fn(texture: uint) u64;
export type fp_glGetTextureHandleNV = fn(texture: uint) u64;
export type fp_glGetTextureImage = fn(texture: uint, level: i32, format: gl_enum, type_: gl_enum, bufSize: i32, pixels: *void) void;
export type fp_glGetTextureImageEXT = fn(texture: uint, target: gl_enum, level: i32, format: gl_enum, type_: gl_enum, pixels: *void) void;
export type fp_glGetTextureLevelParameterfv = fn(texture: uint, level: i32, pname: gl_enum, params: *f32) void;
export type fp_glGetTextureLevelParameterfvEXT = fn(texture: uint, target: gl_enum, level: i32, pname: gl_enum, params: *f32) void;
export type fp_glGetTextureLevelParameteriv = fn(texture: uint, level: i32, pname: gl_enum, params: *i32) void;
export type fp_glGetTextureLevelParameterivEXT = fn(texture: uint, target: gl_enum, level: i32, pname: gl_enum, params: *i32) void;
export type fp_glGetTextureParameterIiv = fn(texture: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetTextureParameterIivEXT = fn(texture: uint, target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetTextureParameterIuiv = fn(texture: uint, pname: gl_enum, params: *uint) void;
export type fp_glGetTextureParameterIuivEXT = fn(texture: uint, target: gl_enum, pname: gl_enum, params: *uint) void;
export type fp_glGetTextureParameterfv = fn(texture: uint, pname: gl_enum, params: *f32) void;
export type fp_glGetTextureParameterfvEXT = fn(texture: uint, target: gl_enum, pname: gl_enum, params: *f32) void;
export type fp_glGetTextureParameteriv = fn(texture: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetTextureParameterivEXT = fn(texture: uint, target: gl_enum, pname: gl_enum, params: *i32) void;
export type fp_glGetTextureSamplerHandleARB = fn(texture: uint, sampler: uint) u64;
export type fp_glGetTextureSamplerHandleNV = fn(texture: uint, sampler: uint) u64;
export type fp_glGetTextureSubImage = fn(texture: uint, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: gl_enum, type_: gl_enum, bufSize: i32, pixels: *void) void;
export type fp_glGetTrackMatrixivNV = fn(target: gl_enum, address: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetTransformFeedbackVaryingEXT = fn(program: uint, index: uint, bufSize: i32, length: *i32, size_: *i32, type_: *gl_enum, name: *i8) void;
export type fp_glGetTransformFeedbackVaryingNV = fn(program: uint, index: uint, location: *i32) void;
export type fp_glGetTransformFeedbacki64_v = fn(xfb: uint, pname: gl_enum, index: uint, param: *i64) void;
export type fp_glGetTransformFeedbacki_v = fn(xfb: uint, pname: gl_enum, index: uint, param: *i32) void;
export type fp_glGetTransformFeedbackiv = fn(xfb: uint, pname: gl_enum, param: *i32) void;
export type fp_glGetUniformBlockIndex = fn(program: uint, uniformBlockName: *const i8) uint;
export type fp_glGetUniformBufferSizeEXT = fn(program: uint, location: i32) i32;
export type fp_glGetUniformIndices = fn(program: uint, uniformCount: i32, uniformNames: *const *const i8, uniformIndices: *uint) void;
export type fp_glGetUniformLocation = fn(program: uint, name: *const i8) i32;
export type fp_glGetUniformLocationARB = fn(programObj: uint, name: *const i8) i32;
export type fp_glGetUniformOffsetEXT = fn(program: uint, location: i32) size;
export type fp_glGetUniformSubroutineuiv = fn(shadertype: gl_enum, location: i32, params: *uint) void;
export type fp_glGetUniformdv = fn(program: uint, location: i32, params: *f64) void;
export type fp_glGetUniformfv = fn(program: uint, location: i32, params: *f32) void;
export type fp_glGetUniformfvARB = fn(programObj: uint, location: i32, params: *f32) void;
export type fp_glGetUniformi64vARB = fn(program: uint, location: i32, params: *i64) void;
export type fp_glGetUniformi64vNV = fn(program: uint, location: i32, params: *i64) void;
export type fp_glGetUniformiv = fn(program: uint, location: i32, params: *i32) void;
export type fp_glGetUniformivARB = fn(programObj: uint, location: i32, params: *i32) void;
export type fp_glGetUniformui64vARB = fn(program: uint, location: i32, params: *u64) void;
export type fp_glGetUniformui64vNV = fn(program: uint, location: i32, params: *u64) void;
export type fp_glGetUniformuivEXT = fn(program: uint, location: i32, params: *uint) void;
export type fp_glGetUnsignedBytei_vEXT = fn(target: gl_enum, index: uint, data: *u8) void;
export type fp_glGetUnsignedBytevEXT = fn(pname: gl_enum, data: *u8) void;
export type fp_glGetVariantArrayObjectfvATI = fn(id: uint, pname: gl_enum, params: *f32) void;
export type fp_glGetVariantArrayObjectivATI = fn(id: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetVariantBooleanvEXT = fn(id: uint, value: gl_enum, data: *u8) void;
export type fp_glGetVariantFloatvEXT = fn(id: uint, value: gl_enum, data: *f32) void;
export type fp_glGetVariantIntegervEXT = fn(id: uint, value: gl_enum, data: *i32) void;
export type fp_glGetVariantPointervEXT = fn(id: uint, value: gl_enum, data: **void) void;
export type fp_glGetVaryingLocationNV = fn(program: uint, name: *const i8) i32;
export type fp_glGetVertexArrayIndexed64iv = fn(vaobj: uint, index: uint, pname: gl_enum, param: *i64) void;
export type fp_glGetVertexArrayIndexediv = fn(vaobj: uint, index: uint, pname: gl_enum, param: *i32) void;
export type fp_glGetVertexArrayIntegeri_vEXT = fn(vaobj: uint, index: uint, pname: gl_enum, param: *i32) void;
export type fp_glGetVertexArrayIntegervEXT = fn(vaobj: uint, pname: gl_enum, param: *i32) void;
export type fp_glGetVertexArrayPointeri_vEXT = fn(vaobj: uint, index: uint, pname: gl_enum, param: **void) void;
export type fp_glGetVertexArrayPointervEXT = fn(vaobj: uint, pname: gl_enum, param: **void) void;
export type fp_glGetVertexArrayiv = fn(vaobj: uint, pname: gl_enum, param: *i32) void;
export type fp_glGetVertexAttribArrayObjectfvATI = fn(index: uint, pname: gl_enum, params: *f32) void;
export type fp_glGetVertexAttribArrayObjectivATI = fn(index: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetVertexAttribIivEXT = fn(index: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetVertexAttribIuivEXT = fn(index: uint, pname: gl_enum, params: *uint) void;
export type fp_glGetVertexAttribLdv = fn(index: uint, pname: gl_enum, params: *f64) void;
export type fp_glGetVertexAttribLdvEXT = fn(index: uint, pname: gl_enum, params: *f64) void;
export type fp_glGetVertexAttribLi64vNV = fn(index: uint, pname: gl_enum, params: *i64) void;
export type fp_glGetVertexAttribLui64vARB = fn(index: uint, pname: gl_enum, params: *u64) void;
export type fp_glGetVertexAttribLui64vNV = fn(index: uint, pname: gl_enum, params: *u64) void;
export type fp_glGetVertexAttribPointerv = fn(index: uint, pname: gl_enum, pointer: **void) void;
export type fp_glGetVertexAttribPointervARB = fn(index: uint, pname: gl_enum, pointer: **void) void;
export type fp_glGetVertexAttribPointervNV = fn(index: uint, pname: gl_enum, pointer: **void) void;
export type fp_glGetVertexAttribdv = fn(index: uint, pname: gl_enum, params: *f64) void;
export type fp_glGetVertexAttribdvARB = fn(index: uint, pname: gl_enum, params: *f64) void;
export type fp_glGetVertexAttribdvNV = fn(index: uint, pname: gl_enum, params: *f64) void;
export type fp_glGetVertexAttribfv = fn(index: uint, pname: gl_enum, params: *f32) void;
export type fp_glGetVertexAttribfvARB = fn(index: uint, pname: gl_enum, params: *f32) void;
export type fp_glGetVertexAttribfvNV = fn(index: uint, pname: gl_enum, params: *f32) void;
export type fp_glGetVertexAttribiv = fn(index: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetVertexAttribivARB = fn(index: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetVertexAttribivNV = fn(index: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetVideoCaptureStreamdvNV = fn(video_capture_slot: uint, stream: uint, pname: gl_enum, params: *f64) void;
export type fp_glGetVideoCaptureStreamfvNV = fn(video_capture_slot: uint, stream: uint, pname: gl_enum, params: *f32) void;
export type fp_glGetVideoCaptureStreamivNV = fn(video_capture_slot: uint, stream: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetVideoCaptureivNV = fn(video_capture_slot: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetVideoi64vNV = fn(video_slot: uint, pname: gl_enum, params: *i64) void;
export type fp_glGetVideoivNV = fn(video_slot: uint, pname: gl_enum, params: *i32) void;
export type fp_glGetVideoui64vNV = fn(video_slot: uint, pname: gl_enum, params: *u64) void;
export type fp_glGetVideouivNV = fn(video_slot: uint, pname: gl_enum, params: *uint) void;
export type fp_glGetVkProcAddrNV = fn(name: *const i8) GLVULKANPROCNV;
export type fp_glGetnCompressedTexImageARB = fn(target: gl_enum, lod: i32, bufSize: i32, img: *void) void;
export type fp_glGetnTexImageARB = fn(target: gl_enum, level: i32, format: gl_enum, type_: gl_enum, bufSize: i32, img: *void) void;
export type fp_glGetnUniformdvARB = fn(program: uint, location: i32, bufSize: i32, params: *f64) void;
export type fp_glGetnUniformfv = fn(program: uint, location: i32, bufSize: i32, params: *f32) void;
export type fp_glGetnUniformfvARB = fn(program: uint, location: i32, bufSize: i32, params: *f32) void;
export type fp_glGetnUniformi64vARB = fn(program: uint, location: i32, bufSize: i32, params: *i64) void;
export type fp_glGetnUniformiv = fn(program: uint, location: i32, bufSize: i32, params: *i32) void;
export type fp_glGetnUniformivARB = fn(program: uint, location: i32, bufSize: i32, params: *i32) void;
export type fp_glGetnUniformui64vARB = fn(program: uint, location: i32, bufSize: i32, params: *u64) void;
export type fp_glGetnUniformuiv = fn(program: uint, location: i32, bufSize: i32, params: *uint) void;
export type fp_glGetnUniformuivARB = fn(program: uint, location: i32, bufSize: i32, params: *uint) void;
export type fp_glGlobalAlphaFactorbSUN = fn(factor: i8) void;
export type fp_glGlobalAlphaFactordSUN = fn(factor: f64) void;
export type fp_glGlobalAlphaFactorfSUN = fn(factor: f32) void;
export type fp_glGlobalAlphaFactoriSUN = fn(factor: i32) void;
export type fp_glGlobalAlphaFactorsSUN = fn(factor: i16) void;
export type fp_glGlobalAlphaFactorubSUN = fn(factor: u8) void;
export type fp_glGlobalAlphaFactoruiSUN = fn(factor: uint) void;
export type fp_glGlobalAlphaFactorusSUN = fn(factor: u16) void;
export type fp_glHint = fn(target: gl_enum, mode: gl_enum) void;
export type fp_glHintPGI = fn(target: gl_enum, mode: i32) void;
export type fp_glHistogramEXT = fn(target: gl_enum, width: i32, internalformat: gl_enum, sink: u8) void;
export type fp_glIglooInterfaceSGIX = fn(pname: gl_enum, params: *const void) void;
export type fp_glImageTransformParameterfHP = fn(target: gl_enum, pname: gl_enum, param: f32) void;
export type fp_glImageTransformParameterfvHP = fn(target: gl_enum, pname: gl_enum, params: *const f32) void;
export type fp_glImageTransformParameteriHP = fn(target: gl_enum, pname: gl_enum, param: i32) void;
export type fp_glImageTransformParameterivHP = fn(target: gl_enum, pname: gl_enum, params: *const i32) void;
export type fp_glImportMemoryFdEXT = fn(memory: uint, size_: u64, handleType: gl_enum, fd: i32) void;
export type fp_glImportMemoryWin32HandleEXT = fn(memory: uint, size_: u64, handleType: gl_enum, handle: *void) void;
export type fp_glImportMemoryWin32NameEXT = fn(memory: uint, size_: u64, handleType: gl_enum, name: *const void) void;
export type fp_glImportSemaphoreFdEXT = fn(semaphore: uint, handleType: gl_enum, fd: i32) void;
export type fp_glImportSemaphoreWin32HandleEXT = fn(semaphore: uint, handleType: gl_enum, handle: *void) void;
export type fp_glImportSemaphoreWin32NameEXT = fn(semaphore: uint, handleType: gl_enum, name: *const void) void;
export type fp_glImportSyncEXT = fn(external_sync_type: gl_enum, external_sync: size, flags: gl_bitfield) size;
export type fp_glIndexFormatNV = fn(type_: gl_enum, stride: i32) void;
export type fp_glIndexFuncEXT = fn(func: gl_enum, ref: f64) void;
export type fp_glIndexMask = fn(mask: uint) void;
export type fp_glIndexMaterialEXT = fn(face: gl_enum, mode: gl_enum) void;
export type fp_glIndexPointer = fn(type_: gl_enum, stride: i32, pointer: *const void) void;
export type fp_glIndexPointerEXT = fn(type_: gl_enum, stride: i32, count: i32, pointer: *const void) void;
export type fp_glIndexPointerListIBM = fn(type_: gl_enum, stride: i32, pointer: *const *const void, ptrstride: i32) void;
export type fp_glIndexd = fn(c: f64) void;
export type fp_glIndexdv = fn(c: *const f64) void;
export type fp_glIndexf = fn(c: f32) void;
export type fp_glIndexfv = fn(c: *const f32) void;
export type fp_glIndexi = fn(c: i32) void;
export type fp_glIndexiv = fn(c: *const i32) void;
export type fp_glIndexs = fn(c: i16) void;
export type fp_glIndexsv = fn(c: *const i16) void;
export type fp_glIndexub = fn(c: u8) void;
export type fp_glIndexubv = fn(c: *const u8) void;
export type fp_glIndexxOES = fn(component: i32) void;
export type fp_glIndexxvOES = fn(component: *const i32) void;
export type fp_glInitNames = fn() void;
export type fp_glInsertComponentEXT = fn(res: uint, src: uint, num: uint) void;
export type fp_glInsertEventMarkerEXT = fn(length: i32, marker: *const i8) void;
export type fp_glInstrumentsBufferSGIX = fn(size_: i32, buffer: *i32) void;
export type fp_glInterleavedArrays = fn(format: gl_enum, stride: i32, pointer: *const void) void;
export type fp_glInterpolatePathsNV = fn(resultPath: uint, pathA: uint, pathB: uint, weight: f32) void;
export type fp_glInvalidateBufferData = fn(buffer: uint) void;
export type fp_glInvalidateBufferSubData = fn(buffer: uint, offset_: size, length: uintptr) void;
export type fp_glInvalidateFramebuffer = fn(target: gl_enum, numAttachments: i32, attachments: *const gl_enum) void;
export type fp_glInvalidateNamedFramebufferData = fn(framebuffer: uint, numAttachments: i32, attachments: *const gl_enum) void;
export type fp_glInvalidateNamedFramebufferSubData = fn(framebuffer: uint, numAttachments: i32, attachments: *const gl_enum, x: i32, y: i32, width: i32, height: i32) void;
export type fp_glInvalidateSubFramebuffer = fn(target: gl_enum, numAttachments: i32, attachments: *const gl_enum, x: i32, y: i32, width: i32, height: i32) void;
export type fp_glInvalidateTexImage = fn(texture: uint, level: i32) void;
export type fp_glInvalidateTexSubImage = fn(texture: uint, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32) void;
export type fp_glIsAsyncMarkerSGIX = fn(marker: uint) u8;
export type fp_glIsBuffer = fn(buffer: uint) u8;
export type fp_glIsBufferARB = fn(buffer: uint) u8;
export type fp_glIsBufferResidentNV = fn(target: gl_enum) u8;
export type fp_glIsCommandListNV = fn(list: uint) u8;
export type fp_glIsEnabled = fn(cap: gl_enum) u8;
export type fp_glIsEnabledIndexedEXT = fn(target: gl_enum, index: uint) u8;
export type fp_glIsFenceAPPLE = fn(fence: uint) u8;
export type fp_glIsFenceNV = fn(fence: uint) u8;
export type fp_glIsFramebuffer = fn(framebuffer: uint) u8;
export type fp_glIsFramebufferEXT = fn(framebuffer: uint) u8;
export type fp_glIsImageHandleResidentARB = fn(handle: u64) u8;
export type fp_glIsImageHandleResidentNV = fn(handle: u64) u8;
export type fp_glIsList = fn(list: uint) u8;
export type fp_glIsMemoryObjectEXT = fn(memoryObject: uint) u8;
export type fp_glIsNameAMD = fn(identifier: gl_enum, name: uint) u8;
export type fp_glIsNamedBufferResidentNV = fn(buffer: uint) u8;
export type fp_glIsNamedStringARB = fn(namelen: i32, name: *const i8) u8;
export type fp_glIsObjectBufferATI = fn(buffer: uint) u8;
export type fp_glIsOcclusionQueryNV = fn(id: uint) u8;
export type fp_glIsPathNV = fn(path: uint) u8;
export type fp_glIsPointInFillPathNV = fn(path: uint, mask: uint, x: f32, y: f32) u8;
export type fp_glIsPointInStrokePathNV = fn(path: uint, x: f32, y: f32) u8;
export type fp_glIsProgram = fn(program: uint) u8;
export type fp_glIsProgramARB = fn(program: uint) u8;
export type fp_glIsProgramNV = fn(id: uint) u8;
export type fp_glIsProgramPipeline = fn(pipeline: uint) u8;
export type fp_glIsQuery = fn(id: uint) u8;
export type fp_glIsQueryARB = fn(id: uint) u8;
export type fp_glIsRenderbuffer = fn(renderbuffer: uint) u8;
export type fp_glIsRenderbufferEXT = fn(renderbuffer: uint) u8;
export type fp_glIsSampler = fn(sampler: uint) u8;
export type fp_glIsSemaphoreEXT = fn(semaphore: uint) u8;
export type fp_glIsShader = fn(shader: uint) u8;
export type fp_glIsStateNV = fn(state: uint) u8;
export type fp_glIsSync = fn(sync: size) u8;
export type fp_glIsTexture = fn(texture: uint) u8;
export type fp_glIsTextureEXT = fn(texture: uint) u8;
export type fp_glIsTextureHandleResidentARB = fn(handle: u64) u8;
export type fp_glIsTextureHandleResidentNV = fn(handle: u64) u8;
export type fp_glIsTransformFeedback = fn(id: uint) u8;
export type fp_glIsTransformFeedbackNV = fn(id: uint) u8;
export type fp_glIsVariantEnabledEXT = fn(id: uint, cap: gl_enum) u8;
export type fp_glIsVertexArray = fn(array: uint) u8;
export type fp_glIsVertexArrayAPPLE = fn(array: uint) u8;
export type fp_glIsVertexAttribEnabledAPPLE = fn(index: uint, pname: gl_enum) u8;
export type fp_glLGPUCopyImageSubDataNVX = fn(sourceGpu: uint, destinationGpuMask: gl_bitfield, srcName: uint, srcTarget: gl_enum, srcLevel: i32, srcX: i32, srxY: i32, srcZ: i32, dstName: uint, dstTarget: gl_enum, dstLevel: i32, dstX: i32, dstY: i32, dstZ: i32, width: i32, height: i32, depth: i32) void;
export type fp_glLGPUInterlockNVX = fn() void;
export type fp_glLGPUNamedBufferSubDataNVX = fn(gpuMask: gl_bitfield, buffer: uint, offset_: size, size_: uintptr, data: *const void) void;
export type fp_glLabelObjectEXT = fn(type_: gl_enum, object: uint, length: i32, label: *const i8) void;
export type fp_glLightEnviSGIX = fn(pname: gl_enum, param: i32) void;
export type fp_glLightModelf = fn(pname: gl_enum, param: f32) void;
export type fp_glLightModelfv = fn(pname: gl_enum, params: *const f32) void;
export type fp_glLightModeli = fn(pname: gl_enum, param: i32) void;
export type fp_glLightModeliv = fn(pname: gl_enum, params: *const i32) void;
export type fp_glLightModelxOES = fn(pname: gl_enum, param: i32) void;
export type fp_glLightModelxvOES = fn(pname: gl_enum, param: *const i32) void;
export type fp_glLightf = fn(light: gl_enum, pname: gl_enum, param: f32) void;
export type fp_glLightfv = fn(light: gl_enum, pname: gl_enum, params: *const f32) void;
export type fp_glLighti = fn(light: gl_enum, pname: gl_enum, param: i32) void;
export type fp_glLightiv = fn(light: gl_enum, pname: gl_enum, params: *const i32) void;
export type fp_glLightxOES = fn(light: gl_enum, pname: gl_enum, param: i32) void;
export type fp_glLightxvOES = fn(light: gl_enum, pname: gl_enum, params: *const i32) void;
export type fp_glLineStipple = fn(factor: i32, pattern: u16) void;
export type fp_glLineWidth = fn(width: f32) void;
export type fp_glLineWidthxOES = fn(width: i32) void;
export type fp_glLinkProgram = fn(program: uint) void;
export type fp_glLinkProgramARB = fn(programObj: uint) void;
export type fp_glListBase = fn(base: uint) void;
export type fp_glListDrawCommandsStatesClientNV = fn(list: uint, segment: uint, indirects: *const *const void, sizes: *const i32, states: *const uint, fbos: *const uint, count: uint) void;
export type fp_glListParameterfSGIX = fn(list: uint, pname: gl_enum, param: f32) void;
export type fp_glListParameterfvSGIX = fn(list: uint, pname: gl_enum, params: *const f32) void;
export type fp_glListParameteriSGIX = fn(list: uint, pname: gl_enum, param: i32) void;
export type fp_glListParameterivSGIX = fn(list: uint, pname: gl_enum, params: *const i32) void;
export type fp_glLoadIdentity = fn() void;
export type fp_glLoadIdentityDeformationMapSGIX = fn(mask: gl_bitfield) void;
export type fp_glLoadMatrixd = fn(m: *const f64) void;
export type fp_glLoadMatrixf = fn(m: *const f32) void;
export type fp_glLoadMatrixxOES = fn(m: *const i32) void;
export type fp_glLoadName = fn(name: uint) void;
export type fp_glLoadProgramNV = fn(target: gl_enum, id: uint, len_: i32, program: *const u8) void;
export type fp_glLoadTransposeMatrixd = fn(m: *const f64) void;
export type fp_glLoadTransposeMatrixdARB = fn(m: *const f64) void;
export type fp_glLoadTransposeMatrixf = fn(m: *const f32) void;
export type fp_glLoadTransposeMatrixfARB = fn(m: *const f32) void;
export type fp_glLoadTransposeMatrixxOES = fn(m: *const i32) void;
export type fp_glLockArraysEXT = fn(first: i32, count: i32) void;
export type fp_glLogicOp = fn(opcode: gl_enum) void;
export type fp_glMakeBufferNonResidentNV = fn(target: gl_enum) void;
export type fp_glMakeBufferResidentNV = fn(target: gl_enum, access: gl_enum) void;
export type fp_glMakeImageHandleNonResidentARB = fn(handle: u64) void;
export type fp_glMakeImageHandleNonResidentNV = fn(handle: u64) void;
export type fp_glMakeImageHandleResidentARB = fn(handle: u64, access: gl_enum) void;
export type fp_glMakeImageHandleResidentNV = fn(handle: u64, access: gl_enum) void;
export type fp_glMakeNamedBufferNonResidentNV = fn(buffer: uint) void;
export type fp_glMakeNamedBufferResidentNV = fn(buffer: uint, access: gl_enum) void;
export type fp_glMakeTextureHandleNonResidentARB = fn(handle: u64) void;
export type fp_glMakeTextureHandleNonResidentNV = fn(handle: u64) void;
export type fp_glMakeTextureHandleResidentARB = fn(handle: u64) void;
export type fp_glMakeTextureHandleResidentNV = fn(handle: u64) void;
export type fp_glMap1d = fn(target: gl_enum, u1: f64, u2: f64, stride: i32, order: i32, points: *const f64) void;
export type fp_glMap1f = fn(target: gl_enum, u1: f32, u2: f32, stride: i32, order: i32, points: *const f32) void;
export type fp_glMap1xOES = fn(target: gl_enum, u1: i32, u2: i32, stride: i32, order: i32, points: i32) void;
export type fp_glMap2d = fn(target: gl_enum, u1: f64, u2: f64, ustride: i32, uorder: i32, v1: f64, v2: f64, vstride: i32, vorder: i32, points: *const f64) void;
export type fp_glMap2f = fn(target: gl_enum, u1: f32, u2: f32, ustride: i32, uorder: i32, v1: f32, v2: f32, vstride: i32, vorder: i32, points: *const f32) void;
export type fp_glMap2xOES = fn(target: gl_enum, u1: i32, u2: i32, ustride: i32, uorder: i32, v1: i32, v2: i32, vstride: i32, vorder: i32, points: i32) void;
export type fp_glMapBuffer = fn(target: gl_enum, access: gl_enum) *void;
export type fp_glMapBufferARB = fn(target: gl_enum, access: gl_enum) *void;
export type fp_glMapBufferRange = fn(target: gl_enum, offset_: size, length: uintptr, access: gl_bitfield) *void;
export type fp_glMapControlPointsNV = fn(target: gl_enum, index: uint, type_: gl_enum, ustride: i32, vstride: i32, uorder: i32, vorder: i32, packed: u8, points: *const void) void;
export type fp_glMapGrid1d = fn(un: i32, u1: f64, u2: f64) void;
export type fp_glMapGrid1f = fn(un: i32, u1: f32, u2: f32) void;
export type fp_glMapGrid1xOES = fn(n: i32, u1: i32, u2: i32) void;
export type fp_glMapGrid2d = fn(un: i32, u1: f64, u2: f64, vn: i32, v1: f64, v2: f64) void;
export type fp_glMapGrid2f = fn(un: i32, u1: f32, u2: f32, vn: i32, v1: f32, v2: f32) void;
export type fp_glMapGrid2xOES = fn(n: i32, u1: i32, u2: i32, v1: i32, v2: i32) void;
export type fp_glMapNamedBuffer = fn(buffer: uint, access: gl_enum) *void;
export type fp_glMapNamedBufferEXT = fn(buffer: uint, access: gl_enum) *void;
export type fp_glMapNamedBufferRange = fn(buffer: uint, offset_: size, length: uintptr, access: gl_bitfield) *void;
export type fp_glMapNamedBufferRangeEXT = fn(buffer: uint, offset_: size, length: uintptr, access: gl_bitfield) *void;
export type fp_glMapObjectBufferATI = fn(buffer: uint) *void;
export type fp_glMapParameterfvNV = fn(target: gl_enum, pname: gl_enum, params: *const f32) void;
export type fp_glMapParameterivNV = fn(target: gl_enum, pname: gl_enum, params: *const i32) void;
export type fp_glMapTexture2DINTEL = fn(texture: uint, level: i32, access: gl_bitfield, stride: *i32, layout: *gl_enum) *void;
export type fp_glMapVertexAttrib1dAPPLE = fn(index: uint, size_: uint, u1: f64, u2: f64, stride: i32, order: i32, points: *const f64) void;
export type fp_glMapVertexAttrib1fAPPLE = fn(index: uint, size_: uint, u1: f32, u2: f32, stride: i32, order: i32, points: *const f32) void;
export type fp_glMapVertexAttrib2dAPPLE = fn(index: uint, size_: uint, u1: f64, u2: f64, ustride: i32, uorder: i32, v1: f64, v2: f64, vstride: i32, vorder: i32, points: *const f64) void;
export type fp_glMapVertexAttrib2fAPPLE = fn(index: uint, size_: uint, u1: f32, u2: f32, ustride: i32, uorder: i32, v1: f32, v2: f32, vstride: i32, vorder: i32, points: *const f32) void;
export type fp_glMaterialf = fn(face: gl_enum, pname: gl_enum, param: f32) void;
export type fp_glMaterialfv = fn(face: gl_enum, pname: gl_enum, params: *const f32) void;
export type fp_glMateriali = fn(face: gl_enum, pname: gl_enum, param: i32) void;
export type fp_glMaterialiv = fn(face: gl_enum, pname: gl_enum, params: *const i32) void;
export type fp_glMaterialxOES = fn(face: gl_enum, pname: gl_enum, param: i32) void;
export type fp_glMaterialxvOES = fn(face: gl_enum, pname: gl_enum, param: *const i32) void;
export type fp_glMatrixFrustumEXT = fn(mode: gl_enum, left: f64, right: f64, bottom: f64, top: f64, zNear: f64, zFar: f64) void;
export type fp_glMatrixIndexPointerARB = fn(size_: i32, type_: gl_enum, stride: i32, pointer: *const void) void;
export type fp_glMatrixIndexubvARB = fn(size_: i32, indices: *const u8) void;
export type fp_glMatrixIndexuivARB = fn(size_: i32, indices: *const uint) void;
export type fp_glMatrixIndexusvARB = fn(size_: i32, indices: *const u16) void;
export type fp_glMatrixLoad3x2fNV = fn(matrixMode: gl_enum, m: *const f32) void;
export type fp_glMatrixLoad3x3fNV = fn(matrixMode: gl_enum, m: *const f32) void;
export type fp_glMatrixLoadIdentityEXT = fn(mode: gl_enum) void;
export type fp_glMatrixLoadTranspose3x3fNV = fn(matrixMode: gl_enum, m: *const f32) void;
export type fp_glMatrixLoadTransposedEXT = fn(mode: gl_enum, m: *const f64) void;
export type fp_glMatrixLoadTransposefEXT = fn(mode: gl_enum, m: *const f32) void;
export type fp_glMatrixLoaddEXT = fn(mode: gl_enum, m: *const f64) void;
export type fp_glMatrixLoadfEXT = fn(mode: gl_enum, m: *const f32) void;
export type fp_glMatrixMode = fn(mode: gl_enum) void;
export type fp_glMatrixMult3x2fNV = fn(matrixMode: gl_enum, m: *const f32) void;
export type fp_glMatrixMult3x3fNV = fn(matrixMode: gl_enum, m: *const f32) void;
export type fp_glMatrixMultTranspose3x3fNV = fn(matrixMode: gl_enum, m: *const f32) void;
export type fp_glMatrixMultTransposedEXT = fn(mode: gl_enum, m: *const f64) void;
export type fp_glMatrixMultTransposefEXT = fn(mode: gl_enum, m: *const f32) void;
export type fp_glMatrixMultdEXT = fn(mode: gl_enum, m: *const f64) void;
export type fp_glMatrixMultfEXT = fn(mode: gl_enum, m: *const f32) void;
export type fp_glMatrixOrthoEXT = fn(mode: gl_enum, left: f64, right: f64, bottom: f64, top: f64, zNear: f64, zFar: f64) void;
export type fp_glMatrixPopEXT = fn(mode: gl_enum) void;
export type fp_glMatrixPushEXT = fn(mode: gl_enum) void;
export type fp_glMatrixRotatedEXT = fn(mode: gl_enum, angle: f64, x: f64, y: f64, z: f64) void;
export type fp_glMatrixRotatefEXT = fn(mode: gl_enum, angle: f32, x: f32, y: f32, z: f32) void;
export type fp_glMatrixScaledEXT = fn(mode: gl_enum, x: f64, y: f64, z: f64) void;
export type fp_glMatrixScalefEXT = fn(mode: gl_enum, x: f32, y: f32, z: f32) void;
export type fp_glMatrixTranslatedEXT = fn(mode: gl_enum, x: f64, y: f64, z: f64) void;
export type fp_glMatrixTranslatefEXT = fn(mode: gl_enum, x: f32, y: f32, z: f32) void;
export type fp_glMaxShaderCompilerThreadsARB = fn(count: uint) void;
export type fp_glMaxShaderCompilerThreadsKHR = fn(count: uint) void;
export type fp_glMemoryBarrier = fn(barriers: gl_bitfield) void;
export type fp_glMemoryBarrierByRegion = fn(barriers: gl_bitfield) void;
export type fp_glMemoryBarrierEXT = fn(barriers: gl_bitfield) void;
export type fp_glMemoryObjectParameterivEXT = fn(memoryObject: uint, pname: gl_enum, params: *const i32) void;
export type fp_glMinSampleShadingARB = fn(value: f32) void;
export type fp_glMinmaxEXT = fn(target: gl_enum, internalformat: gl_enum, sink: u8) void;
export type fp_glMultMatrixd = fn(m: *const f64) void;
export type fp_glMultMatrixf = fn(m: *const f32) void;
export type fp_glMultMatrixxOES = fn(m: *const i32) void;
export type fp_glMultTransposeMatrixd = fn(m: *const f64) void;
export type fp_glMultTransposeMatrixdARB = fn(m: *const f64) void;
export type fp_glMultTransposeMatrixf = fn(m: *const f32) void;
export type fp_glMultTransposeMatrixfARB = fn(m: *const f32) void;
export type fp_glMultTransposeMatrixxOES = fn(m: *const i32) void;
export type fp_glMultiDrawArrays = fn(mode: gl_enum, first: *const i32, count: *const i32, drawcount: i32) void;
export type fp_glMultiDrawArraysEXT = fn(mode: gl_enum, first: *const i32, count: *const i32, primcount: i32) void;
export type fp_glMultiDrawArraysIndirect = fn(mode: gl_enum, indirect: *const void, drawcount: i32, stride: i32) void;
export type fp_glMultiDrawArraysIndirectAMD = fn(mode: gl_enum, indirect: *const void, primcount: i32, stride: i32) void;
export type fp_glMultiDrawArraysIndirectBindlessCountNV = fn(mode: gl_enum, indirect: *const void, drawCount: i32, maxDrawCount: i32, stride: i32, vertexBufferCount: i32) void;
export type fp_glMultiDrawArraysIndirectBindlessNV = fn(mode: gl_enum, indirect: *const void, drawCount: i32, stride: i32, vertexBufferCount: i32) void;
export type fp_glMultiDrawArraysIndirectCountARB = fn(mode: gl_enum, indirect: *const void, drawcount: size, maxdrawcount: i32, stride: i32) void;
export type fp_glMultiDrawElementArrayAPPLE = fn(mode: gl_enum, first: *const i32, count: *const i32, primcount: i32) void;
export type fp_glMultiDrawElements = fn(mode: gl_enum, count: *const i32, type_: gl_enum, indices: *const *const void, drawcount: i32) void;
export type fp_glMultiDrawElementsBaseVertex = fn(mode: gl_enum, count: *const i32, type_: gl_enum, indices: *const *const void, drawcount: i32, basevertex: *const i32) void;
export type fp_glMultiDrawElementsEXT = fn(mode: gl_enum, count: *const i32, type_: gl_enum, indices: *const *const void, primcount: i32) void;
export type fp_glMultiDrawElementsIndirect = fn(mode: gl_enum, type_: gl_enum, indirect: *const void, drawcount: i32, stride: i32) void;
export type fp_glMultiDrawElementsIndirectAMD = fn(mode: gl_enum, type_: gl_enum, indirect: *const void, primcount: i32, stride: i32) void;
export type fp_glMultiDrawElementsIndirectBindlessCountNV = fn(mode: gl_enum, type_: gl_enum, indirect: *const void, drawCount: i32, maxDrawCount: i32, stride: i32, vertexBufferCount: i32) void;
export type fp_glMultiDrawElementsIndirectBindlessNV = fn(mode: gl_enum, type_: gl_enum, indirect: *const void, drawCount: i32, stride: i32, vertexBufferCount: i32) void;
export type fp_glMultiDrawElementsIndirectCountARB = fn(mode: gl_enum, type_: gl_enum, indirect: *const void, drawcount: size, maxdrawcount: i32, stride: i32) void;
export type fp_glMultiDrawMeshTasksIndirectCountNV = fn(indirect: size, drawcount: size, maxdrawcount: i32, stride: i32) void;
export type fp_glMultiDrawMeshTasksIndirectNV = fn(indirect: size, drawcount: i32, stride: i32) void;
export type fp_glMultiDrawRangeElementArrayAPPLE = fn(mode: gl_enum, start: uint, end: uint, first: *const i32, count: *const i32, primcount: i32) void;
export type fp_glMultiModeDrawArraysIBM = fn(mode: *const gl_enum, first: *const i32, count: *const i32, primcount: i32, modestride: i32) void;
export type fp_glMultiModeDrawElementsIBM = fn(mode: *const gl_enum, count: *const i32, type_: gl_enum, indices: *const *const void, primcount: i32, modestride: i32) void;
export type fp_glMultiTexBufferEXT = fn(texunit: gl_enum, target: gl_enum, internalformat: gl_enum, buffer: uint) void;
export type fp_glMultiTexCoord1bOES = fn(texture: gl_enum, s: i8) void;
export type fp_glMultiTexCoord1bvOES = fn(texture: gl_enum, coords: *const i8) void;
export type fp_glMultiTexCoord1d = fn(target: gl_enum, s: f64) void;
export type fp_glMultiTexCoord1dARB = fn(target: gl_enum, s: f64) void;
export type fp_glMultiTexCoord1dv = fn(target: gl_enum, v: *const f64) void;
export type fp_glMultiTexCoord1dvARB = fn(target: gl_enum, v: *const f64) void;
export type fp_glMultiTexCoord1f = fn(target: gl_enum, s: f32) void;
export type fp_glMultiTexCoord1fARB = fn(target: gl_enum, s: f32) void;
export type fp_glMultiTexCoord1fv = fn(target: gl_enum, v: *const f32) void;
export type fp_glMultiTexCoord1fvARB = fn(target: gl_enum, v: *const f32) void;
export type fp_glMultiTexCoord1hNV = fn(target: gl_enum, s: u16) void;
export type fp_glMultiTexCoord1hvNV = fn(target: gl_enum, v: *const u16) void;
export type fp_glMultiTexCoord1i = fn(target: gl_enum, s: i32) void;
export type fp_glMultiTexCoord1iARB = fn(target: gl_enum, s: i32) void;
export type fp_glMultiTexCoord1iv = fn(target: gl_enum, v: *const i32) void;
export type fp_glMultiTexCoord1ivARB = fn(target: gl_enum, v: *const i32) void;
export type fp_glMultiTexCoord1s = fn(target: gl_enum, s: i16) void;
export type fp_glMultiTexCoord1sARB = fn(target: gl_enum, s: i16) void;
export type fp_glMultiTexCoord1sv = fn(target: gl_enum, v: *const i16) void;
export type fp_glMultiTexCoord1svARB = fn(target: gl_enum, v: *const i16) void;
export type fp_glMultiTexCoord1xOES = fn(texture: gl_enum, s: i32) void;
export type fp_glMultiTexCoord1xvOES = fn(texture: gl_enum, coords: *const i32) void;
export type fp_glMultiTexCoord2bOES = fn(texture: gl_enum, s: i8, t: i8) void;
export type fp_glMultiTexCoord2bvOES = fn(texture: gl_enum, coords: *const i8) void;
export type fp_glMultiTexCoord2d = fn(target: gl_enum, s: f64, t: f64) void;
export type fp_glMultiTexCoord2dARB = fn(target: gl_enum, s: f64, t: f64) void;
export type fp_glMultiTexCoord2dv = fn(target: gl_enum, v: *const f64) void;
export type fp_glMultiTexCoord2dvARB = fn(target: gl_enum, v: *const f64) void;
export type fp_glMultiTexCoord2f = fn(target: gl_enum, s: f32, t: f32) void;
export type fp_glMultiTexCoord2fARB = fn(target: gl_enum, s: f32, t: f32) void;
export type fp_glMultiTexCoord2fv = fn(target: gl_enum, v: *const f32) void;
export type fp_glMultiTexCoord2fvARB = fn(target: gl_enum, v: *const f32) void;
export type fp_glMultiTexCoord2hNV = fn(target: gl_enum, s: u16, t: u16) void;
export type fp_glMultiTexCoord2hvNV = fn(target: gl_enum, v: *const u16) void;
export type fp_glMultiTexCoord2i = fn(target: gl_enum, s: i32, t: i32) void;
export type fp_glMultiTexCoord2iARB = fn(target: gl_enum, s: i32, t: i32) void;
export type fp_glMultiTexCoord2iv = fn(target: gl_enum, v: *const i32) void;
export type fp_glMultiTexCoord2ivARB = fn(target: gl_enum, v: *const i32) void;
export type fp_glMultiTexCoord2s = fn(target: gl_enum, s: i16, t: i16) void;
export type fp_glMultiTexCoord2sARB = fn(target: gl_enum, s: i16, t: i16) void;
export type fp_glMultiTexCoord2sv = fn(target: gl_enum, v: *const i16) void;
export type fp_glMultiTexCoord2svARB = fn(target: gl_enum, v: *const i16) void;
export type fp_glMultiTexCoord2xOES = fn(texture: gl_enum, s: i32, t: i32) void;
export type fp_glMultiTexCoord2xvOES = fn(texture: gl_enum, coords: *const i32) void;
export type fp_glMultiTexCoord3bOES = fn(texture: gl_enum, s: i8, t: i8, r: i8) void;
export type fp_glMultiTexCoord3bvOES = fn(texture: gl_enum, coords: *const i8) void;
export type fp_glMultiTexCoord3d = fn(target: gl_enum, s: f64, t: f64, r: f64) void;
export type fp_glMultiTexCoord3dARB = fn(target: gl_enum, s: f64, t: f64, r: f64) void;
export type fp_glMultiTexCoord3dv = fn(target: gl_enum, v: *const f64) void;
export type fp_glMultiTexCoord3dvARB = fn(target: gl_enum, v: *const f64) void;
export type fp_glMultiTexCoord3f = fn(target: gl_enum, s: f32, t: f32, r: f32) void;
export type fp_glMultiTexCoord3fARB = fn(target: gl_enum, s: f32, t: f32, r: f32) void;
export type fp_glMultiTexCoord3fv = fn(target: gl_enum, v: *const f32) void;
export type fp_glMultiTexCoord3fvARB = fn(target: gl_enum, v: *const f32) void;
export type fp_glMultiTexCoord3hNV = fn(target: gl_enum, s: u16, t: u16, r: u16) void;
export type fp_glMultiTexCoord3hvNV = fn(target: gl_enum, v: *const u16) void;
export type fp_glMultiTexCoord3i = fn(target: gl_enum, s: i32, t: i32, r: i32) void;
export type fp_glMultiTexCoord3iARB = fn(target: gl_enum, s: i32, t: i32, r: i32) void;
export type fp_glMultiTexCoord3iv = fn(target: gl_enum, v: *const i32) void;
export type fp_glMultiTexCoord3ivARB = fn(target: gl_enum, v: *const i32) void;
export type fp_glMultiTexCoord3s = fn(target: gl_enum, s: i16, t: i16, r: i16) void;
export type fp_glMultiTexCoord3sARB = fn(target: gl_enum, s: i16, t: i16, r: i16) void;
export type fp_glMultiTexCoord3sv = fn(target: gl_enum, v: *const i16) void;
export type fp_glMultiTexCoord3svARB = fn(target: gl_enum, v: *const i16) void;
export type fp_glMultiTexCoord3xOES = fn(texture: gl_enum, s: i32, t: i32, r: i32) void;
export type fp_glMultiTexCoord3xvOES = fn(texture: gl_enum, coords: *const i32) void;
export type fp_glMultiTexCoord4bOES = fn(texture: gl_enum, s: i8, t: i8, r: i8, q: i8) void;
export type fp_glMultiTexCoord4bvOES = fn(texture: gl_enum, coords: *const i8) void;
export type fp_glMultiTexCoord4d = fn(target: gl_enum, s: f64, t: f64, r: f64, q: f64) void;
export type fp_glMultiTexCoord4dARB = fn(target: gl_enum, s: f64, t: f64, r: f64, q: f64) void;
export type fp_glMultiTexCoord4dv = fn(target: gl_enum, v: *const f64) void;
export type fp_glMultiTexCoord4dvARB = fn(target: gl_enum, v: *const f64) void;
export type fp_glMultiTexCoord4f = fn(target: gl_enum, s: f32, t: f32, r: f32, q: f32) void;
export type fp_glMultiTexCoord4fARB = fn(target: gl_enum, s: f32, t: f32, r: f32, q: f32) void;
export type fp_glMultiTexCoord4fv = fn(target: gl_enum, v: *const f32) void;
export type fp_glMultiTexCoord4fvARB = fn(target: gl_enum, v: *const f32) void;
export type fp_glMultiTexCoord4hNV = fn(target: gl_enum, s: u16, t: u16, r: u16, q: u16) void;
export type fp_glMultiTexCoord4hvNV = fn(target: gl_enum, v: *const u16) void;
export type fp_glMultiTexCoord4i = fn(target: gl_enum, s: i32, t: i32, r: i32, q: i32) void;
export type fp_glMultiTexCoord4iARB = fn(target: gl_enum, s: i32, t: i32, r: i32, q: i32) void;
export type fp_glMultiTexCoord4iv = fn(target: gl_enum, v: *const i32) void;
export type fp_glMultiTexCoord4ivARB = fn(target: gl_enum, v: *const i32) void;
export type fp_glMultiTexCoord4s = fn(target: gl_enum, s: i16, t: i16, r: i16, q: i16) void;
export type fp_glMultiTexCoord4sARB = fn(target: gl_enum, s: i16, t: i16, r: i16, q: i16) void;
export type fp_glMultiTexCoord4sv = fn(target: gl_enum, v: *const i16) void;
export type fp_glMultiTexCoord4svARB = fn(target: gl_enum, v: *const i16) void;
export type fp_glMultiTexCoord4xOES = fn(texture: gl_enum, s: i32, t: i32, r: i32, q: i32) void;
export type fp_glMultiTexCoord4xvOES = fn(texture: gl_enum, coords: *const i32) void;
export type fp_glMultiTexCoordPointerEXT = fn(texunit: gl_enum, size_: i32, type_: gl_enum, stride: i32, pointer: *const void) void;
export type fp_glMultiTexEnvfEXT = fn(texunit: gl_enum, target: gl_enum, pname: gl_enum, param: f32) void;
export type fp_glMultiTexEnvfvEXT = fn(texunit: gl_enum, target: gl_enum, pname: gl_enum, params: *const f32) void;
export type fp_glMultiTexEnviEXT = fn(texunit: gl_enum, target: gl_enum, pname: gl_enum, param: i32) void;
export type fp_glMultiTexEnvivEXT = fn(texunit: gl_enum, target: gl_enum, pname: gl_enum, params: *const i32) void;
export type fp_glMultiTexGendEXT = fn(texunit: gl_enum, coord: gl_enum, pname: gl_enum, param: f64) void;
export type fp_glMultiTexGendvEXT = fn(texunit: gl_enum, coord: gl_enum, pname: gl_enum, params: *const f64) void;
export type fp_glMultiTexGenfEXT = fn(texunit: gl_enum, coord: gl_enum, pname: gl_enum, param: f32) void;
export type fp_glMultiTexGenfvEXT = fn(texunit: gl_enum, coord: gl_enum, pname: gl_enum, params: *const f32) void;
export type fp_glMultiTexGeniEXT = fn(texunit: gl_enum, coord: gl_enum, pname: gl_enum, param: i32) void;
export type fp_glMultiTexGenivEXT = fn(texunit: gl_enum, coord: gl_enum, pname: gl_enum, params: *const i32) void;
export type fp_glMultiTexImage1DEXT = fn(texunit: gl_enum, target: gl_enum, level: i32, internalformat: i32, width: i32, border: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glMultiTexImage2DEXT = fn(texunit: gl_enum, target: gl_enum, level: i32, internalformat: i32, width: i32, height: i32, border: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glMultiTexImage3DEXT = fn(texunit: gl_enum, target: gl_enum, level: i32, internalformat: i32, width: i32, height: i32, depth: i32, border: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glMultiTexParameterIivEXT = fn(texunit: gl_enum, target: gl_enum, pname: gl_enum, params: *const i32) void;
export type fp_glMultiTexParameterIuivEXT = fn(texunit: gl_enum, target: gl_enum, pname: gl_enum, params: *const uint) void;
export type fp_glMultiTexParameterfEXT = fn(texunit: gl_enum, target: gl_enum, pname: gl_enum, param: f32) void;
export type fp_glMultiTexParameterfvEXT = fn(texunit: gl_enum, target: gl_enum, pname: gl_enum, params: *const f32) void;
export type fp_glMultiTexParameteriEXT = fn(texunit: gl_enum, target: gl_enum, pname: gl_enum, param: i32) void;
export type fp_glMultiTexParameterivEXT = fn(texunit: gl_enum, target: gl_enum, pname: gl_enum, params: *const i32) void;
export type fp_glMultiTexRenderbufferEXT = fn(texunit: gl_enum, target: gl_enum, renderbuffer: uint) void;
export type fp_glMultiTexSubImage1DEXT = fn(texunit: gl_enum, target: gl_enum, level: i32, xoffset: i32, width: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glMultiTexSubImage2DEXT = fn(texunit: gl_enum, target: gl_enum, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glMultiTexSubImage3DEXT = fn(texunit: gl_enum, target: gl_enum, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glMulticastBarrierNV = fn() void;
export type fp_glMulticastBlitFramebufferNV = fn(srcGpu: uint, dstGpu: uint, srcX0: i32, srcY0: i32, srcX1: i32, srcY1: i32, dstX0: i32, dstY0: i32, dstX1: i32, dstY1: i32, mask: gl_bitfield, filter: gl_enum) void;
export type fp_glMulticastBufferSubDataNV = fn(gpuMask: gl_bitfield, buffer: uint, offset_: size, size_: uintptr, data: *const void) void;
export type fp_glMulticastCopyBufferSubDataNV = fn(readGpu: uint, writeGpuMask: gl_bitfield, readBuffer: uint, writeBuffer: uint, readOffset: size, writeOffset: size, size_: uintptr) void;
export type fp_glMulticastCopyImageSubDataNV = fn(srcGpu: uint, dstGpuMask: gl_bitfield, srcName: uint, srcTarget: gl_enum, srcLevel: i32, srcX: i32, srcY: i32, srcZ: i32, dstName: uint, dstTarget: gl_enum, dstLevel: i32, dstX: i32, dstY: i32, dstZ: i32, srcWidth: i32, srcHeight: i32, srcDepth: i32) void;
export type fp_glMulticastFramebufferSampleLocationsfvNV = fn(gpu: uint, framebuffer: uint, start: uint, count: i32, v: *const f32) void;
export type fp_glMulticastGetQueryObjecti64vNV = fn(gpu: uint, id: uint, pname: gl_enum, params: *i64) void;
export type fp_glMulticastGetQueryObjectivNV = fn(gpu: uint, id: uint, pname: gl_enum, params: *i32) void;
export type fp_glMulticastGetQueryObjectui64vNV = fn(gpu: uint, id: uint, pname: gl_enum, params: *u64) void;
export type fp_glMulticastGetQueryObjectuivNV = fn(gpu: uint, id: uint, pname: gl_enum, params: *uint) void;
export type fp_glMulticastScissorArrayvNVX = fn(gpu: uint, first: uint, count: i32, v: *const i32) void;
export type fp_glMulticastViewportArrayvNVX = fn(gpu: uint, first: uint, count: i32, v: *const f32) void;
export type fp_glMulticastViewportPositionWScaleNVX = fn(gpu: uint, index: uint, xcoeff: f32, ycoeff: f32) void;
export type fp_glMulticastWaitSyncNV = fn(signalGpu: uint, waitGpuMask: gl_bitfield) void;
export type fp_glNamedBufferAttachMemoryNV = fn(buffer: uint, memory: uint, offset_: u64) void;
export type fp_glNamedBufferData = fn(buffer: uint, size_: uintptr, data: *const void, usage: gl_enum) void;
export type fp_glNamedBufferDataEXT = fn(buffer: uint, size_: uintptr, data: *const void, usage: gl_enum) void;
export type fp_glNamedBufferPageCommitmentARB = fn(buffer: uint, offset_: size, size_: uintptr, commit: u8) void;
export type fp_glNamedBufferPageCommitmentEXT = fn(buffer: uint, offset_: size, size_: uintptr, commit: u8) void;
export type fp_glNamedBufferPageCommitmentMemNV = fn(buffer: uint, offset_: size, size_: uintptr, memory: uint, memOffset: u64, commit: u8) void;
export type fp_glNamedBufferStorage = fn(buffer: uint, size_: uintptr, data: *const void, flags: gl_bitfield) void;
export type fp_glNamedBufferStorageEXT = fn(buffer: uint, size_: uintptr, data: *const void, flags: gl_bitfield) void;
export type fp_glNamedBufferStorageExternalEXT = fn(buffer: uint, offset_: size, size_: uintptr, clientBuffer: *void, flags: gl_bitfield) void;
export type fp_glNamedBufferStorageMemEXT = fn(buffer: uint, size_: uintptr, memory: uint, offset_: u64) void;
export type fp_glNamedBufferSubData = fn(buffer: uint, offset_: size, size_: uintptr, data: *const void) void;
export type fp_glNamedBufferSubDataEXT = fn(buffer: uint, offset_: size, size_: uintptr, data: *const void) void;
export type fp_glNamedCopyBufferSubDataEXT = fn(readBuffer: uint, writeBuffer: uint, readOffset: size, writeOffset: size, size_: uintptr) void;
export type fp_glNamedFramebufferDrawBuffer = fn(framebuffer: uint, buf: gl_enum) void;
export type fp_glNamedFramebufferDrawBuffers = fn(framebuffer: uint, n: i32, bufs: *const gl_enum) void;
export type fp_glNamedFramebufferParameteri = fn(framebuffer: uint, pname: gl_enum, param: i32) void;
export type fp_glNamedFramebufferParameteriEXT = fn(framebuffer: uint, pname: gl_enum, param: i32) void;
export type fp_glNamedFramebufferReadBuffer = fn(framebuffer: uint, src: gl_enum) void;
export type fp_glNamedFramebufferRenderbuffer = fn(framebuffer: uint, attachment: gl_enum, renderbuffertarget: gl_enum, renderbuffer: uint) void;
export type fp_glNamedFramebufferRenderbufferEXT = fn(framebuffer: uint, attachment: gl_enum, renderbuffertarget: gl_enum, renderbuffer: uint) void;
export type fp_glNamedFramebufferSampleLocationsfvARB = fn(framebuffer: uint, start: uint, count: i32, v: *const f32) void;
export type fp_glNamedFramebufferSampleLocationsfvNV = fn(framebuffer: uint, start: uint, count: i32, v: *const f32) void;
export type fp_glNamedFramebufferSamplePositionsfvAMD = fn(framebuffer: uint, numsamples: uint, pixelindex: uint, values: *const f32) void;
export type fp_glNamedFramebufferTexture = fn(framebuffer: uint, attachment: gl_enum, texture: uint, level: i32) void;
export type fp_glNamedFramebufferTexture1DEXT = fn(framebuffer: uint, attachment: gl_enum, textarget: gl_enum, texture: uint, level: i32) void;
export type fp_glNamedFramebufferTexture2DEXT = fn(framebuffer: uint, attachment: gl_enum, textarget: gl_enum, texture: uint, level: i32) void;
export type fp_glNamedFramebufferTexture3DEXT = fn(framebuffer: uint, attachment: gl_enum, textarget: gl_enum, texture: uint, level: i32, zoffset: i32) void;
export type fp_glNamedFramebufferTextureEXT = fn(framebuffer: uint, attachment: gl_enum, texture: uint, level: i32) void;
export type fp_glNamedFramebufferTextureFaceEXT = fn(framebuffer: uint, attachment: gl_enum, texture: uint, level: i32, face: gl_enum) void;
export type fp_glNamedFramebufferTextureLayer = fn(framebuffer: uint, attachment: gl_enum, texture: uint, level: i32, layer: i32) void;
export type fp_glNamedFramebufferTextureLayerEXT = fn(framebuffer: uint, attachment: gl_enum, texture: uint, level: i32, layer: i32) void;
export type fp_glNamedProgramLocalParameter4dEXT = fn(program: uint, target: gl_enum, index: uint, x: f64, y: f64, z: f64, w: f64) void;
export type fp_glNamedProgramLocalParameter4dvEXT = fn(program: uint, target: gl_enum, index: uint, params: *const f64) void;
export type fp_glNamedProgramLocalParameter4fEXT = fn(program: uint, target: gl_enum, index: uint, x: f32, y: f32, z: f32, w: f32) void;
export type fp_glNamedProgramLocalParameter4fvEXT = fn(program: uint, target: gl_enum, index: uint, params: *const f32) void;
export type fp_glNamedProgramLocalParameterI4iEXT = fn(program: uint, target: gl_enum, index: uint, x: i32, y: i32, z: i32, w: i32) void;
export type fp_glNamedProgramLocalParameterI4ivEXT = fn(program: uint, target: gl_enum, index: uint, params: *const i32) void;
export type fp_glNamedProgramLocalParameterI4uiEXT = fn(program: uint, target: gl_enum, index: uint, x: uint, y: uint, z: uint, w: uint) void;
export type fp_glNamedProgramLocalParameterI4uivEXT = fn(program: uint, target: gl_enum, index: uint, params: *const uint) void;
export type fp_glNamedProgramLocalParameters4fvEXT = fn(program: uint, target: gl_enum, index: uint, count: i32, params: *const f32) void;
export type fp_glNamedProgramLocalParametersI4ivEXT = fn(program: uint, target: gl_enum, index: uint, count: i32, params: *const i32) void;
export type fp_glNamedProgramLocalParametersI4uivEXT = fn(program: uint, target: gl_enum, index: uint, count: i32, params: *const uint) void;
export type fp_glNamedProgramStringEXT = fn(program: uint, target: gl_enum, format: gl_enum, len_: i32, string: *const void) void;
export type fp_glNamedRenderbufferStorage = fn(renderbuffer: uint, internalformat: gl_enum, width: i32, height: i32) void;
export type fp_glNamedRenderbufferStorageEXT = fn(renderbuffer: uint, internalformat: gl_enum, width: i32, height: i32) void;
export type fp_glNamedRenderbufferStorageMultisample = fn(renderbuffer: uint, samples: i32, internalformat: gl_enum, width: i32, height: i32) void;
export type fp_glNamedRenderbufferStorageMultisampleAdvancedAMD = fn(renderbuffer: uint, samples: i32, storageSamples: i32, internalformat: gl_enum, width: i32, height: i32) void;
export type fp_glNamedRenderbufferStorageMultisampleCoverageEXT = fn(renderbuffer: uint, coverageSamples: i32, colorSamples: i32, internalformat: gl_enum, width: i32, height: i32) void;
export type fp_glNamedRenderbufferStorageMultisampleEXT = fn(renderbuffer: uint, samples: i32, internalformat: gl_enum, width: i32, height: i32) void;
export type fp_glNamedStringARB = fn(type_: gl_enum, namelen: i32, name: *const i8, stringlen: i32, string: *const i8) void;
export type fp_glNewList = fn(list: uint, mode: gl_enum) void;
export type fp_glNewObjectBufferATI = fn(size_: i32, pointer: *const void, usage: gl_enum) uint;
export type fp_glNormal3b = fn(nx: i8, ny: i8, nz: i8) void;
export type fp_glNormal3bv = fn(v: *const i8) void;
export type fp_glNormal3d = fn(nx: f64, ny: f64, nz: f64) void;
export type fp_glNormal3dv = fn(v: *const f64) void;
export type fp_glNormal3f = fn(nx: f32, ny: f32, nz: f32) void;
export type fp_glNormal3fVertex3fSUN = fn(nx: f32, ny: f32, nz: f32, x: f32, y: f32, z: f32) void;
export type fp_glNormal3fVertex3fvSUN = fn(n: *const f32, v: *const f32) void;
export type fp_glNormal3fv = fn(v: *const f32) void;
export type fp_glNormal3hNV = fn(nx: u16, ny: u16, nz: u16) void;
export type fp_glNormal3hvNV = fn(v: *const u16) void;
export type fp_glNormal3i = fn(nx: i32, ny: i32, nz: i32) void;
export type fp_glNormal3iv = fn(v: *const i32) void;
export type fp_glNormal3s = fn(nx: i16, ny: i16, nz: i16) void;
export type fp_glNormal3sv = fn(v: *const i16) void;
export type fp_glNormal3xOES = fn(nx: i32, ny: i32, nz: i32) void;
export type fp_glNormal3xvOES = fn(coords: *const i32) void;
export type fp_glNormalFormatNV = fn(type_: gl_enum, stride: i32) void;
export type fp_glNormalPointer = fn(type_: gl_enum, stride: i32, pointer: *const void) void;
export type fp_glNormalPointerEXT = fn(type_: gl_enum, stride: i32, count: i32, pointer: *const void) void;
export type fp_glNormalPointerListIBM = fn(type_: gl_enum, stride: i32, pointer: *const *const void, ptrstride: i32) void;
export type fp_glNormalPointervINTEL = fn(type_: gl_enum, pointer: *const *const void) void;
export type fp_glNormalStream3bATI = fn(stream: gl_enum, nx: i8, ny: i8, nz: i8) void;
export type fp_glNormalStream3bvATI = fn(stream: gl_enum, coords: *const i8) void;
export type fp_glNormalStream3dATI = fn(stream: gl_enum, nx: f64, ny: f64, nz: f64) void;
export type fp_glNormalStream3dvATI = fn(stream: gl_enum, coords: *const f64) void;
export type fp_glNormalStream3fATI = fn(stream: gl_enum, nx: f32, ny: f32, nz: f32) void;
export type fp_glNormalStream3fvATI = fn(stream: gl_enum, coords: *const f32) void;
export type fp_glNormalStream3iATI = fn(stream: gl_enum, nx: i32, ny: i32, nz: i32) void;
export type fp_glNormalStream3ivATI = fn(stream: gl_enum, coords: *const i32) void;
export type fp_glNormalStream3sATI = fn(stream: gl_enum, nx: i16, ny: i16, nz: i16) void;
export type fp_glNormalStream3svATI = fn(stream: gl_enum, coords: *const i16) void;
export type fp_glObjectLabel = fn(identifier: gl_enum, name: uint, length: i32, label: *const i8) void;
export type fp_glObjectPtrLabel = fn(ptr: *const void, length: i32, label: *const i8) void;
export type fp_glObjectPurgeableAPPLE = fn(objectType: gl_enum, name: uint, option: gl_enum) gl_enum;
export type fp_glObjectUnpurgeableAPPLE = fn(objectType: gl_enum, name: uint, option: gl_enum) gl_enum;
export type fp_glOrtho = fn(left: f64, right: f64, bottom: f64, top: f64, zNear: f64, zFar: f64) void;
export type fp_glOrthofOES = fn(l: f32, r: f32, b: f32, t: f32, n: f32, f: f32) void;
export type fp_glOrthoxOES = fn(l: i32, r: i32, b: i32, t: i32, n: i32, f: i32) void;
export type fp_glPNTrianglesfATI = fn(pname: gl_enum, param: f32) void;
export type fp_glPNTrianglesiATI = fn(pname: gl_enum, param: i32) void;
export type fp_glPassTexCoordATI = fn(dst: uint, coord: uint, swizzle: gl_enum) void;
export type fp_glPassThrough = fn(token: f32) void;
export type fp_glPassThroughxOES = fn(token: i32) void;
export type fp_glPatchParameterfv = fn(pname: gl_enum, values: *const f32) void;
export type fp_glPatchParameteri = fn(pname: gl_enum, value: i32) void;
export type fp_glPathCommandsNV = fn(path: uint, numCommands: i32, commands: *const u8, numCoords: i32, coordType: gl_enum, coords: *const void) void;
export type fp_glPathCoordsNV = fn(path: uint, numCoords: i32, coordType: gl_enum, coords: *const void) void;
export type fp_glPathCoverDepthFuncNV = fn(func: gl_enum) void;
export type fp_glPathDashArrayNV = fn(path: uint, dashCount: i32, dashArray: *const f32) void;
export type fp_glPathGlyphIndexArrayNV = fn(firstPathName: uint, fontTarget: gl_enum, fontName: *const void, fontStyle: gl_bitfield, firstGlyphIndex: uint, numGlyphs: i32, pathParameterTemplate: uint, emScale: f32) gl_enum;
export type fp_glPathGlyphIndexRangeNV = fn(fontTarget: gl_enum, fontName: *const void, fontStyle: gl_bitfield, pathParameterTemplate: uint, emScale: f32, baseAndCount: *uint) gl_enum;
export type fp_glPathGlyphRangeNV = fn(firstPathName: uint, fontTarget: gl_enum, fontName: *const void, fontStyle: gl_bitfield, firstGlyph: uint, numGlyphs: i32, handleMissingGlyphs: gl_enum, pathParameterTemplate: uint, emScale: f32) void;
export type fp_glPathGlyphsNV = fn(firstPathName: uint, fontTarget: gl_enum, fontName: *const void, fontStyle: gl_bitfield, numGlyphs: i32, type_: gl_enum, charcodes: *const void, handleMissingGlyphs: gl_enum, pathParameterTemplate: uint, emScale: f32) void;
export type fp_glPathMemoryGlyphIndexArrayNV = fn(firstPathName: uint, fontTarget: gl_enum, fontSize: uintptr, fontData: *const void, faceIndex: i32, firstGlyphIndex: uint, numGlyphs: i32, pathParameterTemplate: uint, emScale: f32) gl_enum;
export type fp_glPathParameterfNV = fn(path: uint, pname: gl_enum, value: f32) void;
export type fp_glPathParameterfvNV = fn(path: uint, pname: gl_enum, value: *const f32) void;
export type fp_glPathParameteriNV = fn(path: uint, pname: gl_enum, value: i32) void;
export type fp_glPathParameterivNV = fn(path: uint, pname: gl_enum, value: *const i32) void;
export type fp_glPathStencilDepthOffsetNV = fn(factor: f32, units: f32) void;
export type fp_glPathStencilFuncNV = fn(func: gl_enum, ref: i32, mask: uint) void;
export type fp_glPathStringNV = fn(path: uint, format: gl_enum, length: i32, pathString: *const void) void;
export type fp_glPathSubCommandsNV = fn(path: uint, commandStart: i32, commandsToDelete: i32, numCommands: i32, commands: *const u8, numCoords: i32, coordType: gl_enum, coords: *const void) void;
export type fp_glPathSubCoordsNV = fn(path: uint, coordStart: i32, numCoords: i32, coordType: gl_enum, coords: *const void) void;
export type fp_glPauseTransformFeedback = fn() void;
export type fp_glPauseTransformFeedbackNV = fn() void;
export type fp_glPixelDataRangeNV = fn(target: gl_enum, length: i32, pointer: *const void) void;
export type fp_glPixelMapfv = fn(map: gl_enum, mapsize: i32, values: *const f32) void;
export type fp_glPixelMapuiv = fn(map: gl_enum, mapsize: i32, values: *const uint) void;
export type fp_glPixelMapusv = fn(map: gl_enum, mapsize: i32, values: *const u16) void;
export type fp_glPixelMapx = fn(map: gl_enum, size_: i32, values: *const i32) void;
export type fp_glPixelStoref = fn(pname: gl_enum, param: f32) void;
export type fp_glPixelStorei = fn(pname: gl_enum, param: i32) void;
export type fp_glPixelStorex = fn(pname: gl_enum, param: i32) void;
export type fp_glPixelTexGenParameterfSGIS = fn(pname: gl_enum, param: f32) void;
export type fp_glPixelTexGenParameterfvSGIS = fn(pname: gl_enum, params: *const f32) void;
export type fp_glPixelTexGenParameteriSGIS = fn(pname: gl_enum, param: i32) void;
export type fp_glPixelTexGenParameterivSGIS = fn(pname: gl_enum, params: *const i32) void;
export type fp_glPixelTexGenSGIX = fn(mode: gl_enum) void;
export type fp_glPixelTransferf = fn(pname: gl_enum, param: f32) void;
export type fp_glPixelTransferi = fn(pname: gl_enum, param: i32) void;
export type fp_glPixelTransferxOES = fn(pname: gl_enum, param: i32) void;
export type fp_glPixelTransformParameterfEXT = fn(target: gl_enum, pname: gl_enum, param: f32) void;
export type fp_glPixelTransformParameterfvEXT = fn(target: gl_enum, pname: gl_enum, params: *const f32) void;
export type fp_glPixelTransformParameteriEXT = fn(target: gl_enum, pname: gl_enum, param: i32) void;
export type fp_glPixelTransformParameterivEXT = fn(target: gl_enum, pname: gl_enum, params: *const i32) void;
export type fp_glPixelZoom = fn(xfactor: f32, yfactor: f32) void;
export type fp_glPixelZoomxOES = fn(xfactor: i32, yfactor: i32) void;
export type fp_glPointAlongPathNV = fn(path: uint, startSegment: i32, numSegments: i32, distance: f32, x: *f32, y: *f32, tangentX: *f32, tangentY: *f32) u8;
export type fp_glPointParameterf = fn(pname: gl_enum, param: f32) void;
export type fp_glPointParameterfARB = fn(pname: gl_enum, param: f32) void;
export type fp_glPointParameterfEXT = fn(pname: gl_enum, param: f32) void;
export type fp_glPointParameterfSGIS = fn(pname: gl_enum, param: f32) void;
export type fp_glPointParameterfv = fn(pname: gl_enum, params: *const f32) void;
export type fp_glPointParameterfvARB = fn(pname: gl_enum, params: *const f32) void;
export type fp_glPointParameterfvEXT = fn(pname: gl_enum, params: *const f32) void;
export type fp_glPointParameterfvSGIS = fn(pname: gl_enum, params: *const f32) void;
export type fp_glPointParameteri = fn(pname: gl_enum, param: i32) void;
export type fp_glPointParameteriNV = fn(pname: gl_enum, param: i32) void;
export type fp_glPointParameteriv = fn(pname: gl_enum, params: *const i32) void;
export type fp_glPointParameterivNV = fn(pname: gl_enum, params: *const i32) void;
export type fp_glPointParameterxvOES = fn(pname: gl_enum, params: *const i32) void;
export type fp_glPointSize = fn(size_: f32) void;
export type fp_glPointSizexOES = fn(size_: i32) void;
export type fp_glPollAsyncSGIX = fn(markerp: *uint) i32;
export type fp_glPollInstrumentsSGIX = fn(marker_p: *i32) i32;
export type fp_glPolygonMode = fn(face: gl_enum, mode: gl_enum) void;
export type fp_glPolygonOffset = fn(factor: f32, units: f32) void;
export type fp_glPolygonOffsetClamp = fn(factor: f32, units: f32, clamp: f32) void;
export type fp_glPolygonOffsetClampEXT = fn(factor: f32, units: f32, clamp: f32) void;
export type fp_glPolygonOffsetEXT = fn(factor: f32, bias: f32) void;
export type fp_glPolygonOffsetxOES = fn(factor: i32, units: i32) void;
export type fp_glPolygonStipple = fn(mask: *const u8) void;
export type fp_glPopAttrib = fn() void;
export type fp_glPopClientAttrib = fn() void;
export type fp_glPopDebugGroup = fn() void;
export type fp_glPopGroupMarkerEXT = fn() void;
export type fp_glPopMatrix = fn() void;
export type fp_glPopName = fn() void;
export type fp_glPresentFrameDualFillNV = fn(video_slot: uint, minPresentTime: u64, beginPresentTimeId: uint, presentDurationId: uint, type_: gl_enum, target0: gl_enum, fill0: uint, target1: gl_enum, fill1: uint, target2: gl_enum, fill2: uint, target3: gl_enum, fill3: uint) void;
export type fp_glPresentFrameKeyedNV = fn(video_slot: uint, minPresentTime: u64, beginPresentTimeId: uint, presentDurationId: uint, type_: gl_enum, target0: gl_enum, fill0: uint, key0: uint, target1: gl_enum, fill1: uint, key1: uint) void;
export type fp_glPrimitiveBoundingBoxARB = fn(minX: f32, minY: f32, minZ: f32, minW: f32, maxX: f32, maxY: f32, maxZ: f32, maxW: f32) void;
export type fp_glPrimitiveRestartIndexNV = fn(index: uint) void;
export type fp_glPrimitiveRestartNV = fn() void;
export type fp_glPrioritizeTextures = fn(n: i32, textures: *const uint, priorities: *const f32) void;
export type fp_glPrioritizeTexturesEXT = fn(n: i32, textures: *const uint, priorities: *const f64) void;
export type fp_glPrioritizeTexturesxOES = fn(n: i32, textures: *const uint, priorities: *const i32) void;
export type fp_glProgramBinary = fn(program: uint, binaryFormat: gl_enum, binary: *const void, length: i32) void;
export type fp_glProgramBufferParametersIivNV = fn(target: gl_enum, bindingIndex: uint, wordIndex: uint, count: i32, params: *const i32) void;
export type fp_glProgramBufferParametersIuivNV = fn(target: gl_enum, bindingIndex: uint, wordIndex: uint, count: i32, params: *const uint) void;
export type fp_glProgramBufferParametersfvNV = fn(target: gl_enum, bindingIndex: uint, wordIndex: uint, count: i32, params: *const f32) void;
export type fp_glProgramEnvParameter4dARB = fn(target: gl_enum, index: uint, x: f64, y: f64, z: f64, w: f64) void;
export type fp_glProgramEnvParameter4dvARB = fn(target: gl_enum, index: uint, params: *const f64) void;
export type fp_glProgramEnvParameter4fARB = fn(target: gl_enum, index: uint, x: f32, y: f32, z: f32, w: f32) void;
export type fp_glProgramEnvParameter4fvARB = fn(target: gl_enum, index: uint, params: *const f32) void;
export type fp_glProgramEnvParameterI4iNV = fn(target: gl_enum, index: uint, x: i32, y: i32, z: i32, w: i32) void;
export type fp_glProgramEnvParameterI4ivNV = fn(target: gl_enum, index: uint, params: *const i32) void;
export type fp_glProgramEnvParameterI4uiNV = fn(target: gl_enum, index: uint, x: uint, y: uint, z: uint, w: uint) void;
export type fp_glProgramEnvParameterI4uivNV = fn(target: gl_enum, index: uint, params: *const uint) void;
export type fp_glProgramEnvParameters4fvEXT = fn(target: gl_enum, index: uint, count: i32, params: *const f32) void;
export type fp_glProgramEnvParametersI4ivNV = fn(target: gl_enum, index: uint, count: i32, params: *const i32) void;
export type fp_glProgramEnvParametersI4uivNV = fn(target: gl_enum, index: uint, count: i32, params: *const uint) void;
export type fp_glProgramLocalParameter4dARB = fn(target: gl_enum, index: uint, x: f64, y: f64, z: f64, w: f64) void;
export type fp_glProgramLocalParameter4dvARB = fn(target: gl_enum, index: uint, params: *const f64) void;
export type fp_glProgramLocalParameter4fARB = fn(target: gl_enum, index: uint, x: f32, y: f32, z: f32, w: f32) void;
export type fp_glProgramLocalParameter4fvARB = fn(target: gl_enum, index: uint, params: *const f32) void;
export type fp_glProgramLocalParameterI4iNV = fn(target: gl_enum, index: uint, x: i32, y: i32, z: i32, w: i32) void;
export type fp_glProgramLocalParameterI4ivNV = fn(target: gl_enum, index: uint, params: *const i32) void;
export type fp_glProgramLocalParameterI4uiNV = fn(target: gl_enum, index: uint, x: uint, y: uint, z: uint, w: uint) void;
export type fp_glProgramLocalParameterI4uivNV = fn(target: gl_enum, index: uint, params: *const uint) void;
export type fp_glProgramLocalParameters4fvEXT = fn(target: gl_enum, index: uint, count: i32, params: *const f32) void;
export type fp_glProgramLocalParametersI4ivNV = fn(target: gl_enum, index: uint, count: i32, params: *const i32) void;
export type fp_glProgramLocalParametersI4uivNV = fn(target: gl_enum, index: uint, count: i32, params: *const uint) void;
export type fp_glProgramNamedParameter4dNV = fn(id: uint, len_: i32, name: *const u8, x: f64, y: f64, z: f64, w: f64) void;
export type fp_glProgramNamedParameter4dvNV = fn(id: uint, len_: i32, name: *const u8, v: *const f64) void;
export type fp_glProgramNamedParameter4fNV = fn(id: uint, len_: i32, name: *const u8, x: f32, y: f32, z: f32, w: f32) void;
export type fp_glProgramNamedParameter4fvNV = fn(id: uint, len_: i32, name: *const u8, v: *const f32) void;
export type fp_glProgramParameter4dNV = fn(target: gl_enum, index: uint, x: f64, y: f64, z: f64, w: f64) void;
export type fp_glProgramParameter4dvNV = fn(target: gl_enum, index: uint, v: *const f64) void;
export type fp_glProgramParameter4fNV = fn(target: gl_enum, index: uint, x: f32, y: f32, z: f32, w: f32) void;
export type fp_glProgramParameter4fvNV = fn(target: gl_enum, index: uint, v: *const f32) void;
export type fp_glProgramParameteri = fn(program: uint, pname: gl_enum, value: i32) void;
export type fp_glProgramParameteriARB = fn(program: uint, pname: gl_enum, value: i32) void;
export type fp_glProgramParameteriEXT = fn(program: uint, pname: gl_enum, value: i32) void;
export type fp_glProgramParameters4dvNV = fn(target: gl_enum, index: uint, count: i32, v: *const f64) void;
export type fp_glProgramParameters4fvNV = fn(target: gl_enum, index: uint, count: i32, v: *const f32) void;
export type fp_glProgramPathFragmentInputGenNV = fn(program: uint, location: i32, genMode: gl_enum, components: i32, coeffs: *const f32) void;
export type fp_glProgramStringARB = fn(target: gl_enum, format: gl_enum, len_: i32, string: *const void) void;
export type fp_glProgramSubroutineParametersuivNV = fn(target: gl_enum, count: i32, params: *const uint) void;
export type fp_glProgramUniform1d = fn(program: uint, location: i32, v0: f64) void;
export type fp_glProgramUniform1dEXT = fn(program: uint, location: i32, x: f64) void;
export type fp_glProgramUniform1dv = fn(program: uint, location: i32, count: i32, value: *const f64) void;
export type fp_glProgramUniform1dvEXT = fn(program: uint, location: i32, count: i32, value: *const f64) void;
export type fp_glProgramUniform1f = fn(program: uint, location: i32, v0: f32) void;
export type fp_glProgramUniform1fEXT = fn(program: uint, location: i32, v0: f32) void;
export type fp_glProgramUniform1fv = fn(program: uint, location: i32, count: i32, value: *const f32) void;
export type fp_glProgramUniform1fvEXT = fn(program: uint, location: i32, count: i32, value: *const f32) void;
export type fp_glProgramUniform1i = fn(program: uint, location: i32, v0: i32) void;
export type fp_glProgramUniform1i64ARB = fn(program: uint, location: i32, x: i64) void;
export type fp_glProgramUniform1i64NV = fn(program: uint, location: i32, x: i64) void;
export type fp_glProgramUniform1i64vARB = fn(program: uint, location: i32, count: i32, value: *const i64) void;
export type fp_glProgramUniform1i64vNV = fn(program: uint, location: i32, count: i32, value: *const i64) void;
export type fp_glProgramUniform1iEXT = fn(program: uint, location: i32, v0: i32) void;
export type fp_glProgramUniform1iv = fn(program: uint, location: i32, count: i32, value: *const i32) void;
export type fp_glProgramUniform1ivEXT = fn(program: uint, location: i32, count: i32, value: *const i32) void;
export type fp_glProgramUniform1ui = fn(program: uint, location: i32, v0: uint) void;
export type fp_glProgramUniform1ui64ARB = fn(program: uint, location: i32, x: u64) void;
export type fp_glProgramUniform1ui64NV = fn(program: uint, location: i32, x: u64) void;
export type fp_glProgramUniform1ui64vARB = fn(program: uint, location: i32, count: i32, value: *const u64) void;
export type fp_glProgramUniform1ui64vNV = fn(program: uint, location: i32, count: i32, value: *const u64) void;
export type fp_glProgramUniform1uiEXT = fn(program: uint, location: i32, v0: uint) void;
export type fp_glProgramUniform1uiv = fn(program: uint, location: i32, count: i32, value: *const uint) void;
export type fp_glProgramUniform1uivEXT = fn(program: uint, location: i32, count: i32, value: *const uint) void;
export type fp_glProgramUniform2d = fn(program: uint, location: i32, v0: f64, v1: f64) void;
export type fp_glProgramUniform2dEXT = fn(program: uint, location: i32, x: f64, y: f64) void;
export type fp_glProgramUniform2dv = fn(program: uint, location: i32, count: i32, value: *const f64) void;
export type fp_glProgramUniform2dvEXT = fn(program: uint, location: i32, count: i32, value: *const f64) void;
export type fp_glProgramUniform2f = fn(program: uint, location: i32, v0: f32, v1: f32) void;
export type fp_glProgramUniform2fEXT = fn(program: uint, location: i32, v0: f32, v1: f32) void;
export type fp_glProgramUniform2fv = fn(program: uint, location: i32, count: i32, value: *const f32) void;
export type fp_glProgramUniform2fvEXT = fn(program: uint, location: i32, count: i32, value: *const f32) void;
export type fp_glProgramUniform2i = fn(program: uint, location: i32, v0: i32, v1: i32) void;
export type fp_glProgramUniform2i64ARB = fn(program: uint, location: i32, x: i64, y: i64) void;
export type fp_glProgramUniform2i64NV = fn(program: uint, location: i32, x: i64, y: i64) void;
export type fp_glProgramUniform2i64vARB = fn(program: uint, location: i32, count: i32, value: *const i64) void;
export type fp_glProgramUniform2i64vNV = fn(program: uint, location: i32, count: i32, value: *const i64) void;
export type fp_glProgramUniform2iEXT = fn(program: uint, location: i32, v0: i32, v1: i32) void;
export type fp_glProgramUniform2iv = fn(program: uint, location: i32, count: i32, value: *const i32) void;
export type fp_glProgramUniform2ivEXT = fn(program: uint, location: i32, count: i32, value: *const i32) void;
export type fp_glProgramUniform2ui = fn(program: uint, location: i32, v0: uint, v1: uint) void;
export type fp_glProgramUniform2ui64ARB = fn(program: uint, location: i32, x: u64, y: u64) void;
export type fp_glProgramUniform2ui64NV = fn(program: uint, location: i32, x: u64, y: u64) void;
export type fp_glProgramUniform2ui64vARB = fn(program: uint, location: i32, count: i32, value: *const u64) void;
export type fp_glProgramUniform2ui64vNV = fn(program: uint, location: i32, count: i32, value: *const u64) void;
export type fp_glProgramUniform2uiEXT = fn(program: uint, location: i32, v0: uint, v1: uint) void;
export type fp_glProgramUniform2uiv = fn(program: uint, location: i32, count: i32, value: *const uint) void;
export type fp_glProgramUniform2uivEXT = fn(program: uint, location: i32, count: i32, value: *const uint) void;
export type fp_glProgramUniform3d = fn(program: uint, location: i32, v0: f64, v1: f64, v2: f64) void;
export type fp_glProgramUniform3dEXT = fn(program: uint, location: i32, x: f64, y: f64, z: f64) void;
export type fp_glProgramUniform3dv = fn(program: uint, location: i32, count: i32, value: *const f64) void;
export type fp_glProgramUniform3dvEXT = fn(program: uint, location: i32, count: i32, value: *const f64) void;
export type fp_glProgramUniform3f = fn(program: uint, location: i32, v0: f32, v1: f32, v2: f32) void;
export type fp_glProgramUniform3fEXT = fn(program: uint, location: i32, v0: f32, v1: f32, v2: f32) void;
export type fp_glProgramUniform3fv = fn(program: uint, location: i32, count: i32, value: *const f32) void;
export type fp_glProgramUniform3fvEXT = fn(program: uint, location: i32, count: i32, value: *const f32) void;
export type fp_glProgramUniform3i = fn(program: uint, location: i32, v0: i32, v1: i32, v2: i32) void;
export type fp_glProgramUniform3i64ARB = fn(program: uint, location: i32, x: i64, y: i64, z: i64) void;
export type fp_glProgramUniform3i64NV = fn(program: uint, location: i32, x: i64, y: i64, z: i64) void;
export type fp_glProgramUniform3i64vARB = fn(program: uint, location: i32, count: i32, value: *const i64) void;
export type fp_glProgramUniform3i64vNV = fn(program: uint, location: i32, count: i32, value: *const i64) void;
export type fp_glProgramUniform3iEXT = fn(program: uint, location: i32, v0: i32, v1: i32, v2: i32) void;
export type fp_glProgramUniform3iv = fn(program: uint, location: i32, count: i32, value: *const i32) void;
export type fp_glProgramUniform3ivEXT = fn(program: uint, location: i32, count: i32, value: *const i32) void;
export type fp_glProgramUniform3ui = fn(program: uint, location: i32, v0: uint, v1: uint, v2: uint) void;
export type fp_glProgramUniform3ui64ARB = fn(program: uint, location: i32, x: u64, y: u64, z: u64) void;
export type fp_glProgramUniform3ui64NV = fn(program: uint, location: i32, x: u64, y: u64, z: u64) void;
export type fp_glProgramUniform3ui64vARB = fn(program: uint, location: i32, count: i32, value: *const u64) void;
export type fp_glProgramUniform3ui64vNV = fn(program: uint, location: i32, count: i32, value: *const u64) void;
export type fp_glProgramUniform3uiEXT = fn(program: uint, location: i32, v0: uint, v1: uint, v2: uint) void;
export type fp_glProgramUniform3uiv = fn(program: uint, location: i32, count: i32, value: *const uint) void;
export type fp_glProgramUniform3uivEXT = fn(program: uint, location: i32, count: i32, value: *const uint) void;
export type fp_glProgramUniform4d = fn(program: uint, location: i32, v0: f64, v1: f64, v2: f64, v3: f64) void;
export type fp_glProgramUniform4dEXT = fn(program: uint, location: i32, x: f64, y: f64, z: f64, w: f64) void;
export type fp_glProgramUniform4dv = fn(program: uint, location: i32, count: i32, value: *const f64) void;
export type fp_glProgramUniform4dvEXT = fn(program: uint, location: i32, count: i32, value: *const f64) void;
export type fp_glProgramUniform4f = fn(program: uint, location: i32, v0: f32, v1: f32, v2: f32, v3: f32) void;
export type fp_glProgramUniform4fEXT = fn(program: uint, location: i32, v0: f32, v1: f32, v2: f32, v3: f32) void;
export type fp_glProgramUniform4fv = fn(program: uint, location: i32, count: i32, value: *const f32) void;
export type fp_glProgramUniform4fvEXT = fn(program: uint, location: i32, count: i32, value: *const f32) void;
export type fp_glProgramUniform4i = fn(program: uint, location: i32, v0: i32, v1: i32, v2: i32, v3: i32) void;
export type fp_glProgramUniform4i64ARB = fn(program: uint, location: i32, x: i64, y: i64, z: i64, w: i64) void;
export type fp_glProgramUniform4i64NV = fn(program: uint, location: i32, x: i64, y: i64, z: i64, w: i64) void;
export type fp_glProgramUniform4i64vARB = fn(program: uint, location: i32, count: i32, value: *const i64) void;
export type fp_glProgramUniform4i64vNV = fn(program: uint, location: i32, count: i32, value: *const i64) void;
export type fp_glProgramUniform4iEXT = fn(program: uint, location: i32, v0: i32, v1: i32, v2: i32, v3: i32) void;
export type fp_glProgramUniform4iv = fn(program: uint, location: i32, count: i32, value: *const i32) void;
export type fp_glProgramUniform4ivEXT = fn(program: uint, location: i32, count: i32, value: *const i32) void;
export type fp_glProgramUniform4ui = fn(program: uint, location: i32, v0: uint, v1: uint, v2: uint, v3: uint) void;
export type fp_glProgramUniform4ui64ARB = fn(program: uint, location: i32, x: u64, y: u64, z: u64, w: u64) void;
export type fp_glProgramUniform4ui64NV = fn(program: uint, location: i32, x: u64, y: u64, z: u64, w: u64) void;
export type fp_glProgramUniform4ui64vARB = fn(program: uint, location: i32, count: i32, value: *const u64) void;
export type fp_glProgramUniform4ui64vNV = fn(program: uint, location: i32, count: i32, value: *const u64) void;
export type fp_glProgramUniform4uiEXT = fn(program: uint, location: i32, v0: uint, v1: uint, v2: uint, v3: uint) void;
export type fp_glProgramUniform4uiv = fn(program: uint, location: i32, count: i32, value: *const uint) void;
export type fp_glProgramUniform4uivEXT = fn(program: uint, location: i32, count: i32, value: *const uint) void;
export type fp_glProgramUniformHandleui64ARB = fn(program: uint, location: i32, value: u64) void;
export type fp_glProgramUniformHandleui64NV = fn(program: uint, location: i32, value: u64) void;
export type fp_glProgramUniformHandleui64vARB = fn(program: uint, location: i32, count: i32, values: *const u64) void;
export type fp_glProgramUniformHandleui64vNV = fn(program: uint, location: i32, count: i32, values: *const u64) void;
export type fp_glProgramUniformMatrix2dv = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glProgramUniformMatrix2dvEXT = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glProgramUniformMatrix2fv = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glProgramUniformMatrix2fvEXT = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glProgramUniformMatrix2x3dv = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glProgramUniformMatrix2x3dvEXT = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glProgramUniformMatrix2x3fv = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glProgramUniformMatrix2x3fvEXT = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glProgramUniformMatrix2x4dv = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glProgramUniformMatrix2x4dvEXT = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glProgramUniformMatrix2x4fv = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glProgramUniformMatrix2x4fvEXT = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glProgramUniformMatrix3dv = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glProgramUniformMatrix3dvEXT = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glProgramUniformMatrix3fv = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glProgramUniformMatrix3fvEXT = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glProgramUniformMatrix3x2dv = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glProgramUniformMatrix3x2dvEXT = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glProgramUniformMatrix3x2fv = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glProgramUniformMatrix3x2fvEXT = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glProgramUniformMatrix3x4dv = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glProgramUniformMatrix3x4dvEXT = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glProgramUniformMatrix3x4fv = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glProgramUniformMatrix3x4fvEXT = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glProgramUniformMatrix4dv = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glProgramUniformMatrix4dvEXT = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glProgramUniformMatrix4fv = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glProgramUniformMatrix4fvEXT = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glProgramUniformMatrix4x2dv = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glProgramUniformMatrix4x2dvEXT = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glProgramUniformMatrix4x2fv = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glProgramUniformMatrix4x2fvEXT = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glProgramUniformMatrix4x3dv = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glProgramUniformMatrix4x3dvEXT = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glProgramUniformMatrix4x3fv = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glProgramUniformMatrix4x3fvEXT = fn(program: uint, location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glProgramUniformui64NV = fn(program: uint, location: i32, value: u64) void;
export type fp_glProgramUniformui64vNV = fn(program: uint, location: i32, count: i32, value: *const u64) void;
export type fp_glProgramVertexLimitNV = fn(target: gl_enum, limit: i32) void;
export type fp_glProvokingVertex = fn(mode: gl_enum) void;
export type fp_glProvokingVertexEXT = fn(mode: gl_enum) void;
export type fp_glPushAttrib = fn(mask: gl_bitfield) void;
export type fp_glPushClientAttrib = fn(mask: gl_bitfield) void;
export type fp_glPushClientAttribDefaultEXT = fn(mask: gl_bitfield) void;
export type fp_glPushDebugGroup = fn(source: gl_enum, id: uint, length: i32, message: *const i8) void;
export type fp_glPushGroupMarkerEXT = fn(length: i32, marker: *const i8) void;
export type fp_glPushMatrix = fn() void;
export type fp_glPushName = fn(name: uint) void;
export type fp_glQueryCounter = fn(id: uint, target: gl_enum) void;
export type fp_glQueryMatrixxOES = fn(mantissa: *i32, exponent: *i32) gl_bitfield;
export type fp_glQueryObjectParameteruiAMD = fn(target: gl_enum, id: uint, pname: gl_enum, param: uint) void;
export type fp_glQueryResourceNV = fn(queryType: gl_enum, tagId: i32, count: uint, buffer: *i32) i32;
export type fp_glQueryResourceTagNV = fn(tagId: i32, tagString: *const i8) void;
export type fp_glRasterPos2d = fn(x: f64, y: f64) void;
export type fp_glRasterPos2dv = fn(v: *const f64) void;
export type fp_glRasterPos2f = fn(x: f32, y: f32) void;
export type fp_glRasterPos2fv = fn(v: *const f32) void;
export type fp_glRasterPos2i = fn(x: i32, y: i32) void;
export type fp_glRasterPos2iv = fn(v: *const i32) void;
export type fp_glRasterPos2s = fn(x: i16, y: i16) void;
export type fp_glRasterPos2sv = fn(v: *const i16) void;
export type fp_glRasterPos2xOES = fn(x: i32, y: i32) void;
export type fp_glRasterPos2xvOES = fn(coords: *const i32) void;
export type fp_glRasterPos3d = fn(x: f64, y: f64, z: f64) void;
export type fp_glRasterPos3dv = fn(v: *const f64) void;
export type fp_glRasterPos3f = fn(x: f32, y: f32, z: f32) void;
export type fp_glRasterPos3fv = fn(v: *const f32) void;
export type fp_glRasterPos3i = fn(x: i32, y: i32, z: i32) void;
export type fp_glRasterPos3iv = fn(v: *const i32) void;
export type fp_glRasterPos3s = fn(x: i16, y: i16, z: i16) void;
export type fp_glRasterPos3sv = fn(v: *const i16) void;
export type fp_glRasterPos3xOES = fn(x: i32, y: i32, z: i32) void;
export type fp_glRasterPos3xvOES = fn(coords: *const i32) void;
export type fp_glRasterPos4d = fn(x: f64, y: f64, z: f64, w: f64) void;
export type fp_glRasterPos4dv = fn(v: *const f64) void;
export type fp_glRasterPos4f = fn(x: f32, y: f32, z: f32, w: f32) void;
export type fp_glRasterPos4fv = fn(v: *const f32) void;
export type fp_glRasterPos4i = fn(x: i32, y: i32, z: i32, w: i32) void;
export type fp_glRasterPos4iv = fn(v: *const i32) void;
export type fp_glRasterPos4s = fn(x: i16, y: i16, z: i16, w: i16) void;
export type fp_glRasterPos4sv = fn(v: *const i16) void;
export type fp_glRasterPos4xOES = fn(x: i32, y: i32, z: i32, w: i32) void;
export type fp_glRasterPos4xvOES = fn(coords: *const i32) void;
export type fp_glRasterSamplesEXT = fn(samples: uint, fixedsamplelocations: u8) void;
export type fp_glReadBuffer = fn(src: gl_enum) void;
export type fp_glReadInstrumentsSGIX = fn(marker: i32) void;
export type fp_glReadPixels = fn(x: i32, y: i32, width: i32, height: i32, format: gl_enum, type_: gl_enum, pixels: *void) void;
export type fp_glReadnPixels = fn(x: i32, y: i32, width: i32, height: i32, format: gl_enum, type_: gl_enum, bufSize: i32, data: *void) void;
export type fp_glReadnPixelsARB = fn(x: i32, y: i32, width: i32, height: i32, format: gl_enum, type_: gl_enum, bufSize: i32, data: *void) void;
export type fp_glRectd = fn(x1: f64, y1: f64, x2: f64, y2: f64) void;
export type fp_glRectdv = fn(v1: *const f64, v2: *const f64) void;
export type fp_glRectf = fn(x1: f32, y1: f32, x2: f32, y2: f32) void;
export type fp_glRectfv = fn(v1: *const f32, v2: *const f32) void;
export type fp_glRecti = fn(x1: i32, y1: i32, x2: i32, y2: i32) void;
export type fp_glRectiv = fn(v1: *const i32, v2: *const i32) void;
export type fp_glRects = fn(x1: i16, y1: i16, x2: i16, y2: i16) void;
export type fp_glRectsv = fn(v1: *const i16, v2: *const i16) void;
export type fp_glRectxOES = fn(x1: i32, y1: i32, x2: i32, y2: i32) void;
export type fp_glRectxvOES = fn(v1: *const i32, v2: *const i32) void;
export type fp_glReferencePlaneSGIX = fn(equation: *const f64) void;
export type fp_glReleaseKeyedMutexWin32EXT = fn(memory: uint, key: u64) u8;
export type fp_glReleaseShaderCompiler = fn() void;
export type fp_glRenderGpuMaskNV = fn(mask: gl_bitfield) void;
export type fp_glRenderMode = fn(mode: gl_enum) i32;
export type fp_glRenderbufferStorage = fn(target: gl_enum, internalformat: gl_enum, width: i32, height: i32) void;
export type fp_glRenderbufferStorageEXT = fn(target: gl_enum, internalformat: gl_enum, width: i32, height: i32) void;
export type fp_glRenderbufferStorageMultisample = fn(target: gl_enum, samples: i32, internalformat: gl_enum, width: i32, height: i32) void;
export type fp_glRenderbufferStorageMultisampleAdvancedAMD = fn(target: gl_enum, samples: i32, storageSamples: i32, internalformat: gl_enum, width: i32, height: i32) void;
export type fp_glRenderbufferStorageMultisampleCoverageNV = fn(target: gl_enum, coverageSamples: i32, colorSamples: i32, internalformat: gl_enum, width: i32, height: i32) void;
export type fp_glRenderbufferStorageMultisampleEXT = fn(target: gl_enum, samples: i32, internalformat: gl_enum, width: i32, height: i32) void;
export type fp_glReplacementCodePointerSUN = fn(type_: gl_enum, stride: i32, pointer: *const *const void) void;
export type fp_glReplacementCodeubSUN = fn(code: u8) void;
export type fp_glReplacementCodeubvSUN = fn(code: *const u8) void;
export type fp_glReplacementCodeuiColor3fVertex3fSUN = fn(rc: uint, r: f32, g: f32, b: f32, x: f32, y: f32, z: f32) void;
export type fp_glReplacementCodeuiColor3fVertex3fvSUN = fn(rc: *const uint, c: *const f32, v: *const f32) void;
export type fp_glReplacementCodeuiColor4fNormal3fVertex3fSUN = fn(rc: uint, r: f32, g: f32, b: f32, a: f32, nx: f32, ny: f32, nz: f32, x: f32, y: f32, z: f32) void;
export type fp_glReplacementCodeuiColor4fNormal3fVertex3fvSUN = fn(rc: *const uint, c: *const f32, n: *const f32, v: *const f32) void;
export type fp_glReplacementCodeuiColor4ubVertex3fSUN = fn(rc: uint, r: u8, g: u8, b: u8, a: u8, x: f32, y: f32, z: f32) void;
export type fp_glReplacementCodeuiColor4ubVertex3fvSUN = fn(rc: *const uint, c: *const u8, v: *const f32) void;
export type fp_glReplacementCodeuiNormal3fVertex3fSUN = fn(rc: uint, nx: f32, ny: f32, nz: f32, x: f32, y: f32, z: f32) void;
export type fp_glReplacementCodeuiNormal3fVertex3fvSUN = fn(rc: *const uint, n: *const f32, v: *const f32) void;
export type fp_glReplacementCodeuiSUN = fn(code: uint) void;
export type fp_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = fn(rc: uint, s: f32, t: f32, r: f32, g: f32, b: f32, a: f32, nx: f32, ny: f32, nz: f32, x: f32, y: f32, z: f32) void;
export type fp_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = fn(rc: *const uint, tc: *const f32, c: *const f32, n: *const f32, v: *const f32) void;
export type fp_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = fn(rc: uint, s: f32, t: f32, nx: f32, ny: f32, nz: f32, x: f32, y: f32, z: f32) void;
export type fp_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = fn(rc: *const uint, tc: *const f32, n: *const f32, v: *const f32) void;
export type fp_glReplacementCodeuiTexCoord2fVertex3fSUN = fn(rc: uint, s: f32, t: f32, x: f32, y: f32, z: f32) void;
export type fp_glReplacementCodeuiTexCoord2fVertex3fvSUN = fn(rc: *const uint, tc: *const f32, v: *const f32) void;
export type fp_glReplacementCodeuiVertex3fSUN = fn(rc: uint, x: f32, y: f32, z: f32) void;
export type fp_glReplacementCodeuiVertex3fvSUN = fn(rc: *const uint, v: *const f32) void;
export type fp_glReplacementCodeuivSUN = fn(code: *const uint) void;
export type fp_glReplacementCodeusSUN = fn(code: u16) void;
export type fp_glReplacementCodeusvSUN = fn(code: *const u16) void;
export type fp_glRequestResidentProgramsNV = fn(n: i32, programs: *const uint) void;
export type fp_glResetHistogramEXT = fn(target: gl_enum) void;
export type fp_glResetMemoryObjectParameterNV = fn(memory: uint, pname: gl_enum) void;
export type fp_glResetMinmaxEXT = fn(target: gl_enum) void;
export type fp_glResizeBuffersMESA = fn() void;
export type fp_glResolveDepthValuesNV = fn() void;
export type fp_glResumeTransformFeedback = fn() void;
export type fp_glResumeTransformFeedbackNV = fn() void;
export type fp_glRotated = fn(angle: f64, x: f64, y: f64, z: f64) void;
export type fp_glRotatef = fn(angle: f32, x: f32, y: f32, z: f32) void;
export type fp_glRotatexOES = fn(angle: i32, x: i32, y: i32, z: i32) void;
export type fp_glSampleCoverage = fn(value: f32, invert: u8) void;
export type fp_glSampleCoverageARB = fn(value: f32, invert: u8) void;
export type fp_glSampleMapATI = fn(dst: uint, interp: uint, swizzle: gl_enum) void;
export type fp_glSampleMaskEXT = fn(value: f64, invert: u8) void;
export type fp_glSampleMaskIndexedNV = fn(index: uint, mask: gl_bitfield) void;
export type fp_glSampleMaskSGIS = fn(value: f64, invert: u8) void;
export type fp_glSampleMaski = fn(maskNumber: uint, mask: gl_bitfield) void;
export type fp_glSamplePatternEXT = fn(pattern: gl_enum) void;
export type fp_glSamplePatternSGIS = fn(pattern: gl_enum) void;
export type fp_glSamplerParameterIiv = fn(sampler: uint, pname: gl_enum, param: *const i32) void;
export type fp_glSamplerParameterIuiv = fn(sampler: uint, pname: gl_enum, param: *const uint) void;
export type fp_glSamplerParameterf = fn(sampler: uint, pname: gl_enum, param: f32) void;
export type fp_glSamplerParameterfv = fn(sampler: uint, pname: gl_enum, param: *const f32) void;
export type fp_glSamplerParameteri = fn(sampler: uint, pname: gl_enum, param: i32) void;
export type fp_glSamplerParameteriv = fn(sampler: uint, pname: gl_enum, param: *const i32) void;
export type fp_glScaled = fn(x: f64, y: f64, z: f64) void;
export type fp_glScalef = fn(x: f32, y: f32, z: f32) void;
export type fp_glScalexOES = fn(x: i32, y: i32, z: i32) void;
export type fp_glScissor = fn(x: i32, y: i32, width: i32, height: i32) void;
export type fp_glScissorArrayv = fn(first: uint, count: i32, v: *const i32) void;
export type fp_glScissorExclusiveArrayvNV = fn(first: uint, count: i32, v: *const i32) void;
export type fp_glScissorExclusiveNV = fn(x: i32, y: i32, width: i32, height: i32) void;
export type fp_glScissorIndexed = fn(index: uint, left: i32, bottom: i32, width: i32, height: i32) void;
export type fp_glScissorIndexedv = fn(index: uint, v: *const i32) void;
export type fp_glSecondaryColor3b = fn(red: i8, green: i8, blue: i8) void;
export type fp_glSecondaryColor3bEXT = fn(red: i8, green: i8, blue: i8) void;
export type fp_glSecondaryColor3bv = fn(v: *const i8) void;
export type fp_glSecondaryColor3bvEXT = fn(v: *const i8) void;
export type fp_glSecondaryColor3d = fn(red: f64, green: f64, blue: f64) void;
export type fp_glSecondaryColor3dEXT = fn(red: f64, green: f64, blue: f64) void;
export type fp_glSecondaryColor3dv = fn(v: *const f64) void;
export type fp_glSecondaryColor3dvEXT = fn(v: *const f64) void;
export type fp_glSecondaryColor3f = fn(red: f32, green: f32, blue: f32) void;
export type fp_glSecondaryColor3fEXT = fn(red: f32, green: f32, blue: f32) void;
export type fp_glSecondaryColor3fv = fn(v: *const f32) void;
export type fp_glSecondaryColor3fvEXT = fn(v: *const f32) void;
export type fp_glSecondaryColor3hNV = fn(red: u16, green: u16, blue: u16) void;
export type fp_glSecondaryColor3hvNV = fn(v: *const u16) void;
export type fp_glSecondaryColor3i = fn(red: i32, green: i32, blue: i32) void;
export type fp_glSecondaryColor3iEXT = fn(red: i32, green: i32, blue: i32) void;
export type fp_glSecondaryColor3iv = fn(v: *const i32) void;
export type fp_glSecondaryColor3ivEXT = fn(v: *const i32) void;
export type fp_glSecondaryColor3s = fn(red: i16, green: i16, blue: i16) void;
export type fp_glSecondaryColor3sEXT = fn(red: i16, green: i16, blue: i16) void;
export type fp_glSecondaryColor3sv = fn(v: *const i16) void;
export type fp_glSecondaryColor3svEXT = fn(v: *const i16) void;
export type fp_glSecondaryColor3ub = fn(red: u8, green: u8, blue: u8) void;
export type fp_glSecondaryColor3ubEXT = fn(red: u8, green: u8, blue: u8) void;
export type fp_glSecondaryColor3ubv = fn(v: *const u8) void;
export type fp_glSecondaryColor3ubvEXT = fn(v: *const u8) void;
export type fp_glSecondaryColor3ui = fn(red: uint, green: uint, blue: uint) void;
export type fp_glSecondaryColor3uiEXT = fn(red: uint, green: uint, blue: uint) void;
export type fp_glSecondaryColor3uiv = fn(v: *const uint) void;
export type fp_glSecondaryColor3uivEXT = fn(v: *const uint) void;
export type fp_glSecondaryColor3us = fn(red: u16, green: u16, blue: u16) void;
export type fp_glSecondaryColor3usEXT = fn(red: u16, green: u16, blue: u16) void;
export type fp_glSecondaryColor3usv = fn(v: *const u16) void;
export type fp_glSecondaryColor3usvEXT = fn(v: *const u16) void;
export type fp_glSecondaryColorFormatNV = fn(size_: i32, type_: gl_enum, stride: i32) void;
export type fp_glSecondaryColorPointer = fn(size_: i32, type_: gl_enum, stride: i32, pointer: *const void) void;
export type fp_glSecondaryColorPointerEXT = fn(size_: i32, type_: gl_enum, stride: i32, pointer: *const void) void;
export type fp_glSecondaryColorPointerListIBM = fn(size_: i32, type_: gl_enum, stride: i32, pointer: *const *const void, ptrstride: i32) void;
export type fp_glSelectBuffer = fn(size_: i32, buffer: *uint) void;
export type fp_glSelectPerfMonitorCountersAMD = fn(monitor: uint, enable: u8, group: uint, numCounters: i32, counterList: *uint) void;
export type fp_glSemaphoreParameterivNV = fn(semaphore: uint, pname: gl_enum, params: *const i32) void;
export type fp_glSemaphoreParameterui64vEXT = fn(semaphore: uint, pname: gl_enum, params: *const u64) void;
export type fp_glSeparableFilter2DEXT = fn(target: gl_enum, internalformat: gl_enum, width: i32, height: i32, format: gl_enum, type_: gl_enum, row: *const void, column: *const void) void;
export type fp_glSetFenceAPPLE = fn(fence: uint) void;
export type fp_glSetFenceNV = fn(fence: uint, condition: gl_enum) void;
export type fp_glSetFragmentShaderConstantATI = fn(dst: uint, value: *const f32) void;
export type fp_glSetInvariantEXT = fn(id: uint, type_: gl_enum, addr: *const void) void;
export type fp_glSetLocalConstantEXT = fn(id: uint, type_: gl_enum, addr: *const void) void;
export type fp_glSetMultisamplefvAMD = fn(pname: gl_enum, index: uint, val: *const f32) void;
export type fp_glShadeModel = fn(mode: gl_enum) void;
export type fp_glShaderBinary = fn(count: i32, shaders: *const uint, binaryFormat: gl_enum, binary: *const void, length: i32) void;
export type fp_glShaderOp1EXT = fn(op: gl_enum, res: uint, arg1: uint) void;
export type fp_glShaderOp2EXT = fn(op: gl_enum, res: uint, arg1: uint, arg2: uint) void;
export type fp_glShaderOp3EXT = fn(op: gl_enum, res: uint, arg1: uint, arg2: uint, arg3: uint) void;
export type fp_glShaderSource = fn(shader: uint, count: i32, string: *const *const i8, length: *const i32) void;
export type fp_glShaderSourceARB = fn(shaderObj: uint, count: i32, string: *const *const i8, length: *const i32) void;
export type fp_glShaderStorageBlockBinding = fn(program: uint, storageBlockIndex: uint, storageBlockBinding: uint) void;
export type fp_glShadingRateImageBarrierNV = fn(synchronize: u8) void;
export type fp_glShadingRateImagePaletteNV = fn(viewport: uint, first: uint, count: i32, rates: *const gl_enum) void;
export type fp_glShadingRateSampleOrderCustomNV = fn(rate: gl_enum, samples: uint, locations: *const i32) void;
export type fp_glShadingRateSampleOrderNV = fn(order: gl_enum) void;
export type fp_glSharpenTexFuncSGIS = fn(target: gl_enum, n: i32, points: *const f32) void;
export type fp_glSignalSemaphoreEXT = fn(semaphore: uint, numBufferBarriers: uint, buffers: *const uint, numTextureBarriers: uint, textures: *const uint, dstLayouts: *const gl_enum) void;
export type fp_glSignalSemaphoreui64NVX = fn(signalGpu: uint, fenceObjectCount: i32, semaphoreArray: *const uint, fenceValueArray: *const u64) void;
export type fp_glSignalVkFenceNV = fn(vkFence: u64) void;
export type fp_glSignalVkSemaphoreNV = fn(vkSemaphore: u64) void;
export type fp_glSpecializeShaderARB = fn(shader: uint, pEntryPoint: *const i8, numSpecializationConstants: uint, pConstantIndex: *const uint, pConstantValue: *const uint) void;
export type fp_glSpriteParameterfSGIX = fn(pname: gl_enum, param: f32) void;
export type fp_glSpriteParameterfvSGIX = fn(pname: gl_enum, params: *const f32) void;
export type fp_glSpriteParameteriSGIX = fn(pname: gl_enum, param: i32) void;
export type fp_glSpriteParameterivSGIX = fn(pname: gl_enum, params: *const i32) void;
export type fp_glStartInstrumentsSGIX = fn() void;
export type fp_glStateCaptureNV = fn(state: uint, mode: gl_enum) void;
export type fp_glStencilClearTagEXT = fn(stencilTagBits: i32, stencilClearTag: uint) void;
export type fp_glStencilFillPathInstancedNV = fn(numPaths: i32, pathNameType: gl_enum, paths: *const void, pathBase: uint, fillMode: gl_enum, mask: uint, transformType: gl_enum, transformValues: *const f32) void;
export type fp_glStencilFillPathNV = fn(path: uint, fillMode: gl_enum, mask: uint) void;
export type fp_glStencilFunc = fn(func: gl_enum, ref: i32, mask: uint) void;
export type fp_glStencilFuncSeparate = fn(face: gl_enum, func: gl_enum, ref: i32, mask: uint) void;
export type fp_glStencilFuncSeparateATI = fn(frontfunc: gl_enum, backfunc: gl_enum, ref: i32, mask: uint) void;
export type fp_glStencilMask = fn(mask: uint) void;
export type fp_glStencilMaskSeparate = fn(face: gl_enum, mask: uint) void;
export type fp_glStencilOp = fn(fail: gl_enum, zfail: gl_enum, zpass: gl_enum) void;
export type fp_glStencilOpSeparate = fn(face: gl_enum, sfail: gl_enum, dpfail: gl_enum, dppass: gl_enum) void;
export type fp_glStencilOpSeparateATI = fn(face: gl_enum, sfail: gl_enum, dpfail: gl_enum, dppass: gl_enum) void;
export type fp_glStencilOpValueAMD = fn(face: gl_enum, value: uint) void;
export type fp_glStencilStrokePathInstancedNV = fn(numPaths: i32, pathNameType: gl_enum, paths: *const void, pathBase: uint, reference: i32, mask: uint, transformType: gl_enum, transformValues: *const f32) void;
export type fp_glStencilStrokePathNV = fn(path: uint, reference: i32, mask: uint) void;
export type fp_glStencilThenCoverFillPathInstancedNV = fn(numPaths: i32, pathNameType: gl_enum, paths: *const void, pathBase: uint, fillMode: gl_enum, mask: uint, coverMode: gl_enum, transformType: gl_enum, transformValues: *const f32) void;
export type fp_glStencilThenCoverFillPathNV = fn(path: uint, fillMode: gl_enum, mask: uint, coverMode: gl_enum) void;
export type fp_glStencilThenCoverStrokePathInstancedNV = fn(numPaths: i32, pathNameType: gl_enum, paths: *const void, pathBase: uint, reference: i32, mask: uint, coverMode: gl_enum, transformType: gl_enum, transformValues: *const f32) void;
export type fp_glStencilThenCoverStrokePathNV = fn(path: uint, reference: i32, mask: uint, coverMode: gl_enum) void;
export type fp_glStopInstrumentsSGIX = fn(marker: i32) void;
export type fp_glStringMarkerGREMEDY = fn(len_: i32, string: *const void) void;
export type fp_glSubpixelPrecisionBiasNV = fn(xbits: uint, ybits: uint) void;
export type fp_glSwizzleEXT = fn(res: uint, in: uint, outX: gl_enum, outY: gl_enum, outZ: gl_enum, outW: gl_enum) void;
export type fp_glSyncTextureINTEL = fn(texture: uint) void;
export type fp_glTagSampleBufferSGIX = fn() void;
export type fp_glTangent3bEXT = fn(tx: i8, ty: i8, tz: i8) void;
export type fp_glTangent3bvEXT = fn(v: *const i8) void;
export type fp_glTangent3dEXT = fn(tx: f64, ty: f64, tz: f64) void;
export type fp_glTangent3dvEXT = fn(v: *const f64) void;
export type fp_glTangent3fEXT = fn(tx: f32, ty: f32, tz: f32) void;
export type fp_glTangent3fvEXT = fn(v: *const f32) void;
export type fp_glTangent3iEXT = fn(tx: i32, ty: i32, tz: i32) void;
export type fp_glTangent3ivEXT = fn(v: *const i32) void;
export type fp_glTangent3sEXT = fn(tx: i16, ty: i16, tz: i16) void;
export type fp_glTangent3svEXT = fn(v: *const i16) void;
export type fp_glTangentPointerEXT = fn(type_: gl_enum, stride: i32, pointer: *const void) void;
export type fp_glTbufferMask3DFX = fn(mask: uint) void;
export type fp_glTessellationFactorAMD = fn(factor: f32) void;
export type fp_glTessellationModeAMD = fn(mode: gl_enum) void;
export type fp_glTestFenceAPPLE = fn(fence: uint) u8;
export type fp_glTestFenceNV = fn(fence: uint) u8;
export type fp_glTestObjectAPPLE = fn(object: gl_enum, name: uint) u8;
export type fp_glTexAttachMemoryNV = fn(target: gl_enum, memory: uint, offset_: u64) void;
export type fp_glTexBufferARB = fn(target: gl_enum, internalformat: gl_enum, buffer: uint) void;
export type fp_glTexBufferEXT = fn(target: gl_enum, internalformat: gl_enum, buffer: uint) void;
export type fp_glTexBufferRange = fn(target: gl_enum, internalformat: gl_enum, buffer: uint, offset_: size, size_: uintptr) void;
export type fp_glTexBumpParameterfvATI = fn(pname: gl_enum, param: *const f32) void;
export type fp_glTexBumpParameterivATI = fn(pname: gl_enum, param: *const i32) void;
export type fp_glTexCoord1bOES = fn(s: i8) void;
export type fp_glTexCoord1bvOES = fn(coords: *const i8) void;
export type fp_glTexCoord1d = fn(s: f64) void;
export type fp_glTexCoord1dv = fn(v: *const f64) void;
export type fp_glTexCoord1f = fn(s: f32) void;
export type fp_glTexCoord1fv = fn(v: *const f32) void;
export type fp_glTexCoord1hNV = fn(s: u16) void;
export type fp_glTexCoord1hvNV = fn(v: *const u16) void;
export type fp_glTexCoord1i = fn(s: i32) void;
export type fp_glTexCoord1iv = fn(v: *const i32) void;
export type fp_glTexCoord1s = fn(s: i16) void;
export type fp_glTexCoord1sv = fn(v: *const i16) void;
export type fp_glTexCoord1xOES = fn(s: i32) void;
export type fp_glTexCoord1xvOES = fn(coords: *const i32) void;
export type fp_glTexCoord2bOES = fn(s: i8, t: i8) void;
export type fp_glTexCoord2bvOES = fn(coords: *const i8) void;
export type fp_glTexCoord2d = fn(s: f64, t: f64) void;
export type fp_glTexCoord2dv = fn(v: *const f64) void;
export type fp_glTexCoord2f = fn(s: f32, t: f32) void;
export type fp_glTexCoord2fColor3fVertex3fSUN = fn(s: f32, t: f32, r: f32, g: f32, b: f32, x: f32, y: f32, z: f32) void;
export type fp_glTexCoord2fColor3fVertex3fvSUN = fn(tc: *const f32, c: *const f32, v: *const f32) void;
export type fp_glTexCoord2fColor4fNormal3fVertex3fSUN = fn(s: f32, t: f32, r: f32, g: f32, b: f32, a: f32, nx: f32, ny: f32, nz: f32, x: f32, y: f32, z: f32) void;
export type fp_glTexCoord2fColor4fNormal3fVertex3fvSUN = fn(tc: *const f32, c: *const f32, n: *const f32, v: *const f32) void;
export type fp_glTexCoord2fColor4ubVertex3fSUN = fn(s: f32, t: f32, r: u8, g: u8, b: u8, a: u8, x: f32, y: f32, z: f32) void;
export type fp_glTexCoord2fColor4ubVertex3fvSUN = fn(tc: *const f32, c: *const u8, v: *const f32) void;
export type fp_glTexCoord2fNormal3fVertex3fSUN = fn(s: f32, t: f32, nx: f32, ny: f32, nz: f32, x: f32, y: f32, z: f32) void;
export type fp_glTexCoord2fNormal3fVertex3fvSUN = fn(tc: *const f32, n: *const f32, v: *const f32) void;
export type fp_glTexCoord2fVertex3fSUN = fn(s: f32, t: f32, x: f32, y: f32, z: f32) void;
export type fp_glTexCoord2fVertex3fvSUN = fn(tc: *const f32, v: *const f32) void;
export type fp_glTexCoord2fv = fn(v: *const f32) void;
export type fp_glTexCoord2hNV = fn(s: u16, t: u16) void;
export type fp_glTexCoord2hvNV = fn(v: *const u16) void;
export type fp_glTexCoord2i = fn(s: i32, t: i32) void;
export type fp_glTexCoord2iv = fn(v: *const i32) void;
export type fp_glTexCoord2s = fn(s: i16, t: i16) void;
export type fp_glTexCoord2sv = fn(v: *const i16) void;
export type fp_glTexCoord2xOES = fn(s: i32, t: i32) void;
export type fp_glTexCoord2xvOES = fn(coords: *const i32) void;
export type fp_glTexCoord3bOES = fn(s: i8, t: i8, r: i8) void;
export type fp_glTexCoord3bvOES = fn(coords: *const i8) void;
export type fp_glTexCoord3d = fn(s: f64, t: f64, r: f64) void;
export type fp_glTexCoord3dv = fn(v: *const f64) void;
export type fp_glTexCoord3f = fn(s: f32, t: f32, r: f32) void;
export type fp_glTexCoord3fv = fn(v: *const f32) void;
export type fp_glTexCoord3hNV = fn(s: u16, t: u16, r: u16) void;
export type fp_glTexCoord3hvNV = fn(v: *const u16) void;
export type fp_glTexCoord3i = fn(s: i32, t: i32, r: i32) void;
export type fp_glTexCoord3iv = fn(v: *const i32) void;
export type fp_glTexCoord3s = fn(s: i16, t: i16, r: i16) void;
export type fp_glTexCoord3sv = fn(v: *const i16) void;
export type fp_glTexCoord3xOES = fn(s: i32, t: i32, r: i32) void;
export type fp_glTexCoord3xvOES = fn(coords: *const i32) void;
export type fp_glTexCoord4bOES = fn(s: i8, t: i8, r: i8, q: i8) void;
export type fp_glTexCoord4bvOES = fn(coords: *const i8) void;
export type fp_glTexCoord4d = fn(s: f64, t: f64, r: f64, q: f64) void;
export type fp_glTexCoord4dv = fn(v: *const f64) void;
export type fp_glTexCoord4f = fn(s: f32, t: f32, r: f32, q: f32) void;
export type fp_glTexCoord4fColor4fNormal3fVertex4fSUN = fn(s: f32, t: f32, p: f32, q: f32, r: f32, g: f32, b: f32, a: f32, nx: f32, ny: f32, nz: f32, x: f32, y: f32, z: f32, w: f32) void;
export type fp_glTexCoord4fColor4fNormal3fVertex4fvSUN = fn(tc: *const f32, c: *const f32, n: *const f32, v: *const f32) void;
export type fp_glTexCoord4fVertex4fSUN = fn(s: f32, t: f32, p: f32, q: f32, x: f32, y: f32, z: f32, w: f32) void;
export type fp_glTexCoord4fVertex4fvSUN = fn(tc: *const f32, v: *const f32) void;
export type fp_glTexCoord4fv = fn(v: *const f32) void;
export type fp_glTexCoord4hNV = fn(s: u16, t: u16, r: u16, q: u16) void;
export type fp_glTexCoord4hvNV = fn(v: *const u16) void;
export type fp_glTexCoord4i = fn(s: i32, t: i32, r: i32, q: i32) void;
export type fp_glTexCoord4iv = fn(v: *const i32) void;
export type fp_glTexCoord4s = fn(s: i16, t: i16, r: i16, q: i16) void;
export type fp_glTexCoord4sv = fn(v: *const i16) void;
export type fp_glTexCoord4xOES = fn(s: i32, t: i32, r: i32, q: i32) void;
export type fp_glTexCoord4xvOES = fn(coords: *const i32) void;
export type fp_glTexCoordFormatNV = fn(size_: i32, type_: gl_enum, stride: i32) void;
export type fp_glTexCoordPointer = fn(size_: i32, type_: gl_enum, stride: i32, pointer: *const void) void;
export type fp_glTexCoordPointerEXT = fn(size_: i32, type_: gl_enum, stride: i32, count: i32, pointer: *const void) void;
export type fp_glTexCoordPointerListIBM = fn(size_: i32, type_: gl_enum, stride: i32, pointer: *const *const void, ptrstride: i32) void;
export type fp_glTexCoordPointervINTEL = fn(size_: i32, type_: gl_enum, pointer: *const *const void) void;
export type fp_glTexEnvf = fn(target: gl_enum, pname: gl_enum, param: f32) void;
export type fp_glTexEnvfv = fn(target: gl_enum, pname: gl_enum, params: *const f32) void;
export type fp_glTexEnvi = fn(target: gl_enum, pname: gl_enum, param: i32) void;
export type fp_glTexEnviv = fn(target: gl_enum, pname: gl_enum, params: *const i32) void;
export type fp_glTexEnvxOES = fn(target: gl_enum, pname: gl_enum, param: i32) void;
export type fp_glTexEnvxvOES = fn(target: gl_enum, pname: gl_enum, params: *const i32) void;
export type fp_glTexFilterFuncSGIS = fn(target: gl_enum, filter: gl_enum, n: i32, weights: *const f32) void;
export type fp_glTexGend = fn(coord: gl_enum, pname: gl_enum, param: f64) void;
export type fp_glTexGendv = fn(coord: gl_enum, pname: gl_enum, params: *const f64) void;
export type fp_glTexGenf = fn(coord: gl_enum, pname: gl_enum, param: f32) void;
export type fp_glTexGenfv = fn(coord: gl_enum, pname: gl_enum, params: *const f32) void;
export type fp_glTexGeni = fn(coord: gl_enum, pname: gl_enum, param: i32) void;
export type fp_glTexGeniv = fn(coord: gl_enum, pname: gl_enum, params: *const i32) void;
export type fp_glTexGenxOES = fn(coord: gl_enum, pname: gl_enum, param: i32) void;
export type fp_glTexGenxvOES = fn(coord: gl_enum, pname: gl_enum, params: *const i32) void;
export type fp_glTexImage1D = fn(target: gl_enum, level: i32, internalformat: i32, width: i32, border: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glTexImage2D = fn(target: gl_enum, level: i32, internalformat: i32, width: i32, height: i32, border: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glTexImage2DMultisample = fn(target: gl_enum, samples: i32, internalformat: gl_enum, width: i32, height: i32, fixedsamplelocations: u8) void;
export type fp_glTexImage2DMultisampleCoverageNV = fn(target: gl_enum, coverageSamples: i32, colorSamples: i32, internalFormat: i32, width: i32, height: i32, fixedSampleLocations: u8) void;
export type fp_glTexImage3D = fn(target: gl_enum, level: i32, internalformat: i32, width: i32, height: i32, depth: i32, border: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glTexImage3DEXT = fn(target: gl_enum, level: i32, internalformat: gl_enum, width: i32, height: i32, depth: i32, border: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glTexImage3DMultisample = fn(target: gl_enum, samples: i32, internalformat: gl_enum, width: i32, height: i32, depth: i32, fixedsamplelocations: u8) void;
export type fp_glTexImage3DMultisampleCoverageNV = fn(target: gl_enum, coverageSamples: i32, colorSamples: i32, internalFormat: i32, width: i32, height: i32, depth: i32, fixedSampleLocations: u8) void;
export type fp_glTexImage4DSGIS = fn(target: gl_enum, level: i32, internalformat: gl_enum, width: i32, height: i32, depth: i32, size4d: i32, border: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glTexPageCommitmentARB = fn(target: gl_enum, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, commit: u8) void;
export type fp_glTexPageCommitmentMemNV = fn(target: gl_enum, layer: i32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, memory: uint, offset_: u64, commit: u8) void;
export type fp_glTexParameterIivEXT = fn(target: gl_enum, pname: gl_enum, params: *const i32) void;
export type fp_glTexParameterIuivEXT = fn(target: gl_enum, pname: gl_enum, params: *const uint) void;
export type fp_glTexParameterf = fn(target: gl_enum, pname: gl_enum, param: f32) void;
export type fp_glTexParameterfv = fn(target: gl_enum, pname: gl_enum, params: *const f32) void;
export type fp_glTexParameteri = fn(target: gl_enum, pname: gl_enum, param: i32) void;
export type fp_glTexParameteriv = fn(target: gl_enum, pname: gl_enum, params: *const i32) void;
export type fp_glTexParameterxOES = fn(target: gl_enum, pname: gl_enum, param: i32) void;
export type fp_glTexParameterxvOES = fn(target: gl_enum, pname: gl_enum, params: *const i32) void;
export type fp_glTexRenderbufferNV = fn(target: gl_enum, renderbuffer: uint) void;
export type fp_glTexStorage1D = fn(target: gl_enum, levels: i32, internalformat: gl_enum, width: i32) void;
export type fp_glTexStorage1DEXT = fn(target: gl_enum, levels: i32, internalformat: gl_enum, width: i32) void;
export type fp_glTexStorage2D = fn(target: gl_enum, levels: i32, internalformat: gl_enum, width: i32, height: i32) void;
export type fp_glTexStorage2DEXT = fn(target: gl_enum, levels: i32, internalformat: gl_enum, width: i32, height: i32) void;
export type fp_glTexStorage2DMultisample = fn(target: gl_enum, samples: i32, internalformat: gl_enum, width: i32, height: i32, fixedsamplelocations: u8) void;
export type fp_glTexStorage3D = fn(target: gl_enum, levels: i32, internalformat: gl_enum, width: i32, height: i32, depth: i32) void;
export type fp_glTexStorage3DEXT = fn(target: gl_enum, levels: i32, internalformat: gl_enum, width: i32, height: i32, depth: i32) void;
export type fp_glTexStorage3DMultisample = fn(target: gl_enum, samples: i32, internalformat: gl_enum, width: i32, height: i32, depth: i32, fixedsamplelocations: u8) void;
export type fp_glTexStorageMem1DEXT = fn(target: gl_enum, levels: i32, internalFormat: gl_enum, width: i32, memory: uint, offset_: u64) void;
export type fp_glTexStorageMem2DEXT = fn(target: gl_enum, levels: i32, internalFormat: gl_enum, width: i32, height: i32, memory: uint, offset_: u64) void;
export type fp_glTexStorageMem2DMultisampleEXT = fn(target: gl_enum, samples: i32, internalFormat: gl_enum, width: i32, height: i32, fixedSampleLocations: u8, memory: uint, offset_: u64) void;
export type fp_glTexStorageMem3DEXT = fn(target: gl_enum, levels: i32, internalFormat: gl_enum, width: i32, height: i32, depth: i32, memory: uint, offset_: u64) void;
export type fp_glTexStorageMem3DMultisampleEXT = fn(target: gl_enum, samples: i32, internalFormat: gl_enum, width: i32, height: i32, depth: i32, fixedSampleLocations: u8, memory: uint, offset_: u64) void;
export type fp_glTexStorageSparseAMD = fn(target: gl_enum, internalFormat: gl_enum, width: i32, height: i32, depth: i32, layers: i32, flags: gl_bitfield) void;
export type fp_glTexSubImage1D = fn(target: gl_enum, level: i32, xoffset: i32, width: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glTexSubImage1DEXT = fn(target: gl_enum, level: i32, xoffset: i32, width: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glTexSubImage2D = fn(target: gl_enum, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glTexSubImage2DEXT = fn(target: gl_enum, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glTexSubImage3D = fn(target: gl_enum, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glTexSubImage3DEXT = fn(target: gl_enum, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glTexSubImage4DSGIS = fn(target: gl_enum, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, woffset: i32, width: i32, height: i32, depth: i32, size4d: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glTextureAttachMemoryNV = fn(texture: uint, memory: uint, offset_: u64) void;
export type fp_glTextureBarrier = fn() void;
export type fp_glTextureBarrierNV = fn() void;
export type fp_glTextureBuffer = fn(texture: uint, internalformat: gl_enum, buffer: uint) void;
export type fp_glTextureBufferEXT = fn(texture: uint, target: gl_enum, internalformat: gl_enum, buffer: uint) void;
export type fp_glTextureBufferRange = fn(texture: uint, internalformat: gl_enum, buffer: uint, offset_: size, size_: uintptr) void;
export type fp_glTextureBufferRangeEXT = fn(texture: uint, target: gl_enum, internalformat: gl_enum, buffer: uint, offset_: size, size_: uintptr) void;
export type fp_glTextureColorMaskSGIS = fn(red: u8, green: u8, blue: u8, alpha: u8) void;
export type fp_glTextureImage1DEXT = fn(texture: uint, target: gl_enum, level: i32, internalformat: i32, width: i32, border: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glTextureImage2DEXT = fn(texture: uint, target: gl_enum, level: i32, internalformat: i32, width: i32, height: i32, border: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glTextureImage2DMultisampleCoverageNV = fn(texture: uint, target: gl_enum, coverageSamples: i32, colorSamples: i32, internalFormat: i32, width: i32, height: i32, fixedSampleLocations: u8) void;
export type fp_glTextureImage2DMultisampleNV = fn(texture: uint, target: gl_enum, samples: i32, internalFormat: i32, width: i32, height: i32, fixedSampleLocations: u8) void;
export type fp_glTextureImage3DEXT = fn(texture: uint, target: gl_enum, level: i32, internalformat: i32, width: i32, height: i32, depth: i32, border: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glTextureImage3DMultisampleCoverageNV = fn(texture: uint, target: gl_enum, coverageSamples: i32, colorSamples: i32, internalFormat: i32, width: i32, height: i32, depth: i32, fixedSampleLocations: u8) void;
export type fp_glTextureImage3DMultisampleNV = fn(texture: uint, target: gl_enum, samples: i32, internalFormat: i32, width: i32, height: i32, depth: i32, fixedSampleLocations: u8) void;
export type fp_glTextureLightEXT = fn(pname: gl_enum) void;
export type fp_glTextureMaterialEXT = fn(face: gl_enum, mode: gl_enum) void;
export type fp_glTextureNormalEXT = fn(mode: gl_enum) void;
export type fp_glTexturePageCommitmentEXT = fn(texture: uint, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, commit: u8) void;
export type fp_glTexturePageCommitmentMemNV = fn(texture: uint, layer: i32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, memory: uint, offset_: u64, commit: u8) void;
export type fp_glTextureParameterIiv = fn(texture: uint, pname: gl_enum, params: *const i32) void;
export type fp_glTextureParameterIivEXT = fn(texture: uint, target: gl_enum, pname: gl_enum, params: *const i32) void;
export type fp_glTextureParameterIuiv = fn(texture: uint, pname: gl_enum, params: *const uint) void;
export type fp_glTextureParameterIuivEXT = fn(texture: uint, target: gl_enum, pname: gl_enum, params: *const uint) void;
export type fp_glTextureParameterf = fn(texture: uint, pname: gl_enum, param: f32) void;
export type fp_glTextureParameterfEXT = fn(texture: uint, target: gl_enum, pname: gl_enum, param: f32) void;
export type fp_glTextureParameterfv = fn(texture: uint, pname: gl_enum, param: *const f32) void;
export type fp_glTextureParameterfvEXT = fn(texture: uint, target: gl_enum, pname: gl_enum, params: *const f32) void;
export type fp_glTextureParameteri = fn(texture: uint, pname: gl_enum, param: i32) void;
export type fp_glTextureParameteriEXT = fn(texture: uint, target: gl_enum, pname: gl_enum, param: i32) void;
export type fp_glTextureParameteriv = fn(texture: uint, pname: gl_enum, param: *const i32) void;
export type fp_glTextureParameterivEXT = fn(texture: uint, target: gl_enum, pname: gl_enum, params: *const i32) void;
export type fp_glTextureRangeAPPLE = fn(target: gl_enum, length: i32, pointer: *const void) void;
export type fp_glTextureRenderbufferEXT = fn(texture: uint, target: gl_enum, renderbuffer: uint) void;
export type fp_glTextureStorage1D = fn(texture: uint, levels: i32, internalformat: gl_enum, width: i32) void;
export type fp_glTextureStorage1DEXT = fn(texture: uint, target: gl_enum, levels: i32, internalformat: gl_enum, width: i32) void;
export type fp_glTextureStorage2D = fn(texture: uint, levels: i32, internalformat: gl_enum, width: i32, height: i32) void;
export type fp_glTextureStorage2DEXT = fn(texture: uint, target: gl_enum, levels: i32, internalformat: gl_enum, width: i32, height: i32) void;
export type fp_glTextureStorage2DMultisample = fn(texture: uint, samples: i32, internalformat: gl_enum, width: i32, height: i32, fixedsamplelocations: u8) void;
export type fp_glTextureStorage2DMultisampleEXT = fn(texture: uint, target: gl_enum, samples: i32, internalformat: gl_enum, width: i32, height: i32, fixedsamplelocations: u8) void;
export type fp_glTextureStorage3D = fn(texture: uint, levels: i32, internalformat: gl_enum, width: i32, height: i32, depth: i32) void;
export type fp_glTextureStorage3DEXT = fn(texture: uint, target: gl_enum, levels: i32, internalformat: gl_enum, width: i32, height: i32, depth: i32) void;
export type fp_glTextureStorage3DMultisample = fn(texture: uint, samples: i32, internalformat: gl_enum, width: i32, height: i32, depth: i32, fixedsamplelocations: u8) void;
export type fp_glTextureStorage3DMultisampleEXT = fn(texture: uint, target: gl_enum, samples: i32, internalformat: gl_enum, width: i32, height: i32, depth: i32, fixedsamplelocations: u8) void;
export type fp_glTextureStorageMem1DEXT = fn(texture: uint, levels: i32, internalFormat: gl_enum, width: i32, memory: uint, offset_: u64) void;
export type fp_glTextureStorageMem2DEXT = fn(texture: uint, levels: i32, internalFormat: gl_enum, width: i32, height: i32, memory: uint, offset_: u64) void;
export type fp_glTextureStorageMem2DMultisampleEXT = fn(texture: uint, samples: i32, internalFormat: gl_enum, width: i32, height: i32, fixedSampleLocations: u8, memory: uint, offset_: u64) void;
export type fp_glTextureStorageMem3DEXT = fn(texture: uint, levels: i32, internalFormat: gl_enum, width: i32, height: i32, depth: i32, memory: uint, offset_: u64) void;
export type fp_glTextureStorageMem3DMultisampleEXT = fn(texture: uint, samples: i32, internalFormat: gl_enum, width: i32, height: i32, depth: i32, fixedSampleLocations: u8, memory: uint, offset_: u64) void;
export type fp_glTextureStorageSparseAMD = fn(texture: uint, target: gl_enum, internalFormat: gl_enum, width: i32, height: i32, depth: i32, layers: i32, flags: gl_bitfield) void;
export type fp_glTextureSubImage1D = fn(texture: uint, level: i32, xoffset: i32, width: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glTextureSubImage1DEXT = fn(texture: uint, target: gl_enum, level: i32, xoffset: i32, width: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glTextureSubImage2D = fn(texture: uint, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glTextureSubImage2DEXT = fn(texture: uint, target: gl_enum, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glTextureSubImage3D = fn(texture: uint, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glTextureSubImage3DEXT = fn(texture: uint, target: gl_enum, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: gl_enum, type_: gl_enum, pixels: *const void) void;
export type fp_glTextureView = fn(texture: uint, target: gl_enum, origtexture: uint, internalformat: gl_enum, minlevel: uint, numlevels: uint, minlayer: uint, numlayers: uint) void;
export type fp_glTrackMatrixNV = fn(target: gl_enum, address: uint, matrix: gl_enum, transform: gl_enum) void;
export type fp_glTransformFeedbackAttribsNV = fn(count: i32, attribs: *const i32, bufferMode: gl_enum) void;
export type fp_glTransformFeedbackBufferBase = fn(xfb: uint, index: uint, buffer: uint) void;
export type fp_glTransformFeedbackBufferRange = fn(xfb: uint, index: uint, buffer: uint, offset_: size, size_: uintptr) void;
export type fp_glTransformFeedbackStreamAttribsNV = fn(count: i32, attribs: *const i32, nbuffers: i32, bufstreams: *const i32, bufferMode: gl_enum) void;
export type fp_glTransformFeedbackVaryingsEXT = fn(program: uint, count: i32, varyings: *const *const i8, bufferMode: gl_enum) void;
export type fp_glTransformFeedbackVaryingsNV = fn(program: uint, count: i32, locations: *const i32, bufferMode: gl_enum) void;
export type fp_glTransformPathNV = fn(resultPath: uint, srcPath: uint, transformType: gl_enum, transformValues: *const f32) void;
export type fp_glTranslated = fn(x: f64, y: f64, z: f64) void;
export type fp_glTranslatef = fn(x: f32, y: f32, z: f32) void;
export type fp_glTranslatexOES = fn(x: i32, y: i32, z: i32) void;
export type fp_glUniform1d = fn(location: i32, x: f64) void;
export type fp_glUniform1dv = fn(location: i32, count: i32, value: *const f64) void;
export type fp_glUniform1f = fn(location: i32, v0: f32) void;
export type fp_glUniform1fARB = fn(location: i32, v0: f32) void;
export type fp_glUniform1fv = fn(location: i32, count: i32, value: *const f32) void;
export type fp_glUniform1fvARB = fn(location: i32, count: i32, value: *const f32) void;
export type fp_glUniform1i = fn(location: i32, v0: i32) void;
export type fp_glUniform1i64ARB = fn(location: i32, x: i64) void;
export type fp_glUniform1i64NV = fn(location: i32, x: i64) void;
export type fp_glUniform1i64vARB = fn(location: i32, count: i32, value: *const i64) void;
export type fp_glUniform1i64vNV = fn(location: i32, count: i32, value: *const i64) void;
export type fp_glUniform1iARB = fn(location: i32, v0: i32) void;
export type fp_glUniform1iv = fn(location: i32, count: i32, value: *const i32) void;
export type fp_glUniform1ivARB = fn(location: i32, count: i32, value: *const i32) void;
export type fp_glUniform1ui64ARB = fn(location: i32, x: u64) void;
export type fp_glUniform1ui64NV = fn(location: i32, x: u64) void;
export type fp_glUniform1ui64vARB = fn(location: i32, count: i32, value: *const u64) void;
export type fp_glUniform1ui64vNV = fn(location: i32, count: i32, value: *const u64) void;
export type fp_glUniform1uiEXT = fn(location: i32, v0: uint) void;
export type fp_glUniform1uivEXT = fn(location: i32, count: i32, value: *const uint) void;
export type fp_glUniform2d = fn(location: i32, x: f64, y: f64) void;
export type fp_glUniform2dv = fn(location: i32, count: i32, value: *const f64) void;
export type fp_glUniform2f = fn(location: i32, v0: f32, v1: f32) void;
export type fp_glUniform2fARB = fn(location: i32, v0: f32, v1: f32) void;
export type fp_glUniform2fv = fn(location: i32, count: i32, value: *const f32) void;
export type fp_glUniform2fvARB = fn(location: i32, count: i32, value: *const f32) void;
export type fp_glUniform2i = fn(location: i32, v0: i32, v1: i32) void;
export type fp_glUniform2i64ARB = fn(location: i32, x: i64, y: i64) void;
export type fp_glUniform2i64NV = fn(location: i32, x: i64, y: i64) void;
export type fp_glUniform2i64vARB = fn(location: i32, count: i32, value: *const i64) void;
export type fp_glUniform2i64vNV = fn(location: i32, count: i32, value: *const i64) void;
export type fp_glUniform2iARB = fn(location: i32, v0: i32, v1: i32) void;
export type fp_glUniform2iv = fn(location: i32, count: i32, value: *const i32) void;
export type fp_glUniform2ivARB = fn(location: i32, count: i32, value: *const i32) void;
export type fp_glUniform2ui64ARB = fn(location: i32, x: u64, y: u64) void;
export type fp_glUniform2ui64NV = fn(location: i32, x: u64, y: u64) void;
export type fp_glUniform2ui64vARB = fn(location: i32, count: i32, value: *const u64) void;
export type fp_glUniform2ui64vNV = fn(location: i32, count: i32, value: *const u64) void;
export type fp_glUniform2uiEXT = fn(location: i32, v0: uint, v1: uint) void;
export type fp_glUniform2uivEXT = fn(location: i32, count: i32, value: *const uint) void;
export type fp_glUniform3d = fn(location: i32, x: f64, y: f64, z: f64) void;
export type fp_glUniform3dv = fn(location: i32, count: i32, value: *const f64) void;
export type fp_glUniform3f = fn(location: i32, v0: f32, v1: f32, v2: f32) void;
export type fp_glUniform3fARB = fn(location: i32, v0: f32, v1: f32, v2: f32) void;
export type fp_glUniform3fv = fn(location: i32, count: i32, value: *const f32) void;
export type fp_glUniform3fvARB = fn(location: i32, count: i32, value: *const f32) void;
export type fp_glUniform3i = fn(location: i32, v0: i32, v1: i32, v2: i32) void;
export type fp_glUniform3i64ARB = fn(location: i32, x: i64, y: i64, z: i64) void;
export type fp_glUniform3i64NV = fn(location: i32, x: i64, y: i64, z: i64) void;
export type fp_glUniform3i64vARB = fn(location: i32, count: i32, value: *const i64) void;
export type fp_glUniform3i64vNV = fn(location: i32, count: i32, value: *const i64) void;
export type fp_glUniform3iARB = fn(location: i32, v0: i32, v1: i32, v2: i32) void;
export type fp_glUniform3iv = fn(location: i32, count: i32, value: *const i32) void;
export type fp_glUniform3ivARB = fn(location: i32, count: i32, value: *const i32) void;
export type fp_glUniform3ui64ARB = fn(location: i32, x: u64, y: u64, z: u64) void;
export type fp_glUniform3ui64NV = fn(location: i32, x: u64, y: u64, z: u64) void;
export type fp_glUniform3ui64vARB = fn(location: i32, count: i32, value: *const u64) void;
export type fp_glUniform3ui64vNV = fn(location: i32, count: i32, value: *const u64) void;
export type fp_glUniform3uiEXT = fn(location: i32, v0: uint, v1: uint, v2: uint) void;
export type fp_glUniform3uivEXT = fn(location: i32, count: i32, value: *const uint) void;
export type fp_glUniform4d = fn(location: i32, x: f64, y: f64, z: f64, w: f64) void;
export type fp_glUniform4dv = fn(location: i32, count: i32, value: *const f64) void;
export type fp_glUniform4f = fn(location: i32, v0: f32, v1: f32, v2: f32, v3: f32) void;
export type fp_glUniform4fARB = fn(location: i32, v0: f32, v1: f32, v2: f32, v3: f32) void;
export type fp_glUniform4fv = fn(location: i32, count: i32, value: *const f32) void;
export type fp_glUniform4fvARB = fn(location: i32, count: i32, value: *const f32) void;
export type fp_glUniform4i = fn(location: i32, v0: i32, v1: i32, v2: i32, v3: i32) void;
export type fp_glUniform4i64ARB = fn(location: i32, x: i64, y: i64, z: i64, w: i64) void;
export type fp_glUniform4i64NV = fn(location: i32, x: i64, y: i64, z: i64, w: i64) void;
export type fp_glUniform4i64vARB = fn(location: i32, count: i32, value: *const i64) void;
export type fp_glUniform4i64vNV = fn(location: i32, count: i32, value: *const i64) void;
export type fp_glUniform4iARB = fn(location: i32, v0: i32, v1: i32, v2: i32, v3: i32) void;
export type fp_glUniform4iv = fn(location: i32, count: i32, value: *const i32) void;
export type fp_glUniform4ivARB = fn(location: i32, count: i32, value: *const i32) void;
export type fp_glUniform4ui64ARB = fn(location: i32, x: u64, y: u64, z: u64, w: u64) void;
export type fp_glUniform4ui64NV = fn(location: i32, x: u64, y: u64, z: u64, w: u64) void;
export type fp_glUniform4ui64vARB = fn(location: i32, count: i32, value: *const u64) void;
export type fp_glUniform4ui64vNV = fn(location: i32, count: i32, value: *const u64) void;
export type fp_glUniform4uiEXT = fn(location: i32, v0: uint, v1: uint, v2: uint, v3: uint) void;
export type fp_glUniform4uivEXT = fn(location: i32, count: i32, value: *const uint) void;
export type fp_glUniformBlockBinding = fn(program: uint, uniformBlockIndex: uint, uniformBlockBinding: uint) void;
export type fp_glUniformBufferEXT = fn(program: uint, location: i32, buffer: uint) void;
export type fp_glUniformHandleui64ARB = fn(location: i32, value: u64) void;
export type fp_glUniformHandleui64NV = fn(location: i32, value: u64) void;
export type fp_glUniformHandleui64vARB = fn(location: i32, count: i32, value: *const u64) void;
export type fp_glUniformHandleui64vNV = fn(location: i32, count: i32, value: *const u64) void;
export type fp_glUniformMatrix2dv = fn(location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glUniformMatrix2fv = fn(location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glUniformMatrix2fvARB = fn(location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glUniformMatrix2x3dv = fn(location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glUniformMatrix2x3fv = fn(location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glUniformMatrix2x4dv = fn(location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glUniformMatrix2x4fv = fn(location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glUniformMatrix3dv = fn(location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glUniformMatrix3fv = fn(location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glUniformMatrix3fvARB = fn(location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glUniformMatrix3x2dv = fn(location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glUniformMatrix3x2fv = fn(location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glUniformMatrix3x4dv = fn(location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glUniformMatrix3x4fv = fn(location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glUniformMatrix4dv = fn(location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glUniformMatrix4fv = fn(location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glUniformMatrix4fvARB = fn(location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glUniformMatrix4x2dv = fn(location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glUniformMatrix4x2fv = fn(location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glUniformMatrix4x3dv = fn(location: i32, count: i32, transpose: u8, value: *const f64) void;
export type fp_glUniformMatrix4x3fv = fn(location: i32, count: i32, transpose: u8, value: *const f32) void;
export type fp_glUniformSubroutinesuiv = fn(shadertype: gl_enum, count: i32, indices: *const uint) void;
export type fp_glUniformui64NV = fn(location: i32, value: u64) void;
export type fp_glUniformui64vNV = fn(location: i32, count: i32, value: *const u64) void;
export type fp_glUnlockArraysEXT = fn() void;
export type fp_glUnmapBuffer = fn(target: gl_enum) u8;
export type fp_glUnmapBufferARB = fn(target: gl_enum) u8;
export type fp_glUnmapNamedBuffer = fn(buffer: uint) u8;
export type fp_glUnmapNamedBufferEXT = fn(buffer: uint) u8;
export type fp_glUnmapObjectBufferATI = fn(buffer: uint) void;
export type fp_glUnmapTexture2DINTEL = fn(texture: uint, level: i32) void;
export type fp_glUpdateObjectBufferATI = fn(buffer: uint, offset_: uint, size_: i32, pointer: *const void, preserve: gl_enum) void;
export type fp_glUploadGpuMaskNVX = fn(mask: gl_bitfield) void;
export type fp_glUseProgram = fn(program: uint) void;
export type fp_glUseProgramObjectARB = fn(programObj: uint) void;
export type fp_glUseProgramStages = fn(pipeline: uint, stages: gl_bitfield, program: uint) void;
export type fp_glUseShaderProgramEXT = fn(type_: gl_enum, program: uint) void;
export type fp_glVDPAUFiniNV = fn() void;
export type fp_glVDPAUGetSurfaceivNV = fn(surface: size, pname: gl_enum, count: i32, length: *i32, values: *i32) void;
export type fp_glVDPAUInitNV = fn(vdpDevice: *const void, getProcAddress: *const void) void;
export type fp_glVDPAUIsSurfaceNV = fn(surface: size) u8;
export type fp_glVDPAUMapSurfacesNV = fn(numSurfaces: i32, surfaces: *const size) void;
export type fp_glVDPAURegisterOutputSurfaceNV = fn(vdpSurface: *const void, target: gl_enum, numTextureNames: i32, textureNames: *const uint) size;
export type fp_glVDPAURegisterVideoSurfaceNV = fn(vdpSurface: *const void, target: gl_enum, numTextureNames: i32, textureNames: *const uint) size;
export type fp_glVDPAURegisterVideoSurfaceWithPictureStructureNV = fn(vdpSurface: *const void, target: gl_enum, numTextureNames: i32, textureNames: *const uint, isFrameStructure: u8) size;
export type fp_glVDPAUSurfaceAccessNV = fn(surface: size, access: gl_enum) void;
export type fp_glVDPAUUnmapSurfacesNV = fn(numSurface: i32, surfaces: *const size) void;
export type fp_glVDPAUUnregisterSurfaceNV = fn(surface: size) void;
export type fp_glValidateProgram = fn(program: uint) void;
export type fp_glValidateProgramARB = fn(programObj: uint) void;
export type fp_glValidateProgramPipeline = fn(pipeline: uint) void;
export type fp_glVariantArrayObjectATI = fn(id: uint, type_: gl_enum, stride: i32, buffer: uint, offset_: uint) void;
export type fp_glVariantPointerEXT = fn(id: uint, type_: gl_enum, stride: uint, addr: *const void) void;
export type fp_glVariantbvEXT = fn(id: uint, addr: *const i8) void;
export type fp_glVariantdvEXT = fn(id: uint, addr: *const f64) void;
export type fp_glVariantfvEXT = fn(id: uint, addr: *const f32) void;
export type fp_glVariantivEXT = fn(id: uint, addr: *const i32) void;
export type fp_glVariantsvEXT = fn(id: uint, addr: *const i16) void;
export type fp_glVariantubvEXT = fn(id: uint, addr: *const u8) void;
export type fp_glVariantuivEXT = fn(id: uint, addr: *const uint) void;
export type fp_glVariantusvEXT = fn(id: uint, addr: *const u16) void;
export type fp_glVertex2bOES = fn(x: i8, y: i8) void;
export type fp_glVertex2bvOES = fn(coords: *const i8) void;
export type fp_glVertex2d = fn(x: f64, y: f64) void;
export type fp_glVertex2dv = fn(v: *const f64) void;
export type fp_glVertex2f = fn(x: f32, y: f32) void;
export type fp_glVertex2fv = fn(v: *const f32) void;
export type fp_glVertex2hNV = fn(x: u16, y: u16) void;
export type fp_glVertex2hvNV = fn(v: *const u16) void;
export type fp_glVertex2i = fn(x: i32, y: i32) void;
export type fp_glVertex2iv = fn(v: *const i32) void;
export type fp_glVertex2s = fn(x: i16, y: i16) void;
export type fp_glVertex2sv = fn(v: *const i16) void;
export type fp_glVertex2xOES = fn(x: i32) void;
export type fp_glVertex2xvOES = fn(coords: *const i32) void;
export type fp_glVertex3bOES = fn(x: i8, y: i8, z: i8) void;
export type fp_glVertex3bvOES = fn(coords: *const i8) void;
export type fp_glVertex3d = fn(x: f64, y: f64, z: f64) void;
export type fp_glVertex3dv = fn(v: *const f64) void;
export type fp_glVertex3f = fn(x: f32, y: f32, z: f32) void;
export type fp_glVertex3fv = fn(v: *const f32) void;
export type fp_glVertex3hNV = fn(x: u16, y: u16, z: u16) void;
export type fp_glVertex3hvNV = fn(v: *const u16) void;
export type fp_glVertex3i = fn(x: i32, y: i32, z: i32) void;
export type fp_glVertex3iv = fn(v: *const i32) void;
export type fp_glVertex3s = fn(x: i16, y: i16, z: i16) void;
export type fp_glVertex3sv = fn(v: *const i16) void;
export type fp_glVertex3xOES = fn(x: i32, y: i32) void;
export type fp_glVertex3xvOES = fn(coords: *const i32) void;
export type fp_glVertex4bOES = fn(x: i8, y: i8, z: i8, w: i8) void;
export type fp_glVertex4bvOES = fn(coords: *const i8) void;
export type fp_glVertex4d = fn(x: f64, y: f64, z: f64, w: f64) void;
export type fp_glVertex4dv = fn(v: *const f64) void;
export type fp_glVertex4f = fn(x: f32, y: f32, z: f32, w: f32) void;
export type fp_glVertex4fv = fn(v: *const f32) void;
export type fp_glVertex4hNV = fn(x: u16, y: u16, z: u16, w: u16) void;
export type fp_glVertex4hvNV = fn(v: *const u16) void;
export type fp_glVertex4i = fn(x: i32, y: i32, z: i32, w: i32) void;
export type fp_glVertex4iv = fn(v: *const i32) void;
export type fp_glVertex4s = fn(x: i16, y: i16, z: i16, w: i16) void;
export type fp_glVertex4sv = fn(v: *const i16) void;
export type fp_glVertex4xOES = fn(x: i32, y: i32, z: i32) void;
export type fp_glVertex4xvOES = fn(coords: *const i32) void;
export type fp_glVertexArrayAttribBinding = fn(vaobj: uint, attribindex: uint, bindingindex: uint) void;
export type fp_glVertexArrayAttribFormat = fn(vaobj: uint, attribindex: uint, size_: i32, type_: gl_enum, normalized: u8, relativeoffset: uint) void;
export type fp_glVertexArrayAttribIFormat = fn(vaobj: uint, attribindex: uint, size_: i32, type_: gl_enum, relativeoffset: uint) void;
export type fp_glVertexArrayAttribLFormat = fn(vaobj: uint, attribindex: uint, size_: i32, type_: gl_enum, relativeoffset: uint) void;
export type fp_glVertexArrayBindVertexBufferEXT = fn(vaobj: uint, bindingindex: uint, buffer: uint, offset_: size, stride: i32) void;
export type fp_glVertexArrayBindingDivisor = fn(vaobj: uint, bindingindex: uint, divisor: uint) void;
export type fp_glVertexArrayColorOffsetEXT = fn(vaobj: uint, buffer: uint, size_: i32, type_: gl_enum, stride: i32, offset_: size) void;
export type fp_glVertexArrayEdgeFlagOffsetEXT = fn(vaobj: uint, buffer: uint, stride: i32, offset_: size) void;
export type fp_glVertexArrayElementBuffer = fn(vaobj: uint, buffer: uint) void;
export type fp_glVertexArrayFogCoordOffsetEXT = fn(vaobj: uint, buffer: uint, type_: gl_enum, stride: i32, offset_: size) void;
export type fp_glVertexArrayIndexOffsetEXT = fn(vaobj: uint, buffer: uint, type_: gl_enum, stride: i32, offset_: size) void;
export type fp_glVertexArrayMultiTexCoordOffsetEXT = fn(vaobj: uint, buffer: uint, texunit: gl_enum, size_: i32, type_: gl_enum, stride: i32, offset_: size) void;
export type fp_glVertexArrayNormalOffsetEXT = fn(vaobj: uint, buffer: uint, type_: gl_enum, stride: i32, offset_: size) void;
export type fp_glVertexArrayParameteriAPPLE = fn(pname: gl_enum, param: i32) void;
export type fp_glVertexArrayRangeAPPLE = fn(length: i32, pointer: *void) void;
export type fp_glVertexArrayRangeNV = fn(length: i32, pointer: *const void) void;
export type fp_glVertexArraySecondaryColorOffsetEXT = fn(vaobj: uint, buffer: uint, size_: i32, type_: gl_enum, stride: i32, offset_: size) void;
export type fp_glVertexArrayTexCoordOffsetEXT = fn(vaobj: uint, buffer: uint, size_: i32, type_: gl_enum, stride: i32, offset_: size) void;
export type fp_glVertexArrayVertexAttribBindingEXT = fn(vaobj: uint, attribindex: uint, bindingindex: uint) void;
export type fp_glVertexArrayVertexAttribDivisorEXT = fn(vaobj: uint, index: uint, divisor: uint) void;
export type fp_glVertexArrayVertexAttribFormatEXT = fn(vaobj: uint, attribindex: uint, size_: i32, type_: gl_enum, normalized: u8, relativeoffset: uint) void;
export type fp_glVertexArrayVertexAttribIFormatEXT = fn(vaobj: uint, attribindex: uint, size_: i32, type_: gl_enum, relativeoffset: uint) void;
export type fp_glVertexArrayVertexAttribIOffsetEXT = fn(vaobj: uint, buffer: uint, index: uint, size_: i32, type_: gl_enum, stride: i32, offset_: size) void;
export type fp_glVertexArrayVertexAttribLFormatEXT = fn(vaobj: uint, attribindex: uint, size_: i32, type_: gl_enum, relativeoffset: uint) void;
export type fp_glVertexArrayVertexAttribLOffsetEXT = fn(vaobj: uint, buffer: uint, index: uint, size_: i32, type_: gl_enum, stride: i32, offset_: size) void;
export type fp_glVertexArrayVertexAttribOffsetEXT = fn(vaobj: uint, buffer: uint, index: uint, size_: i32, type_: gl_enum, normalized: u8, stride: i32, offset_: size) void;
export type fp_glVertexArrayVertexBindingDivisorEXT = fn(vaobj: uint, bindingindex: uint, divisor: uint) void;
export type fp_glVertexArrayVertexBuffer = fn(vaobj: uint, bindingindex: uint, buffer: uint, offset_: size, stride: i32) void;
export type fp_glVertexArrayVertexBuffers = fn(vaobj: uint, first: uint, count: i32, buffers: *const uint, offsets: *const size, strides: *const i32) void;
export type fp_glVertexArrayVertexOffsetEXT = fn(vaobj: uint, buffer: uint, size_: i32, type_: gl_enum, stride: i32, offset_: size) void;
export type fp_glVertexAttrib1d = fn(index: uint, x: f64) void;
export type fp_glVertexAttrib1dARB = fn(index: uint, x: f64) void;
export type fp_glVertexAttrib1dNV = fn(index: uint, x: f64) void;
export type fp_glVertexAttrib1dv = fn(index: uint, v: *const f64) void;
export type fp_glVertexAttrib1dvARB = fn(index: uint, v: *const f64) void;
export type fp_glVertexAttrib1dvNV = fn(index: uint, v: *const f64) void;
export type fp_glVertexAttrib1f = fn(index: uint, x: f32) void;
export type fp_glVertexAttrib1fARB = fn(index: uint, x: f32) void;
export type fp_glVertexAttrib1fNV = fn(index: uint, x: f32) void;
export type fp_glVertexAttrib1fv = fn(index: uint, v: *const f32) void;
export type fp_glVertexAttrib1fvARB = fn(index: uint, v: *const f32) void;
export type fp_glVertexAttrib1fvNV = fn(index: uint, v: *const f32) void;
export type fp_glVertexAttrib1hNV = fn(index: uint, x: u16) void;
export type fp_glVertexAttrib1hvNV = fn(index: uint, v: *const u16) void;
export type fp_glVertexAttrib1s = fn(index: uint, x: i16) void;
export type fp_glVertexAttrib1sARB = fn(index: uint, x: i16) void;
export type fp_glVertexAttrib1sNV = fn(index: uint, x: i16) void;
export type fp_glVertexAttrib1sv = fn(index: uint, v: *const i16) void;
export type fp_glVertexAttrib1svARB = fn(index: uint, v: *const i16) void;
export type fp_glVertexAttrib1svNV = fn(index: uint, v: *const i16) void;
export type fp_glVertexAttrib2d = fn(index: uint, x: f64, y: f64) void;
export type fp_glVertexAttrib2dARB = fn(index: uint, x: f64, y: f64) void;
export type fp_glVertexAttrib2dNV = fn(index: uint, x: f64, y: f64) void;
export type fp_glVertexAttrib2dv = fn(index: uint, v: *const f64) void;
export type fp_glVertexAttrib2dvARB = fn(index: uint, v: *const f64) void;
export type fp_glVertexAttrib2dvNV = fn(index: uint, v: *const f64) void;
export type fp_glVertexAttrib2f = fn(index: uint, x: f32, y: f32) void;
export type fp_glVertexAttrib2fARB = fn(index: uint, x: f32, y: f32) void;
export type fp_glVertexAttrib2fNV = fn(index: uint, x: f32, y: f32) void;
export type fp_glVertexAttrib2fv = fn(index: uint, v: *const f32) void;
export type fp_glVertexAttrib2fvARB = fn(index: uint, v: *const f32) void;
export type fp_glVertexAttrib2fvNV = fn(index: uint, v: *const f32) void;
export type fp_glVertexAttrib2hNV = fn(index: uint, x: u16, y: u16) void;
export type fp_glVertexAttrib2hvNV = fn(index: uint, v: *const u16) void;
export type fp_glVertexAttrib2s = fn(index: uint, x: i16, y: i16) void;
export type fp_glVertexAttrib2sARB = fn(index: uint, x: i16, y: i16) void;
export type fp_glVertexAttrib2sNV = fn(index: uint, x: i16, y: i16) void;
export type fp_glVertexAttrib2sv = fn(index: uint, v: *const i16) void;
export type fp_glVertexAttrib2svARB = fn(index: uint, v: *const i16) void;
export type fp_glVertexAttrib2svNV = fn(index: uint, v: *const i16) void;
export type fp_glVertexAttrib3d = fn(index: uint, x: f64, y: f64, z: f64) void;
export type fp_glVertexAttrib3dARB = fn(index: uint, x: f64, y: f64, z: f64) void;
export type fp_glVertexAttrib3dNV = fn(index: uint, x: f64, y: f64, z: f64) void;
export type fp_glVertexAttrib3dv = fn(index: uint, v: *const f64) void;
export type fp_glVertexAttrib3dvARB = fn(index: uint, v: *const f64) void;
export type fp_glVertexAttrib3dvNV = fn(index: uint, v: *const f64) void;
export type fp_glVertexAttrib3f = fn(index: uint, x: f32, y: f32, z: f32) void;
export type fp_glVertexAttrib3fARB = fn(index: uint, x: f32, y: f32, z: f32) void;
export type fp_glVertexAttrib3fNV = fn(index: uint, x: f32, y: f32, z: f32) void;
export type fp_glVertexAttrib3fv = fn(index: uint, v: *const f32) void;
export type fp_glVertexAttrib3fvARB = fn(index: uint, v: *const f32) void;
export type fp_glVertexAttrib3fvNV = fn(index: uint, v: *const f32) void;
export type fp_glVertexAttrib3hNV = fn(index: uint, x: u16, y: u16, z: u16) void;
export type fp_glVertexAttrib3hvNV = fn(index: uint, v: *const u16) void;
export type fp_glVertexAttrib3s = fn(index: uint, x: i16, y: i16, z: i16) void;
export type fp_glVertexAttrib3sARB = fn(index: uint, x: i16, y: i16, z: i16) void;
export type fp_glVertexAttrib3sNV = fn(index: uint, x: i16, y: i16, z: i16) void;
export type fp_glVertexAttrib3sv = fn(index: uint, v: *const i16) void;
export type fp_glVertexAttrib3svARB = fn(index: uint, v: *const i16) void;
export type fp_glVertexAttrib3svNV = fn(index: uint, v: *const i16) void;
export type fp_glVertexAttrib4Nbv = fn(index: uint, v: *const i8) void;
export type fp_glVertexAttrib4NbvARB = fn(index: uint, v: *const i8) void;
export type fp_glVertexAttrib4Niv = fn(index: uint, v: *const i32) void;
export type fp_glVertexAttrib4NivARB = fn(index: uint, v: *const i32) void;
export type fp_glVertexAttrib4Nsv = fn(index: uint, v: *const i16) void;
export type fp_glVertexAttrib4NsvARB = fn(index: uint, v: *const i16) void;
export type fp_glVertexAttrib4Nub = fn(index: uint, x: u8, y: u8, z: u8, w: u8) void;
export type fp_glVertexAttrib4NubARB = fn(index: uint, x: u8, y: u8, z: u8, w: u8) void;
export type fp_glVertexAttrib4Nubv = fn(index: uint, v: *const u8) void;
export type fp_glVertexAttrib4NubvARB = fn(index: uint, v: *const u8) void;
export type fp_glVertexAttrib4Nuiv = fn(index: uint, v: *const uint) void;
export type fp_glVertexAttrib4NuivARB = fn(index: uint, v: *const uint) void;
export type fp_glVertexAttrib4Nusv = fn(index: uint, v: *const u16) void;
export type fp_glVertexAttrib4NusvARB = fn(index: uint, v: *const u16) void;
export type fp_glVertexAttrib4bv = fn(index: uint, v: *const i8) void;
export type fp_glVertexAttrib4bvARB = fn(index: uint, v: *const i8) void;
export type fp_glVertexAttrib4d = fn(index: uint, x: f64, y: f64, z: f64, w: f64) void;
export type fp_glVertexAttrib4dARB = fn(index: uint, x: f64, y: f64, z: f64, w: f64) void;
export type fp_glVertexAttrib4dNV = fn(index: uint, x: f64, y: f64, z: f64, w: f64) void;
export type fp_glVertexAttrib4dv = fn(index: uint, v: *const f64) void;
export type fp_glVertexAttrib4dvARB = fn(index: uint, v: *const f64) void;
export type fp_glVertexAttrib4dvNV = fn(index: uint, v: *const f64) void;
export type fp_glVertexAttrib4f = fn(index: uint, x: f32, y: f32, z: f32, w: f32) void;
export type fp_glVertexAttrib4fARB = fn(index: uint, x: f32, y: f32, z: f32, w: f32) void;
export type fp_glVertexAttrib4fNV = fn(index: uint, x: f32, y: f32, z: f32, w: f32) void;
export type fp_glVertexAttrib4fv = fn(index: uint, v: *const f32) void;
export type fp_glVertexAttrib4fvARB = fn(index: uint, v: *const f32) void;
export type fp_glVertexAttrib4fvNV = fn(index: uint, v: *const f32) void;
export type fp_glVertexAttrib4hNV = fn(index: uint, x: u16, y: u16, z: u16, w: u16) void;
export type fp_glVertexAttrib4hvNV = fn(index: uint, v: *const u16) void;
export type fp_glVertexAttrib4iv = fn(index: uint, v: *const i32) void;
export type fp_glVertexAttrib4ivARB = fn(index: uint, v: *const i32) void;
export type fp_glVertexAttrib4s = fn(index: uint, x: i16, y: i16, z: i16, w: i16) void;
export type fp_glVertexAttrib4sARB = fn(index: uint, x: i16, y: i16, z: i16, w: i16) void;
export type fp_glVertexAttrib4sNV = fn(index: uint, x: i16, y: i16, z: i16, w: i16) void;
export type fp_glVertexAttrib4sv = fn(index: uint, v: *const i16) void;
export type fp_glVertexAttrib4svARB = fn(index: uint, v: *const i16) void;
export type fp_glVertexAttrib4svNV = fn(index: uint, v: *const i16) void;
export type fp_glVertexAttrib4ubNV = fn(index: uint, x: u8, y: u8, z: u8, w: u8) void;
export type fp_glVertexAttrib4ubv = fn(index: uint, v: *const u8) void;
export type fp_glVertexAttrib4ubvARB = fn(index: uint, v: *const u8) void;
export type fp_glVertexAttrib4ubvNV = fn(index: uint, v: *const u8) void;
export type fp_glVertexAttrib4uiv = fn(index: uint, v: *const uint) void;
export type fp_glVertexAttrib4uivARB = fn(index: uint, v: *const uint) void;
export type fp_glVertexAttrib4usv = fn(index: uint, v: *const u16) void;
export type fp_glVertexAttrib4usvARB = fn(index: uint, v: *const u16) void;
export type fp_glVertexAttribArrayObjectATI = fn(index: uint, size_: i32, type_: gl_enum, normalized: u8, stride: i32, buffer: uint, offset_: uint) void;
export type fp_glVertexAttribBinding = fn(attribindex: uint, bindingindex: uint) void;
export type fp_glVertexAttribDivisorARB = fn(index: uint, divisor: uint) void;
export type fp_glVertexAttribFormat = fn(attribindex: uint, size_: i32, type_: gl_enum, normalized: u8, relativeoffset: uint) void;
export type fp_glVertexAttribFormatNV = fn(index: uint, size_: i32, type_: gl_enum, normalized: u8, stride: i32) void;
export type fp_glVertexAttribI1iEXT = fn(index: uint, x: i32) void;
export type fp_glVertexAttribI1ivEXT = fn(index: uint, v: *const i32) void;
export type fp_glVertexAttribI1uiEXT = fn(index: uint, x: uint) void;
export type fp_glVertexAttribI1uivEXT = fn(index: uint, v: *const uint) void;
export type fp_glVertexAttribI2iEXT = fn(index: uint, x: i32, y: i32) void;
export type fp_glVertexAttribI2ivEXT = fn(index: uint, v: *const i32) void;
export type fp_glVertexAttribI2uiEXT = fn(index: uint, x: uint, y: uint) void;
export type fp_glVertexAttribI2uivEXT = fn(index: uint, v: *const uint) void;
export type fp_glVertexAttribI3iEXT = fn(index: uint, x: i32, y: i32, z: i32) void;
export type fp_glVertexAttribI3ivEXT = fn(index: uint, v: *const i32) void;
export type fp_glVertexAttribI3uiEXT = fn(index: uint, x: uint, y: uint, z: uint) void;
export type fp_glVertexAttribI3uivEXT = fn(index: uint, v: *const uint) void;
export type fp_glVertexAttribI4bvEXT = fn(index: uint, v: *const i8) void;
export type fp_glVertexAttribI4iEXT = fn(index: uint, x: i32, y: i32, z: i32, w: i32) void;
export type fp_glVertexAttribI4ivEXT = fn(index: uint, v: *const i32) void;
export type fp_glVertexAttribI4svEXT = fn(index: uint, v: *const i16) void;
export type fp_glVertexAttribI4ubvEXT = fn(index: uint, v: *const u8) void;
export type fp_glVertexAttribI4uiEXT = fn(index: uint, x: uint, y: uint, z: uint, w: uint) void;
export type fp_glVertexAttribI4uivEXT = fn(index: uint, v: *const uint) void;
export type fp_glVertexAttribI4usvEXT = fn(index: uint, v: *const u16) void;
export type fp_glVertexAttribIFormat = fn(attribindex: uint, size_: i32, type_: gl_enum, relativeoffset: uint) void;
export type fp_glVertexAttribIFormatNV = fn(index: uint, size_: i32, type_: gl_enum, stride: i32) void;
export type fp_glVertexAttribIPointerEXT = fn(index: uint, size_: i32, type_: gl_enum, stride: i32, pointer: *const void) void;
export type fp_glVertexAttribL1d = fn(index: uint, x: f64) void;
export type fp_glVertexAttribL1dEXT = fn(index: uint, x: f64) void;
export type fp_glVertexAttribL1dv = fn(index: uint, v: *const f64) void;
export type fp_glVertexAttribL1dvEXT = fn(index: uint, v: *const f64) void;
export type fp_glVertexAttribL1i64NV = fn(index: uint, x: i64) void;
export type fp_glVertexAttribL1i64vNV = fn(index: uint, v: *const i64) void;
export type fp_glVertexAttribL1ui64ARB = fn(index: uint, x: u64) void;
export type fp_glVertexAttribL1ui64NV = fn(index: uint, x: u64) void;
export type fp_glVertexAttribL1ui64vARB = fn(index: uint, v: *const u64) void;
export type fp_glVertexAttribL1ui64vNV = fn(index: uint, v: *const u64) void;
export type fp_glVertexAttribL2d = fn(index: uint, x: f64, y: f64) void;
export type fp_glVertexAttribL2dEXT = fn(index: uint, x: f64, y: f64) void;
export type fp_glVertexAttribL2dv = fn(index: uint, v: *const f64) void;
export type fp_glVertexAttribL2dvEXT = fn(index: uint, v: *const f64) void;
export type fp_glVertexAttribL2i64NV = fn(index: uint, x: i64, y: i64) void;
export type fp_glVertexAttribL2i64vNV = fn(index: uint, v: *const i64) void;
export type fp_glVertexAttribL2ui64NV = fn(index: uint, x: u64, y: u64) void;
export type fp_glVertexAttribL2ui64vNV = fn(index: uint, v: *const u64) void;
export type fp_glVertexAttribL3d = fn(index: uint, x: f64, y: f64, z: f64) void;
export type fp_glVertexAttribL3dEXT = fn(index: uint, x: f64, y: f64, z: f64) void;
export type fp_glVertexAttribL3dv = fn(index: uint, v: *const f64) void;
export type fp_glVertexAttribL3dvEXT = fn(index: uint, v: *const f64) void;
export type fp_glVertexAttribL3i64NV = fn(index: uint, x: i64, y: i64, z: i64) void;
export type fp_glVertexAttribL3i64vNV = fn(index: uint, v: *const i64) void;
export type fp_glVertexAttribL3ui64NV = fn(index: uint, x: u64, y: u64, z: u64) void;
export type fp_glVertexAttribL3ui64vNV = fn(index: uint, v: *const u64) void;
export type fp_glVertexAttribL4d = fn(index: uint, x: f64, y: f64, z: f64, w: f64) void;
export type fp_glVertexAttribL4dEXT = fn(index: uint, x: f64, y: f64, z: f64, w: f64) void;
export type fp_glVertexAttribL4dv = fn(index: uint, v: *const f64) void;
export type fp_glVertexAttribL4dvEXT = fn(index: uint, v: *const f64) void;
export type fp_glVertexAttribL4i64NV = fn(index: uint, x: i64, y: i64, z: i64, w: i64) void;
export type fp_glVertexAttribL4i64vNV = fn(index: uint, v: *const i64) void;
export type fp_glVertexAttribL4ui64NV = fn(index: uint, x: u64, y: u64, z: u64, w: u64) void;
export type fp_glVertexAttribL4ui64vNV = fn(index: uint, v: *const u64) void;
export type fp_glVertexAttribLFormat = fn(attribindex: uint, size_: i32, type_: gl_enum, relativeoffset: uint) void;
export type fp_glVertexAttribLFormatNV = fn(index: uint, size_: i32, type_: gl_enum, stride: i32) void;
export type fp_glVertexAttribLPointer = fn(index: uint, size_: i32, type_: gl_enum, stride: i32, pointer: *const void) void;
export type fp_glVertexAttribLPointerEXT = fn(index: uint, size_: i32, type_: gl_enum, stride: i32, pointer: *const void) void;
export type fp_glVertexAttribP1ui = fn(index: uint, type_: gl_enum, normalized: u8, value: uint) void;
export type fp_glVertexAttribP1uiv = fn(index: uint, type_: gl_enum, normalized: u8, value: *const uint) void;
export type fp_glVertexAttribP2ui = fn(index: uint, type_: gl_enum, normalized: u8, value: uint) void;
export type fp_glVertexAttribP2uiv = fn(index: uint, type_: gl_enum, normalized: u8, value: *const uint) void;
export type fp_glVertexAttribP3ui = fn(index: uint, type_: gl_enum, normalized: u8, value: uint) void;
export type fp_glVertexAttribP3uiv = fn(index: uint, type_: gl_enum, normalized: u8, value: *const uint) void;
export type fp_glVertexAttribP4ui = fn(index: uint, type_: gl_enum, normalized: u8, value: uint) void;
export type fp_glVertexAttribP4uiv = fn(index: uint, type_: gl_enum, normalized: u8, value: *const uint) void;
export type fp_glVertexAttribParameteriAMD = fn(index: uint, pname: gl_enum, param: i32) void;
export type fp_glVertexAttribPointer = fn(index: uint, size_: i32, type_: gl_enum, normalized: u8, stride: i32, pointer: *const void) void;
export type fp_glVertexAttribPointerARB = fn(index: uint, size_: i32, type_: gl_enum, normalized: u8, stride: i32, pointer: *const void) void;
export type fp_glVertexAttribPointerNV = fn(index: uint, fsize: i32, type_: gl_enum, stride: i32, pointer: *const void) void;
export type fp_glVertexAttribs1dvNV = fn(index: uint, count: i32, v: *const f64) void;
export type fp_glVertexAttribs1fvNV = fn(index: uint, count: i32, v: *const f32) void;
export type fp_glVertexAttribs1hvNV = fn(index: uint, n: i32, v: *const u16) void;
export type fp_glVertexAttribs1svNV = fn(index: uint, count: i32, v: *const i16) void;
export type fp_glVertexAttribs2dvNV = fn(index: uint, count: i32, v: *const f64) void;
export type fp_glVertexAttribs2fvNV = fn(index: uint, count: i32, v: *const f32) void;
export type fp_glVertexAttribs2hvNV = fn(index: uint, n: i32, v: *const u16) void;
export type fp_glVertexAttribs2svNV = fn(index: uint, count: i32, v: *const i16) void;
export type fp_glVertexAttribs3dvNV = fn(index: uint, count: i32, v: *const f64) void;
export type fp_glVertexAttribs3fvNV = fn(index: uint, count: i32, v: *const f32) void;
export type fp_glVertexAttribs3hvNV = fn(index: uint, n: i32, v: *const u16) void;
export type fp_glVertexAttribs3svNV = fn(index: uint, count: i32, v: *const i16) void;
export type fp_glVertexAttribs4dvNV = fn(index: uint, count: i32, v: *const f64) void;
export type fp_glVertexAttribs4fvNV = fn(index: uint, count: i32, v: *const f32) void;
export type fp_glVertexAttribs4hvNV = fn(index: uint, n: i32, v: *const u16) void;
export type fp_glVertexAttribs4svNV = fn(index: uint, count: i32, v: *const i16) void;
export type fp_glVertexAttribs4ubvNV = fn(index: uint, count: i32, v: *const u8) void;
export type fp_glVertexBindingDivisor = fn(bindingindex: uint, divisor: uint) void;
export type fp_glVertexBlendARB = fn(count: i32) void;
export type fp_glVertexBlendEnvfATI = fn(pname: gl_enum, param: f32) void;
export type fp_glVertexBlendEnviATI = fn(pname: gl_enum, param: i32) void;
export type fp_glVertexFormatNV = fn(size_: i32, type_: gl_enum, stride: i32) void;
export type fp_glVertexPointer = fn(size_: i32, type_: gl_enum, stride: i32, pointer: *const void) void;
export type fp_glVertexPointerEXT = fn(size_: i32, type_: gl_enum, stride: i32, count: i32, pointer: *const void) void;
export type fp_glVertexPointerListIBM = fn(size_: i32, type_: gl_enum, stride: i32, pointer: *const *const void, ptrstride: i32) void;
export type fp_glVertexPointervINTEL = fn(size_: i32, type_: gl_enum, pointer: *const *const void) void;
export type fp_glVertexStream1dATI = fn(stream: gl_enum, x: f64) void;
export type fp_glVertexStream1dvATI = fn(stream: gl_enum, coords: *const f64) void;
export type fp_glVertexStream1fATI = fn(stream: gl_enum, x: f32) void;
export type fp_glVertexStream1fvATI = fn(stream: gl_enum, coords: *const f32) void;
export type fp_glVertexStream1iATI = fn(stream: gl_enum, x: i32) void;
export type fp_glVertexStream1ivATI = fn(stream: gl_enum, coords: *const i32) void;
export type fp_glVertexStream1sATI = fn(stream: gl_enum, x: i16) void;
export type fp_glVertexStream1svATI = fn(stream: gl_enum, coords: *const i16) void;
export type fp_glVertexStream2dATI = fn(stream: gl_enum, x: f64, y: f64) void;
export type fp_glVertexStream2dvATI = fn(stream: gl_enum, coords: *const f64) void;
export type fp_glVertexStream2fATI = fn(stream: gl_enum, x: f32, y: f32) void;
export type fp_glVertexStream2fvATI = fn(stream: gl_enum, coords: *const f32) void;
export type fp_glVertexStream2iATI = fn(stream: gl_enum, x: i32, y: i32) void;
export type fp_glVertexStream2ivATI = fn(stream: gl_enum, coords: *const i32) void;
export type fp_glVertexStream2sATI = fn(stream: gl_enum, x: i16, y: i16) void;
export type fp_glVertexStream2svATI = fn(stream: gl_enum, coords: *const i16) void;
export type fp_glVertexStream3dATI = fn(stream: gl_enum, x: f64, y: f64, z: f64) void;
export type fp_glVertexStream3dvATI = fn(stream: gl_enum, coords: *const f64) void;
export type fp_glVertexStream3fATI = fn(stream: gl_enum, x: f32, y: f32, z: f32) void;
export type fp_glVertexStream3fvATI = fn(stream: gl_enum, coords: *const f32) void;
export type fp_glVertexStream3iATI = fn(stream: gl_enum, x: i32, y: i32, z: i32) void;
export type fp_glVertexStream3ivATI = fn(stream: gl_enum, coords: *const i32) void;
export type fp_glVertexStream3sATI = fn(stream: gl_enum, x: i16, y: i16, z: i16) void;
export type fp_glVertexStream3svATI = fn(stream: gl_enum, coords: *const i16) void;
export type fp_glVertexStream4dATI = fn(stream: gl_enum, x: f64, y: f64, z: f64, w: f64) void;
export type fp_glVertexStream4dvATI = fn(stream: gl_enum, coords: *const f64) void;
export type fp_glVertexStream4fATI = fn(stream: gl_enum, x: f32, y: f32, z: f32, w: f32) void;
export type fp_glVertexStream4fvATI = fn(stream: gl_enum, coords: *const f32) void;
export type fp_glVertexStream4iATI = fn(stream: gl_enum, x: i32, y: i32, z: i32, w: i32) void;
export type fp_glVertexStream4ivATI = fn(stream: gl_enum, coords: *const i32) void;
export type fp_glVertexStream4sATI = fn(stream: gl_enum, x: i16, y: i16, z: i16, w: i16) void;
export type fp_glVertexStream4svATI = fn(stream: gl_enum, coords: *const i16) void;
export type fp_glVertexWeightPointerEXT = fn(size_: i32, type_: gl_enum, stride: i32, pointer: *const void) void;
export type fp_glVertexWeightfEXT = fn(weight: f32) void;
export type fp_glVertexWeightfvEXT = fn(weight: *const f32) void;
export type fp_glVertexWeighthNV = fn(weight: u16) void;
export type fp_glVertexWeighthvNV = fn(weight: *const u16) void;
export type fp_glVideoCaptureNV = fn(video_capture_slot: uint, sequence_num: *uint, capture_time: *u64) gl_enum;
export type fp_glVideoCaptureStreamParameterdvNV = fn(video_capture_slot: uint, stream: uint, pname: gl_enum, params: *const f64) void;
export type fp_glVideoCaptureStreamParameterfvNV = fn(video_capture_slot: uint, stream: uint, pname: gl_enum, params: *const f32) void;
export type fp_glVideoCaptureStreamParameterivNV = fn(video_capture_slot: uint, stream: uint, pname: gl_enum, params: *const i32) void;
export type fp_glViewport = fn(x: i32, y: i32, width: i32, height: i32) void;
export type fp_glViewportArrayv = fn(first: uint, count: i32, v: *const f32) void;
export type fp_glViewportIndexedf = fn(index: uint, x: f32, y: f32, w: f32, h: f32) void;
export type fp_glViewportIndexedfv = fn(index: uint, v: *const f32) void;
export type fp_glViewportPositionWScaleNV = fn(index: uint, xcoeff: f32, ycoeff: f32) void;
export type fp_glViewportSwizzleNV = fn(index: uint, swizzlex: gl_enum, swizzley: gl_enum, swizzlez: gl_enum, swizzlew: gl_enum) void;
export type fp_glWaitSemaphoreEXT = fn(semaphore: uint, numBufferBarriers: uint, buffers: *const uint, numTextureBarriers: uint, textures: *const uint, srcLayouts: *const gl_enum) void;
export type fp_glWaitSemaphoreui64NVX = fn(waitGpu: uint, fenceObjectCount: i32, semaphoreArray: *const uint, fenceValueArray: *const u64) void;
export type fp_glWaitSync = fn(sync: size, flags: gl_bitfield, timeout: u64) void;
export type fp_glWaitVkSemaphoreNV = fn(vkSemaphore: u64) void;
export type fp_glWeightPathsNV = fn(resultPath: uint, numPaths: i32, paths: *const uint, weights: *const f32) void;
export type fp_glWeightPointerARB = fn(size_: i32, type_: gl_enum, stride: i32, pointer: *const void) void;
export type fp_glWeightbvARB = fn(size_: i32, weights: *const i8) void;
export type fp_glWeightdvARB = fn(size_: i32, weights: *const f64) void;
export type fp_glWeightfvARB = fn(size_: i32, weights: *const f32) void;
export type fp_glWeightivARB = fn(size_: i32, weights: *const i32) void;
export type fp_glWeightsvARB = fn(size_: i32, weights: *const i16) void;
export type fp_glWeightubvARB = fn(size_: i32, weights: *const u8) void;
export type fp_glWeightuivARB = fn(size_: i32, weights: *const uint) void;
export type fp_glWeightusvARB = fn(size_: i32, weights: *const u16) void;
export type fp_glWindowPos2d = fn(x: f64, y: f64) void;
export type fp_glWindowPos2dARB = fn(x: f64, y: f64) void;
export type fp_glWindowPos2dMESA = fn(x: f64, y: f64) void;
export type fp_glWindowPos2dv = fn(v: *const f64) void;
export type fp_glWindowPos2dvARB = fn(v: *const f64) void;
export type fp_glWindowPos2dvMESA = fn(v: *const f64) void;
export type fp_glWindowPos2f = fn(x: f32, y: f32) void;
export type fp_glWindowPos2fARB = fn(x: f32, y: f32) void;
export type fp_glWindowPos2fMESA = fn(x: f32, y: f32) void;
export type fp_glWindowPos2fv = fn(v: *const f32) void;
export type fp_glWindowPos2fvARB = fn(v: *const f32) void;
export type fp_glWindowPos2fvMESA = fn(v: *const f32) void;
export type fp_glWindowPos2i = fn(x: i32, y: i32) void;
export type fp_glWindowPos2iARB = fn(x: i32, y: i32) void;
export type fp_glWindowPos2iMESA = fn(x: i32, y: i32) void;
export type fp_glWindowPos2iv = fn(v: *const i32) void;
export type fp_glWindowPos2ivARB = fn(v: *const i32) void;
export type fp_glWindowPos2ivMESA = fn(v: *const i32) void;
export type fp_glWindowPos2s = fn(x: i16, y: i16) void;
export type fp_glWindowPos2sARB = fn(x: i16, y: i16) void;
export type fp_glWindowPos2sMESA = fn(x: i16, y: i16) void;
export type fp_glWindowPos2sv = fn(v: *const i16) void;
export type fp_glWindowPos2svARB = fn(v: *const i16) void;
export type fp_glWindowPos2svMESA = fn(v: *const i16) void;
export type fp_glWindowPos3d = fn(x: f64, y: f64, z: f64) void;
export type fp_glWindowPos3dARB = fn(x: f64, y: f64, z: f64) void;
export type fp_glWindowPos3dMESA = fn(x: f64, y: f64, z: f64) void;
export type fp_glWindowPos3dv = fn(v: *const f64) void;
export type fp_glWindowPos3dvARB = fn(v: *const f64) void;
export type fp_glWindowPos3dvMESA = fn(v: *const f64) void;
export type fp_glWindowPos3f = fn(x: f32, y: f32, z: f32) void;
export type fp_glWindowPos3fARB = fn(x: f32, y: f32, z: f32) void;
export type fp_glWindowPos3fMESA = fn(x: f32, y: f32, z: f32) void;
export type fp_glWindowPos3fv = fn(v: *const f32) void;
export type fp_glWindowPos3fvARB = fn(v: *const f32) void;
export type fp_glWindowPos3fvMESA = fn(v: *const f32) void;
export type fp_glWindowPos3i = fn(x: i32, y: i32, z: i32) void;
export type fp_glWindowPos3iARB = fn(x: i32, y: i32, z: i32) void;
export type fp_glWindowPos3iMESA = fn(x: i32, y: i32, z: i32) void;
export type fp_glWindowPos3iv = fn(v: *const i32) void;
export type fp_glWindowPos3ivARB = fn(v: *const i32) void;
export type fp_glWindowPos3ivMESA = fn(v: *const i32) void;
export type fp_glWindowPos3s = fn(x: i16, y: i16, z: i16) void;
export type fp_glWindowPos3sARB = fn(x: i16, y: i16, z: i16) void;
export type fp_glWindowPos3sMESA = fn(x: i16, y: i16, z: i16) void;
export type fp_glWindowPos3sv = fn(v: *const i16) void;
export type fp_glWindowPos3svARB = fn(v: *const i16) void;
export type fp_glWindowPos3svMESA = fn(v: *const i16) void;
export type fp_glWindowPos4dMESA = fn(x: f64, y: f64, z: f64, w: f64) void;
export type fp_glWindowPos4dvMESA = fn(v: *const f64) void;
export type fp_glWindowPos4fMESA = fn(x: f32, y: f32, z: f32, w: f32) void;
export type fp_glWindowPos4fvMESA = fn(v: *const f32) void;
export type fp_glWindowPos4iMESA = fn(x: i32, y: i32, z: i32, w: i32) void;
export type fp_glWindowPos4ivMESA = fn(v: *const i32) void;
export type fp_glWindowPos4sMESA = fn(x: i16, y: i16, z: i16, w: i16) void;
export type fp_glWindowPos4svMESA = fn(v: *const i16) void;
export type fp_glWindowRectanglesEXT = fn(mode: gl_enum, count: i32, box: *const i32) void;
export type fp_glWriteMaskEXT = fn(res: uint, in: uint, outX: gl_enum, outY: gl_enum, outZ: gl_enum, outW: gl_enum) void;

// Functions
export let glAccum: *fp_glAccum =
	null: *fp_glAccum;
export let glAccumxOES: *fp_glAccumxOES =
	null: *fp_glAccumxOES;
export let glAcquireKeyedMutexWin32EXT: *fp_glAcquireKeyedMutexWin32EXT =
	null: *fp_glAcquireKeyedMutexWin32EXT;
export let glActiveProgramEXT: *fp_glActiveProgramEXT =
	null: *fp_glActiveProgramEXT;
export let glActiveShaderProgram: *fp_glActiveShaderProgram =
	null: *fp_glActiveShaderProgram;
export let glActiveStencilFaceEXT: *fp_glActiveStencilFaceEXT =
	null: *fp_glActiveStencilFaceEXT;
export let glActiveTexture: *fp_glActiveTexture =
	null: *fp_glActiveTexture;
export let glActiveTextureARB: *fp_glActiveTextureARB =
	null: *fp_glActiveTextureARB;
export let glActiveVaryingNV: *fp_glActiveVaryingNV =
	null: *fp_glActiveVaryingNV;
export let glAlphaFragmentOp1ATI: *fp_glAlphaFragmentOp1ATI =
	null: *fp_glAlphaFragmentOp1ATI;
export let glAlphaFragmentOp2ATI: *fp_glAlphaFragmentOp2ATI =
	null: *fp_glAlphaFragmentOp2ATI;
export let glAlphaFragmentOp3ATI: *fp_glAlphaFragmentOp3ATI =
	null: *fp_glAlphaFragmentOp3ATI;
export let glAlphaFunc: *fp_glAlphaFunc =
	null: *fp_glAlphaFunc;
export let glAlphaFuncxOES: *fp_glAlphaFuncxOES =
	null: *fp_glAlphaFuncxOES;
export let glAlphaToCoverageDitherControlNV: *fp_glAlphaToCoverageDitherControlNV =
	null: *fp_glAlphaToCoverageDitherControlNV;
export let glApplyFramebufferAttachmentCMAAINTEL: *fp_glApplyFramebufferAttachmentCMAAINTEL =
	null: *fp_glApplyFramebufferAttachmentCMAAINTEL;
export let glApplyTextureEXT: *fp_glApplyTextureEXT =
	null: *fp_glApplyTextureEXT;
export let glAreProgramsResidentNV: *fp_glAreProgramsResidentNV =
	null: *fp_glAreProgramsResidentNV;
export let glAreTexturesResident: *fp_glAreTexturesResident =
	null: *fp_glAreTexturesResident;
export let glAreTexturesResidentEXT: *fp_glAreTexturesResidentEXT =
	null: *fp_glAreTexturesResidentEXT;
export let glArrayElement: *fp_glArrayElement =
	null: *fp_glArrayElement;
export let glArrayElementEXT: *fp_glArrayElementEXT =
	null: *fp_glArrayElementEXT;
export let glArrayObjectATI: *fp_glArrayObjectATI =
	null: *fp_glArrayObjectATI;
export let glAsyncCopyBufferSubDataNVX: *fp_glAsyncCopyBufferSubDataNVX =
	null: *fp_glAsyncCopyBufferSubDataNVX;
export let glAsyncCopyImageSubDataNVX: *fp_glAsyncCopyImageSubDataNVX =
	null: *fp_glAsyncCopyImageSubDataNVX;
export let glAsyncMarkerSGIX: *fp_glAsyncMarkerSGIX =
	null: *fp_glAsyncMarkerSGIX;
export let glAttachObjectARB: *fp_glAttachObjectARB =
	null: *fp_glAttachObjectARB;
export let glAttachShader: *fp_glAttachShader =
	null: *fp_glAttachShader;
export let glBegin: *fp_glBegin =
	null: *fp_glBegin;
export let glBeginConditionalRenderNV: *fp_glBeginConditionalRenderNV =
	null: *fp_glBeginConditionalRenderNV;
export let glBeginConditionalRenderNVX: *fp_glBeginConditionalRenderNVX =
	null: *fp_glBeginConditionalRenderNVX;
export let glBeginFragmentShaderATI: *fp_glBeginFragmentShaderATI =
	null: *fp_glBeginFragmentShaderATI;
export let glBeginOcclusionQueryNV: *fp_glBeginOcclusionQueryNV =
	null: *fp_glBeginOcclusionQueryNV;
export let glBeginPerfMonitorAMD: *fp_glBeginPerfMonitorAMD =
	null: *fp_glBeginPerfMonitorAMD;
export let glBeginPerfQueryINTEL: *fp_glBeginPerfQueryINTEL =
	null: *fp_glBeginPerfQueryINTEL;
export let glBeginQuery: *fp_glBeginQuery =
	null: *fp_glBeginQuery;
export let glBeginQueryARB: *fp_glBeginQueryARB =
	null: *fp_glBeginQueryARB;
export let glBeginQueryIndexed: *fp_glBeginQueryIndexed =
	null: *fp_glBeginQueryIndexed;
export let glBeginTransformFeedbackEXT: *fp_glBeginTransformFeedbackEXT =
	null: *fp_glBeginTransformFeedbackEXT;
export let glBeginTransformFeedbackNV: *fp_glBeginTransformFeedbackNV =
	null: *fp_glBeginTransformFeedbackNV;
export let glBeginVertexShaderEXT: *fp_glBeginVertexShaderEXT =
	null: *fp_glBeginVertexShaderEXT;
export let glBeginVideoCaptureNV: *fp_glBeginVideoCaptureNV =
	null: *fp_glBeginVideoCaptureNV;
export let glBindAttribLocation: *fp_glBindAttribLocation =
	null: *fp_glBindAttribLocation;
export let glBindAttribLocationARB: *fp_glBindAttribLocationARB =
	null: *fp_glBindAttribLocationARB;
export let glBindBuffer: *fp_glBindBuffer =
	null: *fp_glBindBuffer;
export let glBindBufferARB: *fp_glBindBufferARB =
	null: *fp_glBindBufferARB;
export let glBindBufferBase: *fp_glBindBufferBase =
	null: *fp_glBindBufferBase;
export let glBindBufferBaseEXT: *fp_glBindBufferBaseEXT =
	null: *fp_glBindBufferBaseEXT;
export let glBindBufferBaseNV: *fp_glBindBufferBaseNV =
	null: *fp_glBindBufferBaseNV;
export let glBindBufferOffsetEXT: *fp_glBindBufferOffsetEXT =
	null: *fp_glBindBufferOffsetEXT;
export let glBindBufferOffsetNV: *fp_glBindBufferOffsetNV =
	null: *fp_glBindBufferOffsetNV;
export let glBindBufferRange: *fp_glBindBufferRange =
	null: *fp_glBindBufferRange;
export let glBindBufferRangeEXT: *fp_glBindBufferRangeEXT =
	null: *fp_glBindBufferRangeEXT;
export let glBindBufferRangeNV: *fp_glBindBufferRangeNV =
	null: *fp_glBindBufferRangeNV;
export let glBindBuffersBase: *fp_glBindBuffersBase =
	null: *fp_glBindBuffersBase;
export let glBindBuffersRange: *fp_glBindBuffersRange =
	null: *fp_glBindBuffersRange;
export let glBindFragDataLocationEXT: *fp_glBindFragDataLocationEXT =
	null: *fp_glBindFragDataLocationEXT;
export let glBindFragDataLocationIndexed: *fp_glBindFragDataLocationIndexed =
	null: *fp_glBindFragDataLocationIndexed;
export let glBindFragmentShaderATI: *fp_glBindFragmentShaderATI =
	null: *fp_glBindFragmentShaderATI;
export let glBindFramebuffer: *fp_glBindFramebuffer =
	null: *fp_glBindFramebuffer;
export let glBindFramebufferEXT: *fp_glBindFramebufferEXT =
	null: *fp_glBindFramebufferEXT;
export let glBindImageTexture: *fp_glBindImageTexture =
	null: *fp_glBindImageTexture;
export let glBindImageTextureEXT: *fp_glBindImageTextureEXT =
	null: *fp_glBindImageTextureEXT;
export let glBindImageTextures: *fp_glBindImageTextures =
	null: *fp_glBindImageTextures;
export let glBindLightParameterEXT: *fp_glBindLightParameterEXT =
	null: *fp_glBindLightParameterEXT;
export let glBindMaterialParameterEXT: *fp_glBindMaterialParameterEXT =
	null: *fp_glBindMaterialParameterEXT;
export let glBindMultiTextureEXT: *fp_glBindMultiTextureEXT =
	null: *fp_glBindMultiTextureEXT;
export let glBindParameterEXT: *fp_glBindParameterEXT =
	null: *fp_glBindParameterEXT;
export let glBindProgramARB: *fp_glBindProgramARB =
	null: *fp_glBindProgramARB;
export let glBindProgramNV: *fp_glBindProgramNV =
	null: *fp_glBindProgramNV;
export let glBindProgramPipeline: *fp_glBindProgramPipeline =
	null: *fp_glBindProgramPipeline;
export let glBindRenderbuffer: *fp_glBindRenderbuffer =
	null: *fp_glBindRenderbuffer;
export let glBindRenderbufferEXT: *fp_glBindRenderbufferEXT =
	null: *fp_glBindRenderbufferEXT;
export let glBindSampler: *fp_glBindSampler =
	null: *fp_glBindSampler;
export let glBindSamplers: *fp_glBindSamplers =
	null: *fp_glBindSamplers;
export let glBindShadingRateImageNV: *fp_glBindShadingRateImageNV =
	null: *fp_glBindShadingRateImageNV;
export let glBindTexGenParameterEXT: *fp_glBindTexGenParameterEXT =
	null: *fp_glBindTexGenParameterEXT;
export let glBindTexture: *fp_glBindTexture =
	null: *fp_glBindTexture;
export let glBindTextureEXT: *fp_glBindTextureEXT =
	null: *fp_glBindTextureEXT;
export let glBindTextureUnit: *fp_glBindTextureUnit =
	null: *fp_glBindTextureUnit;
export let glBindTextureUnitParameterEXT: *fp_glBindTextureUnitParameterEXT =
	null: *fp_glBindTextureUnitParameterEXT;
export let glBindTextures: *fp_glBindTextures =
	null: *fp_glBindTextures;
export let glBindTransformFeedback: *fp_glBindTransformFeedback =
	null: *fp_glBindTransformFeedback;
export let glBindTransformFeedbackNV: *fp_glBindTransformFeedbackNV =
	null: *fp_glBindTransformFeedbackNV;
export let glBindVertexArray: *fp_glBindVertexArray =
	null: *fp_glBindVertexArray;
export let glBindVertexArrayAPPLE: *fp_glBindVertexArrayAPPLE =
	null: *fp_glBindVertexArrayAPPLE;
export let glBindVertexBuffer: *fp_glBindVertexBuffer =
	null: *fp_glBindVertexBuffer;
export let glBindVertexBuffers: *fp_glBindVertexBuffers =
	null: *fp_glBindVertexBuffers;
export let glBindVertexShaderEXT: *fp_glBindVertexShaderEXT =
	null: *fp_glBindVertexShaderEXT;
export let glBindVideoCaptureStreamBufferNV: *fp_glBindVideoCaptureStreamBufferNV =
	null: *fp_glBindVideoCaptureStreamBufferNV;
export let glBindVideoCaptureStreamTextureNV: *fp_glBindVideoCaptureStreamTextureNV =
	null: *fp_glBindVideoCaptureStreamTextureNV;
export let glBinormal3bEXT: *fp_glBinormal3bEXT =
	null: *fp_glBinormal3bEXT;
export let glBinormal3bvEXT: *fp_glBinormal3bvEXT =
	null: *fp_glBinormal3bvEXT;
export let glBinormal3dEXT: *fp_glBinormal3dEXT =
	null: *fp_glBinormal3dEXT;
export let glBinormal3dvEXT: *fp_glBinormal3dvEXT =
	null: *fp_glBinormal3dvEXT;
export let glBinormal3fEXT: *fp_glBinormal3fEXT =
	null: *fp_glBinormal3fEXT;
export let glBinormal3fvEXT: *fp_glBinormal3fvEXT =
	null: *fp_glBinormal3fvEXT;
export let glBinormal3iEXT: *fp_glBinormal3iEXT =
	null: *fp_glBinormal3iEXT;
export let glBinormal3ivEXT: *fp_glBinormal3ivEXT =
	null: *fp_glBinormal3ivEXT;
export let glBinormal3sEXT: *fp_glBinormal3sEXT =
	null: *fp_glBinormal3sEXT;
export let glBinormal3svEXT: *fp_glBinormal3svEXT =
	null: *fp_glBinormal3svEXT;
export let glBinormalPointerEXT: *fp_glBinormalPointerEXT =
	null: *fp_glBinormalPointerEXT;
export let glBitmap: *fp_glBitmap =
	null: *fp_glBitmap;
export let glBitmapxOES: *fp_glBitmapxOES =
	null: *fp_glBitmapxOES;
export let glBlendBarrierKHR: *fp_glBlendBarrierKHR =
	null: *fp_glBlendBarrierKHR;
export let glBlendBarrierNV: *fp_glBlendBarrierNV =
	null: *fp_glBlendBarrierNV;
export let glBlendColor: *fp_glBlendColor =
	null: *fp_glBlendColor;
export let glBlendColorEXT: *fp_glBlendColorEXT =
	null: *fp_glBlendColorEXT;
export let glBlendColorxOES: *fp_glBlendColorxOES =
	null: *fp_glBlendColorxOES;
export let glBlendEquation: *fp_glBlendEquation =
	null: *fp_glBlendEquation;
export let glBlendEquationEXT: *fp_glBlendEquationEXT =
	null: *fp_glBlendEquationEXT;
export let glBlendEquationIndexedAMD: *fp_glBlendEquationIndexedAMD =
	null: *fp_glBlendEquationIndexedAMD;
export let glBlendEquationSeparate: *fp_glBlendEquationSeparate =
	null: *fp_glBlendEquationSeparate;
export let glBlendEquationSeparateEXT: *fp_glBlendEquationSeparateEXT =
	null: *fp_glBlendEquationSeparateEXT;
export let glBlendEquationSeparateIndexedAMD: *fp_glBlendEquationSeparateIndexedAMD =
	null: *fp_glBlendEquationSeparateIndexedAMD;
export let glBlendEquationSeparateiARB: *fp_glBlendEquationSeparateiARB =
	null: *fp_glBlendEquationSeparateiARB;
export let glBlendEquationiARB: *fp_glBlendEquationiARB =
	null: *fp_glBlendEquationiARB;
export let glBlendFunc: *fp_glBlendFunc =
	null: *fp_glBlendFunc;
export let glBlendFuncIndexedAMD: *fp_glBlendFuncIndexedAMD =
	null: *fp_glBlendFuncIndexedAMD;
export let glBlendFuncSeparate: *fp_glBlendFuncSeparate =
	null: *fp_glBlendFuncSeparate;
export let glBlendFuncSeparateEXT: *fp_glBlendFuncSeparateEXT =
	null: *fp_glBlendFuncSeparateEXT;
export let glBlendFuncSeparateINGR: *fp_glBlendFuncSeparateINGR =
	null: *fp_glBlendFuncSeparateINGR;
export let glBlendFuncSeparateIndexedAMD: *fp_glBlendFuncSeparateIndexedAMD =
	null: *fp_glBlendFuncSeparateIndexedAMD;
export let glBlendFuncSeparateiARB: *fp_glBlendFuncSeparateiARB =
	null: *fp_glBlendFuncSeparateiARB;
export let glBlendFunciARB: *fp_glBlendFunciARB =
	null: *fp_glBlendFunciARB;
export let glBlendParameteriNV: *fp_glBlendParameteriNV =
	null: *fp_glBlendParameteriNV;
export let glBlitFramebuffer: *fp_glBlitFramebuffer =
	null: *fp_glBlitFramebuffer;
export let glBlitFramebufferEXT: *fp_glBlitFramebufferEXT =
	null: *fp_glBlitFramebufferEXT;
export let glBlitNamedFramebuffer: *fp_glBlitNamedFramebuffer =
	null: *fp_glBlitNamedFramebuffer;
export let glBufferAddressRangeNV: *fp_glBufferAddressRangeNV =
	null: *fp_glBufferAddressRangeNV;
export let glBufferAttachMemoryNV: *fp_glBufferAttachMemoryNV =
	null: *fp_glBufferAttachMemoryNV;
export let glBufferData: *fp_glBufferData =
	null: *fp_glBufferData;
export let glBufferDataARB: *fp_glBufferDataARB =
	null: *fp_glBufferDataARB;
export let glBufferPageCommitmentARB: *fp_glBufferPageCommitmentARB =
	null: *fp_glBufferPageCommitmentARB;
export let glBufferPageCommitmentMemNV: *fp_glBufferPageCommitmentMemNV =
	null: *fp_glBufferPageCommitmentMemNV;
export let glBufferParameteriAPPLE: *fp_glBufferParameteriAPPLE =
	null: *fp_glBufferParameteriAPPLE;
export let glBufferStorage: *fp_glBufferStorage =
	null: *fp_glBufferStorage;
export let glBufferStorageExternalEXT: *fp_glBufferStorageExternalEXT =
	null: *fp_glBufferStorageExternalEXT;
export let glBufferStorageMemEXT: *fp_glBufferStorageMemEXT =
	null: *fp_glBufferStorageMemEXT;
export let glBufferSubData: *fp_glBufferSubData =
	null: *fp_glBufferSubData;
export let glBufferSubDataARB: *fp_glBufferSubDataARB =
	null: *fp_glBufferSubDataARB;
export let glCallCommandListNV: *fp_glCallCommandListNV =
	null: *fp_glCallCommandListNV;
export let glCallList: *fp_glCallList =
	null: *fp_glCallList;
export let glCallLists: *fp_glCallLists =
	null: *fp_glCallLists;
export let glCheckFramebufferStatus: *fp_glCheckFramebufferStatus =
	null: *fp_glCheckFramebufferStatus;
export let glCheckFramebufferStatusEXT: *fp_glCheckFramebufferStatusEXT =
	null: *fp_glCheckFramebufferStatusEXT;
export let glCheckNamedFramebufferStatus: *fp_glCheckNamedFramebufferStatus =
	null: *fp_glCheckNamedFramebufferStatus;
export let glCheckNamedFramebufferStatusEXT: *fp_glCheckNamedFramebufferStatusEXT =
	null: *fp_glCheckNamedFramebufferStatusEXT;
export let glClampColorARB: *fp_glClampColorARB =
	null: *fp_glClampColorARB;
export let glClear: *fp_glClear =
	null: *fp_glClear;
export let glClearAccum: *fp_glClearAccum =
	null: *fp_glClearAccum;
export let glClearAccumxOES: *fp_glClearAccumxOES =
	null: *fp_glClearAccumxOES;
export let glClearBufferData: *fp_glClearBufferData =
	null: *fp_glClearBufferData;
export let glClearBufferSubData: *fp_glClearBufferSubData =
	null: *fp_glClearBufferSubData;
export let glClearColor: *fp_glClearColor =
	null: *fp_glClearColor;
export let glClearColorIiEXT: *fp_glClearColorIiEXT =
	null: *fp_glClearColorIiEXT;
export let glClearColorIuiEXT: *fp_glClearColorIuiEXT =
	null: *fp_glClearColorIuiEXT;
export let glClearColorxOES: *fp_glClearColorxOES =
	null: *fp_glClearColorxOES;
export let glClearDepth: *fp_glClearDepth =
	null: *fp_glClearDepth;
export let glClearDepthdNV: *fp_glClearDepthdNV =
	null: *fp_glClearDepthdNV;
export let glClearDepthf: *fp_glClearDepthf =
	null: *fp_glClearDepthf;
export let glClearDepthfOES: *fp_glClearDepthfOES =
	null: *fp_glClearDepthfOES;
export let glClearDepthxOES: *fp_glClearDepthxOES =
	null: *fp_glClearDepthxOES;
export let glClearIndex: *fp_glClearIndex =
	null: *fp_glClearIndex;
export let glClearNamedBufferData: *fp_glClearNamedBufferData =
	null: *fp_glClearNamedBufferData;
export let glClearNamedBufferDataEXT: *fp_glClearNamedBufferDataEXT =
	null: *fp_glClearNamedBufferDataEXT;
export let glClearNamedBufferSubData: *fp_glClearNamedBufferSubData =
	null: *fp_glClearNamedBufferSubData;
export let glClearNamedBufferSubDataEXT: *fp_glClearNamedBufferSubDataEXT =
	null: *fp_glClearNamedBufferSubDataEXT;
export let glClearNamedFramebufferfi: *fp_glClearNamedFramebufferfi =
	null: *fp_glClearNamedFramebufferfi;
export let glClearNamedFramebufferfv: *fp_glClearNamedFramebufferfv =
	null: *fp_glClearNamedFramebufferfv;
export let glClearNamedFramebufferiv: *fp_glClearNamedFramebufferiv =
	null: *fp_glClearNamedFramebufferiv;
export let glClearNamedFramebufferuiv: *fp_glClearNamedFramebufferuiv =
	null: *fp_glClearNamedFramebufferuiv;
export let glClearStencil: *fp_glClearStencil =
	null: *fp_glClearStencil;
export let glClearTexImage: *fp_glClearTexImage =
	null: *fp_glClearTexImage;
export let glClearTexSubImage: *fp_glClearTexSubImage =
	null: *fp_glClearTexSubImage;
export let glClientActiveTexture: *fp_glClientActiveTexture =
	null: *fp_glClientActiveTexture;
export let glClientActiveTextureARB: *fp_glClientActiveTextureARB =
	null: *fp_glClientActiveTextureARB;
export let glClientActiveVertexStreamATI: *fp_glClientActiveVertexStreamATI =
	null: *fp_glClientActiveVertexStreamATI;
export let glClientAttribDefaultEXT: *fp_glClientAttribDefaultEXT =
	null: *fp_glClientAttribDefaultEXT;
export let glClientWaitSemaphoreui64NVX: *fp_glClientWaitSemaphoreui64NVX =
	null: *fp_glClientWaitSemaphoreui64NVX;
export let glClientWaitSync: *fp_glClientWaitSync =
	null: *fp_glClientWaitSync;
export let glClipControl: *fp_glClipControl =
	null: *fp_glClipControl;
export let glClipPlane: *fp_glClipPlane =
	null: *fp_glClipPlane;
export let glClipPlanefOES: *fp_glClipPlanefOES =
	null: *fp_glClipPlanefOES;
export let glClipPlanexOES: *fp_glClipPlanexOES =
	null: *fp_glClipPlanexOES;
export let glColor3b: *fp_glColor3b =
	null: *fp_glColor3b;
export let glColor3bv: *fp_glColor3bv =
	null: *fp_glColor3bv;
export let glColor3d: *fp_glColor3d =
	null: *fp_glColor3d;
export let glColor3dv: *fp_glColor3dv =
	null: *fp_glColor3dv;
export let glColor3f: *fp_glColor3f =
	null: *fp_glColor3f;
export let glColor3fVertex3fSUN: *fp_glColor3fVertex3fSUN =
	null: *fp_glColor3fVertex3fSUN;
export let glColor3fVertex3fvSUN: *fp_glColor3fVertex3fvSUN =
	null: *fp_glColor3fVertex3fvSUN;
export let glColor3fv: *fp_glColor3fv =
	null: *fp_glColor3fv;
export let glColor3hNV: *fp_glColor3hNV =
	null: *fp_glColor3hNV;
export let glColor3hvNV: *fp_glColor3hvNV =
	null: *fp_glColor3hvNV;
export let glColor3i: *fp_glColor3i =
	null: *fp_glColor3i;
export let glColor3iv: *fp_glColor3iv =
	null: *fp_glColor3iv;
export let glColor3s: *fp_glColor3s =
	null: *fp_glColor3s;
export let glColor3sv: *fp_glColor3sv =
	null: *fp_glColor3sv;
export let glColor3ub: *fp_glColor3ub =
	null: *fp_glColor3ub;
export let glColor3ubv: *fp_glColor3ubv =
	null: *fp_glColor3ubv;
export let glColor3ui: *fp_glColor3ui =
	null: *fp_glColor3ui;
export let glColor3uiv: *fp_glColor3uiv =
	null: *fp_glColor3uiv;
export let glColor3us: *fp_glColor3us =
	null: *fp_glColor3us;
export let glColor3usv: *fp_glColor3usv =
	null: *fp_glColor3usv;
export let glColor3xOES: *fp_glColor3xOES =
	null: *fp_glColor3xOES;
export let glColor3xvOES: *fp_glColor3xvOES =
	null: *fp_glColor3xvOES;
export let glColor4b: *fp_glColor4b =
	null: *fp_glColor4b;
export let glColor4bv: *fp_glColor4bv =
	null: *fp_glColor4bv;
export let glColor4d: *fp_glColor4d =
	null: *fp_glColor4d;
export let glColor4dv: *fp_glColor4dv =
	null: *fp_glColor4dv;
export let glColor4f: *fp_glColor4f =
	null: *fp_glColor4f;
export let glColor4fNormal3fVertex3fSUN: *fp_glColor4fNormal3fVertex3fSUN =
	null: *fp_glColor4fNormal3fVertex3fSUN;
export let glColor4fNormal3fVertex3fvSUN: *fp_glColor4fNormal3fVertex3fvSUN =
	null: *fp_glColor4fNormal3fVertex3fvSUN;
export let glColor4fv: *fp_glColor4fv =
	null: *fp_glColor4fv;
export let glColor4hNV: *fp_glColor4hNV =
	null: *fp_glColor4hNV;
export let glColor4hvNV: *fp_glColor4hvNV =
	null: *fp_glColor4hvNV;
export let glColor4i: *fp_glColor4i =
	null: *fp_glColor4i;
export let glColor4iv: *fp_glColor4iv =
	null: *fp_glColor4iv;
export let glColor4s: *fp_glColor4s =
	null: *fp_glColor4s;
export let glColor4sv: *fp_glColor4sv =
	null: *fp_glColor4sv;
export let glColor4ub: *fp_glColor4ub =
	null: *fp_glColor4ub;
export let glColor4ubVertex2fSUN: *fp_glColor4ubVertex2fSUN =
	null: *fp_glColor4ubVertex2fSUN;
export let glColor4ubVertex2fvSUN: *fp_glColor4ubVertex2fvSUN =
	null: *fp_glColor4ubVertex2fvSUN;
export let glColor4ubVertex3fSUN: *fp_glColor4ubVertex3fSUN =
	null: *fp_glColor4ubVertex3fSUN;
export let glColor4ubVertex3fvSUN: *fp_glColor4ubVertex3fvSUN =
	null: *fp_glColor4ubVertex3fvSUN;
export let glColor4ubv: *fp_glColor4ubv =
	null: *fp_glColor4ubv;
export let glColor4ui: *fp_glColor4ui =
	null: *fp_glColor4ui;
export let glColor4uiv: *fp_glColor4uiv =
	null: *fp_glColor4uiv;
export let glColor4us: *fp_glColor4us =
	null: *fp_glColor4us;
export let glColor4usv: *fp_glColor4usv =
	null: *fp_glColor4usv;
export let glColor4xOES: *fp_glColor4xOES =
	null: *fp_glColor4xOES;
export let glColor4xvOES: *fp_glColor4xvOES =
	null: *fp_glColor4xvOES;
export let glColorFormatNV: *fp_glColorFormatNV =
	null: *fp_glColorFormatNV;
export let glColorFragmentOp1ATI: *fp_glColorFragmentOp1ATI =
	null: *fp_glColorFragmentOp1ATI;
export let glColorFragmentOp2ATI: *fp_glColorFragmentOp2ATI =
	null: *fp_glColorFragmentOp2ATI;
export let glColorFragmentOp3ATI: *fp_glColorFragmentOp3ATI =
	null: *fp_glColorFragmentOp3ATI;
export let glColorMask: *fp_glColorMask =
	null: *fp_glColorMask;
export let glColorMaskIndexedEXT: *fp_glColorMaskIndexedEXT =
	null: *fp_glColorMaskIndexedEXT;
export let glColorMaterial: *fp_glColorMaterial =
	null: *fp_glColorMaterial;
export let glColorPointer: *fp_glColorPointer =
	null: *fp_glColorPointer;
export let glColorPointerEXT: *fp_glColorPointerEXT =
	null: *fp_glColorPointerEXT;
export let glColorPointerListIBM: *fp_glColorPointerListIBM =
	null: *fp_glColorPointerListIBM;
export let glColorPointervINTEL: *fp_glColorPointervINTEL =
	null: *fp_glColorPointervINTEL;
export let glColorSubTableEXT: *fp_glColorSubTableEXT =
	null: *fp_glColorSubTableEXT;
export let glColorTableEXT: *fp_glColorTableEXT =
	null: *fp_glColorTableEXT;
export let glColorTableParameterfvSGI: *fp_glColorTableParameterfvSGI =
	null: *fp_glColorTableParameterfvSGI;
export let glColorTableParameterivSGI: *fp_glColorTableParameterivSGI =
	null: *fp_glColorTableParameterivSGI;
export let glColorTableSGI: *fp_glColorTableSGI =
	null: *fp_glColorTableSGI;
export let glCombinerInputNV: *fp_glCombinerInputNV =
	null: *fp_glCombinerInputNV;
export let glCombinerOutputNV: *fp_glCombinerOutputNV =
	null: *fp_glCombinerOutputNV;
export let glCombinerParameterfNV: *fp_glCombinerParameterfNV =
	null: *fp_glCombinerParameterfNV;
export let glCombinerParameterfvNV: *fp_glCombinerParameterfvNV =
	null: *fp_glCombinerParameterfvNV;
export let glCombinerParameteriNV: *fp_glCombinerParameteriNV =
	null: *fp_glCombinerParameteriNV;
export let glCombinerParameterivNV: *fp_glCombinerParameterivNV =
	null: *fp_glCombinerParameterivNV;
export let glCombinerStageParameterfvNV: *fp_glCombinerStageParameterfvNV =
	null: *fp_glCombinerStageParameterfvNV;
export let glCommandListSegmentsNV: *fp_glCommandListSegmentsNV =
	null: *fp_glCommandListSegmentsNV;
export let glCompileCommandListNV: *fp_glCompileCommandListNV =
	null: *fp_glCompileCommandListNV;
export let glCompileShader: *fp_glCompileShader =
	null: *fp_glCompileShader;
export let glCompileShaderARB: *fp_glCompileShaderARB =
	null: *fp_glCompileShaderARB;
export let glCompileShaderIncludeARB: *fp_glCompileShaderIncludeARB =
	null: *fp_glCompileShaderIncludeARB;
export let glCompressedMultiTexImage1DEXT: *fp_glCompressedMultiTexImage1DEXT =
	null: *fp_glCompressedMultiTexImage1DEXT;
export let glCompressedMultiTexImage2DEXT: *fp_glCompressedMultiTexImage2DEXT =
	null: *fp_glCompressedMultiTexImage2DEXT;
export let glCompressedMultiTexImage3DEXT: *fp_glCompressedMultiTexImage3DEXT =
	null: *fp_glCompressedMultiTexImage3DEXT;
export let glCompressedMultiTexSubImage1DEXT: *fp_glCompressedMultiTexSubImage1DEXT =
	null: *fp_glCompressedMultiTexSubImage1DEXT;
export let glCompressedMultiTexSubImage2DEXT: *fp_glCompressedMultiTexSubImage2DEXT =
	null: *fp_glCompressedMultiTexSubImage2DEXT;
export let glCompressedMultiTexSubImage3DEXT: *fp_glCompressedMultiTexSubImage3DEXT =
	null: *fp_glCompressedMultiTexSubImage3DEXT;
export let glCompressedTexImage1D: *fp_glCompressedTexImage1D =
	null: *fp_glCompressedTexImage1D;
export let glCompressedTexImage1DARB: *fp_glCompressedTexImage1DARB =
	null: *fp_glCompressedTexImage1DARB;
export let glCompressedTexImage2D: *fp_glCompressedTexImage2D =
	null: *fp_glCompressedTexImage2D;
export let glCompressedTexImage2DARB: *fp_glCompressedTexImage2DARB =
	null: *fp_glCompressedTexImage2DARB;
export let glCompressedTexImage3D: *fp_glCompressedTexImage3D =
	null: *fp_glCompressedTexImage3D;
export let glCompressedTexImage3DARB: *fp_glCompressedTexImage3DARB =
	null: *fp_glCompressedTexImage3DARB;
export let glCompressedTexSubImage1D: *fp_glCompressedTexSubImage1D =
	null: *fp_glCompressedTexSubImage1D;
export let glCompressedTexSubImage1DARB: *fp_glCompressedTexSubImage1DARB =
	null: *fp_glCompressedTexSubImage1DARB;
export let glCompressedTexSubImage2D: *fp_glCompressedTexSubImage2D =
	null: *fp_glCompressedTexSubImage2D;
export let glCompressedTexSubImage2DARB: *fp_glCompressedTexSubImage2DARB =
	null: *fp_glCompressedTexSubImage2DARB;
export let glCompressedTexSubImage3D: *fp_glCompressedTexSubImage3D =
	null: *fp_glCompressedTexSubImage3D;
export let glCompressedTexSubImage3DARB: *fp_glCompressedTexSubImage3DARB =
	null: *fp_glCompressedTexSubImage3DARB;
export let glCompressedTextureImage1DEXT: *fp_glCompressedTextureImage1DEXT =
	null: *fp_glCompressedTextureImage1DEXT;
export let glCompressedTextureImage2DEXT: *fp_glCompressedTextureImage2DEXT =
	null: *fp_glCompressedTextureImage2DEXT;
export let glCompressedTextureImage3DEXT: *fp_glCompressedTextureImage3DEXT =
	null: *fp_glCompressedTextureImage3DEXT;
export let glCompressedTextureSubImage1D: *fp_glCompressedTextureSubImage1D =
	null: *fp_glCompressedTextureSubImage1D;
export let glCompressedTextureSubImage1DEXT: *fp_glCompressedTextureSubImage1DEXT =
	null: *fp_glCompressedTextureSubImage1DEXT;
export let glCompressedTextureSubImage2D: *fp_glCompressedTextureSubImage2D =
	null: *fp_glCompressedTextureSubImage2D;
export let glCompressedTextureSubImage2DEXT: *fp_glCompressedTextureSubImage2DEXT =
	null: *fp_glCompressedTextureSubImage2DEXT;
export let glCompressedTextureSubImage3D: *fp_glCompressedTextureSubImage3D =
	null: *fp_glCompressedTextureSubImage3D;
export let glCompressedTextureSubImage3DEXT: *fp_glCompressedTextureSubImage3DEXT =
	null: *fp_glCompressedTextureSubImage3DEXT;
export let glConservativeRasterParameterfNV: *fp_glConservativeRasterParameterfNV =
	null: *fp_glConservativeRasterParameterfNV;
export let glConservativeRasterParameteriNV: *fp_glConservativeRasterParameteriNV =
	null: *fp_glConservativeRasterParameteriNV;
export let glConvolutionFilter1DEXT: *fp_glConvolutionFilter1DEXT =
	null: *fp_glConvolutionFilter1DEXT;
export let glConvolutionFilter2DEXT: *fp_glConvolutionFilter2DEXT =
	null: *fp_glConvolutionFilter2DEXT;
export let glConvolutionParameterfEXT: *fp_glConvolutionParameterfEXT =
	null: *fp_glConvolutionParameterfEXT;
export let glConvolutionParameterfvEXT: *fp_glConvolutionParameterfvEXT =
	null: *fp_glConvolutionParameterfvEXT;
export let glConvolutionParameteriEXT: *fp_glConvolutionParameteriEXT =
	null: *fp_glConvolutionParameteriEXT;
export let glConvolutionParameterivEXT: *fp_glConvolutionParameterivEXT =
	null: *fp_glConvolutionParameterivEXT;
export let glConvolutionParameterxOES: *fp_glConvolutionParameterxOES =
	null: *fp_glConvolutionParameterxOES;
export let glConvolutionParameterxvOES: *fp_glConvolutionParameterxvOES =
	null: *fp_glConvolutionParameterxvOES;
export let glCopyBufferSubData: *fp_glCopyBufferSubData =
	null: *fp_glCopyBufferSubData;
export let glCopyColorSubTableEXT: *fp_glCopyColorSubTableEXT =
	null: *fp_glCopyColorSubTableEXT;
export let glCopyColorTableSGI: *fp_glCopyColorTableSGI =
	null: *fp_glCopyColorTableSGI;
export let glCopyConvolutionFilter1DEXT: *fp_glCopyConvolutionFilter1DEXT =
	null: *fp_glCopyConvolutionFilter1DEXT;
export let glCopyConvolutionFilter2DEXT: *fp_glCopyConvolutionFilter2DEXT =
	null: *fp_glCopyConvolutionFilter2DEXT;
export let glCopyImageSubData: *fp_glCopyImageSubData =
	null: *fp_glCopyImageSubData;
export let glCopyImageSubDataNV: *fp_glCopyImageSubDataNV =
	null: *fp_glCopyImageSubDataNV;
export let glCopyMultiTexImage1DEXT: *fp_glCopyMultiTexImage1DEXT =
	null: *fp_glCopyMultiTexImage1DEXT;
export let glCopyMultiTexImage2DEXT: *fp_glCopyMultiTexImage2DEXT =
	null: *fp_glCopyMultiTexImage2DEXT;
export let glCopyMultiTexSubImage1DEXT: *fp_glCopyMultiTexSubImage1DEXT =
	null: *fp_glCopyMultiTexSubImage1DEXT;
export let glCopyMultiTexSubImage2DEXT: *fp_glCopyMultiTexSubImage2DEXT =
	null: *fp_glCopyMultiTexSubImage2DEXT;
export let glCopyMultiTexSubImage3DEXT: *fp_glCopyMultiTexSubImage3DEXT =
	null: *fp_glCopyMultiTexSubImage3DEXT;
export let glCopyNamedBufferSubData: *fp_glCopyNamedBufferSubData =
	null: *fp_glCopyNamedBufferSubData;
export let glCopyPathNV: *fp_glCopyPathNV =
	null: *fp_glCopyPathNV;
export let glCopyPixels: *fp_glCopyPixels =
	null: *fp_glCopyPixels;
export let glCopyTexImage1D: *fp_glCopyTexImage1D =
	null: *fp_glCopyTexImage1D;
export let glCopyTexImage1DEXT: *fp_glCopyTexImage1DEXT =
	null: *fp_glCopyTexImage1DEXT;
export let glCopyTexImage2D: *fp_glCopyTexImage2D =
	null: *fp_glCopyTexImage2D;
export let glCopyTexImage2DEXT: *fp_glCopyTexImage2DEXT =
	null: *fp_glCopyTexImage2DEXT;
export let glCopyTexSubImage1D: *fp_glCopyTexSubImage1D =
	null: *fp_glCopyTexSubImage1D;
export let glCopyTexSubImage1DEXT: *fp_glCopyTexSubImage1DEXT =
	null: *fp_glCopyTexSubImage1DEXT;
export let glCopyTexSubImage2D: *fp_glCopyTexSubImage2D =
	null: *fp_glCopyTexSubImage2D;
export let glCopyTexSubImage2DEXT: *fp_glCopyTexSubImage2DEXT =
	null: *fp_glCopyTexSubImage2DEXT;
export let glCopyTexSubImage3D: *fp_glCopyTexSubImage3D =
	null: *fp_glCopyTexSubImage3D;
export let glCopyTexSubImage3DEXT: *fp_glCopyTexSubImage3DEXT =
	null: *fp_glCopyTexSubImage3DEXT;
export let glCopyTextureImage1DEXT: *fp_glCopyTextureImage1DEXT =
	null: *fp_glCopyTextureImage1DEXT;
export let glCopyTextureImage2DEXT: *fp_glCopyTextureImage2DEXT =
	null: *fp_glCopyTextureImage2DEXT;
export let glCopyTextureSubImage1D: *fp_glCopyTextureSubImage1D =
	null: *fp_glCopyTextureSubImage1D;
export let glCopyTextureSubImage1DEXT: *fp_glCopyTextureSubImage1DEXT =
	null: *fp_glCopyTextureSubImage1DEXT;
export let glCopyTextureSubImage2D: *fp_glCopyTextureSubImage2D =
	null: *fp_glCopyTextureSubImage2D;
export let glCopyTextureSubImage2DEXT: *fp_glCopyTextureSubImage2DEXT =
	null: *fp_glCopyTextureSubImage2DEXT;
export let glCopyTextureSubImage3D: *fp_glCopyTextureSubImage3D =
	null: *fp_glCopyTextureSubImage3D;
export let glCopyTextureSubImage3DEXT: *fp_glCopyTextureSubImage3DEXT =
	null: *fp_glCopyTextureSubImage3DEXT;
export let glCoverFillPathInstancedNV: *fp_glCoverFillPathInstancedNV =
	null: *fp_glCoverFillPathInstancedNV;
export let glCoverFillPathNV: *fp_glCoverFillPathNV =
	null: *fp_glCoverFillPathNV;
export let glCoverStrokePathInstancedNV: *fp_glCoverStrokePathInstancedNV =
	null: *fp_glCoverStrokePathInstancedNV;
export let glCoverStrokePathNV: *fp_glCoverStrokePathNV =
	null: *fp_glCoverStrokePathNV;
export let glCoverageModulationNV: *fp_glCoverageModulationNV =
	null: *fp_glCoverageModulationNV;
export let glCoverageModulationTableNV: *fp_glCoverageModulationTableNV =
	null: *fp_glCoverageModulationTableNV;
export let glCreateBuffers: *fp_glCreateBuffers =
	null: *fp_glCreateBuffers;
export let glCreateCommandListsNV: *fp_glCreateCommandListsNV =
	null: *fp_glCreateCommandListsNV;
export let glCreateFramebuffers: *fp_glCreateFramebuffers =
	null: *fp_glCreateFramebuffers;
export let glCreateMemoryObjectsEXT: *fp_glCreateMemoryObjectsEXT =
	null: *fp_glCreateMemoryObjectsEXT;
export let glCreatePerfQueryINTEL: *fp_glCreatePerfQueryINTEL =
	null: *fp_glCreatePerfQueryINTEL;
export let glCreateProgram: *fp_glCreateProgram =
	null: *fp_glCreateProgram;
export let glCreateProgramObjectARB: *fp_glCreateProgramObjectARB =
	null: *fp_glCreateProgramObjectARB;
export let glCreateProgramPipelines: *fp_glCreateProgramPipelines =
	null: *fp_glCreateProgramPipelines;
export let glCreateProgressFenceNVX: *fp_glCreateProgressFenceNVX =
	null: *fp_glCreateProgressFenceNVX;
export let glCreateQueries: *fp_glCreateQueries =
	null: *fp_glCreateQueries;
export let glCreateRenderbuffers: *fp_glCreateRenderbuffers =
	null: *fp_glCreateRenderbuffers;
export let glCreateSamplers: *fp_glCreateSamplers =
	null: *fp_glCreateSamplers;
export let glCreateSemaphoresNV: *fp_glCreateSemaphoresNV =
	null: *fp_glCreateSemaphoresNV;
export let glCreateShader: *fp_glCreateShader =
	null: *fp_glCreateShader;
export let glCreateShaderObjectARB: *fp_glCreateShaderObjectARB =
	null: *fp_glCreateShaderObjectARB;
export let glCreateShaderProgramEXT: *fp_glCreateShaderProgramEXT =
	null: *fp_glCreateShaderProgramEXT;
export let glCreateShaderProgramv: *fp_glCreateShaderProgramv =
	null: *fp_glCreateShaderProgramv;
export let glCreateStatesNV: *fp_glCreateStatesNV =
	null: *fp_glCreateStatesNV;
export let glCreateSyncFromCLeventARB: *fp_glCreateSyncFromCLeventARB =
	null: *fp_glCreateSyncFromCLeventARB;
export let glCreateTextures: *fp_glCreateTextures =
	null: *fp_glCreateTextures;
export let glCreateTransformFeedbacks: *fp_glCreateTransformFeedbacks =
	null: *fp_glCreateTransformFeedbacks;
export let glCreateVertexArrays: *fp_glCreateVertexArrays =
	null: *fp_glCreateVertexArrays;
export let glCullFace: *fp_glCullFace =
	null: *fp_glCullFace;
export let glCullParameterdvEXT: *fp_glCullParameterdvEXT =
	null: *fp_glCullParameterdvEXT;
export let glCullParameterfvEXT: *fp_glCullParameterfvEXT =
	null: *fp_glCullParameterfvEXT;
export let glCurrentPaletteMatrixARB: *fp_glCurrentPaletteMatrixARB =
	null: *fp_glCurrentPaletteMatrixARB;
export let glDebugMessageCallback: *fp_glDebugMessageCallback =
	null: *fp_glDebugMessageCallback;
export let glDebugMessageCallbackAMD: *fp_glDebugMessageCallbackAMD =
	null: *fp_glDebugMessageCallbackAMD;
export let glDebugMessageCallbackARB: *fp_glDebugMessageCallbackARB =
	null: *fp_glDebugMessageCallbackARB;
export let glDebugMessageControl: *fp_glDebugMessageControl =
	null: *fp_glDebugMessageControl;
export let glDebugMessageControlARB: *fp_glDebugMessageControlARB =
	null: *fp_glDebugMessageControlARB;
export let glDebugMessageEnableAMD: *fp_glDebugMessageEnableAMD =
	null: *fp_glDebugMessageEnableAMD;
export let glDebugMessageInsert: *fp_glDebugMessageInsert =
	null: *fp_glDebugMessageInsert;
export let glDebugMessageInsertAMD: *fp_glDebugMessageInsertAMD =
	null: *fp_glDebugMessageInsertAMD;
export let glDebugMessageInsertARB: *fp_glDebugMessageInsertARB =
	null: *fp_glDebugMessageInsertARB;
export let glDeformSGIX: *fp_glDeformSGIX =
	null: *fp_glDeformSGIX;
export let glDeformationMap3dSGIX: *fp_glDeformationMap3dSGIX =
	null: *fp_glDeformationMap3dSGIX;
export let glDeformationMap3fSGIX: *fp_glDeformationMap3fSGIX =
	null: *fp_glDeformationMap3fSGIX;
export let glDeleteAsyncMarkersSGIX: *fp_glDeleteAsyncMarkersSGIX =
	null: *fp_glDeleteAsyncMarkersSGIX;
export let glDeleteBuffers: *fp_glDeleteBuffers =
	null: *fp_glDeleteBuffers;
export let glDeleteBuffersARB: *fp_glDeleteBuffersARB =
	null: *fp_glDeleteBuffersARB;
export let glDeleteCommandListsNV: *fp_glDeleteCommandListsNV =
	null: *fp_glDeleteCommandListsNV;
export let glDeleteFencesAPPLE: *fp_glDeleteFencesAPPLE =
	null: *fp_glDeleteFencesAPPLE;
export let glDeleteFencesNV: *fp_glDeleteFencesNV =
	null: *fp_glDeleteFencesNV;
export let glDeleteFragmentShaderATI: *fp_glDeleteFragmentShaderATI =
	null: *fp_glDeleteFragmentShaderATI;
export let glDeleteFramebuffers: *fp_glDeleteFramebuffers =
	null: *fp_glDeleteFramebuffers;
export let glDeleteFramebuffersEXT: *fp_glDeleteFramebuffersEXT =
	null: *fp_glDeleteFramebuffersEXT;
export let glDeleteLists: *fp_glDeleteLists =
	null: *fp_glDeleteLists;
export let glDeleteMemoryObjectsEXT: *fp_glDeleteMemoryObjectsEXT =
	null: *fp_glDeleteMemoryObjectsEXT;
export let glDeleteNamedStringARB: *fp_glDeleteNamedStringARB =
	null: *fp_glDeleteNamedStringARB;
export let glDeleteNamesAMD: *fp_glDeleteNamesAMD =
	null: *fp_glDeleteNamesAMD;
export let glDeleteObjectARB: *fp_glDeleteObjectARB =
	null: *fp_glDeleteObjectARB;
export let glDeleteOcclusionQueriesNV: *fp_glDeleteOcclusionQueriesNV =
	null: *fp_glDeleteOcclusionQueriesNV;
export let glDeletePathsNV: *fp_glDeletePathsNV =
	null: *fp_glDeletePathsNV;
export let glDeletePerfMonitorsAMD: *fp_glDeletePerfMonitorsAMD =
	null: *fp_glDeletePerfMonitorsAMD;
export let glDeletePerfQueryINTEL: *fp_glDeletePerfQueryINTEL =
	null: *fp_glDeletePerfQueryINTEL;
export let glDeleteProgram: *fp_glDeleteProgram =
	null: *fp_glDeleteProgram;
export let glDeleteProgramPipelines: *fp_glDeleteProgramPipelines =
	null: *fp_glDeleteProgramPipelines;
export let glDeleteProgramsARB: *fp_glDeleteProgramsARB =
	null: *fp_glDeleteProgramsARB;
export let glDeleteProgramsNV: *fp_glDeleteProgramsNV =
	null: *fp_glDeleteProgramsNV;
export let glDeleteQueries: *fp_glDeleteQueries =
	null: *fp_glDeleteQueries;
export let glDeleteQueriesARB: *fp_glDeleteQueriesARB =
	null: *fp_glDeleteQueriesARB;
export let glDeleteQueryResourceTagNV: *fp_glDeleteQueryResourceTagNV =
	null: *fp_glDeleteQueryResourceTagNV;
export let glDeleteRenderbuffers: *fp_glDeleteRenderbuffers =
	null: *fp_glDeleteRenderbuffers;
export let glDeleteRenderbuffersEXT: *fp_glDeleteRenderbuffersEXT =
	null: *fp_glDeleteRenderbuffersEXT;
export let glDeleteSamplers: *fp_glDeleteSamplers =
	null: *fp_glDeleteSamplers;
export let glDeleteSemaphoresEXT: *fp_glDeleteSemaphoresEXT =
	null: *fp_glDeleteSemaphoresEXT;
export let glDeleteShader: *fp_glDeleteShader =
	null: *fp_glDeleteShader;
export let glDeleteStatesNV: *fp_glDeleteStatesNV =
	null: *fp_glDeleteStatesNV;
export let glDeleteSync: *fp_glDeleteSync =
	null: *fp_glDeleteSync;
export let glDeleteTextures: *fp_glDeleteTextures =
	null: *fp_glDeleteTextures;
export let glDeleteTexturesEXT: *fp_glDeleteTexturesEXT =
	null: *fp_glDeleteTexturesEXT;
export let glDeleteTransformFeedbacks: *fp_glDeleteTransformFeedbacks =
	null: *fp_glDeleteTransformFeedbacks;
export let glDeleteTransformFeedbacksNV: *fp_glDeleteTransformFeedbacksNV =
	null: *fp_glDeleteTransformFeedbacksNV;
export let glDeleteVertexArrays: *fp_glDeleteVertexArrays =
	null: *fp_glDeleteVertexArrays;
export let glDeleteVertexArraysAPPLE: *fp_glDeleteVertexArraysAPPLE =
	null: *fp_glDeleteVertexArraysAPPLE;
export let glDeleteVertexShaderEXT: *fp_glDeleteVertexShaderEXT =
	null: *fp_glDeleteVertexShaderEXT;
export let glDepthBoundsEXT: *fp_glDepthBoundsEXT =
	null: *fp_glDepthBoundsEXT;
export let glDepthBoundsdNV: *fp_glDepthBoundsdNV =
	null: *fp_glDepthBoundsdNV;
export let glDepthFunc: *fp_glDepthFunc =
	null: *fp_glDepthFunc;
export let glDepthMask: *fp_glDepthMask =
	null: *fp_glDepthMask;
export let glDepthRange: *fp_glDepthRange =
	null: *fp_glDepthRange;
export let glDepthRangeArraydvNV: *fp_glDepthRangeArraydvNV =
	null: *fp_glDepthRangeArraydvNV;
export let glDepthRangeArrayv: *fp_glDepthRangeArrayv =
	null: *fp_glDepthRangeArrayv;
export let glDepthRangeIndexed: *fp_glDepthRangeIndexed =
	null: *fp_glDepthRangeIndexed;
export let glDepthRangeIndexeddNV: *fp_glDepthRangeIndexeddNV =
	null: *fp_glDepthRangeIndexeddNV;
export let glDepthRangedNV: *fp_glDepthRangedNV =
	null: *fp_glDepthRangedNV;
export let glDepthRangef: *fp_glDepthRangef =
	null: *fp_glDepthRangef;
export let glDepthRangefOES: *fp_glDepthRangefOES =
	null: *fp_glDepthRangefOES;
export let glDepthRangexOES: *fp_glDepthRangexOES =
	null: *fp_glDepthRangexOES;
export let glDetachObjectARB: *fp_glDetachObjectARB =
	null: *fp_glDetachObjectARB;
export let glDetachShader: *fp_glDetachShader =
	null: *fp_glDetachShader;
export let glDetailTexFuncSGIS: *fp_glDetailTexFuncSGIS =
	null: *fp_glDetailTexFuncSGIS;
export let glDisable: *fp_glDisable =
	null: *fp_glDisable;
export let glDisableClientState: *fp_glDisableClientState =
	null: *fp_glDisableClientState;
export let glDisableClientStateIndexedEXT: *fp_glDisableClientStateIndexedEXT =
	null: *fp_glDisableClientStateIndexedEXT;
export let glDisableClientStateiEXT: *fp_glDisableClientStateiEXT =
	null: *fp_glDisableClientStateiEXT;
export let glDisableIndexedEXT: *fp_glDisableIndexedEXT =
	null: *fp_glDisableIndexedEXT;
export let glDisableVariantClientStateEXT: *fp_glDisableVariantClientStateEXT =
	null: *fp_glDisableVariantClientStateEXT;
export let glDisableVertexArrayAttrib: *fp_glDisableVertexArrayAttrib =
	null: *fp_glDisableVertexArrayAttrib;
export let glDisableVertexArrayAttribEXT: *fp_glDisableVertexArrayAttribEXT =
	null: *fp_glDisableVertexArrayAttribEXT;
export let glDisableVertexArrayEXT: *fp_glDisableVertexArrayEXT =
	null: *fp_glDisableVertexArrayEXT;
export let glDisableVertexAttribAPPLE: *fp_glDisableVertexAttribAPPLE =
	null: *fp_glDisableVertexAttribAPPLE;
export let glDisableVertexAttribArray: *fp_glDisableVertexAttribArray =
	null: *fp_glDisableVertexAttribArray;
export let glDisableVertexAttribArrayARB: *fp_glDisableVertexAttribArrayARB =
	null: *fp_glDisableVertexAttribArrayARB;
export let glDispatchCompute: *fp_glDispatchCompute =
	null: *fp_glDispatchCompute;
export let glDispatchComputeGroupSizeARB: *fp_glDispatchComputeGroupSizeARB =
	null: *fp_glDispatchComputeGroupSizeARB;
export let glDispatchComputeIndirect: *fp_glDispatchComputeIndirect =
	null: *fp_glDispatchComputeIndirect;
export let glDrawArrays: *fp_glDrawArrays =
	null: *fp_glDrawArrays;
export let glDrawArraysEXT: *fp_glDrawArraysEXT =
	null: *fp_glDrawArraysEXT;
export let glDrawArraysIndirect: *fp_glDrawArraysIndirect =
	null: *fp_glDrawArraysIndirect;
export let glDrawArraysInstancedARB: *fp_glDrawArraysInstancedARB =
	null: *fp_glDrawArraysInstancedARB;
export let glDrawArraysInstancedBaseInstance: *fp_glDrawArraysInstancedBaseInstance =
	null: *fp_glDrawArraysInstancedBaseInstance;
export let glDrawArraysInstancedEXT: *fp_glDrawArraysInstancedEXT =
	null: *fp_glDrawArraysInstancedEXT;
export let glDrawBuffer: *fp_glDrawBuffer =
	null: *fp_glDrawBuffer;
export let glDrawBuffers: *fp_glDrawBuffers =
	null: *fp_glDrawBuffers;
export let glDrawBuffersARB: *fp_glDrawBuffersARB =
	null: *fp_glDrawBuffersARB;
export let glDrawBuffersATI: *fp_glDrawBuffersATI =
	null: *fp_glDrawBuffersATI;
export let glDrawCommandsAddressNV: *fp_glDrawCommandsAddressNV =
	null: *fp_glDrawCommandsAddressNV;
export let glDrawCommandsNV: *fp_glDrawCommandsNV =
	null: *fp_glDrawCommandsNV;
export let glDrawCommandsStatesAddressNV: *fp_glDrawCommandsStatesAddressNV =
	null: *fp_glDrawCommandsStatesAddressNV;
export let glDrawCommandsStatesNV: *fp_glDrawCommandsStatesNV =
	null: *fp_glDrawCommandsStatesNV;
export let glDrawElementArrayAPPLE: *fp_glDrawElementArrayAPPLE =
	null: *fp_glDrawElementArrayAPPLE;
export let glDrawElementArrayATI: *fp_glDrawElementArrayATI =
	null: *fp_glDrawElementArrayATI;
export let glDrawElements: *fp_glDrawElements =
	null: *fp_glDrawElements;
export let glDrawElementsBaseVertex: *fp_glDrawElementsBaseVertex =
	null: *fp_glDrawElementsBaseVertex;
export let glDrawElementsIndirect: *fp_glDrawElementsIndirect =
	null: *fp_glDrawElementsIndirect;
export let glDrawElementsInstancedARB: *fp_glDrawElementsInstancedARB =
	null: *fp_glDrawElementsInstancedARB;
export let glDrawElementsInstancedBaseInstance: *fp_glDrawElementsInstancedBaseInstance =
	null: *fp_glDrawElementsInstancedBaseInstance;
export let glDrawElementsInstancedBaseVertex: *fp_glDrawElementsInstancedBaseVertex =
	null: *fp_glDrawElementsInstancedBaseVertex;
export let glDrawElementsInstancedBaseVertexBaseInstance: *fp_glDrawElementsInstancedBaseVertexBaseInstance =
	null: *fp_glDrawElementsInstancedBaseVertexBaseInstance;
export let glDrawElementsInstancedEXT: *fp_glDrawElementsInstancedEXT =
	null: *fp_glDrawElementsInstancedEXT;
export let glDrawMeshArraysSUN: *fp_glDrawMeshArraysSUN =
	null: *fp_glDrawMeshArraysSUN;
export let glDrawMeshTasksIndirectNV: *fp_glDrawMeshTasksIndirectNV =
	null: *fp_glDrawMeshTasksIndirectNV;
export let glDrawMeshTasksNV: *fp_glDrawMeshTasksNV =
	null: *fp_glDrawMeshTasksNV;
export let glDrawPixels: *fp_glDrawPixels =
	null: *fp_glDrawPixels;
export let glDrawRangeElementArrayAPPLE: *fp_glDrawRangeElementArrayAPPLE =
	null: *fp_glDrawRangeElementArrayAPPLE;
export let glDrawRangeElementArrayATI: *fp_glDrawRangeElementArrayATI =
	null: *fp_glDrawRangeElementArrayATI;
export let glDrawRangeElements: *fp_glDrawRangeElements =
	null: *fp_glDrawRangeElements;
export let glDrawRangeElementsBaseVertex: *fp_glDrawRangeElementsBaseVertex =
	null: *fp_glDrawRangeElementsBaseVertex;
export let glDrawRangeElementsEXT: *fp_glDrawRangeElementsEXT =
	null: *fp_glDrawRangeElementsEXT;
export let glDrawTextureNV: *fp_glDrawTextureNV =
	null: *fp_glDrawTextureNV;
export let glDrawTransformFeedback: *fp_glDrawTransformFeedback =
	null: *fp_glDrawTransformFeedback;
export let glDrawTransformFeedbackInstanced: *fp_glDrawTransformFeedbackInstanced =
	null: *fp_glDrawTransformFeedbackInstanced;
export let glDrawTransformFeedbackNV: *fp_glDrawTransformFeedbackNV =
	null: *fp_glDrawTransformFeedbackNV;
export let glDrawTransformFeedbackStream: *fp_glDrawTransformFeedbackStream =
	null: *fp_glDrawTransformFeedbackStream;
export let glDrawTransformFeedbackStreamInstanced: *fp_glDrawTransformFeedbackStreamInstanced =
	null: *fp_glDrawTransformFeedbackStreamInstanced;
export let glDrawVkImageNV: *fp_glDrawVkImageNV =
	null: *fp_glDrawVkImageNV;
export let glEGLImageTargetTexStorageEXT: *fp_glEGLImageTargetTexStorageEXT =
	null: *fp_glEGLImageTargetTexStorageEXT;
export let glEGLImageTargetTextureStorageEXT: *fp_glEGLImageTargetTextureStorageEXT =
	null: *fp_glEGLImageTargetTextureStorageEXT;
export let glEdgeFlag: *fp_glEdgeFlag =
	null: *fp_glEdgeFlag;
export let glEdgeFlagFormatNV: *fp_glEdgeFlagFormatNV =
	null: *fp_glEdgeFlagFormatNV;
export let glEdgeFlagPointer: *fp_glEdgeFlagPointer =
	null: *fp_glEdgeFlagPointer;
export let glEdgeFlagPointerEXT: *fp_glEdgeFlagPointerEXT =
	null: *fp_glEdgeFlagPointerEXT;
export let glEdgeFlagPointerListIBM: *fp_glEdgeFlagPointerListIBM =
	null: *fp_glEdgeFlagPointerListIBM;
export let glEdgeFlagv: *fp_glEdgeFlagv =
	null: *fp_glEdgeFlagv;
export let glElementPointerAPPLE: *fp_glElementPointerAPPLE =
	null: *fp_glElementPointerAPPLE;
export let glElementPointerATI: *fp_glElementPointerATI =
	null: *fp_glElementPointerATI;
export let glEnable: *fp_glEnable =
	null: *fp_glEnable;
export let glEnableClientState: *fp_glEnableClientState =
	null: *fp_glEnableClientState;
export let glEnableClientStateIndexedEXT: *fp_glEnableClientStateIndexedEXT =
	null: *fp_glEnableClientStateIndexedEXT;
export let glEnableClientStateiEXT: *fp_glEnableClientStateiEXT =
	null: *fp_glEnableClientStateiEXT;
export let glEnableIndexedEXT: *fp_glEnableIndexedEXT =
	null: *fp_glEnableIndexedEXT;
export let glEnableVariantClientStateEXT: *fp_glEnableVariantClientStateEXT =
	null: *fp_glEnableVariantClientStateEXT;
export let glEnableVertexArrayAttrib: *fp_glEnableVertexArrayAttrib =
	null: *fp_glEnableVertexArrayAttrib;
export let glEnableVertexArrayAttribEXT: *fp_glEnableVertexArrayAttribEXT =
	null: *fp_glEnableVertexArrayAttribEXT;
export let glEnableVertexArrayEXT: *fp_glEnableVertexArrayEXT =
	null: *fp_glEnableVertexArrayEXT;
export let glEnableVertexAttribAPPLE: *fp_glEnableVertexAttribAPPLE =
	null: *fp_glEnableVertexAttribAPPLE;
export let glEnableVertexAttribArray: *fp_glEnableVertexAttribArray =
	null: *fp_glEnableVertexAttribArray;
export let glEnableVertexAttribArrayARB: *fp_glEnableVertexAttribArrayARB =
	null: *fp_glEnableVertexAttribArrayARB;
export let glEnd: *fp_glEnd =
	null: *fp_glEnd;
export let glEndConditionalRenderNV: *fp_glEndConditionalRenderNV =
	null: *fp_glEndConditionalRenderNV;
export let glEndConditionalRenderNVX: *fp_glEndConditionalRenderNVX =
	null: *fp_glEndConditionalRenderNVX;
export let glEndFragmentShaderATI: *fp_glEndFragmentShaderATI =
	null: *fp_glEndFragmentShaderATI;
export let glEndList: *fp_glEndList =
	null: *fp_glEndList;
export let glEndOcclusionQueryNV: *fp_glEndOcclusionQueryNV =
	null: *fp_glEndOcclusionQueryNV;
export let glEndPerfMonitorAMD: *fp_glEndPerfMonitorAMD =
	null: *fp_glEndPerfMonitorAMD;
export let glEndPerfQueryINTEL: *fp_glEndPerfQueryINTEL =
	null: *fp_glEndPerfQueryINTEL;
export let glEndQuery: *fp_glEndQuery =
	null: *fp_glEndQuery;
export let glEndQueryARB: *fp_glEndQueryARB =
	null: *fp_glEndQueryARB;
export let glEndQueryIndexed: *fp_glEndQueryIndexed =
	null: *fp_glEndQueryIndexed;
export let glEndTransformFeedbackEXT: *fp_glEndTransformFeedbackEXT =
	null: *fp_glEndTransformFeedbackEXT;
export let glEndTransformFeedbackNV: *fp_glEndTransformFeedbackNV =
	null: *fp_glEndTransformFeedbackNV;
export let glEndVertexShaderEXT: *fp_glEndVertexShaderEXT =
	null: *fp_glEndVertexShaderEXT;
export let glEndVideoCaptureNV: *fp_glEndVideoCaptureNV =
	null: *fp_glEndVideoCaptureNV;
export let glEvalCoord1d: *fp_glEvalCoord1d =
	null: *fp_glEvalCoord1d;
export let glEvalCoord1dv: *fp_glEvalCoord1dv =
	null: *fp_glEvalCoord1dv;
export let glEvalCoord1f: *fp_glEvalCoord1f =
	null: *fp_glEvalCoord1f;
export let glEvalCoord1fv: *fp_glEvalCoord1fv =
	null: *fp_glEvalCoord1fv;
export let glEvalCoord1xOES: *fp_glEvalCoord1xOES =
	null: *fp_glEvalCoord1xOES;
export let glEvalCoord1xvOES: *fp_glEvalCoord1xvOES =
	null: *fp_glEvalCoord1xvOES;
export let glEvalCoord2d: *fp_glEvalCoord2d =
	null: *fp_glEvalCoord2d;
export let glEvalCoord2dv: *fp_glEvalCoord2dv =
	null: *fp_glEvalCoord2dv;
export let glEvalCoord2f: *fp_glEvalCoord2f =
	null: *fp_glEvalCoord2f;
export let glEvalCoord2fv: *fp_glEvalCoord2fv =
	null: *fp_glEvalCoord2fv;
export let glEvalCoord2xOES: *fp_glEvalCoord2xOES =
	null: *fp_glEvalCoord2xOES;
export let glEvalCoord2xvOES: *fp_glEvalCoord2xvOES =
	null: *fp_glEvalCoord2xvOES;
export let glEvalMapsNV: *fp_glEvalMapsNV =
	null: *fp_glEvalMapsNV;
export let glEvalMesh1: *fp_glEvalMesh1 =
	null: *fp_glEvalMesh1;
export let glEvalMesh2: *fp_glEvalMesh2 =
	null: *fp_glEvalMesh2;
export let glEvalPoint1: *fp_glEvalPoint1 =
	null: *fp_glEvalPoint1;
export let glEvalPoint2: *fp_glEvalPoint2 =
	null: *fp_glEvalPoint2;
export let glEvaluateDepthValuesARB: *fp_glEvaluateDepthValuesARB =
	null: *fp_glEvaluateDepthValuesARB;
export let glExecuteProgramNV: *fp_glExecuteProgramNV =
	null: *fp_glExecuteProgramNV;
export let glExtractComponentEXT: *fp_glExtractComponentEXT =
	null: *fp_glExtractComponentEXT;
export let glFeedbackBuffer: *fp_glFeedbackBuffer =
	null: *fp_glFeedbackBuffer;
export let glFeedbackBufferxOES: *fp_glFeedbackBufferxOES =
	null: *fp_glFeedbackBufferxOES;
export let glFenceSync: *fp_glFenceSync =
	null: *fp_glFenceSync;
export let glFinalCombinerInputNV: *fp_glFinalCombinerInputNV =
	null: *fp_glFinalCombinerInputNV;
export let glFinish: *fp_glFinish =
	null: *fp_glFinish;
export let glFinishAsyncSGIX: *fp_glFinishAsyncSGIX =
	null: *fp_glFinishAsyncSGIX;
export let glFinishFenceAPPLE: *fp_glFinishFenceAPPLE =
	null: *fp_glFinishFenceAPPLE;
export let glFinishFenceNV: *fp_glFinishFenceNV =
	null: *fp_glFinishFenceNV;
export let glFinishObjectAPPLE: *fp_glFinishObjectAPPLE =
	null: *fp_glFinishObjectAPPLE;
export let glFinishTextureSUNX: *fp_glFinishTextureSUNX =
	null: *fp_glFinishTextureSUNX;
export let glFlush: *fp_glFlush =
	null: *fp_glFlush;
export let glFlushMappedBufferRange: *fp_glFlushMappedBufferRange =
	null: *fp_glFlushMappedBufferRange;
export let glFlushMappedBufferRangeAPPLE: *fp_glFlushMappedBufferRangeAPPLE =
	null: *fp_glFlushMappedBufferRangeAPPLE;
export let glFlushMappedNamedBufferRange: *fp_glFlushMappedNamedBufferRange =
	null: *fp_glFlushMappedNamedBufferRange;
export let glFlushMappedNamedBufferRangeEXT: *fp_glFlushMappedNamedBufferRangeEXT =
	null: *fp_glFlushMappedNamedBufferRangeEXT;
export let glFlushPixelDataRangeNV: *fp_glFlushPixelDataRangeNV =
	null: *fp_glFlushPixelDataRangeNV;
export let glFlushRasterSGIX: *fp_glFlushRasterSGIX =
	null: *fp_glFlushRasterSGIX;
export let glFlushStaticDataIBM: *fp_glFlushStaticDataIBM =
	null: *fp_glFlushStaticDataIBM;
export let glFlushVertexArrayRangeAPPLE: *fp_glFlushVertexArrayRangeAPPLE =
	null: *fp_glFlushVertexArrayRangeAPPLE;
export let glFlushVertexArrayRangeNV: *fp_glFlushVertexArrayRangeNV =
	null: *fp_glFlushVertexArrayRangeNV;
export let glFogCoordFormatNV: *fp_glFogCoordFormatNV =
	null: *fp_glFogCoordFormatNV;
export let glFogCoordPointer: *fp_glFogCoordPointer =
	null: *fp_glFogCoordPointer;
export let glFogCoordPointerEXT: *fp_glFogCoordPointerEXT =
	null: *fp_glFogCoordPointerEXT;
export let glFogCoordPointerListIBM: *fp_glFogCoordPointerListIBM =
	null: *fp_glFogCoordPointerListIBM;
export let glFogCoordd: *fp_glFogCoordd =
	null: *fp_glFogCoordd;
export let glFogCoorddEXT: *fp_glFogCoorddEXT =
	null: *fp_glFogCoorddEXT;
export let glFogCoorddv: *fp_glFogCoorddv =
	null: *fp_glFogCoorddv;
export let glFogCoorddvEXT: *fp_glFogCoorddvEXT =
	null: *fp_glFogCoorddvEXT;
export let glFogCoordf: *fp_glFogCoordf =
	null: *fp_glFogCoordf;
export let glFogCoordfEXT: *fp_glFogCoordfEXT =
	null: *fp_glFogCoordfEXT;
export let glFogCoordfv: *fp_glFogCoordfv =
	null: *fp_glFogCoordfv;
export let glFogCoordfvEXT: *fp_glFogCoordfvEXT =
	null: *fp_glFogCoordfvEXT;
export let glFogCoordhNV: *fp_glFogCoordhNV =
	null: *fp_glFogCoordhNV;
export let glFogCoordhvNV: *fp_glFogCoordhvNV =
	null: *fp_glFogCoordhvNV;
export let glFogFuncSGIS: *fp_glFogFuncSGIS =
	null: *fp_glFogFuncSGIS;
export let glFogf: *fp_glFogf =
	null: *fp_glFogf;
export let glFogfv: *fp_glFogfv =
	null: *fp_glFogfv;
export let glFogi: *fp_glFogi =
	null: *fp_glFogi;
export let glFogiv: *fp_glFogiv =
	null: *fp_glFogiv;
export let glFogxOES: *fp_glFogxOES =
	null: *fp_glFogxOES;
export let glFogxvOES: *fp_glFogxvOES =
	null: *fp_glFogxvOES;
export let glFragmentColorMaterialSGIX: *fp_glFragmentColorMaterialSGIX =
	null: *fp_glFragmentColorMaterialSGIX;
export let glFragmentCoverageColorNV: *fp_glFragmentCoverageColorNV =
	null: *fp_glFragmentCoverageColorNV;
export let glFragmentLightModelfSGIX: *fp_glFragmentLightModelfSGIX =
	null: *fp_glFragmentLightModelfSGIX;
export let glFragmentLightModelfvSGIX: *fp_glFragmentLightModelfvSGIX =
	null: *fp_glFragmentLightModelfvSGIX;
export let glFragmentLightModeliSGIX: *fp_glFragmentLightModeliSGIX =
	null: *fp_glFragmentLightModeliSGIX;
export let glFragmentLightModelivSGIX: *fp_glFragmentLightModelivSGIX =
	null: *fp_glFragmentLightModelivSGIX;
export let glFragmentLightfSGIX: *fp_glFragmentLightfSGIX =
	null: *fp_glFragmentLightfSGIX;
export let glFragmentLightfvSGIX: *fp_glFragmentLightfvSGIX =
	null: *fp_glFragmentLightfvSGIX;
export let glFragmentLightiSGIX: *fp_glFragmentLightiSGIX =
	null: *fp_glFragmentLightiSGIX;
export let glFragmentLightivSGIX: *fp_glFragmentLightivSGIX =
	null: *fp_glFragmentLightivSGIX;
export let glFragmentMaterialfSGIX: *fp_glFragmentMaterialfSGIX =
	null: *fp_glFragmentMaterialfSGIX;
export let glFragmentMaterialfvSGIX: *fp_glFragmentMaterialfvSGIX =
	null: *fp_glFragmentMaterialfvSGIX;
export let glFragmentMaterialiSGIX: *fp_glFragmentMaterialiSGIX =
	null: *fp_glFragmentMaterialiSGIX;
export let glFragmentMaterialivSGIX: *fp_glFragmentMaterialivSGIX =
	null: *fp_glFragmentMaterialivSGIX;
export let glFrameTerminatorGREMEDY: *fp_glFrameTerminatorGREMEDY =
	null: *fp_glFrameTerminatorGREMEDY;
export let glFrameZoomSGIX: *fp_glFrameZoomSGIX =
	null: *fp_glFrameZoomSGIX;
export let glFramebufferDrawBufferEXT: *fp_glFramebufferDrawBufferEXT =
	null: *fp_glFramebufferDrawBufferEXT;
export let glFramebufferDrawBuffersEXT: *fp_glFramebufferDrawBuffersEXT =
	null: *fp_glFramebufferDrawBuffersEXT;
export let glFramebufferFetchBarrierEXT: *fp_glFramebufferFetchBarrierEXT =
	null: *fp_glFramebufferFetchBarrierEXT;
export let glFramebufferParameteri: *fp_glFramebufferParameteri =
	null: *fp_glFramebufferParameteri;
export let glFramebufferParameteriMESA: *fp_glFramebufferParameteriMESA =
	null: *fp_glFramebufferParameteriMESA;
export let glFramebufferReadBufferEXT: *fp_glFramebufferReadBufferEXT =
	null: *fp_glFramebufferReadBufferEXT;
export let glFramebufferRenderbuffer: *fp_glFramebufferRenderbuffer =
	null: *fp_glFramebufferRenderbuffer;
export let glFramebufferRenderbufferEXT: *fp_glFramebufferRenderbufferEXT =
	null: *fp_glFramebufferRenderbufferEXT;
export let glFramebufferSampleLocationsfvARB: *fp_glFramebufferSampleLocationsfvARB =
	null: *fp_glFramebufferSampleLocationsfvARB;
export let glFramebufferSampleLocationsfvNV: *fp_glFramebufferSampleLocationsfvNV =
	null: *fp_glFramebufferSampleLocationsfvNV;
export let glFramebufferSamplePositionsfvAMD: *fp_glFramebufferSamplePositionsfvAMD =
	null: *fp_glFramebufferSamplePositionsfvAMD;
export let glFramebufferTexture1D: *fp_glFramebufferTexture1D =
	null: *fp_glFramebufferTexture1D;
export let glFramebufferTexture1DEXT: *fp_glFramebufferTexture1DEXT =
	null: *fp_glFramebufferTexture1DEXT;
export let glFramebufferTexture2D: *fp_glFramebufferTexture2D =
	null: *fp_glFramebufferTexture2D;
export let glFramebufferTexture2DEXT: *fp_glFramebufferTexture2DEXT =
	null: *fp_glFramebufferTexture2DEXT;
export let glFramebufferTexture3D: *fp_glFramebufferTexture3D =
	null: *fp_glFramebufferTexture3D;
export let glFramebufferTexture3DEXT: *fp_glFramebufferTexture3DEXT =
	null: *fp_glFramebufferTexture3DEXT;
export let glFramebufferTextureARB: *fp_glFramebufferTextureARB =
	null: *fp_glFramebufferTextureARB;
export let glFramebufferTextureEXT: *fp_glFramebufferTextureEXT =
	null: *fp_glFramebufferTextureEXT;
export let glFramebufferTextureFaceARB: *fp_glFramebufferTextureFaceARB =
	null: *fp_glFramebufferTextureFaceARB;
export let glFramebufferTextureFaceEXT: *fp_glFramebufferTextureFaceEXT =
	null: *fp_glFramebufferTextureFaceEXT;
export let glFramebufferTextureLayer: *fp_glFramebufferTextureLayer =
	null: *fp_glFramebufferTextureLayer;
export let glFramebufferTextureLayerARB: *fp_glFramebufferTextureLayerARB =
	null: *fp_glFramebufferTextureLayerARB;
export let glFramebufferTextureLayerEXT: *fp_glFramebufferTextureLayerEXT =
	null: *fp_glFramebufferTextureLayerEXT;
export let glFramebufferTextureMultiviewOVR: *fp_glFramebufferTextureMultiviewOVR =
	null: *fp_glFramebufferTextureMultiviewOVR;
export let glFreeObjectBufferATI: *fp_glFreeObjectBufferATI =
	null: *fp_glFreeObjectBufferATI;
export let glFrontFace: *fp_glFrontFace =
	null: *fp_glFrontFace;
export let glFrustum: *fp_glFrustum =
	null: *fp_glFrustum;
export let glFrustumfOES: *fp_glFrustumfOES =
	null: *fp_glFrustumfOES;
export let glFrustumxOES: *fp_glFrustumxOES =
	null: *fp_glFrustumxOES;
export let glGenAsyncMarkersSGIX: *fp_glGenAsyncMarkersSGIX =
	null: *fp_glGenAsyncMarkersSGIX;
export let glGenBuffers: *fp_glGenBuffers =
	null: *fp_glGenBuffers;
export let glGenBuffersARB: *fp_glGenBuffersARB =
	null: *fp_glGenBuffersARB;
export let glGenFencesAPPLE: *fp_glGenFencesAPPLE =
	null: *fp_glGenFencesAPPLE;
export let glGenFencesNV: *fp_glGenFencesNV =
	null: *fp_glGenFencesNV;
export let glGenFragmentShadersATI: *fp_glGenFragmentShadersATI =
	null: *fp_glGenFragmentShadersATI;
export let glGenFramebuffers: *fp_glGenFramebuffers =
	null: *fp_glGenFramebuffers;
export let glGenFramebuffersEXT: *fp_glGenFramebuffersEXT =
	null: *fp_glGenFramebuffersEXT;
export let glGenLists: *fp_glGenLists =
	null: *fp_glGenLists;
export let glGenNamesAMD: *fp_glGenNamesAMD =
	null: *fp_glGenNamesAMD;
export let glGenOcclusionQueriesNV: *fp_glGenOcclusionQueriesNV =
	null: *fp_glGenOcclusionQueriesNV;
export let glGenPathsNV: *fp_glGenPathsNV =
	null: *fp_glGenPathsNV;
export let glGenPerfMonitorsAMD: *fp_glGenPerfMonitorsAMD =
	null: *fp_glGenPerfMonitorsAMD;
export let glGenProgramPipelines: *fp_glGenProgramPipelines =
	null: *fp_glGenProgramPipelines;
export let glGenProgramsARB: *fp_glGenProgramsARB =
	null: *fp_glGenProgramsARB;
export let glGenProgramsNV: *fp_glGenProgramsNV =
	null: *fp_glGenProgramsNV;
export let glGenQueries: *fp_glGenQueries =
	null: *fp_glGenQueries;
export let glGenQueriesARB: *fp_glGenQueriesARB =
	null: *fp_glGenQueriesARB;
export let glGenQueryResourceTagNV: *fp_glGenQueryResourceTagNV =
	null: *fp_glGenQueryResourceTagNV;
export let glGenRenderbuffers: *fp_glGenRenderbuffers =
	null: *fp_glGenRenderbuffers;
export let glGenRenderbuffersEXT: *fp_glGenRenderbuffersEXT =
	null: *fp_glGenRenderbuffersEXT;
export let glGenSamplers: *fp_glGenSamplers =
	null: *fp_glGenSamplers;
export let glGenSemaphoresEXT: *fp_glGenSemaphoresEXT =
	null: *fp_glGenSemaphoresEXT;
export let glGenSymbolsEXT: *fp_glGenSymbolsEXT =
	null: *fp_glGenSymbolsEXT;
export let glGenTextures: *fp_glGenTextures =
	null: *fp_glGenTextures;
export let glGenTexturesEXT: *fp_glGenTexturesEXT =
	null: *fp_glGenTexturesEXT;
export let glGenTransformFeedbacks: *fp_glGenTransformFeedbacks =
	null: *fp_glGenTransformFeedbacks;
export let glGenTransformFeedbacksNV: *fp_glGenTransformFeedbacksNV =
	null: *fp_glGenTransformFeedbacksNV;
export let glGenVertexArrays: *fp_glGenVertexArrays =
	null: *fp_glGenVertexArrays;
export let glGenVertexArraysAPPLE: *fp_glGenVertexArraysAPPLE =
	null: *fp_glGenVertexArraysAPPLE;
export let glGenVertexShadersEXT: *fp_glGenVertexShadersEXT =
	null: *fp_glGenVertexShadersEXT;
export let glGenerateMipmap: *fp_glGenerateMipmap =
	null: *fp_glGenerateMipmap;
export let glGenerateMipmapEXT: *fp_glGenerateMipmapEXT =
	null: *fp_glGenerateMipmapEXT;
export let glGenerateMultiTexMipmapEXT: *fp_glGenerateMultiTexMipmapEXT =
	null: *fp_glGenerateMultiTexMipmapEXT;
export let glGenerateTextureMipmap: *fp_glGenerateTextureMipmap =
	null: *fp_glGenerateTextureMipmap;
export let glGenerateTextureMipmapEXT: *fp_glGenerateTextureMipmapEXT =
	null: *fp_glGenerateTextureMipmapEXT;
export let glGetActiveAtomicCounterBufferiv: *fp_glGetActiveAtomicCounterBufferiv =
	null: *fp_glGetActiveAtomicCounterBufferiv;
export let glGetActiveAttrib: *fp_glGetActiveAttrib =
	null: *fp_glGetActiveAttrib;
export let glGetActiveAttribARB: *fp_glGetActiveAttribARB =
	null: *fp_glGetActiveAttribARB;
export let glGetActiveSubroutineName: *fp_glGetActiveSubroutineName =
	null: *fp_glGetActiveSubroutineName;
export let glGetActiveSubroutineUniformName: *fp_glGetActiveSubroutineUniformName =
	null: *fp_glGetActiveSubroutineUniformName;
export let glGetActiveSubroutineUniformiv: *fp_glGetActiveSubroutineUniformiv =
	null: *fp_glGetActiveSubroutineUniformiv;
export let glGetActiveUniform: *fp_glGetActiveUniform =
	null: *fp_glGetActiveUniform;
export let glGetActiveUniformARB: *fp_glGetActiveUniformARB =
	null: *fp_glGetActiveUniformARB;
export let glGetActiveUniformBlockName: *fp_glGetActiveUniformBlockName =
	null: *fp_glGetActiveUniformBlockName;
export let glGetActiveUniformBlockiv: *fp_glGetActiveUniformBlockiv =
	null: *fp_glGetActiveUniformBlockiv;
export let glGetActiveUniformName: *fp_glGetActiveUniformName =
	null: *fp_glGetActiveUniformName;
export let glGetActiveUniformsiv: *fp_glGetActiveUniformsiv =
	null: *fp_glGetActiveUniformsiv;
export let glGetActiveVaryingNV: *fp_glGetActiveVaryingNV =
	null: *fp_glGetActiveVaryingNV;
export let glGetArrayObjectfvATI: *fp_glGetArrayObjectfvATI =
	null: *fp_glGetArrayObjectfvATI;
export let glGetArrayObjectivATI: *fp_glGetArrayObjectivATI =
	null: *fp_glGetArrayObjectivATI;
export let glGetAttachedObjectsARB: *fp_glGetAttachedObjectsARB =
	null: *fp_glGetAttachedObjectsARB;
export let glGetAttachedShaders: *fp_glGetAttachedShaders =
	null: *fp_glGetAttachedShaders;
export let glGetAttribLocation: *fp_glGetAttribLocation =
	null: *fp_glGetAttribLocation;
export let glGetAttribLocationARB: *fp_glGetAttribLocationARB =
	null: *fp_glGetAttribLocationARB;
export let glGetBooleanIndexedvEXT: *fp_glGetBooleanIndexedvEXT =
	null: *fp_glGetBooleanIndexedvEXT;
export let glGetBooleanv: *fp_glGetBooleanv =
	null: *fp_glGetBooleanv;
export let glGetBufferParameteriv: *fp_glGetBufferParameteriv =
	null: *fp_glGetBufferParameteriv;
export let glGetBufferParameterivARB: *fp_glGetBufferParameterivARB =
	null: *fp_glGetBufferParameterivARB;
export let glGetBufferParameterui64vNV: *fp_glGetBufferParameterui64vNV =
	null: *fp_glGetBufferParameterui64vNV;
export let glGetBufferPointerv: *fp_glGetBufferPointerv =
	null: *fp_glGetBufferPointerv;
export let glGetBufferPointervARB: *fp_glGetBufferPointervARB =
	null: *fp_glGetBufferPointervARB;
export let glGetBufferSubData: *fp_glGetBufferSubData =
	null: *fp_glGetBufferSubData;
export let glGetBufferSubDataARB: *fp_glGetBufferSubDataARB =
	null: *fp_glGetBufferSubDataARB;
export let glGetClipPlane: *fp_glGetClipPlane =
	null: *fp_glGetClipPlane;
export let glGetClipPlanefOES: *fp_glGetClipPlanefOES =
	null: *fp_glGetClipPlanefOES;
export let glGetClipPlanexOES: *fp_glGetClipPlanexOES =
	null: *fp_glGetClipPlanexOES;
export let glGetColorTableEXT: *fp_glGetColorTableEXT =
	null: *fp_glGetColorTableEXT;
export let glGetColorTableParameterfvEXT: *fp_glGetColorTableParameterfvEXT =
	null: *fp_glGetColorTableParameterfvEXT;
export let glGetColorTableParameterfvSGI: *fp_glGetColorTableParameterfvSGI =
	null: *fp_glGetColorTableParameterfvSGI;
export let glGetColorTableParameterivEXT: *fp_glGetColorTableParameterivEXT =
	null: *fp_glGetColorTableParameterivEXT;
export let glGetColorTableParameterivSGI: *fp_glGetColorTableParameterivSGI =
	null: *fp_glGetColorTableParameterivSGI;
export let glGetColorTableSGI: *fp_glGetColorTableSGI =
	null: *fp_glGetColorTableSGI;
export let glGetCombinerInputParameterfvNV: *fp_glGetCombinerInputParameterfvNV =
	null: *fp_glGetCombinerInputParameterfvNV;
export let glGetCombinerInputParameterivNV: *fp_glGetCombinerInputParameterivNV =
	null: *fp_glGetCombinerInputParameterivNV;
export let glGetCombinerOutputParameterfvNV: *fp_glGetCombinerOutputParameterfvNV =
	null: *fp_glGetCombinerOutputParameterfvNV;
export let glGetCombinerOutputParameterivNV: *fp_glGetCombinerOutputParameterivNV =
	null: *fp_glGetCombinerOutputParameterivNV;
export let glGetCombinerStageParameterfvNV: *fp_glGetCombinerStageParameterfvNV =
	null: *fp_glGetCombinerStageParameterfvNV;
export let glGetCommandHeaderNV: *fp_glGetCommandHeaderNV =
	null: *fp_glGetCommandHeaderNV;
export let glGetCompressedMultiTexImageEXT: *fp_glGetCompressedMultiTexImageEXT =
	null: *fp_glGetCompressedMultiTexImageEXT;
export let glGetCompressedTexImage: *fp_glGetCompressedTexImage =
	null: *fp_glGetCompressedTexImage;
export let glGetCompressedTexImageARB: *fp_glGetCompressedTexImageARB =
	null: *fp_glGetCompressedTexImageARB;
export let glGetCompressedTextureImage: *fp_glGetCompressedTextureImage =
	null: *fp_glGetCompressedTextureImage;
export let glGetCompressedTextureImageEXT: *fp_glGetCompressedTextureImageEXT =
	null: *fp_glGetCompressedTextureImageEXT;
export let glGetCompressedTextureSubImage: *fp_glGetCompressedTextureSubImage =
	null: *fp_glGetCompressedTextureSubImage;
export let glGetConvolutionFilterEXT: *fp_glGetConvolutionFilterEXT =
	null: *fp_glGetConvolutionFilterEXT;
export let glGetConvolutionParameterfvEXT: *fp_glGetConvolutionParameterfvEXT =
	null: *fp_glGetConvolutionParameterfvEXT;
export let glGetConvolutionParameterivEXT: *fp_glGetConvolutionParameterivEXT =
	null: *fp_glGetConvolutionParameterivEXT;
export let glGetConvolutionParameterxvOES: *fp_glGetConvolutionParameterxvOES =
	null: *fp_glGetConvolutionParameterxvOES;
export let glGetCoverageModulationTableNV: *fp_glGetCoverageModulationTableNV =
	null: *fp_glGetCoverageModulationTableNV;
export let glGetDebugMessageLog: *fp_glGetDebugMessageLog =
	null: *fp_glGetDebugMessageLog;
export let glGetDebugMessageLogAMD: *fp_glGetDebugMessageLogAMD =
	null: *fp_glGetDebugMessageLogAMD;
export let glGetDebugMessageLogARB: *fp_glGetDebugMessageLogARB =
	null: *fp_glGetDebugMessageLogARB;
export let glGetDetailTexFuncSGIS: *fp_glGetDetailTexFuncSGIS =
	null: *fp_glGetDetailTexFuncSGIS;
export let glGetDoubleIndexedvEXT: *fp_glGetDoubleIndexedvEXT =
	null: *fp_glGetDoubleIndexedvEXT;
export let glGetDoublei_v: *fp_glGetDoublei_v =
	null: *fp_glGetDoublei_v;
export let glGetDoublei_vEXT: *fp_glGetDoublei_vEXT =
	null: *fp_glGetDoublei_vEXT;
export let glGetDoublev: *fp_glGetDoublev =
	null: *fp_glGetDoublev;
export let glGetError: *fp_glGetError =
	null: *fp_glGetError;
export let glGetFenceivNV: *fp_glGetFenceivNV =
	null: *fp_glGetFenceivNV;
export let glGetFinalCombinerInputParameterfvNV: *fp_glGetFinalCombinerInputParameterfvNV =
	null: *fp_glGetFinalCombinerInputParameterfvNV;
export let glGetFinalCombinerInputParameterivNV: *fp_glGetFinalCombinerInputParameterivNV =
	null: *fp_glGetFinalCombinerInputParameterivNV;
export let glGetFirstPerfQueryIdINTEL: *fp_glGetFirstPerfQueryIdINTEL =
	null: *fp_glGetFirstPerfQueryIdINTEL;
export let glGetFixedvOES: *fp_glGetFixedvOES =
	null: *fp_glGetFixedvOES;
export let glGetFloatIndexedvEXT: *fp_glGetFloatIndexedvEXT =
	null: *fp_glGetFloatIndexedvEXT;
export let glGetFloati_v: *fp_glGetFloati_v =
	null: *fp_glGetFloati_v;
export let glGetFloati_vEXT: *fp_glGetFloati_vEXT =
	null: *fp_glGetFloati_vEXT;
export let glGetFloatv: *fp_glGetFloatv =
	null: *fp_glGetFloatv;
export let glGetFogFuncSGIS: *fp_glGetFogFuncSGIS =
	null: *fp_glGetFogFuncSGIS;
export let glGetFragDataIndex: *fp_glGetFragDataIndex =
	null: *fp_glGetFragDataIndex;
export let glGetFragDataLocationEXT: *fp_glGetFragDataLocationEXT =
	null: *fp_glGetFragDataLocationEXT;
export let glGetFragmentLightfvSGIX: *fp_glGetFragmentLightfvSGIX =
	null: *fp_glGetFragmentLightfvSGIX;
export let glGetFragmentLightivSGIX: *fp_glGetFragmentLightivSGIX =
	null: *fp_glGetFragmentLightivSGIX;
export let glGetFragmentMaterialfvSGIX: *fp_glGetFragmentMaterialfvSGIX =
	null: *fp_glGetFragmentMaterialfvSGIX;
export let glGetFragmentMaterialivSGIX: *fp_glGetFragmentMaterialivSGIX =
	null: *fp_glGetFragmentMaterialivSGIX;
export let glGetFramebufferAttachmentParameteriv: *fp_glGetFramebufferAttachmentParameteriv =
	null: *fp_glGetFramebufferAttachmentParameteriv;
export let glGetFramebufferAttachmentParameterivEXT: *fp_glGetFramebufferAttachmentParameterivEXT =
	null: *fp_glGetFramebufferAttachmentParameterivEXT;
export let glGetFramebufferParameterfvAMD: *fp_glGetFramebufferParameterfvAMD =
	null: *fp_glGetFramebufferParameterfvAMD;
export let glGetFramebufferParameteriv: *fp_glGetFramebufferParameteriv =
	null: *fp_glGetFramebufferParameteriv;
export let glGetFramebufferParameterivEXT: *fp_glGetFramebufferParameterivEXT =
	null: *fp_glGetFramebufferParameterivEXT;
export let glGetFramebufferParameterivMESA: *fp_glGetFramebufferParameterivMESA =
	null: *fp_glGetFramebufferParameterivMESA;
export let glGetGraphicsResetStatus: *fp_glGetGraphicsResetStatus =
	null: *fp_glGetGraphicsResetStatus;
export let glGetGraphicsResetStatusARB: *fp_glGetGraphicsResetStatusARB =
	null: *fp_glGetGraphicsResetStatusARB;
export let glGetHandleARB: *fp_glGetHandleARB =
	null: *fp_glGetHandleARB;
export let glGetHistogramEXT: *fp_glGetHistogramEXT =
	null: *fp_glGetHistogramEXT;
export let glGetHistogramParameterfvEXT: *fp_glGetHistogramParameterfvEXT =
	null: *fp_glGetHistogramParameterfvEXT;
export let glGetHistogramParameterivEXT: *fp_glGetHistogramParameterivEXT =
	null: *fp_glGetHistogramParameterivEXT;
export let glGetHistogramParameterxvOES: *fp_glGetHistogramParameterxvOES =
	null: *fp_glGetHistogramParameterxvOES;
export let glGetImageHandleARB: *fp_glGetImageHandleARB =
	null: *fp_glGetImageHandleARB;
export let glGetImageHandleNV: *fp_glGetImageHandleNV =
	null: *fp_glGetImageHandleNV;
export let glGetImageTransformParameterfvHP: *fp_glGetImageTransformParameterfvHP =
	null: *fp_glGetImageTransformParameterfvHP;
export let glGetImageTransformParameterivHP: *fp_glGetImageTransformParameterivHP =
	null: *fp_glGetImageTransformParameterivHP;
export let glGetInfoLogARB: *fp_glGetInfoLogARB =
	null: *fp_glGetInfoLogARB;
export let glGetInstrumentsSGIX: *fp_glGetInstrumentsSGIX =
	null: *fp_glGetInstrumentsSGIX;
export let glGetInteger64v: *fp_glGetInteger64v =
	null: *fp_glGetInteger64v;
export let glGetIntegerIndexedvEXT: *fp_glGetIntegerIndexedvEXT =
	null: *fp_glGetIntegerIndexedvEXT;
export let glGetIntegeri_v: *fp_glGetIntegeri_v =
	null: *fp_glGetIntegeri_v;
export let glGetIntegerui64i_vNV: *fp_glGetIntegerui64i_vNV =
	null: *fp_glGetIntegerui64i_vNV;
export let glGetIntegerui64vNV: *fp_glGetIntegerui64vNV =
	null: *fp_glGetIntegerui64vNV;
export let glGetIntegerv: *fp_glGetIntegerv =
	null: *fp_glGetIntegerv;
export let glGetInternalformatSampleivNV: *fp_glGetInternalformatSampleivNV =
	null: *fp_glGetInternalformatSampleivNV;
export let glGetInternalformati64v: *fp_glGetInternalformati64v =
	null: *fp_glGetInternalformati64v;
export let glGetInternalformativ: *fp_glGetInternalformativ =
	null: *fp_glGetInternalformativ;
export let glGetInvariantBooleanvEXT: *fp_glGetInvariantBooleanvEXT =
	null: *fp_glGetInvariantBooleanvEXT;
export let glGetInvariantFloatvEXT: *fp_glGetInvariantFloatvEXT =
	null: *fp_glGetInvariantFloatvEXT;
export let glGetInvariantIntegervEXT: *fp_glGetInvariantIntegervEXT =
	null: *fp_glGetInvariantIntegervEXT;
export let glGetLightfv: *fp_glGetLightfv =
	null: *fp_glGetLightfv;
export let glGetLightiv: *fp_glGetLightiv =
	null: *fp_glGetLightiv;
export let glGetLightxOES: *fp_glGetLightxOES =
	null: *fp_glGetLightxOES;
export let glGetListParameterfvSGIX: *fp_glGetListParameterfvSGIX =
	null: *fp_glGetListParameterfvSGIX;
export let glGetListParameterivSGIX: *fp_glGetListParameterivSGIX =
	null: *fp_glGetListParameterivSGIX;
export let glGetLocalConstantBooleanvEXT: *fp_glGetLocalConstantBooleanvEXT =
	null: *fp_glGetLocalConstantBooleanvEXT;
export let glGetLocalConstantFloatvEXT: *fp_glGetLocalConstantFloatvEXT =
	null: *fp_glGetLocalConstantFloatvEXT;
export let glGetLocalConstantIntegervEXT: *fp_glGetLocalConstantIntegervEXT =
	null: *fp_glGetLocalConstantIntegervEXT;
export let glGetMapAttribParameterfvNV: *fp_glGetMapAttribParameterfvNV =
	null: *fp_glGetMapAttribParameterfvNV;
export let glGetMapAttribParameterivNV: *fp_glGetMapAttribParameterivNV =
	null: *fp_glGetMapAttribParameterivNV;
export let glGetMapControlPointsNV: *fp_glGetMapControlPointsNV =
	null: *fp_glGetMapControlPointsNV;
export let glGetMapParameterfvNV: *fp_glGetMapParameterfvNV =
	null: *fp_glGetMapParameterfvNV;
export let glGetMapParameterivNV: *fp_glGetMapParameterivNV =
	null: *fp_glGetMapParameterivNV;
export let glGetMapdv: *fp_glGetMapdv =
	null: *fp_glGetMapdv;
export let glGetMapfv: *fp_glGetMapfv =
	null: *fp_glGetMapfv;
export let glGetMapiv: *fp_glGetMapiv =
	null: *fp_glGetMapiv;
export let glGetMapxvOES: *fp_glGetMapxvOES =
	null: *fp_glGetMapxvOES;
export let glGetMaterialfv: *fp_glGetMaterialfv =
	null: *fp_glGetMaterialfv;
export let glGetMaterialiv: *fp_glGetMaterialiv =
	null: *fp_glGetMaterialiv;
export let glGetMaterialxOES: *fp_glGetMaterialxOES =
	null: *fp_glGetMaterialxOES;
export let glGetMemoryObjectDetachedResourcesuivNV: *fp_glGetMemoryObjectDetachedResourcesuivNV =
	null: *fp_glGetMemoryObjectDetachedResourcesuivNV;
export let glGetMemoryObjectParameterivEXT: *fp_glGetMemoryObjectParameterivEXT =
	null: *fp_glGetMemoryObjectParameterivEXT;
export let glGetMinmaxEXT: *fp_glGetMinmaxEXT =
	null: *fp_glGetMinmaxEXT;
export let glGetMinmaxParameterfvEXT: *fp_glGetMinmaxParameterfvEXT =
	null: *fp_glGetMinmaxParameterfvEXT;
export let glGetMinmaxParameterivEXT: *fp_glGetMinmaxParameterivEXT =
	null: *fp_glGetMinmaxParameterivEXT;
export let glGetMultiTexEnvfvEXT: *fp_glGetMultiTexEnvfvEXT =
	null: *fp_glGetMultiTexEnvfvEXT;
export let glGetMultiTexEnvivEXT: *fp_glGetMultiTexEnvivEXT =
	null: *fp_glGetMultiTexEnvivEXT;
export let glGetMultiTexGendvEXT: *fp_glGetMultiTexGendvEXT =
	null: *fp_glGetMultiTexGendvEXT;
export let glGetMultiTexGenfvEXT: *fp_glGetMultiTexGenfvEXT =
	null: *fp_glGetMultiTexGenfvEXT;
export let glGetMultiTexGenivEXT: *fp_glGetMultiTexGenivEXT =
	null: *fp_glGetMultiTexGenivEXT;
export let glGetMultiTexImageEXT: *fp_glGetMultiTexImageEXT =
	null: *fp_glGetMultiTexImageEXT;
export let glGetMultiTexLevelParameterfvEXT: *fp_glGetMultiTexLevelParameterfvEXT =
	null: *fp_glGetMultiTexLevelParameterfvEXT;
export let glGetMultiTexLevelParameterivEXT: *fp_glGetMultiTexLevelParameterivEXT =
	null: *fp_glGetMultiTexLevelParameterivEXT;
export let glGetMultiTexParameterIivEXT: *fp_glGetMultiTexParameterIivEXT =
	null: *fp_glGetMultiTexParameterIivEXT;
export let glGetMultiTexParameterIuivEXT: *fp_glGetMultiTexParameterIuivEXT =
	null: *fp_glGetMultiTexParameterIuivEXT;
export let glGetMultiTexParameterfvEXT: *fp_glGetMultiTexParameterfvEXT =
	null: *fp_glGetMultiTexParameterfvEXT;
export let glGetMultiTexParameterivEXT: *fp_glGetMultiTexParameterivEXT =
	null: *fp_glGetMultiTexParameterivEXT;
export let glGetMultisamplefv: *fp_glGetMultisamplefv =
	null: *fp_glGetMultisamplefv;
export let glGetMultisamplefvNV: *fp_glGetMultisamplefvNV =
	null: *fp_glGetMultisamplefvNV;
export let glGetNamedBufferParameteri64v: *fp_glGetNamedBufferParameteri64v =
	null: *fp_glGetNamedBufferParameteri64v;
export let glGetNamedBufferParameteriv: *fp_glGetNamedBufferParameteriv =
	null: *fp_glGetNamedBufferParameteriv;
export let glGetNamedBufferParameterivEXT: *fp_glGetNamedBufferParameterivEXT =
	null: *fp_glGetNamedBufferParameterivEXT;
export let glGetNamedBufferParameterui64vNV: *fp_glGetNamedBufferParameterui64vNV =
	null: *fp_glGetNamedBufferParameterui64vNV;
export let glGetNamedBufferPointerv: *fp_glGetNamedBufferPointerv =
	null: *fp_glGetNamedBufferPointerv;
export let glGetNamedBufferPointervEXT: *fp_glGetNamedBufferPointervEXT =
	null: *fp_glGetNamedBufferPointervEXT;
export let glGetNamedBufferSubData: *fp_glGetNamedBufferSubData =
	null: *fp_glGetNamedBufferSubData;
export let glGetNamedBufferSubDataEXT: *fp_glGetNamedBufferSubDataEXT =
	null: *fp_glGetNamedBufferSubDataEXT;
export let glGetNamedFramebufferAttachmentParameteriv: *fp_glGetNamedFramebufferAttachmentParameteriv =
	null: *fp_glGetNamedFramebufferAttachmentParameteriv;
export let glGetNamedFramebufferAttachmentParameterivEXT: *fp_glGetNamedFramebufferAttachmentParameterivEXT =
	null: *fp_glGetNamedFramebufferAttachmentParameterivEXT;
export let glGetNamedFramebufferParameterfvAMD: *fp_glGetNamedFramebufferParameterfvAMD =
	null: *fp_glGetNamedFramebufferParameterfvAMD;
export let glGetNamedFramebufferParameteriv: *fp_glGetNamedFramebufferParameteriv =
	null: *fp_glGetNamedFramebufferParameteriv;
export let glGetNamedFramebufferParameterivEXT: *fp_glGetNamedFramebufferParameterivEXT =
	null: *fp_glGetNamedFramebufferParameterivEXT;
export let glGetNamedProgramLocalParameterIivEXT: *fp_glGetNamedProgramLocalParameterIivEXT =
	null: *fp_glGetNamedProgramLocalParameterIivEXT;
export let glGetNamedProgramLocalParameterIuivEXT: *fp_glGetNamedProgramLocalParameterIuivEXT =
	null: *fp_glGetNamedProgramLocalParameterIuivEXT;
export let glGetNamedProgramLocalParameterdvEXT: *fp_glGetNamedProgramLocalParameterdvEXT =
	null: *fp_glGetNamedProgramLocalParameterdvEXT;
export let glGetNamedProgramLocalParameterfvEXT: *fp_glGetNamedProgramLocalParameterfvEXT =
	null: *fp_glGetNamedProgramLocalParameterfvEXT;
export let glGetNamedProgramStringEXT: *fp_glGetNamedProgramStringEXT =
	null: *fp_glGetNamedProgramStringEXT;
export let glGetNamedProgramivEXT: *fp_glGetNamedProgramivEXT =
	null: *fp_glGetNamedProgramivEXT;
export let glGetNamedRenderbufferParameteriv: *fp_glGetNamedRenderbufferParameteriv =
	null: *fp_glGetNamedRenderbufferParameteriv;
export let glGetNamedRenderbufferParameterivEXT: *fp_glGetNamedRenderbufferParameterivEXT =
	null: *fp_glGetNamedRenderbufferParameterivEXT;
export let glGetNamedStringARB: *fp_glGetNamedStringARB =
	null: *fp_glGetNamedStringARB;
export let glGetNamedStringivARB: *fp_glGetNamedStringivARB =
	null: *fp_glGetNamedStringivARB;
export let glGetNextPerfQueryIdINTEL: *fp_glGetNextPerfQueryIdINTEL =
	null: *fp_glGetNextPerfQueryIdINTEL;
export let glGetObjectBufferfvATI: *fp_glGetObjectBufferfvATI =
	null: *fp_glGetObjectBufferfvATI;
export let glGetObjectBufferivATI: *fp_glGetObjectBufferivATI =
	null: *fp_glGetObjectBufferivATI;
export let glGetObjectLabel: *fp_glGetObjectLabel =
	null: *fp_glGetObjectLabel;
export let glGetObjectLabelEXT: *fp_glGetObjectLabelEXT =
	null: *fp_glGetObjectLabelEXT;
export let glGetObjectParameterfvARB: *fp_glGetObjectParameterfvARB =
	null: *fp_glGetObjectParameterfvARB;
export let glGetObjectParameterivAPPLE: *fp_glGetObjectParameterivAPPLE =
	null: *fp_glGetObjectParameterivAPPLE;
export let glGetObjectParameterivARB: *fp_glGetObjectParameterivARB =
	null: *fp_glGetObjectParameterivARB;
export let glGetObjectPtrLabel: *fp_glGetObjectPtrLabel =
	null: *fp_glGetObjectPtrLabel;
export let glGetOcclusionQueryivNV: *fp_glGetOcclusionQueryivNV =
	null: *fp_glGetOcclusionQueryivNV;
export let glGetOcclusionQueryuivNV: *fp_glGetOcclusionQueryuivNV =
	null: *fp_glGetOcclusionQueryuivNV;
export let glGetPathCommandsNV: *fp_glGetPathCommandsNV =
	null: *fp_glGetPathCommandsNV;
export let glGetPathCoordsNV: *fp_glGetPathCoordsNV =
	null: *fp_glGetPathCoordsNV;
export let glGetPathDashArrayNV: *fp_glGetPathDashArrayNV =
	null: *fp_glGetPathDashArrayNV;
export let glGetPathLengthNV: *fp_glGetPathLengthNV =
	null: *fp_glGetPathLengthNV;
export let glGetPathMetricRangeNV: *fp_glGetPathMetricRangeNV =
	null: *fp_glGetPathMetricRangeNV;
export let glGetPathMetricsNV: *fp_glGetPathMetricsNV =
	null: *fp_glGetPathMetricsNV;
export let glGetPathParameterfvNV: *fp_glGetPathParameterfvNV =
	null: *fp_glGetPathParameterfvNV;
export let glGetPathParameterivNV: *fp_glGetPathParameterivNV =
	null: *fp_glGetPathParameterivNV;
export let glGetPathSpacingNV: *fp_glGetPathSpacingNV =
	null: *fp_glGetPathSpacingNV;
export let glGetPerfCounterInfoINTEL: *fp_glGetPerfCounterInfoINTEL =
	null: *fp_glGetPerfCounterInfoINTEL;
export let glGetPerfMonitorCounterDataAMD: *fp_glGetPerfMonitorCounterDataAMD =
	null: *fp_glGetPerfMonitorCounterDataAMD;
export let glGetPerfMonitorCounterInfoAMD: *fp_glGetPerfMonitorCounterInfoAMD =
	null: *fp_glGetPerfMonitorCounterInfoAMD;
export let glGetPerfMonitorCounterStringAMD: *fp_glGetPerfMonitorCounterStringAMD =
	null: *fp_glGetPerfMonitorCounterStringAMD;
export let glGetPerfMonitorCountersAMD: *fp_glGetPerfMonitorCountersAMD =
	null: *fp_glGetPerfMonitorCountersAMD;
export let glGetPerfMonitorGroupStringAMD: *fp_glGetPerfMonitorGroupStringAMD =
	null: *fp_glGetPerfMonitorGroupStringAMD;
export let glGetPerfMonitorGroupsAMD: *fp_glGetPerfMonitorGroupsAMD =
	null: *fp_glGetPerfMonitorGroupsAMD;
export let glGetPerfQueryDataINTEL: *fp_glGetPerfQueryDataINTEL =
	null: *fp_glGetPerfQueryDataINTEL;
export let glGetPerfQueryIdByNameINTEL: *fp_glGetPerfQueryIdByNameINTEL =
	null: *fp_glGetPerfQueryIdByNameINTEL;
export let glGetPerfQueryInfoINTEL: *fp_glGetPerfQueryInfoINTEL =
	null: *fp_glGetPerfQueryInfoINTEL;
export let glGetPixelMapfv: *fp_glGetPixelMapfv =
	null: *fp_glGetPixelMapfv;
export let glGetPixelMapuiv: *fp_glGetPixelMapuiv =
	null: *fp_glGetPixelMapuiv;
export let glGetPixelMapusv: *fp_glGetPixelMapusv =
	null: *fp_glGetPixelMapusv;
export let glGetPixelMapxv: *fp_glGetPixelMapxv =
	null: *fp_glGetPixelMapxv;
export let glGetPixelTexGenParameterfvSGIS: *fp_glGetPixelTexGenParameterfvSGIS =
	null: *fp_glGetPixelTexGenParameterfvSGIS;
export let glGetPixelTexGenParameterivSGIS: *fp_glGetPixelTexGenParameterivSGIS =
	null: *fp_glGetPixelTexGenParameterivSGIS;
export let glGetPixelTransformParameterfvEXT: *fp_glGetPixelTransformParameterfvEXT =
	null: *fp_glGetPixelTransformParameterfvEXT;
export let glGetPixelTransformParameterivEXT: *fp_glGetPixelTransformParameterivEXT =
	null: *fp_glGetPixelTransformParameterivEXT;
export let glGetPointerIndexedvEXT: *fp_glGetPointerIndexedvEXT =
	null: *fp_glGetPointerIndexedvEXT;
export let glGetPointeri_vEXT: *fp_glGetPointeri_vEXT =
	null: *fp_glGetPointeri_vEXT;
export let glGetPointerv: *fp_glGetPointerv =
	null: *fp_glGetPointerv;
export let glGetPointervEXT: *fp_glGetPointervEXT =
	null: *fp_glGetPointervEXT;
export let glGetPolygonStipple: *fp_glGetPolygonStipple =
	null: *fp_glGetPolygonStipple;
export let glGetProgramBinary: *fp_glGetProgramBinary =
	null: *fp_glGetProgramBinary;
export let glGetProgramEnvParameterIivNV: *fp_glGetProgramEnvParameterIivNV =
	null: *fp_glGetProgramEnvParameterIivNV;
export let glGetProgramEnvParameterIuivNV: *fp_glGetProgramEnvParameterIuivNV =
	null: *fp_glGetProgramEnvParameterIuivNV;
export let glGetProgramEnvParameterdvARB: *fp_glGetProgramEnvParameterdvARB =
	null: *fp_glGetProgramEnvParameterdvARB;
export let glGetProgramEnvParameterfvARB: *fp_glGetProgramEnvParameterfvARB =
	null: *fp_glGetProgramEnvParameterfvARB;
export let glGetProgramInfoLog: *fp_glGetProgramInfoLog =
	null: *fp_glGetProgramInfoLog;
export let glGetProgramInterfaceiv: *fp_glGetProgramInterfaceiv =
	null: *fp_glGetProgramInterfaceiv;
export let glGetProgramLocalParameterIivNV: *fp_glGetProgramLocalParameterIivNV =
	null: *fp_glGetProgramLocalParameterIivNV;
export let glGetProgramLocalParameterIuivNV: *fp_glGetProgramLocalParameterIuivNV =
	null: *fp_glGetProgramLocalParameterIuivNV;
export let glGetProgramLocalParameterdvARB: *fp_glGetProgramLocalParameterdvARB =
	null: *fp_glGetProgramLocalParameterdvARB;
export let glGetProgramLocalParameterfvARB: *fp_glGetProgramLocalParameterfvARB =
	null: *fp_glGetProgramLocalParameterfvARB;
export let glGetProgramNamedParameterdvNV: *fp_glGetProgramNamedParameterdvNV =
	null: *fp_glGetProgramNamedParameterdvNV;
export let glGetProgramNamedParameterfvNV: *fp_glGetProgramNamedParameterfvNV =
	null: *fp_glGetProgramNamedParameterfvNV;
export let glGetProgramParameterdvNV: *fp_glGetProgramParameterdvNV =
	null: *fp_glGetProgramParameterdvNV;
export let glGetProgramParameterfvNV: *fp_glGetProgramParameterfvNV =
	null: *fp_glGetProgramParameterfvNV;
export let glGetProgramPipelineInfoLog: *fp_glGetProgramPipelineInfoLog =
	null: *fp_glGetProgramPipelineInfoLog;
export let glGetProgramPipelineiv: *fp_glGetProgramPipelineiv =
	null: *fp_glGetProgramPipelineiv;
export let glGetProgramResourceIndex: *fp_glGetProgramResourceIndex =
	null: *fp_glGetProgramResourceIndex;
export let glGetProgramResourceLocation: *fp_glGetProgramResourceLocation =
	null: *fp_glGetProgramResourceLocation;
export let glGetProgramResourceLocationIndex: *fp_glGetProgramResourceLocationIndex =
	null: *fp_glGetProgramResourceLocationIndex;
export let glGetProgramResourceName: *fp_glGetProgramResourceName =
	null: *fp_glGetProgramResourceName;
export let glGetProgramResourcefvNV: *fp_glGetProgramResourcefvNV =
	null: *fp_glGetProgramResourcefvNV;
export let glGetProgramResourceiv: *fp_glGetProgramResourceiv =
	null: *fp_glGetProgramResourceiv;
export let glGetProgramStageiv: *fp_glGetProgramStageiv =
	null: *fp_glGetProgramStageiv;
export let glGetProgramStringARB: *fp_glGetProgramStringARB =
	null: *fp_glGetProgramStringARB;
export let glGetProgramStringNV: *fp_glGetProgramStringNV =
	null: *fp_glGetProgramStringNV;
export let glGetProgramSubroutineParameteruivNV: *fp_glGetProgramSubroutineParameteruivNV =
	null: *fp_glGetProgramSubroutineParameteruivNV;
export let glGetProgramiv: *fp_glGetProgramiv =
	null: *fp_glGetProgramiv;
export let glGetProgramivARB: *fp_glGetProgramivARB =
	null: *fp_glGetProgramivARB;
export let glGetProgramivNV: *fp_glGetProgramivNV =
	null: *fp_glGetProgramivNV;
export let glGetQueryBufferObjecti64v: *fp_glGetQueryBufferObjecti64v =
	null: *fp_glGetQueryBufferObjecti64v;
export let glGetQueryBufferObjectiv: *fp_glGetQueryBufferObjectiv =
	null: *fp_glGetQueryBufferObjectiv;
export let glGetQueryBufferObjectui64v: *fp_glGetQueryBufferObjectui64v =
	null: *fp_glGetQueryBufferObjectui64v;
export let glGetQueryBufferObjectuiv: *fp_glGetQueryBufferObjectuiv =
	null: *fp_glGetQueryBufferObjectuiv;
export let glGetQueryIndexediv: *fp_glGetQueryIndexediv =
	null: *fp_glGetQueryIndexediv;
export let glGetQueryObjecti64v: *fp_glGetQueryObjecti64v =
	null: *fp_glGetQueryObjecti64v;
export let glGetQueryObjecti64vEXT: *fp_glGetQueryObjecti64vEXT =
	null: *fp_glGetQueryObjecti64vEXT;
export let glGetQueryObjectiv: *fp_glGetQueryObjectiv =
	null: *fp_glGetQueryObjectiv;
export let glGetQueryObjectivARB: *fp_glGetQueryObjectivARB =
	null: *fp_glGetQueryObjectivARB;
export let glGetQueryObjectui64v: *fp_glGetQueryObjectui64v =
	null: *fp_glGetQueryObjectui64v;
export let glGetQueryObjectui64vEXT: *fp_glGetQueryObjectui64vEXT =
	null: *fp_glGetQueryObjectui64vEXT;
export let glGetQueryObjectuiv: *fp_glGetQueryObjectuiv =
	null: *fp_glGetQueryObjectuiv;
export let glGetQueryObjectuivARB: *fp_glGetQueryObjectuivARB =
	null: *fp_glGetQueryObjectuivARB;
export let glGetQueryiv: *fp_glGetQueryiv =
	null: *fp_glGetQueryiv;
export let glGetQueryivARB: *fp_glGetQueryivARB =
	null: *fp_glGetQueryivARB;
export let glGetRenderbufferParameteriv: *fp_glGetRenderbufferParameteriv =
	null: *fp_glGetRenderbufferParameteriv;
export let glGetRenderbufferParameterivEXT: *fp_glGetRenderbufferParameterivEXT =
	null: *fp_glGetRenderbufferParameterivEXT;
export let glGetSamplerParameterIiv: *fp_glGetSamplerParameterIiv =
	null: *fp_glGetSamplerParameterIiv;
export let glGetSamplerParameterIuiv: *fp_glGetSamplerParameterIuiv =
	null: *fp_glGetSamplerParameterIuiv;
export let glGetSamplerParameterfv: *fp_glGetSamplerParameterfv =
	null: *fp_glGetSamplerParameterfv;
export let glGetSamplerParameteriv: *fp_glGetSamplerParameteriv =
	null: *fp_glGetSamplerParameteriv;
export let glGetSemaphoreParameterivNV: *fp_glGetSemaphoreParameterivNV =
	null: *fp_glGetSemaphoreParameterivNV;
export let glGetSemaphoreParameterui64vEXT: *fp_glGetSemaphoreParameterui64vEXT =
	null: *fp_glGetSemaphoreParameterui64vEXT;
export let glGetSeparableFilterEXT: *fp_glGetSeparableFilterEXT =
	null: *fp_glGetSeparableFilterEXT;
export let glGetShaderInfoLog: *fp_glGetShaderInfoLog =
	null: *fp_glGetShaderInfoLog;
export let glGetShaderPrecisionFormat: *fp_glGetShaderPrecisionFormat =
	null: *fp_glGetShaderPrecisionFormat;
export let glGetShaderSource: *fp_glGetShaderSource =
	null: *fp_glGetShaderSource;
export let glGetShaderSourceARB: *fp_glGetShaderSourceARB =
	null: *fp_glGetShaderSourceARB;
export let glGetShaderiv: *fp_glGetShaderiv =
	null: *fp_glGetShaderiv;
export let glGetShadingRateImagePaletteNV: *fp_glGetShadingRateImagePaletteNV =
	null: *fp_glGetShadingRateImagePaletteNV;
export let glGetShadingRateSampleLocationivNV: *fp_glGetShadingRateSampleLocationivNV =
	null: *fp_glGetShadingRateSampleLocationivNV;
export let glGetSharpenTexFuncSGIS: *fp_glGetSharpenTexFuncSGIS =
	null: *fp_glGetSharpenTexFuncSGIS;
export let glGetStageIndexNV: *fp_glGetStageIndexNV =
	null: *fp_glGetStageIndexNV;
export let glGetString: *fp_glGetString =
	null: *fp_glGetString;
export let glGetSubroutineIndex: *fp_glGetSubroutineIndex =
	null: *fp_glGetSubroutineIndex;
export let glGetSubroutineUniformLocation: *fp_glGetSubroutineUniformLocation =
	null: *fp_glGetSubroutineUniformLocation;
export let glGetSynciv: *fp_glGetSynciv =
	null: *fp_glGetSynciv;
export let glGetTexBumpParameterfvATI: *fp_glGetTexBumpParameterfvATI =
	null: *fp_glGetTexBumpParameterfvATI;
export let glGetTexBumpParameterivATI: *fp_glGetTexBumpParameterivATI =
	null: *fp_glGetTexBumpParameterivATI;
export let glGetTexEnvfv: *fp_glGetTexEnvfv =
	null: *fp_glGetTexEnvfv;
export let glGetTexEnviv: *fp_glGetTexEnviv =
	null: *fp_glGetTexEnviv;
export let glGetTexEnvxvOES: *fp_glGetTexEnvxvOES =
	null: *fp_glGetTexEnvxvOES;
export let glGetTexFilterFuncSGIS: *fp_glGetTexFilterFuncSGIS =
	null: *fp_glGetTexFilterFuncSGIS;
export let glGetTexGendv: *fp_glGetTexGendv =
	null: *fp_glGetTexGendv;
export let glGetTexGenfv: *fp_glGetTexGenfv =
	null: *fp_glGetTexGenfv;
export let glGetTexGeniv: *fp_glGetTexGeniv =
	null: *fp_glGetTexGeniv;
export let glGetTexGenxvOES: *fp_glGetTexGenxvOES =
	null: *fp_glGetTexGenxvOES;
export let glGetTexImage: *fp_glGetTexImage =
	null: *fp_glGetTexImage;
export let glGetTexLevelParameterfv: *fp_glGetTexLevelParameterfv =
	null: *fp_glGetTexLevelParameterfv;
export let glGetTexLevelParameteriv: *fp_glGetTexLevelParameteriv =
	null: *fp_glGetTexLevelParameteriv;
export let glGetTexLevelParameterxvOES: *fp_glGetTexLevelParameterxvOES =
	null: *fp_glGetTexLevelParameterxvOES;
export let glGetTexParameterIivEXT: *fp_glGetTexParameterIivEXT =
	null: *fp_glGetTexParameterIivEXT;
export let glGetTexParameterIuivEXT: *fp_glGetTexParameterIuivEXT =
	null: *fp_glGetTexParameterIuivEXT;
export let glGetTexParameterPointervAPPLE: *fp_glGetTexParameterPointervAPPLE =
	null: *fp_glGetTexParameterPointervAPPLE;
export let glGetTexParameterfv: *fp_glGetTexParameterfv =
	null: *fp_glGetTexParameterfv;
export let glGetTexParameteriv: *fp_glGetTexParameteriv =
	null: *fp_glGetTexParameteriv;
export let glGetTexParameterxvOES: *fp_glGetTexParameterxvOES =
	null: *fp_glGetTexParameterxvOES;
export let glGetTextureHandleARB: *fp_glGetTextureHandleARB =
	null: *fp_glGetTextureHandleARB;
export let glGetTextureHandleNV: *fp_glGetTextureHandleNV =
	null: *fp_glGetTextureHandleNV;
export let glGetTextureImage: *fp_glGetTextureImage =
	null: *fp_glGetTextureImage;
export let glGetTextureImageEXT: *fp_glGetTextureImageEXT =
	null: *fp_glGetTextureImageEXT;
export let glGetTextureLevelParameterfv: *fp_glGetTextureLevelParameterfv =
	null: *fp_glGetTextureLevelParameterfv;
export let glGetTextureLevelParameterfvEXT: *fp_glGetTextureLevelParameterfvEXT =
	null: *fp_glGetTextureLevelParameterfvEXT;
export let glGetTextureLevelParameteriv: *fp_glGetTextureLevelParameteriv =
	null: *fp_glGetTextureLevelParameteriv;
export let glGetTextureLevelParameterivEXT: *fp_glGetTextureLevelParameterivEXT =
	null: *fp_glGetTextureLevelParameterivEXT;
export let glGetTextureParameterIiv: *fp_glGetTextureParameterIiv =
	null: *fp_glGetTextureParameterIiv;
export let glGetTextureParameterIivEXT: *fp_glGetTextureParameterIivEXT =
	null: *fp_glGetTextureParameterIivEXT;
export let glGetTextureParameterIuiv: *fp_glGetTextureParameterIuiv =
	null: *fp_glGetTextureParameterIuiv;
export let glGetTextureParameterIuivEXT: *fp_glGetTextureParameterIuivEXT =
	null: *fp_glGetTextureParameterIuivEXT;
export let glGetTextureParameterfv: *fp_glGetTextureParameterfv =
	null: *fp_glGetTextureParameterfv;
export let glGetTextureParameterfvEXT: *fp_glGetTextureParameterfvEXT =
	null: *fp_glGetTextureParameterfvEXT;
export let glGetTextureParameteriv: *fp_glGetTextureParameteriv =
	null: *fp_glGetTextureParameteriv;
export let glGetTextureParameterivEXT: *fp_glGetTextureParameterivEXT =
	null: *fp_glGetTextureParameterivEXT;
export let glGetTextureSamplerHandleARB: *fp_glGetTextureSamplerHandleARB =
	null: *fp_glGetTextureSamplerHandleARB;
export let glGetTextureSamplerHandleNV: *fp_glGetTextureSamplerHandleNV =
	null: *fp_glGetTextureSamplerHandleNV;
export let glGetTextureSubImage: *fp_glGetTextureSubImage =
	null: *fp_glGetTextureSubImage;
export let glGetTrackMatrixivNV: *fp_glGetTrackMatrixivNV =
	null: *fp_glGetTrackMatrixivNV;
export let glGetTransformFeedbackVaryingEXT: *fp_glGetTransformFeedbackVaryingEXT =
	null: *fp_glGetTransformFeedbackVaryingEXT;
export let glGetTransformFeedbackVaryingNV: *fp_glGetTransformFeedbackVaryingNV =
	null: *fp_glGetTransformFeedbackVaryingNV;
export let glGetTransformFeedbacki64_v: *fp_glGetTransformFeedbacki64_v =
	null: *fp_glGetTransformFeedbacki64_v;
export let glGetTransformFeedbacki_v: *fp_glGetTransformFeedbacki_v =
	null: *fp_glGetTransformFeedbacki_v;
export let glGetTransformFeedbackiv: *fp_glGetTransformFeedbackiv =
	null: *fp_glGetTransformFeedbackiv;
export let glGetUniformBlockIndex: *fp_glGetUniformBlockIndex =
	null: *fp_glGetUniformBlockIndex;
export let glGetUniformBufferSizeEXT: *fp_glGetUniformBufferSizeEXT =
	null: *fp_glGetUniformBufferSizeEXT;
export let glGetUniformIndices: *fp_glGetUniformIndices =
	null: *fp_glGetUniformIndices;
export let glGetUniformLocation: *fp_glGetUniformLocation =
	null: *fp_glGetUniformLocation;
export let glGetUniformLocationARB: *fp_glGetUniformLocationARB =
	null: *fp_glGetUniformLocationARB;
export let glGetUniformOffsetEXT: *fp_glGetUniformOffsetEXT =
	null: *fp_glGetUniformOffsetEXT;
export let glGetUniformSubroutineuiv: *fp_glGetUniformSubroutineuiv =
	null: *fp_glGetUniformSubroutineuiv;
export let glGetUniformdv: *fp_glGetUniformdv =
	null: *fp_glGetUniformdv;
export let glGetUniformfv: *fp_glGetUniformfv =
	null: *fp_glGetUniformfv;
export let glGetUniformfvARB: *fp_glGetUniformfvARB =
	null: *fp_glGetUniformfvARB;
export let glGetUniformi64vARB: *fp_glGetUniformi64vARB =
	null: *fp_glGetUniformi64vARB;
export let glGetUniformi64vNV: *fp_glGetUniformi64vNV =
	null: *fp_glGetUniformi64vNV;
export let glGetUniformiv: *fp_glGetUniformiv =
	null: *fp_glGetUniformiv;
export let glGetUniformivARB: *fp_glGetUniformivARB =
	null: *fp_glGetUniformivARB;
export let glGetUniformui64vARB: *fp_glGetUniformui64vARB =
	null: *fp_glGetUniformui64vARB;
export let glGetUniformui64vNV: *fp_glGetUniformui64vNV =
	null: *fp_glGetUniformui64vNV;
export let glGetUniformuivEXT: *fp_glGetUniformuivEXT =
	null: *fp_glGetUniformuivEXT;
export let glGetUnsignedBytei_vEXT: *fp_glGetUnsignedBytei_vEXT =
	null: *fp_glGetUnsignedBytei_vEXT;
export let glGetUnsignedBytevEXT: *fp_glGetUnsignedBytevEXT =
	null: *fp_glGetUnsignedBytevEXT;
export let glGetVariantArrayObjectfvATI: *fp_glGetVariantArrayObjectfvATI =
	null: *fp_glGetVariantArrayObjectfvATI;
export let glGetVariantArrayObjectivATI: *fp_glGetVariantArrayObjectivATI =
	null: *fp_glGetVariantArrayObjectivATI;
export let glGetVariantBooleanvEXT: *fp_glGetVariantBooleanvEXT =
	null: *fp_glGetVariantBooleanvEXT;
export let glGetVariantFloatvEXT: *fp_glGetVariantFloatvEXT =
	null: *fp_glGetVariantFloatvEXT;
export let glGetVariantIntegervEXT: *fp_glGetVariantIntegervEXT =
	null: *fp_glGetVariantIntegervEXT;
export let glGetVariantPointervEXT: *fp_glGetVariantPointervEXT =
	null: *fp_glGetVariantPointervEXT;
export let glGetVaryingLocationNV: *fp_glGetVaryingLocationNV =
	null: *fp_glGetVaryingLocationNV;
export let glGetVertexArrayIndexed64iv: *fp_glGetVertexArrayIndexed64iv =
	null: *fp_glGetVertexArrayIndexed64iv;
export let glGetVertexArrayIndexediv: *fp_glGetVertexArrayIndexediv =
	null: *fp_glGetVertexArrayIndexediv;
export let glGetVertexArrayIntegeri_vEXT: *fp_glGetVertexArrayIntegeri_vEXT =
	null: *fp_glGetVertexArrayIntegeri_vEXT;
export let glGetVertexArrayIntegervEXT: *fp_glGetVertexArrayIntegervEXT =
	null: *fp_glGetVertexArrayIntegervEXT;
export let glGetVertexArrayPointeri_vEXT: *fp_glGetVertexArrayPointeri_vEXT =
	null: *fp_glGetVertexArrayPointeri_vEXT;
export let glGetVertexArrayPointervEXT: *fp_glGetVertexArrayPointervEXT =
	null: *fp_glGetVertexArrayPointervEXT;
export let glGetVertexArrayiv: *fp_glGetVertexArrayiv =
	null: *fp_glGetVertexArrayiv;
export let glGetVertexAttribArrayObjectfvATI: *fp_glGetVertexAttribArrayObjectfvATI =
	null: *fp_glGetVertexAttribArrayObjectfvATI;
export let glGetVertexAttribArrayObjectivATI: *fp_glGetVertexAttribArrayObjectivATI =
	null: *fp_glGetVertexAttribArrayObjectivATI;
export let glGetVertexAttribIivEXT: *fp_glGetVertexAttribIivEXT =
	null: *fp_glGetVertexAttribIivEXT;
export let glGetVertexAttribIuivEXT: *fp_glGetVertexAttribIuivEXT =
	null: *fp_glGetVertexAttribIuivEXT;
export let glGetVertexAttribLdv: *fp_glGetVertexAttribLdv =
	null: *fp_glGetVertexAttribLdv;
export let glGetVertexAttribLdvEXT: *fp_glGetVertexAttribLdvEXT =
	null: *fp_glGetVertexAttribLdvEXT;
export let glGetVertexAttribLi64vNV: *fp_glGetVertexAttribLi64vNV =
	null: *fp_glGetVertexAttribLi64vNV;
export let glGetVertexAttribLui64vARB: *fp_glGetVertexAttribLui64vARB =
	null: *fp_glGetVertexAttribLui64vARB;
export let glGetVertexAttribLui64vNV: *fp_glGetVertexAttribLui64vNV =
	null: *fp_glGetVertexAttribLui64vNV;
export let glGetVertexAttribPointerv: *fp_glGetVertexAttribPointerv =
	null: *fp_glGetVertexAttribPointerv;
export let glGetVertexAttribPointervARB: *fp_glGetVertexAttribPointervARB =
	null: *fp_glGetVertexAttribPointervARB;
export let glGetVertexAttribPointervNV: *fp_glGetVertexAttribPointervNV =
	null: *fp_glGetVertexAttribPointervNV;
export let glGetVertexAttribdv: *fp_glGetVertexAttribdv =
	null: *fp_glGetVertexAttribdv;
export let glGetVertexAttribdvARB: *fp_glGetVertexAttribdvARB =
	null: *fp_glGetVertexAttribdvARB;
export let glGetVertexAttribdvNV: *fp_glGetVertexAttribdvNV =
	null: *fp_glGetVertexAttribdvNV;
export let glGetVertexAttribfv: *fp_glGetVertexAttribfv =
	null: *fp_glGetVertexAttribfv;
export let glGetVertexAttribfvARB: *fp_glGetVertexAttribfvARB =
	null: *fp_glGetVertexAttribfvARB;
export let glGetVertexAttribfvNV: *fp_glGetVertexAttribfvNV =
	null: *fp_glGetVertexAttribfvNV;
export let glGetVertexAttribiv: *fp_glGetVertexAttribiv =
	null: *fp_glGetVertexAttribiv;
export let glGetVertexAttribivARB: *fp_glGetVertexAttribivARB =
	null: *fp_glGetVertexAttribivARB;
export let glGetVertexAttribivNV: *fp_glGetVertexAttribivNV =
	null: *fp_glGetVertexAttribivNV;
export let glGetVideoCaptureStreamdvNV: *fp_glGetVideoCaptureStreamdvNV =
	null: *fp_glGetVideoCaptureStreamdvNV;
export let glGetVideoCaptureStreamfvNV: *fp_glGetVideoCaptureStreamfvNV =
	null: *fp_glGetVideoCaptureStreamfvNV;
export let glGetVideoCaptureStreamivNV: *fp_glGetVideoCaptureStreamivNV =
	null: *fp_glGetVideoCaptureStreamivNV;
export let glGetVideoCaptureivNV: *fp_glGetVideoCaptureivNV =
	null: *fp_glGetVideoCaptureivNV;
export let glGetVideoi64vNV: *fp_glGetVideoi64vNV =
	null: *fp_glGetVideoi64vNV;
export let glGetVideoivNV: *fp_glGetVideoivNV =
	null: *fp_glGetVideoivNV;
export let glGetVideoui64vNV: *fp_glGetVideoui64vNV =
	null: *fp_glGetVideoui64vNV;
export let glGetVideouivNV: *fp_glGetVideouivNV =
	null: *fp_glGetVideouivNV;
export let glGetVkProcAddrNV: *fp_glGetVkProcAddrNV =
	null: *fp_glGetVkProcAddrNV;
export let glGetnCompressedTexImageARB: *fp_glGetnCompressedTexImageARB =
	null: *fp_glGetnCompressedTexImageARB;
export let glGetnTexImageARB: *fp_glGetnTexImageARB =
	null: *fp_glGetnTexImageARB;
export let glGetnUniformdvARB: *fp_glGetnUniformdvARB =
	null: *fp_glGetnUniformdvARB;
export let glGetnUniformfv: *fp_glGetnUniformfv =
	null: *fp_glGetnUniformfv;
export let glGetnUniformfvARB: *fp_glGetnUniformfvARB =
	null: *fp_glGetnUniformfvARB;
export let glGetnUniformi64vARB: *fp_glGetnUniformi64vARB =
	null: *fp_glGetnUniformi64vARB;
export let glGetnUniformiv: *fp_glGetnUniformiv =
	null: *fp_glGetnUniformiv;
export let glGetnUniformivARB: *fp_glGetnUniformivARB =
	null: *fp_glGetnUniformivARB;
export let glGetnUniformui64vARB: *fp_glGetnUniformui64vARB =
	null: *fp_glGetnUniformui64vARB;
export let glGetnUniformuiv: *fp_glGetnUniformuiv =
	null: *fp_glGetnUniformuiv;
export let glGetnUniformuivARB: *fp_glGetnUniformuivARB =
	null: *fp_glGetnUniformuivARB;
export let glGlobalAlphaFactorbSUN: *fp_glGlobalAlphaFactorbSUN =
	null: *fp_glGlobalAlphaFactorbSUN;
export let glGlobalAlphaFactordSUN: *fp_glGlobalAlphaFactordSUN =
	null: *fp_glGlobalAlphaFactordSUN;
export let glGlobalAlphaFactorfSUN: *fp_glGlobalAlphaFactorfSUN =
	null: *fp_glGlobalAlphaFactorfSUN;
export let glGlobalAlphaFactoriSUN: *fp_glGlobalAlphaFactoriSUN =
	null: *fp_glGlobalAlphaFactoriSUN;
export let glGlobalAlphaFactorsSUN: *fp_glGlobalAlphaFactorsSUN =
	null: *fp_glGlobalAlphaFactorsSUN;
export let glGlobalAlphaFactorubSUN: *fp_glGlobalAlphaFactorubSUN =
	null: *fp_glGlobalAlphaFactorubSUN;
export let glGlobalAlphaFactoruiSUN: *fp_glGlobalAlphaFactoruiSUN =
	null: *fp_glGlobalAlphaFactoruiSUN;
export let glGlobalAlphaFactorusSUN: *fp_glGlobalAlphaFactorusSUN =
	null: *fp_glGlobalAlphaFactorusSUN;
export let glHint: *fp_glHint =
	null: *fp_glHint;
export let glHintPGI: *fp_glHintPGI =
	null: *fp_glHintPGI;
export let glHistogramEXT: *fp_glHistogramEXT =
	null: *fp_glHistogramEXT;
export let glIglooInterfaceSGIX: *fp_glIglooInterfaceSGIX =
	null: *fp_glIglooInterfaceSGIX;
export let glImageTransformParameterfHP: *fp_glImageTransformParameterfHP =
	null: *fp_glImageTransformParameterfHP;
export let glImageTransformParameterfvHP: *fp_glImageTransformParameterfvHP =
	null: *fp_glImageTransformParameterfvHP;
export let glImageTransformParameteriHP: *fp_glImageTransformParameteriHP =
	null: *fp_glImageTransformParameteriHP;
export let glImageTransformParameterivHP: *fp_glImageTransformParameterivHP =
	null: *fp_glImageTransformParameterivHP;
export let glImportMemoryFdEXT: *fp_glImportMemoryFdEXT =
	null: *fp_glImportMemoryFdEXT;
export let glImportMemoryWin32HandleEXT: *fp_glImportMemoryWin32HandleEXT =
	null: *fp_glImportMemoryWin32HandleEXT;
export let glImportMemoryWin32NameEXT: *fp_glImportMemoryWin32NameEXT =
	null: *fp_glImportMemoryWin32NameEXT;
export let glImportSemaphoreFdEXT: *fp_glImportSemaphoreFdEXT =
	null: *fp_glImportSemaphoreFdEXT;
export let glImportSemaphoreWin32HandleEXT: *fp_glImportSemaphoreWin32HandleEXT =
	null: *fp_glImportSemaphoreWin32HandleEXT;
export let glImportSemaphoreWin32NameEXT: *fp_glImportSemaphoreWin32NameEXT =
	null: *fp_glImportSemaphoreWin32NameEXT;
export let glImportSyncEXT: *fp_glImportSyncEXT =
	null: *fp_glImportSyncEXT;
export let glIndexFormatNV: *fp_glIndexFormatNV =
	null: *fp_glIndexFormatNV;
export let glIndexFuncEXT: *fp_glIndexFuncEXT =
	null: *fp_glIndexFuncEXT;
export let glIndexMask: *fp_glIndexMask =
	null: *fp_glIndexMask;
export let glIndexMaterialEXT: *fp_glIndexMaterialEXT =
	null: *fp_glIndexMaterialEXT;
export let glIndexPointer: *fp_glIndexPointer =
	null: *fp_glIndexPointer;
export let glIndexPointerEXT: *fp_glIndexPointerEXT =
	null: *fp_glIndexPointerEXT;
export let glIndexPointerListIBM: *fp_glIndexPointerListIBM =
	null: *fp_glIndexPointerListIBM;
export let glIndexd: *fp_glIndexd =
	null: *fp_glIndexd;
export let glIndexdv: *fp_glIndexdv =
	null: *fp_glIndexdv;
export let glIndexf: *fp_glIndexf =
	null: *fp_glIndexf;
export let glIndexfv: *fp_glIndexfv =
	null: *fp_glIndexfv;
export let glIndexi: *fp_glIndexi =
	null: *fp_glIndexi;
export let glIndexiv: *fp_glIndexiv =
	null: *fp_glIndexiv;
export let glIndexs: *fp_glIndexs =
	null: *fp_glIndexs;
export let glIndexsv: *fp_glIndexsv =
	null: *fp_glIndexsv;
export let glIndexub: *fp_glIndexub =
	null: *fp_glIndexub;
export let glIndexubv: *fp_glIndexubv =
	null: *fp_glIndexubv;
export let glIndexxOES: *fp_glIndexxOES =
	null: *fp_glIndexxOES;
export let glIndexxvOES: *fp_glIndexxvOES =
	null: *fp_glIndexxvOES;
export let glInitNames: *fp_glInitNames =
	null: *fp_glInitNames;
export let glInsertComponentEXT: *fp_glInsertComponentEXT =
	null: *fp_glInsertComponentEXT;
export let glInsertEventMarkerEXT: *fp_glInsertEventMarkerEXT =
	null: *fp_glInsertEventMarkerEXT;
export let glInstrumentsBufferSGIX: *fp_glInstrumentsBufferSGIX =
	null: *fp_glInstrumentsBufferSGIX;
export let glInterleavedArrays: *fp_glInterleavedArrays =
	null: *fp_glInterleavedArrays;
export let glInterpolatePathsNV: *fp_glInterpolatePathsNV =
	null: *fp_glInterpolatePathsNV;
export let glInvalidateBufferData: *fp_glInvalidateBufferData =
	null: *fp_glInvalidateBufferData;
export let glInvalidateBufferSubData: *fp_glInvalidateBufferSubData =
	null: *fp_glInvalidateBufferSubData;
export let glInvalidateFramebuffer: *fp_glInvalidateFramebuffer =
	null: *fp_glInvalidateFramebuffer;
export let glInvalidateNamedFramebufferData: *fp_glInvalidateNamedFramebufferData =
	null: *fp_glInvalidateNamedFramebufferData;
export let glInvalidateNamedFramebufferSubData: *fp_glInvalidateNamedFramebufferSubData =
	null: *fp_glInvalidateNamedFramebufferSubData;
export let glInvalidateSubFramebuffer: *fp_glInvalidateSubFramebuffer =
	null: *fp_glInvalidateSubFramebuffer;
export let glInvalidateTexImage: *fp_glInvalidateTexImage =
	null: *fp_glInvalidateTexImage;
export let glInvalidateTexSubImage: *fp_glInvalidateTexSubImage =
	null: *fp_glInvalidateTexSubImage;
export let glIsAsyncMarkerSGIX: *fp_glIsAsyncMarkerSGIX =
	null: *fp_glIsAsyncMarkerSGIX;
export let glIsBuffer: *fp_glIsBuffer =
	null: *fp_glIsBuffer;
export let glIsBufferARB: *fp_glIsBufferARB =
	null: *fp_glIsBufferARB;
export let glIsBufferResidentNV: *fp_glIsBufferResidentNV =
	null: *fp_glIsBufferResidentNV;
export let glIsCommandListNV: *fp_glIsCommandListNV =
	null: *fp_glIsCommandListNV;
export let glIsEnabled: *fp_glIsEnabled =
	null: *fp_glIsEnabled;
export let glIsEnabledIndexedEXT: *fp_glIsEnabledIndexedEXT =
	null: *fp_glIsEnabledIndexedEXT;
export let glIsFenceAPPLE: *fp_glIsFenceAPPLE =
	null: *fp_glIsFenceAPPLE;
export let glIsFenceNV: *fp_glIsFenceNV =
	null: *fp_glIsFenceNV;
export let glIsFramebuffer: *fp_glIsFramebuffer =
	null: *fp_glIsFramebuffer;
export let glIsFramebufferEXT: *fp_glIsFramebufferEXT =
	null: *fp_glIsFramebufferEXT;
export let glIsImageHandleResidentARB: *fp_glIsImageHandleResidentARB =
	null: *fp_glIsImageHandleResidentARB;
export let glIsImageHandleResidentNV: *fp_glIsImageHandleResidentNV =
	null: *fp_glIsImageHandleResidentNV;
export let glIsList: *fp_glIsList =
	null: *fp_glIsList;
export let glIsMemoryObjectEXT: *fp_glIsMemoryObjectEXT =
	null: *fp_glIsMemoryObjectEXT;
export let glIsNameAMD: *fp_glIsNameAMD =
	null: *fp_glIsNameAMD;
export let glIsNamedBufferResidentNV: *fp_glIsNamedBufferResidentNV =
	null: *fp_glIsNamedBufferResidentNV;
export let glIsNamedStringARB: *fp_glIsNamedStringARB =
	null: *fp_glIsNamedStringARB;
export let glIsObjectBufferATI: *fp_glIsObjectBufferATI =
	null: *fp_glIsObjectBufferATI;
export let glIsOcclusionQueryNV: *fp_glIsOcclusionQueryNV =
	null: *fp_glIsOcclusionQueryNV;
export let glIsPathNV: *fp_glIsPathNV =
	null: *fp_glIsPathNV;
export let glIsPointInFillPathNV: *fp_glIsPointInFillPathNV =
	null: *fp_glIsPointInFillPathNV;
export let glIsPointInStrokePathNV: *fp_glIsPointInStrokePathNV =
	null: *fp_glIsPointInStrokePathNV;
export let glIsProgram: *fp_glIsProgram =
	null: *fp_glIsProgram;
export let glIsProgramARB: *fp_glIsProgramARB =
	null: *fp_glIsProgramARB;
export let glIsProgramNV: *fp_glIsProgramNV =
	null: *fp_glIsProgramNV;
export let glIsProgramPipeline: *fp_glIsProgramPipeline =
	null: *fp_glIsProgramPipeline;
export let glIsQuery: *fp_glIsQuery =
	null: *fp_glIsQuery;
export let glIsQueryARB: *fp_glIsQueryARB =
	null: *fp_glIsQueryARB;
export let glIsRenderbuffer: *fp_glIsRenderbuffer =
	null: *fp_glIsRenderbuffer;
export let glIsRenderbufferEXT: *fp_glIsRenderbufferEXT =
	null: *fp_glIsRenderbufferEXT;
export let glIsSampler: *fp_glIsSampler =
	null: *fp_glIsSampler;
export let glIsSemaphoreEXT: *fp_glIsSemaphoreEXT =
	null: *fp_glIsSemaphoreEXT;
export let glIsShader: *fp_glIsShader =
	null: *fp_glIsShader;
export let glIsStateNV: *fp_glIsStateNV =
	null: *fp_glIsStateNV;
export let glIsSync: *fp_glIsSync =
	null: *fp_glIsSync;
export let glIsTexture: *fp_glIsTexture =
	null: *fp_glIsTexture;
export let glIsTextureEXT: *fp_glIsTextureEXT =
	null: *fp_glIsTextureEXT;
export let glIsTextureHandleResidentARB: *fp_glIsTextureHandleResidentARB =
	null: *fp_glIsTextureHandleResidentARB;
export let glIsTextureHandleResidentNV: *fp_glIsTextureHandleResidentNV =
	null: *fp_glIsTextureHandleResidentNV;
export let glIsTransformFeedback: *fp_glIsTransformFeedback =
	null: *fp_glIsTransformFeedback;
export let glIsTransformFeedbackNV: *fp_glIsTransformFeedbackNV =
	null: *fp_glIsTransformFeedbackNV;
export let glIsVariantEnabledEXT: *fp_glIsVariantEnabledEXT =
	null: *fp_glIsVariantEnabledEXT;
export let glIsVertexArray: *fp_glIsVertexArray =
	null: *fp_glIsVertexArray;
export let glIsVertexArrayAPPLE: *fp_glIsVertexArrayAPPLE =
	null: *fp_glIsVertexArrayAPPLE;
export let glIsVertexAttribEnabledAPPLE: *fp_glIsVertexAttribEnabledAPPLE =
	null: *fp_glIsVertexAttribEnabledAPPLE;
export let glLGPUCopyImageSubDataNVX: *fp_glLGPUCopyImageSubDataNVX =
	null: *fp_glLGPUCopyImageSubDataNVX;
export let glLGPUInterlockNVX: *fp_glLGPUInterlockNVX =
	null: *fp_glLGPUInterlockNVX;
export let glLGPUNamedBufferSubDataNVX: *fp_glLGPUNamedBufferSubDataNVX =
	null: *fp_glLGPUNamedBufferSubDataNVX;
export let glLabelObjectEXT: *fp_glLabelObjectEXT =
	null: *fp_glLabelObjectEXT;
export let glLightEnviSGIX: *fp_glLightEnviSGIX =
	null: *fp_glLightEnviSGIX;
export let glLightModelf: *fp_glLightModelf =
	null: *fp_glLightModelf;
export let glLightModelfv: *fp_glLightModelfv =
	null: *fp_glLightModelfv;
export let glLightModeli: *fp_glLightModeli =
	null: *fp_glLightModeli;
export let glLightModeliv: *fp_glLightModeliv =
	null: *fp_glLightModeliv;
export let glLightModelxOES: *fp_glLightModelxOES =
	null: *fp_glLightModelxOES;
export let glLightModelxvOES: *fp_glLightModelxvOES =
	null: *fp_glLightModelxvOES;
export let glLightf: *fp_glLightf =
	null: *fp_glLightf;
export let glLightfv: *fp_glLightfv =
	null: *fp_glLightfv;
export let glLighti: *fp_glLighti =
	null: *fp_glLighti;
export let glLightiv: *fp_glLightiv =
	null: *fp_glLightiv;
export let glLightxOES: *fp_glLightxOES =
	null: *fp_glLightxOES;
export let glLightxvOES: *fp_glLightxvOES =
	null: *fp_glLightxvOES;
export let glLineStipple: *fp_glLineStipple =
	null: *fp_glLineStipple;
export let glLineWidth: *fp_glLineWidth =
	null: *fp_glLineWidth;
export let glLineWidthxOES: *fp_glLineWidthxOES =
	null: *fp_glLineWidthxOES;
export let glLinkProgram: *fp_glLinkProgram =
	null: *fp_glLinkProgram;
export let glLinkProgramARB: *fp_glLinkProgramARB =
	null: *fp_glLinkProgramARB;
export let glListBase: *fp_glListBase =
	null: *fp_glListBase;
export let glListDrawCommandsStatesClientNV: *fp_glListDrawCommandsStatesClientNV =
	null: *fp_glListDrawCommandsStatesClientNV;
export let glListParameterfSGIX: *fp_glListParameterfSGIX =
	null: *fp_glListParameterfSGIX;
export let glListParameterfvSGIX: *fp_glListParameterfvSGIX =
	null: *fp_glListParameterfvSGIX;
export let glListParameteriSGIX: *fp_glListParameteriSGIX =
	null: *fp_glListParameteriSGIX;
export let glListParameterivSGIX: *fp_glListParameterivSGIX =
	null: *fp_glListParameterivSGIX;
export let glLoadIdentity: *fp_glLoadIdentity =
	null: *fp_glLoadIdentity;
export let glLoadIdentityDeformationMapSGIX: *fp_glLoadIdentityDeformationMapSGIX =
	null: *fp_glLoadIdentityDeformationMapSGIX;
export let glLoadMatrixd: *fp_glLoadMatrixd =
	null: *fp_glLoadMatrixd;
export let glLoadMatrixf: *fp_glLoadMatrixf =
	null: *fp_glLoadMatrixf;
export let glLoadMatrixxOES: *fp_glLoadMatrixxOES =
	null: *fp_glLoadMatrixxOES;
export let glLoadName: *fp_glLoadName =
	null: *fp_glLoadName;
export let glLoadProgramNV: *fp_glLoadProgramNV =
	null: *fp_glLoadProgramNV;
export let glLoadTransposeMatrixd: *fp_glLoadTransposeMatrixd =
	null: *fp_glLoadTransposeMatrixd;
export let glLoadTransposeMatrixdARB: *fp_glLoadTransposeMatrixdARB =
	null: *fp_glLoadTransposeMatrixdARB;
export let glLoadTransposeMatrixf: *fp_glLoadTransposeMatrixf =
	null: *fp_glLoadTransposeMatrixf;
export let glLoadTransposeMatrixfARB: *fp_glLoadTransposeMatrixfARB =
	null: *fp_glLoadTransposeMatrixfARB;
export let glLoadTransposeMatrixxOES: *fp_glLoadTransposeMatrixxOES =
	null: *fp_glLoadTransposeMatrixxOES;
export let glLockArraysEXT: *fp_glLockArraysEXT =
	null: *fp_glLockArraysEXT;
export let glLogicOp: *fp_glLogicOp =
	null: *fp_glLogicOp;
export let glMakeBufferNonResidentNV: *fp_glMakeBufferNonResidentNV =
	null: *fp_glMakeBufferNonResidentNV;
export let glMakeBufferResidentNV: *fp_glMakeBufferResidentNV =
	null: *fp_glMakeBufferResidentNV;
export let glMakeImageHandleNonResidentARB: *fp_glMakeImageHandleNonResidentARB =
	null: *fp_glMakeImageHandleNonResidentARB;
export let glMakeImageHandleNonResidentNV: *fp_glMakeImageHandleNonResidentNV =
	null: *fp_glMakeImageHandleNonResidentNV;
export let glMakeImageHandleResidentARB: *fp_glMakeImageHandleResidentARB =
	null: *fp_glMakeImageHandleResidentARB;
export let glMakeImageHandleResidentNV: *fp_glMakeImageHandleResidentNV =
	null: *fp_glMakeImageHandleResidentNV;
export let glMakeNamedBufferNonResidentNV: *fp_glMakeNamedBufferNonResidentNV =
	null: *fp_glMakeNamedBufferNonResidentNV;
export let glMakeNamedBufferResidentNV: *fp_glMakeNamedBufferResidentNV =
	null: *fp_glMakeNamedBufferResidentNV;
export let glMakeTextureHandleNonResidentARB: *fp_glMakeTextureHandleNonResidentARB =
	null: *fp_glMakeTextureHandleNonResidentARB;
export let glMakeTextureHandleNonResidentNV: *fp_glMakeTextureHandleNonResidentNV =
	null: *fp_glMakeTextureHandleNonResidentNV;
export let glMakeTextureHandleResidentARB: *fp_glMakeTextureHandleResidentARB =
	null: *fp_glMakeTextureHandleResidentARB;
export let glMakeTextureHandleResidentNV: *fp_glMakeTextureHandleResidentNV =
	null: *fp_glMakeTextureHandleResidentNV;
export let glMap1d: *fp_glMap1d =
	null: *fp_glMap1d;
export let glMap1f: *fp_glMap1f =
	null: *fp_glMap1f;
export let glMap1xOES: *fp_glMap1xOES =
	null: *fp_glMap1xOES;
export let glMap2d: *fp_glMap2d =
	null: *fp_glMap2d;
export let glMap2f: *fp_glMap2f =
	null: *fp_glMap2f;
export let glMap2xOES: *fp_glMap2xOES =
	null: *fp_glMap2xOES;
export let glMapBuffer: *fp_glMapBuffer =
	null: *fp_glMapBuffer;
export let glMapBufferARB: *fp_glMapBufferARB =
	null: *fp_glMapBufferARB;
export let glMapBufferRange: *fp_glMapBufferRange =
	null: *fp_glMapBufferRange;
export let glMapControlPointsNV: *fp_glMapControlPointsNV =
	null: *fp_glMapControlPointsNV;
export let glMapGrid1d: *fp_glMapGrid1d =
	null: *fp_glMapGrid1d;
export let glMapGrid1f: *fp_glMapGrid1f =
	null: *fp_glMapGrid1f;
export let glMapGrid1xOES: *fp_glMapGrid1xOES =
	null: *fp_glMapGrid1xOES;
export let glMapGrid2d: *fp_glMapGrid2d =
	null: *fp_glMapGrid2d;
export let glMapGrid2f: *fp_glMapGrid2f =
	null: *fp_glMapGrid2f;
export let glMapGrid2xOES: *fp_glMapGrid2xOES =
	null: *fp_glMapGrid2xOES;
export let glMapNamedBuffer: *fp_glMapNamedBuffer =
	null: *fp_glMapNamedBuffer;
export let glMapNamedBufferEXT: *fp_glMapNamedBufferEXT =
	null: *fp_glMapNamedBufferEXT;
export let glMapNamedBufferRange: *fp_glMapNamedBufferRange =
	null: *fp_glMapNamedBufferRange;
export let glMapNamedBufferRangeEXT: *fp_glMapNamedBufferRangeEXT =
	null: *fp_glMapNamedBufferRangeEXT;
export let glMapObjectBufferATI: *fp_glMapObjectBufferATI =
	null: *fp_glMapObjectBufferATI;
export let glMapParameterfvNV: *fp_glMapParameterfvNV =
	null: *fp_glMapParameterfvNV;
export let glMapParameterivNV: *fp_glMapParameterivNV =
	null: *fp_glMapParameterivNV;
export let glMapTexture2DINTEL: *fp_glMapTexture2DINTEL =
	null: *fp_glMapTexture2DINTEL;
export let glMapVertexAttrib1dAPPLE: *fp_glMapVertexAttrib1dAPPLE =
	null: *fp_glMapVertexAttrib1dAPPLE;
export let glMapVertexAttrib1fAPPLE: *fp_glMapVertexAttrib1fAPPLE =
	null: *fp_glMapVertexAttrib1fAPPLE;
export let glMapVertexAttrib2dAPPLE: *fp_glMapVertexAttrib2dAPPLE =
	null: *fp_glMapVertexAttrib2dAPPLE;
export let glMapVertexAttrib2fAPPLE: *fp_glMapVertexAttrib2fAPPLE =
	null: *fp_glMapVertexAttrib2fAPPLE;
export let glMaterialf: *fp_glMaterialf =
	null: *fp_glMaterialf;
export let glMaterialfv: *fp_glMaterialfv =
	null: *fp_glMaterialfv;
export let glMateriali: *fp_glMateriali =
	null: *fp_glMateriali;
export let glMaterialiv: *fp_glMaterialiv =
	null: *fp_glMaterialiv;
export let glMaterialxOES: *fp_glMaterialxOES =
	null: *fp_glMaterialxOES;
export let glMaterialxvOES: *fp_glMaterialxvOES =
	null: *fp_glMaterialxvOES;
export let glMatrixFrustumEXT: *fp_glMatrixFrustumEXT =
	null: *fp_glMatrixFrustumEXT;
export let glMatrixIndexPointerARB: *fp_glMatrixIndexPointerARB =
	null: *fp_glMatrixIndexPointerARB;
export let glMatrixIndexubvARB: *fp_glMatrixIndexubvARB =
	null: *fp_glMatrixIndexubvARB;
export let glMatrixIndexuivARB: *fp_glMatrixIndexuivARB =
	null: *fp_glMatrixIndexuivARB;
export let glMatrixIndexusvARB: *fp_glMatrixIndexusvARB =
	null: *fp_glMatrixIndexusvARB;
export let glMatrixLoad3x2fNV: *fp_glMatrixLoad3x2fNV =
	null: *fp_glMatrixLoad3x2fNV;
export let glMatrixLoad3x3fNV: *fp_glMatrixLoad3x3fNV =
	null: *fp_glMatrixLoad3x3fNV;
export let glMatrixLoadIdentityEXT: *fp_glMatrixLoadIdentityEXT =
	null: *fp_glMatrixLoadIdentityEXT;
export let glMatrixLoadTranspose3x3fNV: *fp_glMatrixLoadTranspose3x3fNV =
	null: *fp_glMatrixLoadTranspose3x3fNV;
export let glMatrixLoadTransposedEXT: *fp_glMatrixLoadTransposedEXT =
	null: *fp_glMatrixLoadTransposedEXT;
export let glMatrixLoadTransposefEXT: *fp_glMatrixLoadTransposefEXT =
	null: *fp_glMatrixLoadTransposefEXT;
export let glMatrixLoaddEXT: *fp_glMatrixLoaddEXT =
	null: *fp_glMatrixLoaddEXT;
export let glMatrixLoadfEXT: *fp_glMatrixLoadfEXT =
	null: *fp_glMatrixLoadfEXT;
export let glMatrixMode: *fp_glMatrixMode =
	null: *fp_glMatrixMode;
export let glMatrixMult3x2fNV: *fp_glMatrixMult3x2fNV =
	null: *fp_glMatrixMult3x2fNV;
export let glMatrixMult3x3fNV: *fp_glMatrixMult3x3fNV =
	null: *fp_glMatrixMult3x3fNV;
export let glMatrixMultTranspose3x3fNV: *fp_glMatrixMultTranspose3x3fNV =
	null: *fp_glMatrixMultTranspose3x3fNV;
export let glMatrixMultTransposedEXT: *fp_glMatrixMultTransposedEXT =
	null: *fp_glMatrixMultTransposedEXT;
export let glMatrixMultTransposefEXT: *fp_glMatrixMultTransposefEXT =
	null: *fp_glMatrixMultTransposefEXT;
export let glMatrixMultdEXT: *fp_glMatrixMultdEXT =
	null: *fp_glMatrixMultdEXT;
export let glMatrixMultfEXT: *fp_glMatrixMultfEXT =
	null: *fp_glMatrixMultfEXT;
export let glMatrixOrthoEXT: *fp_glMatrixOrthoEXT =
	null: *fp_glMatrixOrthoEXT;
export let glMatrixPopEXT: *fp_glMatrixPopEXT =
	null: *fp_glMatrixPopEXT;
export let glMatrixPushEXT: *fp_glMatrixPushEXT =
	null: *fp_glMatrixPushEXT;
export let glMatrixRotatedEXT: *fp_glMatrixRotatedEXT =
	null: *fp_glMatrixRotatedEXT;
export let glMatrixRotatefEXT: *fp_glMatrixRotatefEXT =
	null: *fp_glMatrixRotatefEXT;
export let glMatrixScaledEXT: *fp_glMatrixScaledEXT =
	null: *fp_glMatrixScaledEXT;
export let glMatrixScalefEXT: *fp_glMatrixScalefEXT =
	null: *fp_glMatrixScalefEXT;
export let glMatrixTranslatedEXT: *fp_glMatrixTranslatedEXT =
	null: *fp_glMatrixTranslatedEXT;
export let glMatrixTranslatefEXT: *fp_glMatrixTranslatefEXT =
	null: *fp_glMatrixTranslatefEXT;
export let glMaxShaderCompilerThreadsARB: *fp_glMaxShaderCompilerThreadsARB =
	null: *fp_glMaxShaderCompilerThreadsARB;
export let glMaxShaderCompilerThreadsKHR: *fp_glMaxShaderCompilerThreadsKHR =
	null: *fp_glMaxShaderCompilerThreadsKHR;
export let glMemoryBarrier: *fp_glMemoryBarrier =
	null: *fp_glMemoryBarrier;
export let glMemoryBarrierByRegion: *fp_glMemoryBarrierByRegion =
	null: *fp_glMemoryBarrierByRegion;
export let glMemoryBarrierEXT: *fp_glMemoryBarrierEXT =
	null: *fp_glMemoryBarrierEXT;
export let glMemoryObjectParameterivEXT: *fp_glMemoryObjectParameterivEXT =
	null: *fp_glMemoryObjectParameterivEXT;
export let glMinSampleShadingARB: *fp_glMinSampleShadingARB =
	null: *fp_glMinSampleShadingARB;
export let glMinmaxEXT: *fp_glMinmaxEXT =
	null: *fp_glMinmaxEXT;
export let glMultMatrixd: *fp_glMultMatrixd =
	null: *fp_glMultMatrixd;
export let glMultMatrixf: *fp_glMultMatrixf =
	null: *fp_glMultMatrixf;
export let glMultMatrixxOES: *fp_glMultMatrixxOES =
	null: *fp_glMultMatrixxOES;
export let glMultTransposeMatrixd: *fp_glMultTransposeMatrixd =
	null: *fp_glMultTransposeMatrixd;
export let glMultTransposeMatrixdARB: *fp_glMultTransposeMatrixdARB =
	null: *fp_glMultTransposeMatrixdARB;
export let glMultTransposeMatrixf: *fp_glMultTransposeMatrixf =
	null: *fp_glMultTransposeMatrixf;
export let glMultTransposeMatrixfARB: *fp_glMultTransposeMatrixfARB =
	null: *fp_glMultTransposeMatrixfARB;
export let glMultTransposeMatrixxOES: *fp_glMultTransposeMatrixxOES =
	null: *fp_glMultTransposeMatrixxOES;
export let glMultiDrawArrays: *fp_glMultiDrawArrays =
	null: *fp_glMultiDrawArrays;
export let glMultiDrawArraysEXT: *fp_glMultiDrawArraysEXT =
	null: *fp_glMultiDrawArraysEXT;
export let glMultiDrawArraysIndirect: *fp_glMultiDrawArraysIndirect =
	null: *fp_glMultiDrawArraysIndirect;
export let glMultiDrawArraysIndirectAMD: *fp_glMultiDrawArraysIndirectAMD =
	null: *fp_glMultiDrawArraysIndirectAMD;
export let glMultiDrawArraysIndirectBindlessCountNV: *fp_glMultiDrawArraysIndirectBindlessCountNV =
	null: *fp_glMultiDrawArraysIndirectBindlessCountNV;
export let glMultiDrawArraysIndirectBindlessNV: *fp_glMultiDrawArraysIndirectBindlessNV =
	null: *fp_glMultiDrawArraysIndirectBindlessNV;
export let glMultiDrawArraysIndirectCountARB: *fp_glMultiDrawArraysIndirectCountARB =
	null: *fp_glMultiDrawArraysIndirectCountARB;
export let glMultiDrawElementArrayAPPLE: *fp_glMultiDrawElementArrayAPPLE =
	null: *fp_glMultiDrawElementArrayAPPLE;
export let glMultiDrawElements: *fp_glMultiDrawElements =
	null: *fp_glMultiDrawElements;
export let glMultiDrawElementsBaseVertex: *fp_glMultiDrawElementsBaseVertex =
	null: *fp_glMultiDrawElementsBaseVertex;
export let glMultiDrawElementsEXT: *fp_glMultiDrawElementsEXT =
	null: *fp_glMultiDrawElementsEXT;
export let glMultiDrawElementsIndirect: *fp_glMultiDrawElementsIndirect =
	null: *fp_glMultiDrawElementsIndirect;
export let glMultiDrawElementsIndirectAMD: *fp_glMultiDrawElementsIndirectAMD =
	null: *fp_glMultiDrawElementsIndirectAMD;
export let glMultiDrawElementsIndirectBindlessCountNV: *fp_glMultiDrawElementsIndirectBindlessCountNV =
	null: *fp_glMultiDrawElementsIndirectBindlessCountNV;
export let glMultiDrawElementsIndirectBindlessNV: *fp_glMultiDrawElementsIndirectBindlessNV =
	null: *fp_glMultiDrawElementsIndirectBindlessNV;
export let glMultiDrawElementsIndirectCountARB: *fp_glMultiDrawElementsIndirectCountARB =
	null: *fp_glMultiDrawElementsIndirectCountARB;
export let glMultiDrawMeshTasksIndirectCountNV: *fp_glMultiDrawMeshTasksIndirectCountNV =
	null: *fp_glMultiDrawMeshTasksIndirectCountNV;
export let glMultiDrawMeshTasksIndirectNV: *fp_glMultiDrawMeshTasksIndirectNV =
	null: *fp_glMultiDrawMeshTasksIndirectNV;
export let glMultiDrawRangeElementArrayAPPLE: *fp_glMultiDrawRangeElementArrayAPPLE =
	null: *fp_glMultiDrawRangeElementArrayAPPLE;
export let glMultiModeDrawArraysIBM: *fp_glMultiModeDrawArraysIBM =
	null: *fp_glMultiModeDrawArraysIBM;
export let glMultiModeDrawElementsIBM: *fp_glMultiModeDrawElementsIBM =
	null: *fp_glMultiModeDrawElementsIBM;
export let glMultiTexBufferEXT: *fp_glMultiTexBufferEXT =
	null: *fp_glMultiTexBufferEXT;
export let glMultiTexCoord1bOES: *fp_glMultiTexCoord1bOES =
	null: *fp_glMultiTexCoord1bOES;
export let glMultiTexCoord1bvOES: *fp_glMultiTexCoord1bvOES =
	null: *fp_glMultiTexCoord1bvOES;
export let glMultiTexCoord1d: *fp_glMultiTexCoord1d =
	null: *fp_glMultiTexCoord1d;
export let glMultiTexCoord1dARB: *fp_glMultiTexCoord1dARB =
	null: *fp_glMultiTexCoord1dARB;
export let glMultiTexCoord1dv: *fp_glMultiTexCoord1dv =
	null: *fp_glMultiTexCoord1dv;
export let glMultiTexCoord1dvARB: *fp_glMultiTexCoord1dvARB =
	null: *fp_glMultiTexCoord1dvARB;
export let glMultiTexCoord1f: *fp_glMultiTexCoord1f =
	null: *fp_glMultiTexCoord1f;
export let glMultiTexCoord1fARB: *fp_glMultiTexCoord1fARB =
	null: *fp_glMultiTexCoord1fARB;
export let glMultiTexCoord1fv: *fp_glMultiTexCoord1fv =
	null: *fp_glMultiTexCoord1fv;
export let glMultiTexCoord1fvARB: *fp_glMultiTexCoord1fvARB =
	null: *fp_glMultiTexCoord1fvARB;
export let glMultiTexCoord1hNV: *fp_glMultiTexCoord1hNV =
	null: *fp_glMultiTexCoord1hNV;
export let glMultiTexCoord1hvNV: *fp_glMultiTexCoord1hvNV =
	null: *fp_glMultiTexCoord1hvNV;
export let glMultiTexCoord1i: *fp_glMultiTexCoord1i =
	null: *fp_glMultiTexCoord1i;
export let glMultiTexCoord1iARB: *fp_glMultiTexCoord1iARB =
	null: *fp_glMultiTexCoord1iARB;
export let glMultiTexCoord1iv: *fp_glMultiTexCoord1iv =
	null: *fp_glMultiTexCoord1iv;
export let glMultiTexCoord1ivARB: *fp_glMultiTexCoord1ivARB =
	null: *fp_glMultiTexCoord1ivARB;
export let glMultiTexCoord1s: *fp_glMultiTexCoord1s =
	null: *fp_glMultiTexCoord1s;
export let glMultiTexCoord1sARB: *fp_glMultiTexCoord1sARB =
	null: *fp_glMultiTexCoord1sARB;
export let glMultiTexCoord1sv: *fp_glMultiTexCoord1sv =
	null: *fp_glMultiTexCoord1sv;
export let glMultiTexCoord1svARB: *fp_glMultiTexCoord1svARB =
	null: *fp_glMultiTexCoord1svARB;
export let glMultiTexCoord1xOES: *fp_glMultiTexCoord1xOES =
	null: *fp_glMultiTexCoord1xOES;
export let glMultiTexCoord1xvOES: *fp_glMultiTexCoord1xvOES =
	null: *fp_glMultiTexCoord1xvOES;
export let glMultiTexCoord2bOES: *fp_glMultiTexCoord2bOES =
	null: *fp_glMultiTexCoord2bOES;
export let glMultiTexCoord2bvOES: *fp_glMultiTexCoord2bvOES =
	null: *fp_glMultiTexCoord2bvOES;
export let glMultiTexCoord2d: *fp_glMultiTexCoord2d =
	null: *fp_glMultiTexCoord2d;
export let glMultiTexCoord2dARB: *fp_glMultiTexCoord2dARB =
	null: *fp_glMultiTexCoord2dARB;
export let glMultiTexCoord2dv: *fp_glMultiTexCoord2dv =
	null: *fp_glMultiTexCoord2dv;
export let glMultiTexCoord2dvARB: *fp_glMultiTexCoord2dvARB =
	null: *fp_glMultiTexCoord2dvARB;
export let glMultiTexCoord2f: *fp_glMultiTexCoord2f =
	null: *fp_glMultiTexCoord2f;
export let glMultiTexCoord2fARB: *fp_glMultiTexCoord2fARB =
	null: *fp_glMultiTexCoord2fARB;
export let glMultiTexCoord2fv: *fp_glMultiTexCoord2fv =
	null: *fp_glMultiTexCoord2fv;
export let glMultiTexCoord2fvARB: *fp_glMultiTexCoord2fvARB =
	null: *fp_glMultiTexCoord2fvARB;
export let glMultiTexCoord2hNV: *fp_glMultiTexCoord2hNV =
	null: *fp_glMultiTexCoord2hNV;
export let glMultiTexCoord2hvNV: *fp_glMultiTexCoord2hvNV =
	null: *fp_glMultiTexCoord2hvNV;
export let glMultiTexCoord2i: *fp_glMultiTexCoord2i =
	null: *fp_glMultiTexCoord2i;
export let glMultiTexCoord2iARB: *fp_glMultiTexCoord2iARB =
	null: *fp_glMultiTexCoord2iARB;
export let glMultiTexCoord2iv: *fp_glMultiTexCoord2iv =
	null: *fp_glMultiTexCoord2iv;
export let glMultiTexCoord2ivARB: *fp_glMultiTexCoord2ivARB =
	null: *fp_glMultiTexCoord2ivARB;
export let glMultiTexCoord2s: *fp_glMultiTexCoord2s =
	null: *fp_glMultiTexCoord2s;
export let glMultiTexCoord2sARB: *fp_glMultiTexCoord2sARB =
	null: *fp_glMultiTexCoord2sARB;
export let glMultiTexCoord2sv: *fp_glMultiTexCoord2sv =
	null: *fp_glMultiTexCoord2sv;
export let glMultiTexCoord2svARB: *fp_glMultiTexCoord2svARB =
	null: *fp_glMultiTexCoord2svARB;
export let glMultiTexCoord2xOES: *fp_glMultiTexCoord2xOES =
	null: *fp_glMultiTexCoord2xOES;
export let glMultiTexCoord2xvOES: *fp_glMultiTexCoord2xvOES =
	null: *fp_glMultiTexCoord2xvOES;
export let glMultiTexCoord3bOES: *fp_glMultiTexCoord3bOES =
	null: *fp_glMultiTexCoord3bOES;
export let glMultiTexCoord3bvOES: *fp_glMultiTexCoord3bvOES =
	null: *fp_glMultiTexCoord3bvOES;
export let glMultiTexCoord3d: *fp_glMultiTexCoord3d =
	null: *fp_glMultiTexCoord3d;
export let glMultiTexCoord3dARB: *fp_glMultiTexCoord3dARB =
	null: *fp_glMultiTexCoord3dARB;
export let glMultiTexCoord3dv: *fp_glMultiTexCoord3dv =
	null: *fp_glMultiTexCoord3dv;
export let glMultiTexCoord3dvARB: *fp_glMultiTexCoord3dvARB =
	null: *fp_glMultiTexCoord3dvARB;
export let glMultiTexCoord3f: *fp_glMultiTexCoord3f =
	null: *fp_glMultiTexCoord3f;
export let glMultiTexCoord3fARB: *fp_glMultiTexCoord3fARB =
	null: *fp_glMultiTexCoord3fARB;
export let glMultiTexCoord3fv: *fp_glMultiTexCoord3fv =
	null: *fp_glMultiTexCoord3fv;
export let glMultiTexCoord3fvARB: *fp_glMultiTexCoord3fvARB =
	null: *fp_glMultiTexCoord3fvARB;
export let glMultiTexCoord3hNV: *fp_glMultiTexCoord3hNV =
	null: *fp_glMultiTexCoord3hNV;
export let glMultiTexCoord3hvNV: *fp_glMultiTexCoord3hvNV =
	null: *fp_glMultiTexCoord3hvNV;
export let glMultiTexCoord3i: *fp_glMultiTexCoord3i =
	null: *fp_glMultiTexCoord3i;
export let glMultiTexCoord3iARB: *fp_glMultiTexCoord3iARB =
	null: *fp_glMultiTexCoord3iARB;
export let glMultiTexCoord3iv: *fp_glMultiTexCoord3iv =
	null: *fp_glMultiTexCoord3iv;
export let glMultiTexCoord3ivARB: *fp_glMultiTexCoord3ivARB =
	null: *fp_glMultiTexCoord3ivARB;
export let glMultiTexCoord3s: *fp_glMultiTexCoord3s =
	null: *fp_glMultiTexCoord3s;
export let glMultiTexCoord3sARB: *fp_glMultiTexCoord3sARB =
	null: *fp_glMultiTexCoord3sARB;
export let glMultiTexCoord3sv: *fp_glMultiTexCoord3sv =
	null: *fp_glMultiTexCoord3sv;
export let glMultiTexCoord3svARB: *fp_glMultiTexCoord3svARB =
	null: *fp_glMultiTexCoord3svARB;
export let glMultiTexCoord3xOES: *fp_glMultiTexCoord3xOES =
	null: *fp_glMultiTexCoord3xOES;
export let glMultiTexCoord3xvOES: *fp_glMultiTexCoord3xvOES =
	null: *fp_glMultiTexCoord3xvOES;
export let glMultiTexCoord4bOES: *fp_glMultiTexCoord4bOES =
	null: *fp_glMultiTexCoord4bOES;
export let glMultiTexCoord4bvOES: *fp_glMultiTexCoord4bvOES =
	null: *fp_glMultiTexCoord4bvOES;
export let glMultiTexCoord4d: *fp_glMultiTexCoord4d =
	null: *fp_glMultiTexCoord4d;
export let glMultiTexCoord4dARB: *fp_glMultiTexCoord4dARB =
	null: *fp_glMultiTexCoord4dARB;
export let glMultiTexCoord4dv: *fp_glMultiTexCoord4dv =
	null: *fp_glMultiTexCoord4dv;
export let glMultiTexCoord4dvARB: *fp_glMultiTexCoord4dvARB =
	null: *fp_glMultiTexCoord4dvARB;
export let glMultiTexCoord4f: *fp_glMultiTexCoord4f =
	null: *fp_glMultiTexCoord4f;
export let glMultiTexCoord4fARB: *fp_glMultiTexCoord4fARB =
	null: *fp_glMultiTexCoord4fARB;
export let glMultiTexCoord4fv: *fp_glMultiTexCoord4fv =
	null: *fp_glMultiTexCoord4fv;
export let glMultiTexCoord4fvARB: *fp_glMultiTexCoord4fvARB =
	null: *fp_glMultiTexCoord4fvARB;
export let glMultiTexCoord4hNV: *fp_glMultiTexCoord4hNV =
	null: *fp_glMultiTexCoord4hNV;
export let glMultiTexCoord4hvNV: *fp_glMultiTexCoord4hvNV =
	null: *fp_glMultiTexCoord4hvNV;
export let glMultiTexCoord4i: *fp_glMultiTexCoord4i =
	null: *fp_glMultiTexCoord4i;
export let glMultiTexCoord4iARB: *fp_glMultiTexCoord4iARB =
	null: *fp_glMultiTexCoord4iARB;
export let glMultiTexCoord4iv: *fp_glMultiTexCoord4iv =
	null: *fp_glMultiTexCoord4iv;
export let glMultiTexCoord4ivARB: *fp_glMultiTexCoord4ivARB =
	null: *fp_glMultiTexCoord4ivARB;
export let glMultiTexCoord4s: *fp_glMultiTexCoord4s =
	null: *fp_glMultiTexCoord4s;
export let glMultiTexCoord4sARB: *fp_glMultiTexCoord4sARB =
	null: *fp_glMultiTexCoord4sARB;
export let glMultiTexCoord4sv: *fp_glMultiTexCoord4sv =
	null: *fp_glMultiTexCoord4sv;
export let glMultiTexCoord4svARB: *fp_glMultiTexCoord4svARB =
	null: *fp_glMultiTexCoord4svARB;
export let glMultiTexCoord4xOES: *fp_glMultiTexCoord4xOES =
	null: *fp_glMultiTexCoord4xOES;
export let glMultiTexCoord4xvOES: *fp_glMultiTexCoord4xvOES =
	null: *fp_glMultiTexCoord4xvOES;
export let glMultiTexCoordPointerEXT: *fp_glMultiTexCoordPointerEXT =
	null: *fp_glMultiTexCoordPointerEXT;
export let glMultiTexEnvfEXT: *fp_glMultiTexEnvfEXT =
	null: *fp_glMultiTexEnvfEXT;
export let glMultiTexEnvfvEXT: *fp_glMultiTexEnvfvEXT =
	null: *fp_glMultiTexEnvfvEXT;
export let glMultiTexEnviEXT: *fp_glMultiTexEnviEXT =
	null: *fp_glMultiTexEnviEXT;
export let glMultiTexEnvivEXT: *fp_glMultiTexEnvivEXT =
	null: *fp_glMultiTexEnvivEXT;
export let glMultiTexGendEXT: *fp_glMultiTexGendEXT =
	null: *fp_glMultiTexGendEXT;
export let glMultiTexGendvEXT: *fp_glMultiTexGendvEXT =
	null: *fp_glMultiTexGendvEXT;
export let glMultiTexGenfEXT: *fp_glMultiTexGenfEXT =
	null: *fp_glMultiTexGenfEXT;
export let glMultiTexGenfvEXT: *fp_glMultiTexGenfvEXT =
	null: *fp_glMultiTexGenfvEXT;
export let glMultiTexGeniEXT: *fp_glMultiTexGeniEXT =
	null: *fp_glMultiTexGeniEXT;
export let glMultiTexGenivEXT: *fp_glMultiTexGenivEXT =
	null: *fp_glMultiTexGenivEXT;
export let glMultiTexImage1DEXT: *fp_glMultiTexImage1DEXT =
	null: *fp_glMultiTexImage1DEXT;
export let glMultiTexImage2DEXT: *fp_glMultiTexImage2DEXT =
	null: *fp_glMultiTexImage2DEXT;
export let glMultiTexImage3DEXT: *fp_glMultiTexImage3DEXT =
	null: *fp_glMultiTexImage3DEXT;
export let glMultiTexParameterIivEXT: *fp_glMultiTexParameterIivEXT =
	null: *fp_glMultiTexParameterIivEXT;
export let glMultiTexParameterIuivEXT: *fp_glMultiTexParameterIuivEXT =
	null: *fp_glMultiTexParameterIuivEXT;
export let glMultiTexParameterfEXT: *fp_glMultiTexParameterfEXT =
	null: *fp_glMultiTexParameterfEXT;
export let glMultiTexParameterfvEXT: *fp_glMultiTexParameterfvEXT =
	null: *fp_glMultiTexParameterfvEXT;
export let glMultiTexParameteriEXT: *fp_glMultiTexParameteriEXT =
	null: *fp_glMultiTexParameteriEXT;
export let glMultiTexParameterivEXT: *fp_glMultiTexParameterivEXT =
	null: *fp_glMultiTexParameterivEXT;
export let glMultiTexRenderbufferEXT: *fp_glMultiTexRenderbufferEXT =
	null: *fp_glMultiTexRenderbufferEXT;
export let glMultiTexSubImage1DEXT: *fp_glMultiTexSubImage1DEXT =
	null: *fp_glMultiTexSubImage1DEXT;
export let glMultiTexSubImage2DEXT: *fp_glMultiTexSubImage2DEXT =
	null: *fp_glMultiTexSubImage2DEXT;
export let glMultiTexSubImage3DEXT: *fp_glMultiTexSubImage3DEXT =
	null: *fp_glMultiTexSubImage3DEXT;
export let glMulticastBarrierNV: *fp_glMulticastBarrierNV =
	null: *fp_glMulticastBarrierNV;
export let glMulticastBlitFramebufferNV: *fp_glMulticastBlitFramebufferNV =
	null: *fp_glMulticastBlitFramebufferNV;
export let glMulticastBufferSubDataNV: *fp_glMulticastBufferSubDataNV =
	null: *fp_glMulticastBufferSubDataNV;
export let glMulticastCopyBufferSubDataNV: *fp_glMulticastCopyBufferSubDataNV =
	null: *fp_glMulticastCopyBufferSubDataNV;
export let glMulticastCopyImageSubDataNV: *fp_glMulticastCopyImageSubDataNV =
	null: *fp_glMulticastCopyImageSubDataNV;
export let glMulticastFramebufferSampleLocationsfvNV: *fp_glMulticastFramebufferSampleLocationsfvNV =
	null: *fp_glMulticastFramebufferSampleLocationsfvNV;
export let glMulticastGetQueryObjecti64vNV: *fp_glMulticastGetQueryObjecti64vNV =
	null: *fp_glMulticastGetQueryObjecti64vNV;
export let glMulticastGetQueryObjectivNV: *fp_glMulticastGetQueryObjectivNV =
	null: *fp_glMulticastGetQueryObjectivNV;
export let glMulticastGetQueryObjectui64vNV: *fp_glMulticastGetQueryObjectui64vNV =
	null: *fp_glMulticastGetQueryObjectui64vNV;
export let glMulticastGetQueryObjectuivNV: *fp_glMulticastGetQueryObjectuivNV =
	null: *fp_glMulticastGetQueryObjectuivNV;
export let glMulticastScissorArrayvNVX: *fp_glMulticastScissorArrayvNVX =
	null: *fp_glMulticastScissorArrayvNVX;
export let glMulticastViewportArrayvNVX: *fp_glMulticastViewportArrayvNVX =
	null: *fp_glMulticastViewportArrayvNVX;
export let glMulticastViewportPositionWScaleNVX: *fp_glMulticastViewportPositionWScaleNVX =
	null: *fp_glMulticastViewportPositionWScaleNVX;
export let glMulticastWaitSyncNV: *fp_glMulticastWaitSyncNV =
	null: *fp_glMulticastWaitSyncNV;
export let glNamedBufferAttachMemoryNV: *fp_glNamedBufferAttachMemoryNV =
	null: *fp_glNamedBufferAttachMemoryNV;
export let glNamedBufferData: *fp_glNamedBufferData =
	null: *fp_glNamedBufferData;
export let glNamedBufferDataEXT: *fp_glNamedBufferDataEXT =
	null: *fp_glNamedBufferDataEXT;
export let glNamedBufferPageCommitmentARB: *fp_glNamedBufferPageCommitmentARB =
	null: *fp_glNamedBufferPageCommitmentARB;
export let glNamedBufferPageCommitmentEXT: *fp_glNamedBufferPageCommitmentEXT =
	null: *fp_glNamedBufferPageCommitmentEXT;
export let glNamedBufferPageCommitmentMemNV: *fp_glNamedBufferPageCommitmentMemNV =
	null: *fp_glNamedBufferPageCommitmentMemNV;
export let glNamedBufferStorage: *fp_glNamedBufferStorage =
	null: *fp_glNamedBufferStorage;
export let glNamedBufferStorageEXT: *fp_glNamedBufferStorageEXT =
	null: *fp_glNamedBufferStorageEXT;
export let glNamedBufferStorageExternalEXT: *fp_glNamedBufferStorageExternalEXT =
	null: *fp_glNamedBufferStorageExternalEXT;
export let glNamedBufferStorageMemEXT: *fp_glNamedBufferStorageMemEXT =
	null: *fp_glNamedBufferStorageMemEXT;
export let glNamedBufferSubData: *fp_glNamedBufferSubData =
	null: *fp_glNamedBufferSubData;
export let glNamedBufferSubDataEXT: *fp_glNamedBufferSubDataEXT =
	null: *fp_glNamedBufferSubDataEXT;
export let glNamedCopyBufferSubDataEXT: *fp_glNamedCopyBufferSubDataEXT =
	null: *fp_glNamedCopyBufferSubDataEXT;
export let glNamedFramebufferDrawBuffer: *fp_glNamedFramebufferDrawBuffer =
	null: *fp_glNamedFramebufferDrawBuffer;
export let glNamedFramebufferDrawBuffers: *fp_glNamedFramebufferDrawBuffers =
	null: *fp_glNamedFramebufferDrawBuffers;
export let glNamedFramebufferParameteri: *fp_glNamedFramebufferParameteri =
	null: *fp_glNamedFramebufferParameteri;
export let glNamedFramebufferParameteriEXT: *fp_glNamedFramebufferParameteriEXT =
	null: *fp_glNamedFramebufferParameteriEXT;
export let glNamedFramebufferReadBuffer: *fp_glNamedFramebufferReadBuffer =
	null: *fp_glNamedFramebufferReadBuffer;
export let glNamedFramebufferRenderbuffer: *fp_glNamedFramebufferRenderbuffer =
	null: *fp_glNamedFramebufferRenderbuffer;
export let glNamedFramebufferRenderbufferEXT: *fp_glNamedFramebufferRenderbufferEXT =
	null: *fp_glNamedFramebufferRenderbufferEXT;
export let glNamedFramebufferSampleLocationsfvARB: *fp_glNamedFramebufferSampleLocationsfvARB =
	null: *fp_glNamedFramebufferSampleLocationsfvARB;
export let glNamedFramebufferSampleLocationsfvNV: *fp_glNamedFramebufferSampleLocationsfvNV =
	null: *fp_glNamedFramebufferSampleLocationsfvNV;
export let glNamedFramebufferSamplePositionsfvAMD: *fp_glNamedFramebufferSamplePositionsfvAMD =
	null: *fp_glNamedFramebufferSamplePositionsfvAMD;
export let glNamedFramebufferTexture: *fp_glNamedFramebufferTexture =
	null: *fp_glNamedFramebufferTexture;
export let glNamedFramebufferTexture1DEXT: *fp_glNamedFramebufferTexture1DEXT =
	null: *fp_glNamedFramebufferTexture1DEXT;
export let glNamedFramebufferTexture2DEXT: *fp_glNamedFramebufferTexture2DEXT =
	null: *fp_glNamedFramebufferTexture2DEXT;
export let glNamedFramebufferTexture3DEXT: *fp_glNamedFramebufferTexture3DEXT =
	null: *fp_glNamedFramebufferTexture3DEXT;
export let glNamedFramebufferTextureEXT: *fp_glNamedFramebufferTextureEXT =
	null: *fp_glNamedFramebufferTextureEXT;
export let glNamedFramebufferTextureFaceEXT: *fp_glNamedFramebufferTextureFaceEXT =
	null: *fp_glNamedFramebufferTextureFaceEXT;
export let glNamedFramebufferTextureLayer: *fp_glNamedFramebufferTextureLayer =
	null: *fp_glNamedFramebufferTextureLayer;
export let glNamedFramebufferTextureLayerEXT: *fp_glNamedFramebufferTextureLayerEXT =
	null: *fp_glNamedFramebufferTextureLayerEXT;
export let glNamedProgramLocalParameter4dEXT: *fp_glNamedProgramLocalParameter4dEXT =
	null: *fp_glNamedProgramLocalParameter4dEXT;
export let glNamedProgramLocalParameter4dvEXT: *fp_glNamedProgramLocalParameter4dvEXT =
	null: *fp_glNamedProgramLocalParameter4dvEXT;
export let glNamedProgramLocalParameter4fEXT: *fp_glNamedProgramLocalParameter4fEXT =
	null: *fp_glNamedProgramLocalParameter4fEXT;
export let glNamedProgramLocalParameter4fvEXT: *fp_glNamedProgramLocalParameter4fvEXT =
	null: *fp_glNamedProgramLocalParameter4fvEXT;
export let glNamedProgramLocalParameterI4iEXT: *fp_glNamedProgramLocalParameterI4iEXT =
	null: *fp_glNamedProgramLocalParameterI4iEXT;
export let glNamedProgramLocalParameterI4ivEXT: *fp_glNamedProgramLocalParameterI4ivEXT =
	null: *fp_glNamedProgramLocalParameterI4ivEXT;
export let glNamedProgramLocalParameterI4uiEXT: *fp_glNamedProgramLocalParameterI4uiEXT =
	null: *fp_glNamedProgramLocalParameterI4uiEXT;
export let glNamedProgramLocalParameterI4uivEXT: *fp_glNamedProgramLocalParameterI4uivEXT =
	null: *fp_glNamedProgramLocalParameterI4uivEXT;
export let glNamedProgramLocalParameters4fvEXT: *fp_glNamedProgramLocalParameters4fvEXT =
	null: *fp_glNamedProgramLocalParameters4fvEXT;
export let glNamedProgramLocalParametersI4ivEXT: *fp_glNamedProgramLocalParametersI4ivEXT =
	null: *fp_glNamedProgramLocalParametersI4ivEXT;
export let glNamedProgramLocalParametersI4uivEXT: *fp_glNamedProgramLocalParametersI4uivEXT =
	null: *fp_glNamedProgramLocalParametersI4uivEXT;
export let glNamedProgramStringEXT: *fp_glNamedProgramStringEXT =
	null: *fp_glNamedProgramStringEXT;
export let glNamedRenderbufferStorage: *fp_glNamedRenderbufferStorage =
	null: *fp_glNamedRenderbufferStorage;
export let glNamedRenderbufferStorageEXT: *fp_glNamedRenderbufferStorageEXT =
	null: *fp_glNamedRenderbufferStorageEXT;
export let glNamedRenderbufferStorageMultisample: *fp_glNamedRenderbufferStorageMultisample =
	null: *fp_glNamedRenderbufferStorageMultisample;
export let glNamedRenderbufferStorageMultisampleAdvancedAMD: *fp_glNamedRenderbufferStorageMultisampleAdvancedAMD =
	null: *fp_glNamedRenderbufferStorageMultisampleAdvancedAMD;
export let glNamedRenderbufferStorageMultisampleCoverageEXT: *fp_glNamedRenderbufferStorageMultisampleCoverageEXT =
	null: *fp_glNamedRenderbufferStorageMultisampleCoverageEXT;
export let glNamedRenderbufferStorageMultisampleEXT: *fp_glNamedRenderbufferStorageMultisampleEXT =
	null: *fp_glNamedRenderbufferStorageMultisampleEXT;
export let glNamedStringARB: *fp_glNamedStringARB =
	null: *fp_glNamedStringARB;
export let glNewList: *fp_glNewList =
	null: *fp_glNewList;
export let glNewObjectBufferATI: *fp_glNewObjectBufferATI =
	null: *fp_glNewObjectBufferATI;
export let glNormal3b: *fp_glNormal3b =
	null: *fp_glNormal3b;
export let glNormal3bv: *fp_glNormal3bv =
	null: *fp_glNormal3bv;
export let glNormal3d: *fp_glNormal3d =
	null: *fp_glNormal3d;
export let glNormal3dv: *fp_glNormal3dv =
	null: *fp_glNormal3dv;
export let glNormal3f: *fp_glNormal3f =
	null: *fp_glNormal3f;
export let glNormal3fVertex3fSUN: *fp_glNormal3fVertex3fSUN =
	null: *fp_glNormal3fVertex3fSUN;
export let glNormal3fVertex3fvSUN: *fp_glNormal3fVertex3fvSUN =
	null: *fp_glNormal3fVertex3fvSUN;
export let glNormal3fv: *fp_glNormal3fv =
	null: *fp_glNormal3fv;
export let glNormal3hNV: *fp_glNormal3hNV =
	null: *fp_glNormal3hNV;
export let glNormal3hvNV: *fp_glNormal3hvNV =
	null: *fp_glNormal3hvNV;
export let glNormal3i: *fp_glNormal3i =
	null: *fp_glNormal3i;
export let glNormal3iv: *fp_glNormal3iv =
	null: *fp_glNormal3iv;
export let glNormal3s: *fp_glNormal3s =
	null: *fp_glNormal3s;
export let glNormal3sv: *fp_glNormal3sv =
	null: *fp_glNormal3sv;
export let glNormal3xOES: *fp_glNormal3xOES =
	null: *fp_glNormal3xOES;
export let glNormal3xvOES: *fp_glNormal3xvOES =
	null: *fp_glNormal3xvOES;
export let glNormalFormatNV: *fp_glNormalFormatNV =
	null: *fp_glNormalFormatNV;
export let glNormalPointer: *fp_glNormalPointer =
	null: *fp_glNormalPointer;
export let glNormalPointerEXT: *fp_glNormalPointerEXT =
	null: *fp_glNormalPointerEXT;
export let glNormalPointerListIBM: *fp_glNormalPointerListIBM =
	null: *fp_glNormalPointerListIBM;
export let glNormalPointervINTEL: *fp_glNormalPointervINTEL =
	null: *fp_glNormalPointervINTEL;
export let glNormalStream3bATI: *fp_glNormalStream3bATI =
	null: *fp_glNormalStream3bATI;
export let glNormalStream3bvATI: *fp_glNormalStream3bvATI =
	null: *fp_glNormalStream3bvATI;
export let glNormalStream3dATI: *fp_glNormalStream3dATI =
	null: *fp_glNormalStream3dATI;
export let glNormalStream3dvATI: *fp_glNormalStream3dvATI =
	null: *fp_glNormalStream3dvATI;
export let glNormalStream3fATI: *fp_glNormalStream3fATI =
	null: *fp_glNormalStream3fATI;
export let glNormalStream3fvATI: *fp_glNormalStream3fvATI =
	null: *fp_glNormalStream3fvATI;
export let glNormalStream3iATI: *fp_glNormalStream3iATI =
	null: *fp_glNormalStream3iATI;
export let glNormalStream3ivATI: *fp_glNormalStream3ivATI =
	null: *fp_glNormalStream3ivATI;
export let glNormalStream3sATI: *fp_glNormalStream3sATI =
	null: *fp_glNormalStream3sATI;
export let glNormalStream3svATI: *fp_glNormalStream3svATI =
	null: *fp_glNormalStream3svATI;
export let glObjectLabel: *fp_glObjectLabel =
	null: *fp_glObjectLabel;
export let glObjectPtrLabel: *fp_glObjectPtrLabel =
	null: *fp_glObjectPtrLabel;
export let glObjectPurgeableAPPLE: *fp_glObjectPurgeableAPPLE =
	null: *fp_glObjectPurgeableAPPLE;
export let glObjectUnpurgeableAPPLE: *fp_glObjectUnpurgeableAPPLE =
	null: *fp_glObjectUnpurgeableAPPLE;
export let glOrtho: *fp_glOrtho =
	null: *fp_glOrtho;
export let glOrthofOES: *fp_glOrthofOES =
	null: *fp_glOrthofOES;
export let glOrthoxOES: *fp_glOrthoxOES =
	null: *fp_glOrthoxOES;
export let glPNTrianglesfATI: *fp_glPNTrianglesfATI =
	null: *fp_glPNTrianglesfATI;
export let glPNTrianglesiATI: *fp_glPNTrianglesiATI =
	null: *fp_glPNTrianglesiATI;
export let glPassTexCoordATI: *fp_glPassTexCoordATI =
	null: *fp_glPassTexCoordATI;
export let glPassThrough: *fp_glPassThrough =
	null: *fp_glPassThrough;
export let glPassThroughxOES: *fp_glPassThroughxOES =
	null: *fp_glPassThroughxOES;
export let glPatchParameterfv: *fp_glPatchParameterfv =
	null: *fp_glPatchParameterfv;
export let glPatchParameteri: *fp_glPatchParameteri =
	null: *fp_glPatchParameteri;
export let glPathCommandsNV: *fp_glPathCommandsNV =
	null: *fp_glPathCommandsNV;
export let glPathCoordsNV: *fp_glPathCoordsNV =
	null: *fp_glPathCoordsNV;
export let glPathCoverDepthFuncNV: *fp_glPathCoverDepthFuncNV =
	null: *fp_glPathCoverDepthFuncNV;
export let glPathDashArrayNV: *fp_glPathDashArrayNV =
	null: *fp_glPathDashArrayNV;
export let glPathGlyphIndexArrayNV: *fp_glPathGlyphIndexArrayNV =
	null: *fp_glPathGlyphIndexArrayNV;
export let glPathGlyphIndexRangeNV: *fp_glPathGlyphIndexRangeNV =
	null: *fp_glPathGlyphIndexRangeNV;
export let glPathGlyphRangeNV: *fp_glPathGlyphRangeNV =
	null: *fp_glPathGlyphRangeNV;
export let glPathGlyphsNV: *fp_glPathGlyphsNV =
	null: *fp_glPathGlyphsNV;
export let glPathMemoryGlyphIndexArrayNV: *fp_glPathMemoryGlyphIndexArrayNV =
	null: *fp_glPathMemoryGlyphIndexArrayNV;
export let glPathParameterfNV: *fp_glPathParameterfNV =
	null: *fp_glPathParameterfNV;
export let glPathParameterfvNV: *fp_glPathParameterfvNV =
	null: *fp_glPathParameterfvNV;
export let glPathParameteriNV: *fp_glPathParameteriNV =
	null: *fp_glPathParameteriNV;
export let glPathParameterivNV: *fp_glPathParameterivNV =
	null: *fp_glPathParameterivNV;
export let glPathStencilDepthOffsetNV: *fp_glPathStencilDepthOffsetNV =
	null: *fp_glPathStencilDepthOffsetNV;
export let glPathStencilFuncNV: *fp_glPathStencilFuncNV =
	null: *fp_glPathStencilFuncNV;
export let glPathStringNV: *fp_glPathStringNV =
	null: *fp_glPathStringNV;
export let glPathSubCommandsNV: *fp_glPathSubCommandsNV =
	null: *fp_glPathSubCommandsNV;
export let glPathSubCoordsNV: *fp_glPathSubCoordsNV =
	null: *fp_glPathSubCoordsNV;
export let glPauseTransformFeedback: *fp_glPauseTransformFeedback =
	null: *fp_glPauseTransformFeedback;
export let glPauseTransformFeedbackNV: *fp_glPauseTransformFeedbackNV =
	null: *fp_glPauseTransformFeedbackNV;
export let glPixelDataRangeNV: *fp_glPixelDataRangeNV =
	null: *fp_glPixelDataRangeNV;
export let glPixelMapfv: *fp_glPixelMapfv =
	null: *fp_glPixelMapfv;
export let glPixelMapuiv: *fp_glPixelMapuiv =
	null: *fp_glPixelMapuiv;
export let glPixelMapusv: *fp_glPixelMapusv =
	null: *fp_glPixelMapusv;
export let glPixelMapx: *fp_glPixelMapx =
	null: *fp_glPixelMapx;
export let glPixelStoref: *fp_glPixelStoref =
	null: *fp_glPixelStoref;
export let glPixelStorei: *fp_glPixelStorei =
	null: *fp_glPixelStorei;
export let glPixelStorex: *fp_glPixelStorex =
	null: *fp_glPixelStorex;
export let glPixelTexGenParameterfSGIS: *fp_glPixelTexGenParameterfSGIS =
	null: *fp_glPixelTexGenParameterfSGIS;
export let glPixelTexGenParameterfvSGIS: *fp_glPixelTexGenParameterfvSGIS =
	null: *fp_glPixelTexGenParameterfvSGIS;
export let glPixelTexGenParameteriSGIS: *fp_glPixelTexGenParameteriSGIS =
	null: *fp_glPixelTexGenParameteriSGIS;
export let glPixelTexGenParameterivSGIS: *fp_glPixelTexGenParameterivSGIS =
	null: *fp_glPixelTexGenParameterivSGIS;
export let glPixelTexGenSGIX: *fp_glPixelTexGenSGIX =
	null: *fp_glPixelTexGenSGIX;
export let glPixelTransferf: *fp_glPixelTransferf =
	null: *fp_glPixelTransferf;
export let glPixelTransferi: *fp_glPixelTransferi =
	null: *fp_glPixelTransferi;
export let glPixelTransferxOES: *fp_glPixelTransferxOES =
	null: *fp_glPixelTransferxOES;
export let glPixelTransformParameterfEXT: *fp_glPixelTransformParameterfEXT =
	null: *fp_glPixelTransformParameterfEXT;
export let glPixelTransformParameterfvEXT: *fp_glPixelTransformParameterfvEXT =
	null: *fp_glPixelTransformParameterfvEXT;
export let glPixelTransformParameteriEXT: *fp_glPixelTransformParameteriEXT =
	null: *fp_glPixelTransformParameteriEXT;
export let glPixelTransformParameterivEXT: *fp_glPixelTransformParameterivEXT =
	null: *fp_glPixelTransformParameterivEXT;
export let glPixelZoom: *fp_glPixelZoom =
	null: *fp_glPixelZoom;
export let glPixelZoomxOES: *fp_glPixelZoomxOES =
	null: *fp_glPixelZoomxOES;
export let glPointAlongPathNV: *fp_glPointAlongPathNV =
	null: *fp_glPointAlongPathNV;
export let glPointParameterf: *fp_glPointParameterf =
	null: *fp_glPointParameterf;
export let glPointParameterfARB: *fp_glPointParameterfARB =
	null: *fp_glPointParameterfARB;
export let glPointParameterfEXT: *fp_glPointParameterfEXT =
	null: *fp_glPointParameterfEXT;
export let glPointParameterfSGIS: *fp_glPointParameterfSGIS =
	null: *fp_glPointParameterfSGIS;
export let glPointParameterfv: *fp_glPointParameterfv =
	null: *fp_glPointParameterfv;
export let glPointParameterfvARB: *fp_glPointParameterfvARB =
	null: *fp_glPointParameterfvARB;
export let glPointParameterfvEXT: *fp_glPointParameterfvEXT =
	null: *fp_glPointParameterfvEXT;
export let glPointParameterfvSGIS: *fp_glPointParameterfvSGIS =
	null: *fp_glPointParameterfvSGIS;
export let glPointParameteri: *fp_glPointParameteri =
	null: *fp_glPointParameteri;
export let glPointParameteriNV: *fp_glPointParameteriNV =
	null: *fp_glPointParameteriNV;
export let glPointParameteriv: *fp_glPointParameteriv =
	null: *fp_glPointParameteriv;
export let glPointParameterivNV: *fp_glPointParameterivNV =
	null: *fp_glPointParameterivNV;
export let glPointParameterxvOES: *fp_glPointParameterxvOES =
	null: *fp_glPointParameterxvOES;
export let glPointSize: *fp_glPointSize =
	null: *fp_glPointSize;
export let glPointSizexOES: *fp_glPointSizexOES =
	null: *fp_glPointSizexOES;
export let glPollAsyncSGIX: *fp_glPollAsyncSGIX =
	null: *fp_glPollAsyncSGIX;
export let glPollInstrumentsSGIX: *fp_glPollInstrumentsSGIX =
	null: *fp_glPollInstrumentsSGIX;
export let glPolygonMode: *fp_glPolygonMode =
	null: *fp_glPolygonMode;
export let glPolygonOffset: *fp_glPolygonOffset =
	null: *fp_glPolygonOffset;
export let glPolygonOffsetClamp: *fp_glPolygonOffsetClamp =
	null: *fp_glPolygonOffsetClamp;
export let glPolygonOffsetClampEXT: *fp_glPolygonOffsetClampEXT =
	null: *fp_glPolygonOffsetClampEXT;
export let glPolygonOffsetEXT: *fp_glPolygonOffsetEXT =
	null: *fp_glPolygonOffsetEXT;
export let glPolygonOffsetxOES: *fp_glPolygonOffsetxOES =
	null: *fp_glPolygonOffsetxOES;
export let glPolygonStipple: *fp_glPolygonStipple =
	null: *fp_glPolygonStipple;
export let glPopAttrib: *fp_glPopAttrib =
	null: *fp_glPopAttrib;
export let glPopClientAttrib: *fp_glPopClientAttrib =
	null: *fp_glPopClientAttrib;
export let glPopDebugGroup: *fp_glPopDebugGroup =
	null: *fp_glPopDebugGroup;
export let glPopGroupMarkerEXT: *fp_glPopGroupMarkerEXT =
	null: *fp_glPopGroupMarkerEXT;
export let glPopMatrix: *fp_glPopMatrix =
	null: *fp_glPopMatrix;
export let glPopName: *fp_glPopName =
	null: *fp_glPopName;
export let glPresentFrameDualFillNV: *fp_glPresentFrameDualFillNV =
	null: *fp_glPresentFrameDualFillNV;
export let glPresentFrameKeyedNV: *fp_glPresentFrameKeyedNV =
	null: *fp_glPresentFrameKeyedNV;
export let glPrimitiveBoundingBoxARB: *fp_glPrimitiveBoundingBoxARB =
	null: *fp_glPrimitiveBoundingBoxARB;
export let glPrimitiveRestartIndexNV: *fp_glPrimitiveRestartIndexNV =
	null: *fp_glPrimitiveRestartIndexNV;
export let glPrimitiveRestartNV: *fp_glPrimitiveRestartNV =
	null: *fp_glPrimitiveRestartNV;
export let glPrioritizeTextures: *fp_glPrioritizeTextures =
	null: *fp_glPrioritizeTextures;
export let glPrioritizeTexturesEXT: *fp_glPrioritizeTexturesEXT =
	null: *fp_glPrioritizeTexturesEXT;
export let glPrioritizeTexturesxOES: *fp_glPrioritizeTexturesxOES =
	null: *fp_glPrioritizeTexturesxOES;
export let glProgramBinary: *fp_glProgramBinary =
	null: *fp_glProgramBinary;
export let glProgramBufferParametersIivNV: *fp_glProgramBufferParametersIivNV =
	null: *fp_glProgramBufferParametersIivNV;
export let glProgramBufferParametersIuivNV: *fp_glProgramBufferParametersIuivNV =
	null: *fp_glProgramBufferParametersIuivNV;
export let glProgramBufferParametersfvNV: *fp_glProgramBufferParametersfvNV =
	null: *fp_glProgramBufferParametersfvNV;
export let glProgramEnvParameter4dARB: *fp_glProgramEnvParameter4dARB =
	null: *fp_glProgramEnvParameter4dARB;
export let glProgramEnvParameter4dvARB: *fp_glProgramEnvParameter4dvARB =
	null: *fp_glProgramEnvParameter4dvARB;
export let glProgramEnvParameter4fARB: *fp_glProgramEnvParameter4fARB =
	null: *fp_glProgramEnvParameter4fARB;
export let glProgramEnvParameter4fvARB: *fp_glProgramEnvParameter4fvARB =
	null: *fp_glProgramEnvParameter4fvARB;
export let glProgramEnvParameterI4iNV: *fp_glProgramEnvParameterI4iNV =
	null: *fp_glProgramEnvParameterI4iNV;
export let glProgramEnvParameterI4ivNV: *fp_glProgramEnvParameterI4ivNV =
	null: *fp_glProgramEnvParameterI4ivNV;
export let glProgramEnvParameterI4uiNV: *fp_glProgramEnvParameterI4uiNV =
	null: *fp_glProgramEnvParameterI4uiNV;
export let glProgramEnvParameterI4uivNV: *fp_glProgramEnvParameterI4uivNV =
	null: *fp_glProgramEnvParameterI4uivNV;
export let glProgramEnvParameters4fvEXT: *fp_glProgramEnvParameters4fvEXT =
	null: *fp_glProgramEnvParameters4fvEXT;
export let glProgramEnvParametersI4ivNV: *fp_glProgramEnvParametersI4ivNV =
	null: *fp_glProgramEnvParametersI4ivNV;
export let glProgramEnvParametersI4uivNV: *fp_glProgramEnvParametersI4uivNV =
	null: *fp_glProgramEnvParametersI4uivNV;
export let glProgramLocalParameter4dARB: *fp_glProgramLocalParameter4dARB =
	null: *fp_glProgramLocalParameter4dARB;
export let glProgramLocalParameter4dvARB: *fp_glProgramLocalParameter4dvARB =
	null: *fp_glProgramLocalParameter4dvARB;
export let glProgramLocalParameter4fARB: *fp_glProgramLocalParameter4fARB =
	null: *fp_glProgramLocalParameter4fARB;
export let glProgramLocalParameter4fvARB: *fp_glProgramLocalParameter4fvARB =
	null: *fp_glProgramLocalParameter4fvARB;
export let glProgramLocalParameterI4iNV: *fp_glProgramLocalParameterI4iNV =
	null: *fp_glProgramLocalParameterI4iNV;
export let glProgramLocalParameterI4ivNV: *fp_glProgramLocalParameterI4ivNV =
	null: *fp_glProgramLocalParameterI4ivNV;
export let glProgramLocalParameterI4uiNV: *fp_glProgramLocalParameterI4uiNV =
	null: *fp_glProgramLocalParameterI4uiNV;
export let glProgramLocalParameterI4uivNV: *fp_glProgramLocalParameterI4uivNV =
	null: *fp_glProgramLocalParameterI4uivNV;
export let glProgramLocalParameters4fvEXT: *fp_glProgramLocalParameters4fvEXT =
	null: *fp_glProgramLocalParameters4fvEXT;
export let glProgramLocalParametersI4ivNV: *fp_glProgramLocalParametersI4ivNV =
	null: *fp_glProgramLocalParametersI4ivNV;
export let glProgramLocalParametersI4uivNV: *fp_glProgramLocalParametersI4uivNV =
	null: *fp_glProgramLocalParametersI4uivNV;
export let glProgramNamedParameter4dNV: *fp_glProgramNamedParameter4dNV =
	null: *fp_glProgramNamedParameter4dNV;
export let glProgramNamedParameter4dvNV: *fp_glProgramNamedParameter4dvNV =
	null: *fp_glProgramNamedParameter4dvNV;
export let glProgramNamedParameter4fNV: *fp_glProgramNamedParameter4fNV =
	null: *fp_glProgramNamedParameter4fNV;
export let glProgramNamedParameter4fvNV: *fp_glProgramNamedParameter4fvNV =
	null: *fp_glProgramNamedParameter4fvNV;
export let glProgramParameter4dNV: *fp_glProgramParameter4dNV =
	null: *fp_glProgramParameter4dNV;
export let glProgramParameter4dvNV: *fp_glProgramParameter4dvNV =
	null: *fp_glProgramParameter4dvNV;
export let glProgramParameter4fNV: *fp_glProgramParameter4fNV =
	null: *fp_glProgramParameter4fNV;
export let glProgramParameter4fvNV: *fp_glProgramParameter4fvNV =
	null: *fp_glProgramParameter4fvNV;
export let glProgramParameteri: *fp_glProgramParameteri =
	null: *fp_glProgramParameteri;
export let glProgramParameteriARB: *fp_glProgramParameteriARB =
	null: *fp_glProgramParameteriARB;
export let glProgramParameteriEXT: *fp_glProgramParameteriEXT =
	null: *fp_glProgramParameteriEXT;
export let glProgramParameters4dvNV: *fp_glProgramParameters4dvNV =
	null: *fp_glProgramParameters4dvNV;
export let glProgramParameters4fvNV: *fp_glProgramParameters4fvNV =
	null: *fp_glProgramParameters4fvNV;
export let glProgramPathFragmentInputGenNV: *fp_glProgramPathFragmentInputGenNV =
	null: *fp_glProgramPathFragmentInputGenNV;
export let glProgramStringARB: *fp_glProgramStringARB =
	null: *fp_glProgramStringARB;
export let glProgramSubroutineParametersuivNV: *fp_glProgramSubroutineParametersuivNV =
	null: *fp_glProgramSubroutineParametersuivNV;
export let glProgramUniform1d: *fp_glProgramUniform1d =
	null: *fp_glProgramUniform1d;
export let glProgramUniform1dEXT: *fp_glProgramUniform1dEXT =
	null: *fp_glProgramUniform1dEXT;
export let glProgramUniform1dv: *fp_glProgramUniform1dv =
	null: *fp_glProgramUniform1dv;
export let glProgramUniform1dvEXT: *fp_glProgramUniform1dvEXT =
	null: *fp_glProgramUniform1dvEXT;
export let glProgramUniform1f: *fp_glProgramUniform1f =
	null: *fp_glProgramUniform1f;
export let glProgramUniform1fEXT: *fp_glProgramUniform1fEXT =
	null: *fp_glProgramUniform1fEXT;
export let glProgramUniform1fv: *fp_glProgramUniform1fv =
	null: *fp_glProgramUniform1fv;
export let glProgramUniform1fvEXT: *fp_glProgramUniform1fvEXT =
	null: *fp_glProgramUniform1fvEXT;
export let glProgramUniform1i: *fp_glProgramUniform1i =
	null: *fp_glProgramUniform1i;
export let glProgramUniform1i64ARB: *fp_glProgramUniform1i64ARB =
	null: *fp_glProgramUniform1i64ARB;
export let glProgramUniform1i64NV: *fp_glProgramUniform1i64NV =
	null: *fp_glProgramUniform1i64NV;
export let glProgramUniform1i64vARB: *fp_glProgramUniform1i64vARB =
	null: *fp_glProgramUniform1i64vARB;
export let glProgramUniform1i64vNV: *fp_glProgramUniform1i64vNV =
	null: *fp_glProgramUniform1i64vNV;
export let glProgramUniform1iEXT: *fp_glProgramUniform1iEXT =
	null: *fp_glProgramUniform1iEXT;
export let glProgramUniform1iv: *fp_glProgramUniform1iv =
	null: *fp_glProgramUniform1iv;
export let glProgramUniform1ivEXT: *fp_glProgramUniform1ivEXT =
	null: *fp_glProgramUniform1ivEXT;
export let glProgramUniform1ui: *fp_glProgramUniform1ui =
	null: *fp_glProgramUniform1ui;
export let glProgramUniform1ui64ARB: *fp_glProgramUniform1ui64ARB =
	null: *fp_glProgramUniform1ui64ARB;
export let glProgramUniform1ui64NV: *fp_glProgramUniform1ui64NV =
	null: *fp_glProgramUniform1ui64NV;
export let glProgramUniform1ui64vARB: *fp_glProgramUniform1ui64vARB =
	null: *fp_glProgramUniform1ui64vARB;
export let glProgramUniform1ui64vNV: *fp_glProgramUniform1ui64vNV =
	null: *fp_glProgramUniform1ui64vNV;
export let glProgramUniform1uiEXT: *fp_glProgramUniform1uiEXT =
	null: *fp_glProgramUniform1uiEXT;
export let glProgramUniform1uiv: *fp_glProgramUniform1uiv =
	null: *fp_glProgramUniform1uiv;
export let glProgramUniform1uivEXT: *fp_glProgramUniform1uivEXT =
	null: *fp_glProgramUniform1uivEXT;
export let glProgramUniform2d: *fp_glProgramUniform2d =
	null: *fp_glProgramUniform2d;
export let glProgramUniform2dEXT: *fp_glProgramUniform2dEXT =
	null: *fp_glProgramUniform2dEXT;
export let glProgramUniform2dv: *fp_glProgramUniform2dv =
	null: *fp_glProgramUniform2dv;
export let glProgramUniform2dvEXT: *fp_glProgramUniform2dvEXT =
	null: *fp_glProgramUniform2dvEXT;
export let glProgramUniform2f: *fp_glProgramUniform2f =
	null: *fp_glProgramUniform2f;
export let glProgramUniform2fEXT: *fp_glProgramUniform2fEXT =
	null: *fp_glProgramUniform2fEXT;
export let glProgramUniform2fv: *fp_glProgramUniform2fv =
	null: *fp_glProgramUniform2fv;
export let glProgramUniform2fvEXT: *fp_glProgramUniform2fvEXT =
	null: *fp_glProgramUniform2fvEXT;
export let glProgramUniform2i: *fp_glProgramUniform2i =
	null: *fp_glProgramUniform2i;
export let glProgramUniform2i64ARB: *fp_glProgramUniform2i64ARB =
	null: *fp_glProgramUniform2i64ARB;
export let glProgramUniform2i64NV: *fp_glProgramUniform2i64NV =
	null: *fp_glProgramUniform2i64NV;
export let glProgramUniform2i64vARB: *fp_glProgramUniform2i64vARB =
	null: *fp_glProgramUniform2i64vARB;
export let glProgramUniform2i64vNV: *fp_glProgramUniform2i64vNV =
	null: *fp_glProgramUniform2i64vNV;
export let glProgramUniform2iEXT: *fp_glProgramUniform2iEXT =
	null: *fp_glProgramUniform2iEXT;
export let glProgramUniform2iv: *fp_glProgramUniform2iv =
	null: *fp_glProgramUniform2iv;
export let glProgramUniform2ivEXT: *fp_glProgramUniform2ivEXT =
	null: *fp_glProgramUniform2ivEXT;
export let glProgramUniform2ui: *fp_glProgramUniform2ui =
	null: *fp_glProgramUniform2ui;
export let glProgramUniform2ui64ARB: *fp_glProgramUniform2ui64ARB =
	null: *fp_glProgramUniform2ui64ARB;
export let glProgramUniform2ui64NV: *fp_glProgramUniform2ui64NV =
	null: *fp_glProgramUniform2ui64NV;
export let glProgramUniform2ui64vARB: *fp_glProgramUniform2ui64vARB =
	null: *fp_glProgramUniform2ui64vARB;
export let glProgramUniform2ui64vNV: *fp_glProgramUniform2ui64vNV =
	null: *fp_glProgramUniform2ui64vNV;
export let glProgramUniform2uiEXT: *fp_glProgramUniform2uiEXT =
	null: *fp_glProgramUniform2uiEXT;
export let glProgramUniform2uiv: *fp_glProgramUniform2uiv =
	null: *fp_glProgramUniform2uiv;
export let glProgramUniform2uivEXT: *fp_glProgramUniform2uivEXT =
	null: *fp_glProgramUniform2uivEXT;
export let glProgramUniform3d: *fp_glProgramUniform3d =
	null: *fp_glProgramUniform3d;
export let glProgramUniform3dEXT: *fp_glProgramUniform3dEXT =
	null: *fp_glProgramUniform3dEXT;
export let glProgramUniform3dv: *fp_glProgramUniform3dv =
	null: *fp_glProgramUniform3dv;
export let glProgramUniform3dvEXT: *fp_glProgramUniform3dvEXT =
	null: *fp_glProgramUniform3dvEXT;
export let glProgramUniform3f: *fp_glProgramUniform3f =
	null: *fp_glProgramUniform3f;
export let glProgramUniform3fEXT: *fp_glProgramUniform3fEXT =
	null: *fp_glProgramUniform3fEXT;
export let glProgramUniform3fv: *fp_glProgramUniform3fv =
	null: *fp_glProgramUniform3fv;
export let glProgramUniform3fvEXT: *fp_glProgramUniform3fvEXT =
	null: *fp_glProgramUniform3fvEXT;
export let glProgramUniform3i: *fp_glProgramUniform3i =
	null: *fp_glProgramUniform3i;
export let glProgramUniform3i64ARB: *fp_glProgramUniform3i64ARB =
	null: *fp_glProgramUniform3i64ARB;
export let glProgramUniform3i64NV: *fp_glProgramUniform3i64NV =
	null: *fp_glProgramUniform3i64NV;
export let glProgramUniform3i64vARB: *fp_glProgramUniform3i64vARB =
	null: *fp_glProgramUniform3i64vARB;
export let glProgramUniform3i64vNV: *fp_glProgramUniform3i64vNV =
	null: *fp_glProgramUniform3i64vNV;
export let glProgramUniform3iEXT: *fp_glProgramUniform3iEXT =
	null: *fp_glProgramUniform3iEXT;
export let glProgramUniform3iv: *fp_glProgramUniform3iv =
	null: *fp_glProgramUniform3iv;
export let glProgramUniform3ivEXT: *fp_glProgramUniform3ivEXT =
	null: *fp_glProgramUniform3ivEXT;
export let glProgramUniform3ui: *fp_glProgramUniform3ui =
	null: *fp_glProgramUniform3ui;
export let glProgramUniform3ui64ARB: *fp_glProgramUniform3ui64ARB =
	null: *fp_glProgramUniform3ui64ARB;
export let glProgramUniform3ui64NV: *fp_glProgramUniform3ui64NV =
	null: *fp_glProgramUniform3ui64NV;
export let glProgramUniform3ui64vARB: *fp_glProgramUniform3ui64vARB =
	null: *fp_glProgramUniform3ui64vARB;
export let glProgramUniform3ui64vNV: *fp_glProgramUniform3ui64vNV =
	null: *fp_glProgramUniform3ui64vNV;
export let glProgramUniform3uiEXT: *fp_glProgramUniform3uiEXT =
	null: *fp_glProgramUniform3uiEXT;
export let glProgramUniform3uiv: *fp_glProgramUniform3uiv =
	null: *fp_glProgramUniform3uiv;
export let glProgramUniform3uivEXT: *fp_glProgramUniform3uivEXT =
	null: *fp_glProgramUniform3uivEXT;
export let glProgramUniform4d: *fp_glProgramUniform4d =
	null: *fp_glProgramUniform4d;
export let glProgramUniform4dEXT: *fp_glProgramUniform4dEXT =
	null: *fp_glProgramUniform4dEXT;
export let glProgramUniform4dv: *fp_glProgramUniform4dv =
	null: *fp_glProgramUniform4dv;
export let glProgramUniform4dvEXT: *fp_glProgramUniform4dvEXT =
	null: *fp_glProgramUniform4dvEXT;
export let glProgramUniform4f: *fp_glProgramUniform4f =
	null: *fp_glProgramUniform4f;
export let glProgramUniform4fEXT: *fp_glProgramUniform4fEXT =
	null: *fp_glProgramUniform4fEXT;
export let glProgramUniform4fv: *fp_glProgramUniform4fv =
	null: *fp_glProgramUniform4fv;
export let glProgramUniform4fvEXT: *fp_glProgramUniform4fvEXT =
	null: *fp_glProgramUniform4fvEXT;
export let glProgramUniform4i: *fp_glProgramUniform4i =
	null: *fp_glProgramUniform4i;
export let glProgramUniform4i64ARB: *fp_glProgramUniform4i64ARB =
	null: *fp_glProgramUniform4i64ARB;
export let glProgramUniform4i64NV: *fp_glProgramUniform4i64NV =
	null: *fp_glProgramUniform4i64NV;
export let glProgramUniform4i64vARB: *fp_glProgramUniform4i64vARB =
	null: *fp_glProgramUniform4i64vARB;
export let glProgramUniform4i64vNV: *fp_glProgramUniform4i64vNV =
	null: *fp_glProgramUniform4i64vNV;
export let glProgramUniform4iEXT: *fp_glProgramUniform4iEXT =
	null: *fp_glProgramUniform4iEXT;
export let glProgramUniform4iv: *fp_glProgramUniform4iv =
	null: *fp_glProgramUniform4iv;
export let glProgramUniform4ivEXT: *fp_glProgramUniform4ivEXT =
	null: *fp_glProgramUniform4ivEXT;
export let glProgramUniform4ui: *fp_glProgramUniform4ui =
	null: *fp_glProgramUniform4ui;
export let glProgramUniform4ui64ARB: *fp_glProgramUniform4ui64ARB =
	null: *fp_glProgramUniform4ui64ARB;
export let glProgramUniform4ui64NV: *fp_glProgramUniform4ui64NV =
	null: *fp_glProgramUniform4ui64NV;
export let glProgramUniform4ui64vARB: *fp_glProgramUniform4ui64vARB =
	null: *fp_glProgramUniform4ui64vARB;
export let glProgramUniform4ui64vNV: *fp_glProgramUniform4ui64vNV =
	null: *fp_glProgramUniform4ui64vNV;
export let glProgramUniform4uiEXT: *fp_glProgramUniform4uiEXT =
	null: *fp_glProgramUniform4uiEXT;
export let glProgramUniform4uiv: *fp_glProgramUniform4uiv =
	null: *fp_glProgramUniform4uiv;
export let glProgramUniform4uivEXT: *fp_glProgramUniform4uivEXT =
	null: *fp_glProgramUniform4uivEXT;
export let glProgramUniformHandleui64ARB: *fp_glProgramUniformHandleui64ARB =
	null: *fp_glProgramUniformHandleui64ARB;
export let glProgramUniformHandleui64NV: *fp_glProgramUniformHandleui64NV =
	null: *fp_glProgramUniformHandleui64NV;
export let glProgramUniformHandleui64vARB: *fp_glProgramUniformHandleui64vARB =
	null: *fp_glProgramUniformHandleui64vARB;
export let glProgramUniformHandleui64vNV: *fp_glProgramUniformHandleui64vNV =
	null: *fp_glProgramUniformHandleui64vNV;
export let glProgramUniformMatrix2dv: *fp_glProgramUniformMatrix2dv =
	null: *fp_glProgramUniformMatrix2dv;
export let glProgramUniformMatrix2dvEXT: *fp_glProgramUniformMatrix2dvEXT =
	null: *fp_glProgramUniformMatrix2dvEXT;
export let glProgramUniformMatrix2fv: *fp_glProgramUniformMatrix2fv =
	null: *fp_glProgramUniformMatrix2fv;
export let glProgramUniformMatrix2fvEXT: *fp_glProgramUniformMatrix2fvEXT =
	null: *fp_glProgramUniformMatrix2fvEXT;
export let glProgramUniformMatrix2x3dv: *fp_glProgramUniformMatrix2x3dv =
	null: *fp_glProgramUniformMatrix2x3dv;
export let glProgramUniformMatrix2x3dvEXT: *fp_glProgramUniformMatrix2x3dvEXT =
	null: *fp_glProgramUniformMatrix2x3dvEXT;
export let glProgramUniformMatrix2x3fv: *fp_glProgramUniformMatrix2x3fv =
	null: *fp_glProgramUniformMatrix2x3fv;
export let glProgramUniformMatrix2x3fvEXT: *fp_glProgramUniformMatrix2x3fvEXT =
	null: *fp_glProgramUniformMatrix2x3fvEXT;
export let glProgramUniformMatrix2x4dv: *fp_glProgramUniformMatrix2x4dv =
	null: *fp_glProgramUniformMatrix2x4dv;
export let glProgramUniformMatrix2x4dvEXT: *fp_glProgramUniformMatrix2x4dvEXT =
	null: *fp_glProgramUniformMatrix2x4dvEXT;
export let glProgramUniformMatrix2x4fv: *fp_glProgramUniformMatrix2x4fv =
	null: *fp_glProgramUniformMatrix2x4fv;
export let glProgramUniformMatrix2x4fvEXT: *fp_glProgramUniformMatrix2x4fvEXT =
	null: *fp_glProgramUniformMatrix2x4fvEXT;
export let glProgramUniformMatrix3dv: *fp_glProgramUniformMatrix3dv =
	null: *fp_glProgramUniformMatrix3dv;
export let glProgramUniformMatrix3dvEXT: *fp_glProgramUniformMatrix3dvEXT =
	null: *fp_glProgramUniformMatrix3dvEXT;
export let glProgramUniformMatrix3fv: *fp_glProgramUniformMatrix3fv =
	null: *fp_glProgramUniformMatrix3fv;
export let glProgramUniformMatrix3fvEXT: *fp_glProgramUniformMatrix3fvEXT =
	null: *fp_glProgramUniformMatrix3fvEXT;
export let glProgramUniformMatrix3x2dv: *fp_glProgramUniformMatrix3x2dv =
	null: *fp_glProgramUniformMatrix3x2dv;
export let glProgramUniformMatrix3x2dvEXT: *fp_glProgramUniformMatrix3x2dvEXT =
	null: *fp_glProgramUniformMatrix3x2dvEXT;
export let glProgramUniformMatrix3x2fv: *fp_glProgramUniformMatrix3x2fv =
	null: *fp_glProgramUniformMatrix3x2fv;
export let glProgramUniformMatrix3x2fvEXT: *fp_glProgramUniformMatrix3x2fvEXT =
	null: *fp_glProgramUniformMatrix3x2fvEXT;
export let glProgramUniformMatrix3x4dv: *fp_glProgramUniformMatrix3x4dv =
	null: *fp_glProgramUniformMatrix3x4dv;
export let glProgramUniformMatrix3x4dvEXT: *fp_glProgramUniformMatrix3x4dvEXT =
	null: *fp_glProgramUniformMatrix3x4dvEXT;
export let glProgramUniformMatrix3x4fv: *fp_glProgramUniformMatrix3x4fv =
	null: *fp_glProgramUniformMatrix3x4fv;
export let glProgramUniformMatrix3x4fvEXT: *fp_glProgramUniformMatrix3x4fvEXT =
	null: *fp_glProgramUniformMatrix3x4fvEXT;
export let glProgramUniformMatrix4dv: *fp_glProgramUniformMatrix4dv =
	null: *fp_glProgramUniformMatrix4dv;
export let glProgramUniformMatrix4dvEXT: *fp_glProgramUniformMatrix4dvEXT =
	null: *fp_glProgramUniformMatrix4dvEXT;
export let glProgramUniformMatrix4fv: *fp_glProgramUniformMatrix4fv =
	null: *fp_glProgramUniformMatrix4fv;
export let glProgramUniformMatrix4fvEXT: *fp_glProgramUniformMatrix4fvEXT =
	null: *fp_glProgramUniformMatrix4fvEXT;
export let glProgramUniformMatrix4x2dv: *fp_glProgramUniformMatrix4x2dv =
	null: *fp_glProgramUniformMatrix4x2dv;
export let glProgramUniformMatrix4x2dvEXT: *fp_glProgramUniformMatrix4x2dvEXT =
	null: *fp_glProgramUniformMatrix4x2dvEXT;
export let glProgramUniformMatrix4x2fv: *fp_glProgramUniformMatrix4x2fv =
	null: *fp_glProgramUniformMatrix4x2fv;
export let glProgramUniformMatrix4x2fvEXT: *fp_glProgramUniformMatrix4x2fvEXT =
	null: *fp_glProgramUniformMatrix4x2fvEXT;
export let glProgramUniformMatrix4x3dv: *fp_glProgramUniformMatrix4x3dv =
	null: *fp_glProgramUniformMatrix4x3dv;
export let glProgramUniformMatrix4x3dvEXT: *fp_glProgramUniformMatrix4x3dvEXT =
	null: *fp_glProgramUniformMatrix4x3dvEXT;
export let glProgramUniformMatrix4x3fv: *fp_glProgramUniformMatrix4x3fv =
	null: *fp_glProgramUniformMatrix4x3fv;
export let glProgramUniformMatrix4x3fvEXT: *fp_glProgramUniformMatrix4x3fvEXT =
	null: *fp_glProgramUniformMatrix4x3fvEXT;
export let glProgramUniformui64NV: *fp_glProgramUniformui64NV =
	null: *fp_glProgramUniformui64NV;
export let glProgramUniformui64vNV: *fp_glProgramUniformui64vNV =
	null: *fp_glProgramUniformui64vNV;
export let glProgramVertexLimitNV: *fp_glProgramVertexLimitNV =
	null: *fp_glProgramVertexLimitNV;
export let glProvokingVertex: *fp_glProvokingVertex =
	null: *fp_glProvokingVertex;
export let glProvokingVertexEXT: *fp_glProvokingVertexEXT =
	null: *fp_glProvokingVertexEXT;
export let glPushAttrib: *fp_glPushAttrib =
	null: *fp_glPushAttrib;
export let glPushClientAttrib: *fp_glPushClientAttrib =
	null: *fp_glPushClientAttrib;
export let glPushClientAttribDefaultEXT: *fp_glPushClientAttribDefaultEXT =
	null: *fp_glPushClientAttribDefaultEXT;
export let glPushDebugGroup: *fp_glPushDebugGroup =
	null: *fp_glPushDebugGroup;
export let glPushGroupMarkerEXT: *fp_glPushGroupMarkerEXT =
	null: *fp_glPushGroupMarkerEXT;
export let glPushMatrix: *fp_glPushMatrix =
	null: *fp_glPushMatrix;
export let glPushName: *fp_glPushName =
	null: *fp_glPushName;
export let glQueryCounter: *fp_glQueryCounter =
	null: *fp_glQueryCounter;
export let glQueryMatrixxOES: *fp_glQueryMatrixxOES =
	null: *fp_glQueryMatrixxOES;
export let glQueryObjectParameteruiAMD: *fp_glQueryObjectParameteruiAMD =
	null: *fp_glQueryObjectParameteruiAMD;
export let glQueryResourceNV: *fp_glQueryResourceNV =
	null: *fp_glQueryResourceNV;
export let glQueryResourceTagNV: *fp_glQueryResourceTagNV =
	null: *fp_glQueryResourceTagNV;
export let glRasterPos2d: *fp_glRasterPos2d =
	null: *fp_glRasterPos2d;
export let glRasterPos2dv: *fp_glRasterPos2dv =
	null: *fp_glRasterPos2dv;
export let glRasterPos2f: *fp_glRasterPos2f =
	null: *fp_glRasterPos2f;
export let glRasterPos2fv: *fp_glRasterPos2fv =
	null: *fp_glRasterPos2fv;
export let glRasterPos2i: *fp_glRasterPos2i =
	null: *fp_glRasterPos2i;
export let glRasterPos2iv: *fp_glRasterPos2iv =
	null: *fp_glRasterPos2iv;
export let glRasterPos2s: *fp_glRasterPos2s =
	null: *fp_glRasterPos2s;
export let glRasterPos2sv: *fp_glRasterPos2sv =
	null: *fp_glRasterPos2sv;
export let glRasterPos2xOES: *fp_glRasterPos2xOES =
	null: *fp_glRasterPos2xOES;
export let glRasterPos2xvOES: *fp_glRasterPos2xvOES =
	null: *fp_glRasterPos2xvOES;
export let glRasterPos3d: *fp_glRasterPos3d =
	null: *fp_glRasterPos3d;
export let glRasterPos3dv: *fp_glRasterPos3dv =
	null: *fp_glRasterPos3dv;
export let glRasterPos3f: *fp_glRasterPos3f =
	null: *fp_glRasterPos3f;
export let glRasterPos3fv: *fp_glRasterPos3fv =
	null: *fp_glRasterPos3fv;
export let glRasterPos3i: *fp_glRasterPos3i =
	null: *fp_glRasterPos3i;
export let glRasterPos3iv: *fp_glRasterPos3iv =
	null: *fp_glRasterPos3iv;
export let glRasterPos3s: *fp_glRasterPos3s =
	null: *fp_glRasterPos3s;
export let glRasterPos3sv: *fp_glRasterPos3sv =
	null: *fp_glRasterPos3sv;
export let glRasterPos3xOES: *fp_glRasterPos3xOES =
	null: *fp_glRasterPos3xOES;
export let glRasterPos3xvOES: *fp_glRasterPos3xvOES =
	null: *fp_glRasterPos3xvOES;
export let glRasterPos4d: *fp_glRasterPos4d =
	null: *fp_glRasterPos4d;
export let glRasterPos4dv: *fp_glRasterPos4dv =
	null: *fp_glRasterPos4dv;
export let glRasterPos4f: *fp_glRasterPos4f =
	null: *fp_glRasterPos4f;
export let glRasterPos4fv: *fp_glRasterPos4fv =
	null: *fp_glRasterPos4fv;
export let glRasterPos4i: *fp_glRasterPos4i =
	null: *fp_glRasterPos4i;
export let glRasterPos4iv: *fp_glRasterPos4iv =
	null: *fp_glRasterPos4iv;
export let glRasterPos4s: *fp_glRasterPos4s =
	null: *fp_glRasterPos4s;
export let glRasterPos4sv: *fp_glRasterPos4sv =
	null: *fp_glRasterPos4sv;
export let glRasterPos4xOES: *fp_glRasterPos4xOES =
	null: *fp_glRasterPos4xOES;
export let glRasterPos4xvOES: *fp_glRasterPos4xvOES =
	null: *fp_glRasterPos4xvOES;
export let glRasterSamplesEXT: *fp_glRasterSamplesEXT =
	null: *fp_glRasterSamplesEXT;
export let glReadBuffer: *fp_glReadBuffer =
	null: *fp_glReadBuffer;
export let glReadInstrumentsSGIX: *fp_glReadInstrumentsSGIX =
	null: *fp_glReadInstrumentsSGIX;
export let glReadPixels: *fp_glReadPixels =
	null: *fp_glReadPixels;
export let glReadnPixels: *fp_glReadnPixels =
	null: *fp_glReadnPixels;
export let glReadnPixelsARB: *fp_glReadnPixelsARB =
	null: *fp_glReadnPixelsARB;
export let glRectd: *fp_glRectd =
	null: *fp_glRectd;
export let glRectdv: *fp_glRectdv =
	null: *fp_glRectdv;
export let glRectf: *fp_glRectf =
	null: *fp_glRectf;
export let glRectfv: *fp_glRectfv =
	null: *fp_glRectfv;
export let glRecti: *fp_glRecti =
	null: *fp_glRecti;
export let glRectiv: *fp_glRectiv =
	null: *fp_glRectiv;
export let glRects: *fp_glRects =
	null: *fp_glRects;
export let glRectsv: *fp_glRectsv =
	null: *fp_glRectsv;
export let glRectxOES: *fp_glRectxOES =
	null: *fp_glRectxOES;
export let glRectxvOES: *fp_glRectxvOES =
	null: *fp_glRectxvOES;
export let glReferencePlaneSGIX: *fp_glReferencePlaneSGIX =
	null: *fp_glReferencePlaneSGIX;
export let glReleaseKeyedMutexWin32EXT: *fp_glReleaseKeyedMutexWin32EXT =
	null: *fp_glReleaseKeyedMutexWin32EXT;
export let glReleaseShaderCompiler: *fp_glReleaseShaderCompiler =
	null: *fp_glReleaseShaderCompiler;
export let glRenderGpuMaskNV: *fp_glRenderGpuMaskNV =
	null: *fp_glRenderGpuMaskNV;
export let glRenderMode: *fp_glRenderMode =
	null: *fp_glRenderMode;
export let glRenderbufferStorage: *fp_glRenderbufferStorage =
	null: *fp_glRenderbufferStorage;
export let glRenderbufferStorageEXT: *fp_glRenderbufferStorageEXT =
	null: *fp_glRenderbufferStorageEXT;
export let glRenderbufferStorageMultisample: *fp_glRenderbufferStorageMultisample =
	null: *fp_glRenderbufferStorageMultisample;
export let glRenderbufferStorageMultisampleAdvancedAMD: *fp_glRenderbufferStorageMultisampleAdvancedAMD =
	null: *fp_glRenderbufferStorageMultisampleAdvancedAMD;
export let glRenderbufferStorageMultisampleCoverageNV: *fp_glRenderbufferStorageMultisampleCoverageNV =
	null: *fp_glRenderbufferStorageMultisampleCoverageNV;
export let glRenderbufferStorageMultisampleEXT: *fp_glRenderbufferStorageMultisampleEXT =
	null: *fp_glRenderbufferStorageMultisampleEXT;
export let glReplacementCodePointerSUN: *fp_glReplacementCodePointerSUN =
	null: *fp_glReplacementCodePointerSUN;
export let glReplacementCodeubSUN: *fp_glReplacementCodeubSUN =
	null: *fp_glReplacementCodeubSUN;
export let glReplacementCodeubvSUN: *fp_glReplacementCodeubvSUN =
	null: *fp_glReplacementCodeubvSUN;
export let glReplacementCodeuiColor3fVertex3fSUN: *fp_glReplacementCodeuiColor3fVertex3fSUN =
	null: *fp_glReplacementCodeuiColor3fVertex3fSUN;
export let glReplacementCodeuiColor3fVertex3fvSUN: *fp_glReplacementCodeuiColor3fVertex3fvSUN =
	null: *fp_glReplacementCodeuiColor3fVertex3fvSUN;
export let glReplacementCodeuiColor4fNormal3fVertex3fSUN: *fp_glReplacementCodeuiColor4fNormal3fVertex3fSUN =
	null: *fp_glReplacementCodeuiColor4fNormal3fVertex3fSUN;
export let glReplacementCodeuiColor4fNormal3fVertex3fvSUN: *fp_glReplacementCodeuiColor4fNormal3fVertex3fvSUN =
	null: *fp_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
export let glReplacementCodeuiColor4ubVertex3fSUN: *fp_glReplacementCodeuiColor4ubVertex3fSUN =
	null: *fp_glReplacementCodeuiColor4ubVertex3fSUN;
export let glReplacementCodeuiColor4ubVertex3fvSUN: *fp_glReplacementCodeuiColor4ubVertex3fvSUN =
	null: *fp_glReplacementCodeuiColor4ubVertex3fvSUN;
export let glReplacementCodeuiNormal3fVertex3fSUN: *fp_glReplacementCodeuiNormal3fVertex3fSUN =
	null: *fp_glReplacementCodeuiNormal3fVertex3fSUN;
export let glReplacementCodeuiNormal3fVertex3fvSUN: *fp_glReplacementCodeuiNormal3fVertex3fvSUN =
	null: *fp_glReplacementCodeuiNormal3fVertex3fvSUN;
export let glReplacementCodeuiSUN: *fp_glReplacementCodeuiSUN =
	null: *fp_glReplacementCodeuiSUN;
export let glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN: *fp_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN =
	null: *fp_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
export let glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN: *fp_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN =
	null: *fp_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
export let glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN: *fp_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN =
	null: *fp_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
export let glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN: *fp_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN =
	null: *fp_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
export let glReplacementCodeuiTexCoord2fVertex3fSUN: *fp_glReplacementCodeuiTexCoord2fVertex3fSUN =
	null: *fp_glReplacementCodeuiTexCoord2fVertex3fSUN;
export let glReplacementCodeuiTexCoord2fVertex3fvSUN: *fp_glReplacementCodeuiTexCoord2fVertex3fvSUN =
	null: *fp_glReplacementCodeuiTexCoord2fVertex3fvSUN;
export let glReplacementCodeuiVertex3fSUN: *fp_glReplacementCodeuiVertex3fSUN =
	null: *fp_glReplacementCodeuiVertex3fSUN;
export let glReplacementCodeuiVertex3fvSUN: *fp_glReplacementCodeuiVertex3fvSUN =
	null: *fp_glReplacementCodeuiVertex3fvSUN;
export let glReplacementCodeuivSUN: *fp_glReplacementCodeuivSUN =
	null: *fp_glReplacementCodeuivSUN;
export let glReplacementCodeusSUN: *fp_glReplacementCodeusSUN =
	null: *fp_glReplacementCodeusSUN;
export let glReplacementCodeusvSUN: *fp_glReplacementCodeusvSUN =
	null: *fp_glReplacementCodeusvSUN;
export let glRequestResidentProgramsNV: *fp_glRequestResidentProgramsNV =
	null: *fp_glRequestResidentProgramsNV;
export let glResetHistogramEXT: *fp_glResetHistogramEXT =
	null: *fp_glResetHistogramEXT;
export let glResetMemoryObjectParameterNV: *fp_glResetMemoryObjectParameterNV =
	null: *fp_glResetMemoryObjectParameterNV;
export let glResetMinmaxEXT: *fp_glResetMinmaxEXT =
	null: *fp_glResetMinmaxEXT;
export let glResizeBuffersMESA: *fp_glResizeBuffersMESA =
	null: *fp_glResizeBuffersMESA;
export let glResolveDepthValuesNV: *fp_glResolveDepthValuesNV =
	null: *fp_glResolveDepthValuesNV;
export let glResumeTransformFeedback: *fp_glResumeTransformFeedback =
	null: *fp_glResumeTransformFeedback;
export let glResumeTransformFeedbackNV: *fp_glResumeTransformFeedbackNV =
	null: *fp_glResumeTransformFeedbackNV;
export let glRotated: *fp_glRotated =
	null: *fp_glRotated;
export let glRotatef: *fp_glRotatef =
	null: *fp_glRotatef;
export let glRotatexOES: *fp_glRotatexOES =
	null: *fp_glRotatexOES;
export let glSampleCoverage: *fp_glSampleCoverage =
	null: *fp_glSampleCoverage;
export let glSampleCoverageARB: *fp_glSampleCoverageARB =
	null: *fp_glSampleCoverageARB;
export let glSampleMapATI: *fp_glSampleMapATI =
	null: *fp_glSampleMapATI;
export let glSampleMaskEXT: *fp_glSampleMaskEXT =
	null: *fp_glSampleMaskEXT;
export let glSampleMaskIndexedNV: *fp_glSampleMaskIndexedNV =
	null: *fp_glSampleMaskIndexedNV;
export let glSampleMaskSGIS: *fp_glSampleMaskSGIS =
	null: *fp_glSampleMaskSGIS;
export let glSampleMaski: *fp_glSampleMaski =
	null: *fp_glSampleMaski;
export let glSamplePatternEXT: *fp_glSamplePatternEXT =
	null: *fp_glSamplePatternEXT;
export let glSamplePatternSGIS: *fp_glSamplePatternSGIS =
	null: *fp_glSamplePatternSGIS;
export let glSamplerParameterIiv: *fp_glSamplerParameterIiv =
	null: *fp_glSamplerParameterIiv;
export let glSamplerParameterIuiv: *fp_glSamplerParameterIuiv =
	null: *fp_glSamplerParameterIuiv;
export let glSamplerParameterf: *fp_glSamplerParameterf =
	null: *fp_glSamplerParameterf;
export let glSamplerParameterfv: *fp_glSamplerParameterfv =
	null: *fp_glSamplerParameterfv;
export let glSamplerParameteri: *fp_glSamplerParameteri =
	null: *fp_glSamplerParameteri;
export let glSamplerParameteriv: *fp_glSamplerParameteriv =
	null: *fp_glSamplerParameteriv;
export let glScaled: *fp_glScaled =
	null: *fp_glScaled;
export let glScalef: *fp_glScalef =
	null: *fp_glScalef;
export let glScalexOES: *fp_glScalexOES =
	null: *fp_glScalexOES;
export let glScissor: *fp_glScissor =
	null: *fp_glScissor;
export let glScissorArrayv: *fp_glScissorArrayv =
	null: *fp_glScissorArrayv;
export let glScissorExclusiveArrayvNV: *fp_glScissorExclusiveArrayvNV =
	null: *fp_glScissorExclusiveArrayvNV;
export let glScissorExclusiveNV: *fp_glScissorExclusiveNV =
	null: *fp_glScissorExclusiveNV;
export let glScissorIndexed: *fp_glScissorIndexed =
	null: *fp_glScissorIndexed;
export let glScissorIndexedv: *fp_glScissorIndexedv =
	null: *fp_glScissorIndexedv;
export let glSecondaryColor3b: *fp_glSecondaryColor3b =
	null: *fp_glSecondaryColor3b;
export let glSecondaryColor3bEXT: *fp_glSecondaryColor3bEXT =
	null: *fp_glSecondaryColor3bEXT;
export let glSecondaryColor3bv: *fp_glSecondaryColor3bv =
	null: *fp_glSecondaryColor3bv;
export let glSecondaryColor3bvEXT: *fp_glSecondaryColor3bvEXT =
	null: *fp_glSecondaryColor3bvEXT;
export let glSecondaryColor3d: *fp_glSecondaryColor3d =
	null: *fp_glSecondaryColor3d;
export let glSecondaryColor3dEXT: *fp_glSecondaryColor3dEXT =
	null: *fp_glSecondaryColor3dEXT;
export let glSecondaryColor3dv: *fp_glSecondaryColor3dv =
	null: *fp_glSecondaryColor3dv;
export let glSecondaryColor3dvEXT: *fp_glSecondaryColor3dvEXT =
	null: *fp_glSecondaryColor3dvEXT;
export let glSecondaryColor3f: *fp_glSecondaryColor3f =
	null: *fp_glSecondaryColor3f;
export let glSecondaryColor3fEXT: *fp_glSecondaryColor3fEXT =
	null: *fp_glSecondaryColor3fEXT;
export let glSecondaryColor3fv: *fp_glSecondaryColor3fv =
	null: *fp_glSecondaryColor3fv;
export let glSecondaryColor3fvEXT: *fp_glSecondaryColor3fvEXT =
	null: *fp_glSecondaryColor3fvEXT;
export let glSecondaryColor3hNV: *fp_glSecondaryColor3hNV =
	null: *fp_glSecondaryColor3hNV;
export let glSecondaryColor3hvNV: *fp_glSecondaryColor3hvNV =
	null: *fp_glSecondaryColor3hvNV;
export let glSecondaryColor3i: *fp_glSecondaryColor3i =
	null: *fp_glSecondaryColor3i;
export let glSecondaryColor3iEXT: *fp_glSecondaryColor3iEXT =
	null: *fp_glSecondaryColor3iEXT;
export let glSecondaryColor3iv: *fp_glSecondaryColor3iv =
	null: *fp_glSecondaryColor3iv;
export let glSecondaryColor3ivEXT: *fp_glSecondaryColor3ivEXT =
	null: *fp_glSecondaryColor3ivEXT;
export let glSecondaryColor3s: *fp_glSecondaryColor3s =
	null: *fp_glSecondaryColor3s;
export let glSecondaryColor3sEXT: *fp_glSecondaryColor3sEXT =
	null: *fp_glSecondaryColor3sEXT;
export let glSecondaryColor3sv: *fp_glSecondaryColor3sv =
	null: *fp_glSecondaryColor3sv;
export let glSecondaryColor3svEXT: *fp_glSecondaryColor3svEXT =
	null: *fp_glSecondaryColor3svEXT;
export let glSecondaryColor3ub: *fp_glSecondaryColor3ub =
	null: *fp_glSecondaryColor3ub;
export let glSecondaryColor3ubEXT: *fp_glSecondaryColor3ubEXT =
	null: *fp_glSecondaryColor3ubEXT;
export let glSecondaryColor3ubv: *fp_glSecondaryColor3ubv =
	null: *fp_glSecondaryColor3ubv;
export let glSecondaryColor3ubvEXT: *fp_glSecondaryColor3ubvEXT =
	null: *fp_glSecondaryColor3ubvEXT;
export let glSecondaryColor3ui: *fp_glSecondaryColor3ui =
	null: *fp_glSecondaryColor3ui;
export let glSecondaryColor3uiEXT: *fp_glSecondaryColor3uiEXT =
	null: *fp_glSecondaryColor3uiEXT;
export let glSecondaryColor3uiv: *fp_glSecondaryColor3uiv =
	null: *fp_glSecondaryColor3uiv;
export let glSecondaryColor3uivEXT: *fp_glSecondaryColor3uivEXT =
	null: *fp_glSecondaryColor3uivEXT;
export let glSecondaryColor3us: *fp_glSecondaryColor3us =
	null: *fp_glSecondaryColor3us;
export let glSecondaryColor3usEXT: *fp_glSecondaryColor3usEXT =
	null: *fp_glSecondaryColor3usEXT;
export let glSecondaryColor3usv: *fp_glSecondaryColor3usv =
	null: *fp_glSecondaryColor3usv;
export let glSecondaryColor3usvEXT: *fp_glSecondaryColor3usvEXT =
	null: *fp_glSecondaryColor3usvEXT;
export let glSecondaryColorFormatNV: *fp_glSecondaryColorFormatNV =
	null: *fp_glSecondaryColorFormatNV;
export let glSecondaryColorPointer: *fp_glSecondaryColorPointer =
	null: *fp_glSecondaryColorPointer;
export let glSecondaryColorPointerEXT: *fp_glSecondaryColorPointerEXT =
	null: *fp_glSecondaryColorPointerEXT;
export let glSecondaryColorPointerListIBM: *fp_glSecondaryColorPointerListIBM =
	null: *fp_glSecondaryColorPointerListIBM;
export let glSelectBuffer: *fp_glSelectBuffer =
	null: *fp_glSelectBuffer;
export let glSelectPerfMonitorCountersAMD: *fp_glSelectPerfMonitorCountersAMD =
	null: *fp_glSelectPerfMonitorCountersAMD;
export let glSemaphoreParameterivNV: *fp_glSemaphoreParameterivNV =
	null: *fp_glSemaphoreParameterivNV;
export let glSemaphoreParameterui64vEXT: *fp_glSemaphoreParameterui64vEXT =
	null: *fp_glSemaphoreParameterui64vEXT;
export let glSeparableFilter2DEXT: *fp_glSeparableFilter2DEXT =
	null: *fp_glSeparableFilter2DEXT;
export let glSetFenceAPPLE: *fp_glSetFenceAPPLE =
	null: *fp_glSetFenceAPPLE;
export let glSetFenceNV: *fp_glSetFenceNV =
	null: *fp_glSetFenceNV;
export let glSetFragmentShaderConstantATI: *fp_glSetFragmentShaderConstantATI =
	null: *fp_glSetFragmentShaderConstantATI;
export let glSetInvariantEXT: *fp_glSetInvariantEXT =
	null: *fp_glSetInvariantEXT;
export let glSetLocalConstantEXT: *fp_glSetLocalConstantEXT =
	null: *fp_glSetLocalConstantEXT;
export let glSetMultisamplefvAMD: *fp_glSetMultisamplefvAMD =
	null: *fp_glSetMultisamplefvAMD;
export let glShadeModel: *fp_glShadeModel =
	null: *fp_glShadeModel;
export let glShaderBinary: *fp_glShaderBinary =
	null: *fp_glShaderBinary;
export let glShaderOp1EXT: *fp_glShaderOp1EXT =
	null: *fp_glShaderOp1EXT;
export let glShaderOp2EXT: *fp_glShaderOp2EXT =
	null: *fp_glShaderOp2EXT;
export let glShaderOp3EXT: *fp_glShaderOp3EXT =
	null: *fp_glShaderOp3EXT;
export let glShaderSource: *fp_glShaderSource =
	null: *fp_glShaderSource;
export let glShaderSourceARB: *fp_glShaderSourceARB =
	null: *fp_glShaderSourceARB;
export let glShaderStorageBlockBinding: *fp_glShaderStorageBlockBinding =
	null: *fp_glShaderStorageBlockBinding;
export let glShadingRateImageBarrierNV: *fp_glShadingRateImageBarrierNV =
	null: *fp_glShadingRateImageBarrierNV;
export let glShadingRateImagePaletteNV: *fp_glShadingRateImagePaletteNV =
	null: *fp_glShadingRateImagePaletteNV;
export let glShadingRateSampleOrderCustomNV: *fp_glShadingRateSampleOrderCustomNV =
	null: *fp_glShadingRateSampleOrderCustomNV;
export let glShadingRateSampleOrderNV: *fp_glShadingRateSampleOrderNV =
	null: *fp_glShadingRateSampleOrderNV;
export let glSharpenTexFuncSGIS: *fp_glSharpenTexFuncSGIS =
	null: *fp_glSharpenTexFuncSGIS;
export let glSignalSemaphoreEXT: *fp_glSignalSemaphoreEXT =
	null: *fp_glSignalSemaphoreEXT;
export let glSignalSemaphoreui64NVX: *fp_glSignalSemaphoreui64NVX =
	null: *fp_glSignalSemaphoreui64NVX;
export let glSignalVkFenceNV: *fp_glSignalVkFenceNV =
	null: *fp_glSignalVkFenceNV;
export let glSignalVkSemaphoreNV: *fp_glSignalVkSemaphoreNV =
	null: *fp_glSignalVkSemaphoreNV;
export let glSpecializeShaderARB: *fp_glSpecializeShaderARB =
	null: *fp_glSpecializeShaderARB;
export let glSpriteParameterfSGIX: *fp_glSpriteParameterfSGIX =
	null: *fp_glSpriteParameterfSGIX;
export let glSpriteParameterfvSGIX: *fp_glSpriteParameterfvSGIX =
	null: *fp_glSpriteParameterfvSGIX;
export let glSpriteParameteriSGIX: *fp_glSpriteParameteriSGIX =
	null: *fp_glSpriteParameteriSGIX;
export let glSpriteParameterivSGIX: *fp_glSpriteParameterivSGIX =
	null: *fp_glSpriteParameterivSGIX;
export let glStartInstrumentsSGIX: *fp_glStartInstrumentsSGIX =
	null: *fp_glStartInstrumentsSGIX;
export let glStateCaptureNV: *fp_glStateCaptureNV =
	null: *fp_glStateCaptureNV;
export let glStencilClearTagEXT: *fp_glStencilClearTagEXT =
	null: *fp_glStencilClearTagEXT;
export let glStencilFillPathInstancedNV: *fp_glStencilFillPathInstancedNV =
	null: *fp_glStencilFillPathInstancedNV;
export let glStencilFillPathNV: *fp_glStencilFillPathNV =
	null: *fp_glStencilFillPathNV;
export let glStencilFunc: *fp_glStencilFunc =
	null: *fp_glStencilFunc;
export let glStencilFuncSeparate: *fp_glStencilFuncSeparate =
	null: *fp_glStencilFuncSeparate;
export let glStencilFuncSeparateATI: *fp_glStencilFuncSeparateATI =
	null: *fp_glStencilFuncSeparateATI;
export let glStencilMask: *fp_glStencilMask =
	null: *fp_glStencilMask;
export let glStencilMaskSeparate: *fp_glStencilMaskSeparate =
	null: *fp_glStencilMaskSeparate;
export let glStencilOp: *fp_glStencilOp =
	null: *fp_glStencilOp;
export let glStencilOpSeparate: *fp_glStencilOpSeparate =
	null: *fp_glStencilOpSeparate;
export let glStencilOpSeparateATI: *fp_glStencilOpSeparateATI =
	null: *fp_glStencilOpSeparateATI;
export let glStencilOpValueAMD: *fp_glStencilOpValueAMD =
	null: *fp_glStencilOpValueAMD;
export let glStencilStrokePathInstancedNV: *fp_glStencilStrokePathInstancedNV =
	null: *fp_glStencilStrokePathInstancedNV;
export let glStencilStrokePathNV: *fp_glStencilStrokePathNV =
	null: *fp_glStencilStrokePathNV;
export let glStencilThenCoverFillPathInstancedNV: *fp_glStencilThenCoverFillPathInstancedNV =
	null: *fp_glStencilThenCoverFillPathInstancedNV;
export let glStencilThenCoverFillPathNV: *fp_glStencilThenCoverFillPathNV =
	null: *fp_glStencilThenCoverFillPathNV;
export let glStencilThenCoverStrokePathInstancedNV: *fp_glStencilThenCoverStrokePathInstancedNV =
	null: *fp_glStencilThenCoverStrokePathInstancedNV;
export let glStencilThenCoverStrokePathNV: *fp_glStencilThenCoverStrokePathNV =
	null: *fp_glStencilThenCoverStrokePathNV;
export let glStopInstrumentsSGIX: *fp_glStopInstrumentsSGIX =
	null: *fp_glStopInstrumentsSGIX;
export let glStringMarkerGREMEDY: *fp_glStringMarkerGREMEDY =
	null: *fp_glStringMarkerGREMEDY;
export let glSubpixelPrecisionBiasNV: *fp_glSubpixelPrecisionBiasNV =
	null: *fp_glSubpixelPrecisionBiasNV;
export let glSwizzleEXT: *fp_glSwizzleEXT =
	null: *fp_glSwizzleEXT;
export let glSyncTextureINTEL: *fp_glSyncTextureINTEL =
	null: *fp_glSyncTextureINTEL;
export let glTagSampleBufferSGIX: *fp_glTagSampleBufferSGIX =
	null: *fp_glTagSampleBufferSGIX;
export let glTangent3bEXT: *fp_glTangent3bEXT =
	null: *fp_glTangent3bEXT;
export let glTangent3bvEXT: *fp_glTangent3bvEXT =
	null: *fp_glTangent3bvEXT;
export let glTangent3dEXT: *fp_glTangent3dEXT =
	null: *fp_glTangent3dEXT;
export let glTangent3dvEXT: *fp_glTangent3dvEXT =
	null: *fp_glTangent3dvEXT;
export let glTangent3fEXT: *fp_glTangent3fEXT =
	null: *fp_glTangent3fEXT;
export let glTangent3fvEXT: *fp_glTangent3fvEXT =
	null: *fp_glTangent3fvEXT;
export let glTangent3iEXT: *fp_glTangent3iEXT =
	null: *fp_glTangent3iEXT;
export let glTangent3ivEXT: *fp_glTangent3ivEXT =
	null: *fp_glTangent3ivEXT;
export let glTangent3sEXT: *fp_glTangent3sEXT =
	null: *fp_glTangent3sEXT;
export let glTangent3svEXT: *fp_glTangent3svEXT =
	null: *fp_glTangent3svEXT;
export let glTangentPointerEXT: *fp_glTangentPointerEXT =
	null: *fp_glTangentPointerEXT;
export let glTbufferMask3DFX: *fp_glTbufferMask3DFX =
	null: *fp_glTbufferMask3DFX;
export let glTessellationFactorAMD: *fp_glTessellationFactorAMD =
	null: *fp_glTessellationFactorAMD;
export let glTessellationModeAMD: *fp_glTessellationModeAMD =
	null: *fp_glTessellationModeAMD;
export let glTestFenceAPPLE: *fp_glTestFenceAPPLE =
	null: *fp_glTestFenceAPPLE;
export let glTestFenceNV: *fp_glTestFenceNV =
	null: *fp_glTestFenceNV;
export let glTestObjectAPPLE: *fp_glTestObjectAPPLE =
	null: *fp_glTestObjectAPPLE;
export let glTexAttachMemoryNV: *fp_glTexAttachMemoryNV =
	null: *fp_glTexAttachMemoryNV;
export let glTexBufferARB: *fp_glTexBufferARB =
	null: *fp_glTexBufferARB;
export let glTexBufferEXT: *fp_glTexBufferEXT =
	null: *fp_glTexBufferEXT;
export let glTexBufferRange: *fp_glTexBufferRange =
	null: *fp_glTexBufferRange;
export let glTexBumpParameterfvATI: *fp_glTexBumpParameterfvATI =
	null: *fp_glTexBumpParameterfvATI;
export let glTexBumpParameterivATI: *fp_glTexBumpParameterivATI =
	null: *fp_glTexBumpParameterivATI;
export let glTexCoord1bOES: *fp_glTexCoord1bOES =
	null: *fp_glTexCoord1bOES;
export let glTexCoord1bvOES: *fp_glTexCoord1bvOES =
	null: *fp_glTexCoord1bvOES;
export let glTexCoord1d: *fp_glTexCoord1d =
	null: *fp_glTexCoord1d;
export let glTexCoord1dv: *fp_glTexCoord1dv =
	null: *fp_glTexCoord1dv;
export let glTexCoord1f: *fp_glTexCoord1f =
	null: *fp_glTexCoord1f;
export let glTexCoord1fv: *fp_glTexCoord1fv =
	null: *fp_glTexCoord1fv;
export let glTexCoord1hNV: *fp_glTexCoord1hNV =
	null: *fp_glTexCoord1hNV;
export let glTexCoord1hvNV: *fp_glTexCoord1hvNV =
	null: *fp_glTexCoord1hvNV;
export let glTexCoord1i: *fp_glTexCoord1i =
	null: *fp_glTexCoord1i;
export let glTexCoord1iv: *fp_glTexCoord1iv =
	null: *fp_glTexCoord1iv;
export let glTexCoord1s: *fp_glTexCoord1s =
	null: *fp_glTexCoord1s;
export let glTexCoord1sv: *fp_glTexCoord1sv =
	null: *fp_glTexCoord1sv;
export let glTexCoord1xOES: *fp_glTexCoord1xOES =
	null: *fp_glTexCoord1xOES;
export let glTexCoord1xvOES: *fp_glTexCoord1xvOES =
	null: *fp_glTexCoord1xvOES;
export let glTexCoord2bOES: *fp_glTexCoord2bOES =
	null: *fp_glTexCoord2bOES;
export let glTexCoord2bvOES: *fp_glTexCoord2bvOES =
	null: *fp_glTexCoord2bvOES;
export let glTexCoord2d: *fp_glTexCoord2d =
	null: *fp_glTexCoord2d;
export let glTexCoord2dv: *fp_glTexCoord2dv =
	null: *fp_glTexCoord2dv;
export let glTexCoord2f: *fp_glTexCoord2f =
	null: *fp_glTexCoord2f;
export let glTexCoord2fColor3fVertex3fSUN: *fp_glTexCoord2fColor3fVertex3fSUN =
	null: *fp_glTexCoord2fColor3fVertex3fSUN;
export let glTexCoord2fColor3fVertex3fvSUN: *fp_glTexCoord2fColor3fVertex3fvSUN =
	null: *fp_glTexCoord2fColor3fVertex3fvSUN;
export let glTexCoord2fColor4fNormal3fVertex3fSUN: *fp_glTexCoord2fColor4fNormal3fVertex3fSUN =
	null: *fp_glTexCoord2fColor4fNormal3fVertex3fSUN;
export let glTexCoord2fColor4fNormal3fVertex3fvSUN: *fp_glTexCoord2fColor4fNormal3fVertex3fvSUN =
	null: *fp_glTexCoord2fColor4fNormal3fVertex3fvSUN;
export let glTexCoord2fColor4ubVertex3fSUN: *fp_glTexCoord2fColor4ubVertex3fSUN =
	null: *fp_glTexCoord2fColor4ubVertex3fSUN;
export let glTexCoord2fColor4ubVertex3fvSUN: *fp_glTexCoord2fColor4ubVertex3fvSUN =
	null: *fp_glTexCoord2fColor4ubVertex3fvSUN;
export let glTexCoord2fNormal3fVertex3fSUN: *fp_glTexCoord2fNormal3fVertex3fSUN =
	null: *fp_glTexCoord2fNormal3fVertex3fSUN;
export let glTexCoord2fNormal3fVertex3fvSUN: *fp_glTexCoord2fNormal3fVertex3fvSUN =
	null: *fp_glTexCoord2fNormal3fVertex3fvSUN;
export let glTexCoord2fVertex3fSUN: *fp_glTexCoord2fVertex3fSUN =
	null: *fp_glTexCoord2fVertex3fSUN;
export let glTexCoord2fVertex3fvSUN: *fp_glTexCoord2fVertex3fvSUN =
	null: *fp_glTexCoord2fVertex3fvSUN;
export let glTexCoord2fv: *fp_glTexCoord2fv =
	null: *fp_glTexCoord2fv;
export let glTexCoord2hNV: *fp_glTexCoord2hNV =
	null: *fp_glTexCoord2hNV;
export let glTexCoord2hvNV: *fp_glTexCoord2hvNV =
	null: *fp_glTexCoord2hvNV;
export let glTexCoord2i: *fp_glTexCoord2i =
	null: *fp_glTexCoord2i;
export let glTexCoord2iv: *fp_glTexCoord2iv =
	null: *fp_glTexCoord2iv;
export let glTexCoord2s: *fp_glTexCoord2s =
	null: *fp_glTexCoord2s;
export let glTexCoord2sv: *fp_glTexCoord2sv =
	null: *fp_glTexCoord2sv;
export let glTexCoord2xOES: *fp_glTexCoord2xOES =
	null: *fp_glTexCoord2xOES;
export let glTexCoord2xvOES: *fp_glTexCoord2xvOES =
	null: *fp_glTexCoord2xvOES;
export let glTexCoord3bOES: *fp_glTexCoord3bOES =
	null: *fp_glTexCoord3bOES;
export let glTexCoord3bvOES: *fp_glTexCoord3bvOES =
	null: *fp_glTexCoord3bvOES;
export let glTexCoord3d: *fp_glTexCoord3d =
	null: *fp_glTexCoord3d;
export let glTexCoord3dv: *fp_glTexCoord3dv =
	null: *fp_glTexCoord3dv;
export let glTexCoord3f: *fp_glTexCoord3f =
	null: *fp_glTexCoord3f;
export let glTexCoord3fv: *fp_glTexCoord3fv =
	null: *fp_glTexCoord3fv;
export let glTexCoord3hNV: *fp_glTexCoord3hNV =
	null: *fp_glTexCoord3hNV;
export let glTexCoord3hvNV: *fp_glTexCoord3hvNV =
	null: *fp_glTexCoord3hvNV;
export let glTexCoord3i: *fp_glTexCoord3i =
	null: *fp_glTexCoord3i;
export let glTexCoord3iv: *fp_glTexCoord3iv =
	null: *fp_glTexCoord3iv;
export let glTexCoord3s: *fp_glTexCoord3s =
	null: *fp_glTexCoord3s;
export let glTexCoord3sv: *fp_glTexCoord3sv =
	null: *fp_glTexCoord3sv;
export let glTexCoord3xOES: *fp_glTexCoord3xOES =
	null: *fp_glTexCoord3xOES;
export let glTexCoord3xvOES: *fp_glTexCoord3xvOES =
	null: *fp_glTexCoord3xvOES;
export let glTexCoord4bOES: *fp_glTexCoord4bOES =
	null: *fp_glTexCoord4bOES;
export let glTexCoord4bvOES: *fp_glTexCoord4bvOES =
	null: *fp_glTexCoord4bvOES;
export let glTexCoord4d: *fp_glTexCoord4d =
	null: *fp_glTexCoord4d;
export let glTexCoord4dv: *fp_glTexCoord4dv =
	null: *fp_glTexCoord4dv;
export let glTexCoord4f: *fp_glTexCoord4f =
	null: *fp_glTexCoord4f;
export let glTexCoord4fColor4fNormal3fVertex4fSUN: *fp_glTexCoord4fColor4fNormal3fVertex4fSUN =
	null: *fp_glTexCoord4fColor4fNormal3fVertex4fSUN;
export let glTexCoord4fColor4fNormal3fVertex4fvSUN: *fp_glTexCoord4fColor4fNormal3fVertex4fvSUN =
	null: *fp_glTexCoord4fColor4fNormal3fVertex4fvSUN;
export let glTexCoord4fVertex4fSUN: *fp_glTexCoord4fVertex4fSUN =
	null: *fp_glTexCoord4fVertex4fSUN;
export let glTexCoord4fVertex4fvSUN: *fp_glTexCoord4fVertex4fvSUN =
	null: *fp_glTexCoord4fVertex4fvSUN;
export let glTexCoord4fv: *fp_glTexCoord4fv =
	null: *fp_glTexCoord4fv;
export let glTexCoord4hNV: *fp_glTexCoord4hNV =
	null: *fp_glTexCoord4hNV;
export let glTexCoord4hvNV: *fp_glTexCoord4hvNV =
	null: *fp_glTexCoord4hvNV;
export let glTexCoord4i: *fp_glTexCoord4i =
	null: *fp_glTexCoord4i;
export let glTexCoord4iv: *fp_glTexCoord4iv =
	null: *fp_glTexCoord4iv;
export let glTexCoord4s: *fp_glTexCoord4s =
	null: *fp_glTexCoord4s;
export let glTexCoord4sv: *fp_glTexCoord4sv =
	null: *fp_glTexCoord4sv;
export let glTexCoord4xOES: *fp_glTexCoord4xOES =
	null: *fp_glTexCoord4xOES;
export let glTexCoord4xvOES: *fp_glTexCoord4xvOES =
	null: *fp_glTexCoord4xvOES;
export let glTexCoordFormatNV: *fp_glTexCoordFormatNV =
	null: *fp_glTexCoordFormatNV;
export let glTexCoordPointer: *fp_glTexCoordPointer =
	null: *fp_glTexCoordPointer;
export let glTexCoordPointerEXT: *fp_glTexCoordPointerEXT =
	null: *fp_glTexCoordPointerEXT;
export let glTexCoordPointerListIBM: *fp_glTexCoordPointerListIBM =
	null: *fp_glTexCoordPointerListIBM;
export let glTexCoordPointervINTEL: *fp_glTexCoordPointervINTEL =
	null: *fp_glTexCoordPointervINTEL;
export let glTexEnvf: *fp_glTexEnvf =
	null: *fp_glTexEnvf;
export let glTexEnvfv: *fp_glTexEnvfv =
	null: *fp_glTexEnvfv;
export let glTexEnvi: *fp_glTexEnvi =
	null: *fp_glTexEnvi;
export let glTexEnviv: *fp_glTexEnviv =
	null: *fp_glTexEnviv;
export let glTexEnvxOES: *fp_glTexEnvxOES =
	null: *fp_glTexEnvxOES;
export let glTexEnvxvOES: *fp_glTexEnvxvOES =
	null: *fp_glTexEnvxvOES;
export let glTexFilterFuncSGIS: *fp_glTexFilterFuncSGIS =
	null: *fp_glTexFilterFuncSGIS;
export let glTexGend: *fp_glTexGend =
	null: *fp_glTexGend;
export let glTexGendv: *fp_glTexGendv =
	null: *fp_glTexGendv;
export let glTexGenf: *fp_glTexGenf =
	null: *fp_glTexGenf;
export let glTexGenfv: *fp_glTexGenfv =
	null: *fp_glTexGenfv;
export let glTexGeni: *fp_glTexGeni =
	null: *fp_glTexGeni;
export let glTexGeniv: *fp_glTexGeniv =
	null: *fp_glTexGeniv;
export let glTexGenxOES: *fp_glTexGenxOES =
	null: *fp_glTexGenxOES;
export let glTexGenxvOES: *fp_glTexGenxvOES =
	null: *fp_glTexGenxvOES;
export let glTexImage1D: *fp_glTexImage1D =
	null: *fp_glTexImage1D;
export let glTexImage2D: *fp_glTexImage2D =
	null: *fp_glTexImage2D;
export let glTexImage2DMultisample: *fp_glTexImage2DMultisample =
	null: *fp_glTexImage2DMultisample;
export let glTexImage2DMultisampleCoverageNV: *fp_glTexImage2DMultisampleCoverageNV =
	null: *fp_glTexImage2DMultisampleCoverageNV;
export let glTexImage3D: *fp_glTexImage3D =
	null: *fp_glTexImage3D;
export let glTexImage3DEXT: *fp_glTexImage3DEXT =
	null: *fp_glTexImage3DEXT;
export let glTexImage3DMultisample: *fp_glTexImage3DMultisample =
	null: *fp_glTexImage3DMultisample;
export let glTexImage3DMultisampleCoverageNV: *fp_glTexImage3DMultisampleCoverageNV =
	null: *fp_glTexImage3DMultisampleCoverageNV;
export let glTexImage4DSGIS: *fp_glTexImage4DSGIS =
	null: *fp_glTexImage4DSGIS;
export let glTexPageCommitmentARB: *fp_glTexPageCommitmentARB =
	null: *fp_glTexPageCommitmentARB;
export let glTexPageCommitmentMemNV: *fp_glTexPageCommitmentMemNV =
	null: *fp_glTexPageCommitmentMemNV;
export let glTexParameterIivEXT: *fp_glTexParameterIivEXT =
	null: *fp_glTexParameterIivEXT;
export let glTexParameterIuivEXT: *fp_glTexParameterIuivEXT =
	null: *fp_glTexParameterIuivEXT;
export let glTexParameterf: *fp_glTexParameterf =
	null: *fp_glTexParameterf;
export let glTexParameterfv: *fp_glTexParameterfv =
	null: *fp_glTexParameterfv;
export let glTexParameteri: *fp_glTexParameteri =
	null: *fp_glTexParameteri;
export let glTexParameteriv: *fp_glTexParameteriv =
	null: *fp_glTexParameteriv;
export let glTexParameterxOES: *fp_glTexParameterxOES =
	null: *fp_glTexParameterxOES;
export let glTexParameterxvOES: *fp_glTexParameterxvOES =
	null: *fp_glTexParameterxvOES;
export let glTexRenderbufferNV: *fp_glTexRenderbufferNV =
	null: *fp_glTexRenderbufferNV;
export let glTexStorage1D: *fp_glTexStorage1D =
	null: *fp_glTexStorage1D;
export let glTexStorage1DEXT: *fp_glTexStorage1DEXT =
	null: *fp_glTexStorage1DEXT;
export let glTexStorage2D: *fp_glTexStorage2D =
	null: *fp_glTexStorage2D;
export let glTexStorage2DEXT: *fp_glTexStorage2DEXT =
	null: *fp_glTexStorage2DEXT;
export let glTexStorage2DMultisample: *fp_glTexStorage2DMultisample =
	null: *fp_glTexStorage2DMultisample;
export let glTexStorage3D: *fp_glTexStorage3D =
	null: *fp_glTexStorage3D;
export let glTexStorage3DEXT: *fp_glTexStorage3DEXT =
	null: *fp_glTexStorage3DEXT;
export let glTexStorage3DMultisample: *fp_glTexStorage3DMultisample =
	null: *fp_glTexStorage3DMultisample;
export let glTexStorageMem1DEXT: *fp_glTexStorageMem1DEXT =
	null: *fp_glTexStorageMem1DEXT;
export let glTexStorageMem2DEXT: *fp_glTexStorageMem2DEXT =
	null: *fp_glTexStorageMem2DEXT;
export let glTexStorageMem2DMultisampleEXT: *fp_glTexStorageMem2DMultisampleEXT =
	null: *fp_glTexStorageMem2DMultisampleEXT;
export let glTexStorageMem3DEXT: *fp_glTexStorageMem3DEXT =
	null: *fp_glTexStorageMem3DEXT;
export let glTexStorageMem3DMultisampleEXT: *fp_glTexStorageMem3DMultisampleEXT =
	null: *fp_glTexStorageMem3DMultisampleEXT;
export let glTexStorageSparseAMD: *fp_glTexStorageSparseAMD =
	null: *fp_glTexStorageSparseAMD;
export let glTexSubImage1D: *fp_glTexSubImage1D =
	null: *fp_glTexSubImage1D;
export let glTexSubImage1DEXT: *fp_glTexSubImage1DEXT =
	null: *fp_glTexSubImage1DEXT;
export let glTexSubImage2D: *fp_glTexSubImage2D =
	null: *fp_glTexSubImage2D;
export let glTexSubImage2DEXT: *fp_glTexSubImage2DEXT =
	null: *fp_glTexSubImage2DEXT;
export let glTexSubImage3D: *fp_glTexSubImage3D =
	null: *fp_glTexSubImage3D;
export let glTexSubImage3DEXT: *fp_glTexSubImage3DEXT =
	null: *fp_glTexSubImage3DEXT;
export let glTexSubImage4DSGIS: *fp_glTexSubImage4DSGIS =
	null: *fp_glTexSubImage4DSGIS;
export let glTextureAttachMemoryNV: *fp_glTextureAttachMemoryNV =
	null: *fp_glTextureAttachMemoryNV;
export let glTextureBarrier: *fp_glTextureBarrier =
	null: *fp_glTextureBarrier;
export let glTextureBarrierNV: *fp_glTextureBarrierNV =
	null: *fp_glTextureBarrierNV;
export let glTextureBuffer: *fp_glTextureBuffer =
	null: *fp_glTextureBuffer;
export let glTextureBufferEXT: *fp_glTextureBufferEXT =
	null: *fp_glTextureBufferEXT;
export let glTextureBufferRange: *fp_glTextureBufferRange =
	null: *fp_glTextureBufferRange;
export let glTextureBufferRangeEXT: *fp_glTextureBufferRangeEXT =
	null: *fp_glTextureBufferRangeEXT;
export let glTextureColorMaskSGIS: *fp_glTextureColorMaskSGIS =
	null: *fp_glTextureColorMaskSGIS;
export let glTextureImage1DEXT: *fp_glTextureImage1DEXT =
	null: *fp_glTextureImage1DEXT;
export let glTextureImage2DEXT: *fp_glTextureImage2DEXT =
	null: *fp_glTextureImage2DEXT;
export let glTextureImage2DMultisampleCoverageNV: *fp_glTextureImage2DMultisampleCoverageNV =
	null: *fp_glTextureImage2DMultisampleCoverageNV;
export let glTextureImage2DMultisampleNV: *fp_glTextureImage2DMultisampleNV =
	null: *fp_glTextureImage2DMultisampleNV;
export let glTextureImage3DEXT: *fp_glTextureImage3DEXT =
	null: *fp_glTextureImage3DEXT;
export let glTextureImage3DMultisampleCoverageNV: *fp_glTextureImage3DMultisampleCoverageNV =
	null: *fp_glTextureImage3DMultisampleCoverageNV;
export let glTextureImage3DMultisampleNV: *fp_glTextureImage3DMultisampleNV =
	null: *fp_glTextureImage3DMultisampleNV;
export let glTextureLightEXT: *fp_glTextureLightEXT =
	null: *fp_glTextureLightEXT;
export let glTextureMaterialEXT: *fp_glTextureMaterialEXT =
	null: *fp_glTextureMaterialEXT;
export let glTextureNormalEXT: *fp_glTextureNormalEXT =
	null: *fp_glTextureNormalEXT;
export let glTexturePageCommitmentEXT: *fp_glTexturePageCommitmentEXT =
	null: *fp_glTexturePageCommitmentEXT;
export let glTexturePageCommitmentMemNV: *fp_glTexturePageCommitmentMemNV =
	null: *fp_glTexturePageCommitmentMemNV;
export let glTextureParameterIiv: *fp_glTextureParameterIiv =
	null: *fp_glTextureParameterIiv;
export let glTextureParameterIivEXT: *fp_glTextureParameterIivEXT =
	null: *fp_glTextureParameterIivEXT;
export let glTextureParameterIuiv: *fp_glTextureParameterIuiv =
	null: *fp_glTextureParameterIuiv;
export let glTextureParameterIuivEXT: *fp_glTextureParameterIuivEXT =
	null: *fp_glTextureParameterIuivEXT;
export let glTextureParameterf: *fp_glTextureParameterf =
	null: *fp_glTextureParameterf;
export let glTextureParameterfEXT: *fp_glTextureParameterfEXT =
	null: *fp_glTextureParameterfEXT;
export let glTextureParameterfv: *fp_glTextureParameterfv =
	null: *fp_glTextureParameterfv;
export let glTextureParameterfvEXT: *fp_glTextureParameterfvEXT =
	null: *fp_glTextureParameterfvEXT;
export let glTextureParameteri: *fp_glTextureParameteri =
	null: *fp_glTextureParameteri;
export let glTextureParameteriEXT: *fp_glTextureParameteriEXT =
	null: *fp_glTextureParameteriEXT;
export let glTextureParameteriv: *fp_glTextureParameteriv =
	null: *fp_glTextureParameteriv;
export let glTextureParameterivEXT: *fp_glTextureParameterivEXT =
	null: *fp_glTextureParameterivEXT;
export let glTextureRangeAPPLE: *fp_glTextureRangeAPPLE =
	null: *fp_glTextureRangeAPPLE;
export let glTextureRenderbufferEXT: *fp_glTextureRenderbufferEXT =
	null: *fp_glTextureRenderbufferEXT;
export let glTextureStorage1D: *fp_glTextureStorage1D =
	null: *fp_glTextureStorage1D;
export let glTextureStorage1DEXT: *fp_glTextureStorage1DEXT =
	null: *fp_glTextureStorage1DEXT;
export let glTextureStorage2D: *fp_glTextureStorage2D =
	null: *fp_glTextureStorage2D;
export let glTextureStorage2DEXT: *fp_glTextureStorage2DEXT =
	null: *fp_glTextureStorage2DEXT;
export let glTextureStorage2DMultisample: *fp_glTextureStorage2DMultisample =
	null: *fp_glTextureStorage2DMultisample;
export let glTextureStorage2DMultisampleEXT: *fp_glTextureStorage2DMultisampleEXT =
	null: *fp_glTextureStorage2DMultisampleEXT;
export let glTextureStorage3D: *fp_glTextureStorage3D =
	null: *fp_glTextureStorage3D;
export let glTextureStorage3DEXT: *fp_glTextureStorage3DEXT =
	null: *fp_glTextureStorage3DEXT;
export let glTextureStorage3DMultisample: *fp_glTextureStorage3DMultisample =
	null: *fp_glTextureStorage3DMultisample;
export let glTextureStorage3DMultisampleEXT: *fp_glTextureStorage3DMultisampleEXT =
	null: *fp_glTextureStorage3DMultisampleEXT;
export let glTextureStorageMem1DEXT: *fp_glTextureStorageMem1DEXT =
	null: *fp_glTextureStorageMem1DEXT;
export let glTextureStorageMem2DEXT: *fp_glTextureStorageMem2DEXT =
	null: *fp_glTextureStorageMem2DEXT;
export let glTextureStorageMem2DMultisampleEXT: *fp_glTextureStorageMem2DMultisampleEXT =
	null: *fp_glTextureStorageMem2DMultisampleEXT;
export let glTextureStorageMem3DEXT: *fp_glTextureStorageMem3DEXT =
	null: *fp_glTextureStorageMem3DEXT;
export let glTextureStorageMem3DMultisampleEXT: *fp_glTextureStorageMem3DMultisampleEXT =
	null: *fp_glTextureStorageMem3DMultisampleEXT;
export let glTextureStorageSparseAMD: *fp_glTextureStorageSparseAMD =
	null: *fp_glTextureStorageSparseAMD;
export let glTextureSubImage1D: *fp_glTextureSubImage1D =
	null: *fp_glTextureSubImage1D;
export let glTextureSubImage1DEXT: *fp_glTextureSubImage1DEXT =
	null: *fp_glTextureSubImage1DEXT;
export let glTextureSubImage2D: *fp_glTextureSubImage2D =
	null: *fp_glTextureSubImage2D;
export let glTextureSubImage2DEXT: *fp_glTextureSubImage2DEXT =
	null: *fp_glTextureSubImage2DEXT;
export let glTextureSubImage3D: *fp_glTextureSubImage3D =
	null: *fp_glTextureSubImage3D;
export let glTextureSubImage3DEXT: *fp_glTextureSubImage3DEXT =
	null: *fp_glTextureSubImage3DEXT;
export let glTextureView: *fp_glTextureView =
	null: *fp_glTextureView;
export let glTrackMatrixNV: *fp_glTrackMatrixNV =
	null: *fp_glTrackMatrixNV;
export let glTransformFeedbackAttribsNV: *fp_glTransformFeedbackAttribsNV =
	null: *fp_glTransformFeedbackAttribsNV;
export let glTransformFeedbackBufferBase: *fp_glTransformFeedbackBufferBase =
	null: *fp_glTransformFeedbackBufferBase;
export let glTransformFeedbackBufferRange: *fp_glTransformFeedbackBufferRange =
	null: *fp_glTransformFeedbackBufferRange;
export let glTransformFeedbackStreamAttribsNV: *fp_glTransformFeedbackStreamAttribsNV =
	null: *fp_glTransformFeedbackStreamAttribsNV;
export let glTransformFeedbackVaryingsEXT: *fp_glTransformFeedbackVaryingsEXT =
	null: *fp_glTransformFeedbackVaryingsEXT;
export let glTransformFeedbackVaryingsNV: *fp_glTransformFeedbackVaryingsNV =
	null: *fp_glTransformFeedbackVaryingsNV;
export let glTransformPathNV: *fp_glTransformPathNV =
	null: *fp_glTransformPathNV;
export let glTranslated: *fp_glTranslated =
	null: *fp_glTranslated;
export let glTranslatef: *fp_glTranslatef =
	null: *fp_glTranslatef;
export let glTranslatexOES: *fp_glTranslatexOES =
	null: *fp_glTranslatexOES;
export let glUniform1d: *fp_glUniform1d =
	null: *fp_glUniform1d;
export let glUniform1dv: *fp_glUniform1dv =
	null: *fp_glUniform1dv;
export let glUniform1f: *fp_glUniform1f =
	null: *fp_glUniform1f;
export let glUniform1fARB: *fp_glUniform1fARB =
	null: *fp_glUniform1fARB;
export let glUniform1fv: *fp_glUniform1fv =
	null: *fp_glUniform1fv;
export let glUniform1fvARB: *fp_glUniform1fvARB =
	null: *fp_glUniform1fvARB;
export let glUniform1i: *fp_glUniform1i =
	null: *fp_glUniform1i;
export let glUniform1i64ARB: *fp_glUniform1i64ARB =
	null: *fp_glUniform1i64ARB;
export let glUniform1i64NV: *fp_glUniform1i64NV =
	null: *fp_glUniform1i64NV;
export let glUniform1i64vARB: *fp_glUniform1i64vARB =
	null: *fp_glUniform1i64vARB;
export let glUniform1i64vNV: *fp_glUniform1i64vNV =
	null: *fp_glUniform1i64vNV;
export let glUniform1iARB: *fp_glUniform1iARB =
	null: *fp_glUniform1iARB;
export let glUniform1iv: *fp_glUniform1iv =
	null: *fp_glUniform1iv;
export let glUniform1ivARB: *fp_glUniform1ivARB =
	null: *fp_glUniform1ivARB;
export let glUniform1ui64ARB: *fp_glUniform1ui64ARB =
	null: *fp_glUniform1ui64ARB;
export let glUniform1ui64NV: *fp_glUniform1ui64NV =
	null: *fp_glUniform1ui64NV;
export let glUniform1ui64vARB: *fp_glUniform1ui64vARB =
	null: *fp_glUniform1ui64vARB;
export let glUniform1ui64vNV: *fp_glUniform1ui64vNV =
	null: *fp_glUniform1ui64vNV;
export let glUniform1uiEXT: *fp_glUniform1uiEXT =
	null: *fp_glUniform1uiEXT;
export let glUniform1uivEXT: *fp_glUniform1uivEXT =
	null: *fp_glUniform1uivEXT;
export let glUniform2d: *fp_glUniform2d =
	null: *fp_glUniform2d;
export let glUniform2dv: *fp_glUniform2dv =
	null: *fp_glUniform2dv;
export let glUniform2f: *fp_glUniform2f =
	null: *fp_glUniform2f;
export let glUniform2fARB: *fp_glUniform2fARB =
	null: *fp_glUniform2fARB;
export let glUniform2fv: *fp_glUniform2fv =
	null: *fp_glUniform2fv;
export let glUniform2fvARB: *fp_glUniform2fvARB =
	null: *fp_glUniform2fvARB;
export let glUniform2i: *fp_glUniform2i =
	null: *fp_glUniform2i;
export let glUniform2i64ARB: *fp_glUniform2i64ARB =
	null: *fp_glUniform2i64ARB;
export let glUniform2i64NV: *fp_glUniform2i64NV =
	null: *fp_glUniform2i64NV;
export let glUniform2i64vARB: *fp_glUniform2i64vARB =
	null: *fp_glUniform2i64vARB;
export let glUniform2i64vNV: *fp_glUniform2i64vNV =
	null: *fp_glUniform2i64vNV;
export let glUniform2iARB: *fp_glUniform2iARB =
	null: *fp_glUniform2iARB;
export let glUniform2iv: *fp_glUniform2iv =
	null: *fp_glUniform2iv;
export let glUniform2ivARB: *fp_glUniform2ivARB =
	null: *fp_glUniform2ivARB;
export let glUniform2ui64ARB: *fp_glUniform2ui64ARB =
	null: *fp_glUniform2ui64ARB;
export let glUniform2ui64NV: *fp_glUniform2ui64NV =
	null: *fp_glUniform2ui64NV;
export let glUniform2ui64vARB: *fp_glUniform2ui64vARB =
	null: *fp_glUniform2ui64vARB;
export let glUniform2ui64vNV: *fp_glUniform2ui64vNV =
	null: *fp_glUniform2ui64vNV;
export let glUniform2uiEXT: *fp_glUniform2uiEXT =
	null: *fp_glUniform2uiEXT;
export let glUniform2uivEXT: *fp_glUniform2uivEXT =
	null: *fp_glUniform2uivEXT;
export let glUniform3d: *fp_glUniform3d =
	null: *fp_glUniform3d;
export let glUniform3dv: *fp_glUniform3dv =
	null: *fp_glUniform3dv;
export let glUniform3f: *fp_glUniform3f =
	null: *fp_glUniform3f;
export let glUniform3fARB: *fp_glUniform3fARB =
	null: *fp_glUniform3fARB;
export let glUniform3fv: *fp_glUniform3fv =
	null: *fp_glUniform3fv;
export let glUniform3fvARB: *fp_glUniform3fvARB =
	null: *fp_glUniform3fvARB;
export let glUniform3i: *fp_glUniform3i =
	null: *fp_glUniform3i;
export let glUniform3i64ARB: *fp_glUniform3i64ARB =
	null: *fp_glUniform3i64ARB;
export let glUniform3i64NV: *fp_glUniform3i64NV =
	null: *fp_glUniform3i64NV;
export let glUniform3i64vARB: *fp_glUniform3i64vARB =
	null: *fp_glUniform3i64vARB;
export let glUniform3i64vNV: *fp_glUniform3i64vNV =
	null: *fp_glUniform3i64vNV;
export let glUniform3iARB: *fp_glUniform3iARB =
	null: *fp_glUniform3iARB;
export let glUniform3iv: *fp_glUniform3iv =
	null: *fp_glUniform3iv;
export let glUniform3ivARB: *fp_glUniform3ivARB =
	null: *fp_glUniform3ivARB;
export let glUniform3ui64ARB: *fp_glUniform3ui64ARB =
	null: *fp_glUniform3ui64ARB;
export let glUniform3ui64NV: *fp_glUniform3ui64NV =
	null: *fp_glUniform3ui64NV;
export let glUniform3ui64vARB: *fp_glUniform3ui64vARB =
	null: *fp_glUniform3ui64vARB;
export let glUniform3ui64vNV: *fp_glUniform3ui64vNV =
	null: *fp_glUniform3ui64vNV;
export let glUniform3uiEXT: *fp_glUniform3uiEXT =
	null: *fp_glUniform3uiEXT;
export let glUniform3uivEXT: *fp_glUniform3uivEXT =
	null: *fp_glUniform3uivEXT;
export let glUniform4d: *fp_glUniform4d =
	null: *fp_glUniform4d;
export let glUniform4dv: *fp_glUniform4dv =
	null: *fp_glUniform4dv;
export let glUniform4f: *fp_glUniform4f =
	null: *fp_glUniform4f;
export let glUniform4fARB: *fp_glUniform4fARB =
	null: *fp_glUniform4fARB;
export let glUniform4fv: *fp_glUniform4fv =
	null: *fp_glUniform4fv;
export let glUniform4fvARB: *fp_glUniform4fvARB =
	null: *fp_glUniform4fvARB;
export let glUniform4i: *fp_glUniform4i =
	null: *fp_glUniform4i;
export let glUniform4i64ARB: *fp_glUniform4i64ARB =
	null: *fp_glUniform4i64ARB;
export let glUniform4i64NV: *fp_glUniform4i64NV =
	null: *fp_glUniform4i64NV;
export let glUniform4i64vARB: *fp_glUniform4i64vARB =
	null: *fp_glUniform4i64vARB;
export let glUniform4i64vNV: *fp_glUniform4i64vNV =
	null: *fp_glUniform4i64vNV;
export let glUniform4iARB: *fp_glUniform4iARB =
	null: *fp_glUniform4iARB;
export let glUniform4iv: *fp_glUniform4iv =
	null: *fp_glUniform4iv;
export let glUniform4ivARB: *fp_glUniform4ivARB =
	null: *fp_glUniform4ivARB;
export let glUniform4ui64ARB: *fp_glUniform4ui64ARB =
	null: *fp_glUniform4ui64ARB;
export let glUniform4ui64NV: *fp_glUniform4ui64NV =
	null: *fp_glUniform4ui64NV;
export let glUniform4ui64vARB: *fp_glUniform4ui64vARB =
	null: *fp_glUniform4ui64vARB;
export let glUniform4ui64vNV: *fp_glUniform4ui64vNV =
	null: *fp_glUniform4ui64vNV;
export let glUniform4uiEXT: *fp_glUniform4uiEXT =
	null: *fp_glUniform4uiEXT;
export let glUniform4uivEXT: *fp_glUniform4uivEXT =
	null: *fp_glUniform4uivEXT;
export let glUniformBlockBinding: *fp_glUniformBlockBinding =
	null: *fp_glUniformBlockBinding;
export let glUniformBufferEXT: *fp_glUniformBufferEXT =
	null: *fp_glUniformBufferEXT;
export let glUniformHandleui64ARB: *fp_glUniformHandleui64ARB =
	null: *fp_glUniformHandleui64ARB;
export let glUniformHandleui64NV: *fp_glUniformHandleui64NV =
	null: *fp_glUniformHandleui64NV;
export let glUniformHandleui64vARB: *fp_glUniformHandleui64vARB =
	null: *fp_glUniformHandleui64vARB;
export let glUniformHandleui64vNV: *fp_glUniformHandleui64vNV =
	null: *fp_glUniformHandleui64vNV;
export let glUniformMatrix2dv: *fp_glUniformMatrix2dv =
	null: *fp_glUniformMatrix2dv;
export let glUniformMatrix2fv: *fp_glUniformMatrix2fv =
	null: *fp_glUniformMatrix2fv;
export let glUniformMatrix2fvARB: *fp_glUniformMatrix2fvARB =
	null: *fp_glUniformMatrix2fvARB;
export let glUniformMatrix2x3dv: *fp_glUniformMatrix2x3dv =
	null: *fp_glUniformMatrix2x3dv;
export let glUniformMatrix2x3fv: *fp_glUniformMatrix2x3fv =
	null: *fp_glUniformMatrix2x3fv;
export let glUniformMatrix2x4dv: *fp_glUniformMatrix2x4dv =
	null: *fp_glUniformMatrix2x4dv;
export let glUniformMatrix2x4fv: *fp_glUniformMatrix2x4fv =
	null: *fp_glUniformMatrix2x4fv;
export let glUniformMatrix3dv: *fp_glUniformMatrix3dv =
	null: *fp_glUniformMatrix3dv;
export let glUniformMatrix3fv: *fp_glUniformMatrix3fv =
	null: *fp_glUniformMatrix3fv;
export let glUniformMatrix3fvARB: *fp_glUniformMatrix3fvARB =
	null: *fp_glUniformMatrix3fvARB;
export let glUniformMatrix3x2dv: *fp_glUniformMatrix3x2dv =
	null: *fp_glUniformMatrix3x2dv;
export let glUniformMatrix3x2fv: *fp_glUniformMatrix3x2fv =
	null: *fp_glUniformMatrix3x2fv;
export let glUniformMatrix3x4dv: *fp_glUniformMatrix3x4dv =
	null: *fp_glUniformMatrix3x4dv;
export let glUniformMatrix3x4fv: *fp_glUniformMatrix3x4fv =
	null: *fp_glUniformMatrix3x4fv;
export let glUniformMatrix4dv: *fp_glUniformMatrix4dv =
	null: *fp_glUniformMatrix4dv;
export let glUniformMatrix4fv: *fp_glUniformMatrix4fv =
	null: *fp_glUniformMatrix4fv;
export let glUniformMatrix4fvARB: *fp_glUniformMatrix4fvARB =
	null: *fp_glUniformMatrix4fvARB;
export let glUniformMatrix4x2dv: *fp_glUniformMatrix4x2dv =
	null: *fp_glUniformMatrix4x2dv;
export let glUniformMatrix4x2fv: *fp_glUniformMatrix4x2fv =
	null: *fp_glUniformMatrix4x2fv;
export let glUniformMatrix4x3dv: *fp_glUniformMatrix4x3dv =
	null: *fp_glUniformMatrix4x3dv;
export let glUniformMatrix4x3fv: *fp_glUniformMatrix4x3fv =
	null: *fp_glUniformMatrix4x3fv;
export let glUniformSubroutinesuiv: *fp_glUniformSubroutinesuiv =
	null: *fp_glUniformSubroutinesuiv;
export let glUniformui64NV: *fp_glUniformui64NV =
	null: *fp_glUniformui64NV;
export let glUniformui64vNV: *fp_glUniformui64vNV =
	null: *fp_glUniformui64vNV;
export let glUnlockArraysEXT: *fp_glUnlockArraysEXT =
	null: *fp_glUnlockArraysEXT;
export let glUnmapBuffer: *fp_glUnmapBuffer =
	null: *fp_glUnmapBuffer;
export let glUnmapBufferARB: *fp_glUnmapBufferARB =
	null: *fp_glUnmapBufferARB;
export let glUnmapNamedBuffer: *fp_glUnmapNamedBuffer =
	null: *fp_glUnmapNamedBuffer;
export let glUnmapNamedBufferEXT: *fp_glUnmapNamedBufferEXT =
	null: *fp_glUnmapNamedBufferEXT;
export let glUnmapObjectBufferATI: *fp_glUnmapObjectBufferATI =
	null: *fp_glUnmapObjectBufferATI;
export let glUnmapTexture2DINTEL: *fp_glUnmapTexture2DINTEL =
	null: *fp_glUnmapTexture2DINTEL;
export let glUpdateObjectBufferATI: *fp_glUpdateObjectBufferATI =
	null: *fp_glUpdateObjectBufferATI;
export let glUploadGpuMaskNVX: *fp_glUploadGpuMaskNVX =
	null: *fp_glUploadGpuMaskNVX;
export let glUseProgram: *fp_glUseProgram =
	null: *fp_glUseProgram;
export let glUseProgramObjectARB: *fp_glUseProgramObjectARB =
	null: *fp_glUseProgramObjectARB;
export let glUseProgramStages: *fp_glUseProgramStages =
	null: *fp_glUseProgramStages;
export let glUseShaderProgramEXT: *fp_glUseShaderProgramEXT =
	null: *fp_glUseShaderProgramEXT;
export let glVDPAUFiniNV: *fp_glVDPAUFiniNV =
	null: *fp_glVDPAUFiniNV;
export let glVDPAUGetSurfaceivNV: *fp_glVDPAUGetSurfaceivNV =
	null: *fp_glVDPAUGetSurfaceivNV;
export let glVDPAUInitNV: *fp_glVDPAUInitNV =
	null: *fp_glVDPAUInitNV;
export let glVDPAUIsSurfaceNV: *fp_glVDPAUIsSurfaceNV =
	null: *fp_glVDPAUIsSurfaceNV;
export let glVDPAUMapSurfacesNV: *fp_glVDPAUMapSurfacesNV =
	null: *fp_glVDPAUMapSurfacesNV;
export let glVDPAURegisterOutputSurfaceNV: *fp_glVDPAURegisterOutputSurfaceNV =
	null: *fp_glVDPAURegisterOutputSurfaceNV;
export let glVDPAURegisterVideoSurfaceNV: *fp_glVDPAURegisterVideoSurfaceNV =
	null: *fp_glVDPAURegisterVideoSurfaceNV;
export let glVDPAURegisterVideoSurfaceWithPictureStructureNV: *fp_glVDPAURegisterVideoSurfaceWithPictureStructureNV =
	null: *fp_glVDPAURegisterVideoSurfaceWithPictureStructureNV;
export let glVDPAUSurfaceAccessNV: *fp_glVDPAUSurfaceAccessNV =
	null: *fp_glVDPAUSurfaceAccessNV;
export let glVDPAUUnmapSurfacesNV: *fp_glVDPAUUnmapSurfacesNV =
	null: *fp_glVDPAUUnmapSurfacesNV;
export let glVDPAUUnregisterSurfaceNV: *fp_glVDPAUUnregisterSurfaceNV =
	null: *fp_glVDPAUUnregisterSurfaceNV;
export let glValidateProgram: *fp_glValidateProgram =
	null: *fp_glValidateProgram;
export let glValidateProgramARB: *fp_glValidateProgramARB =
	null: *fp_glValidateProgramARB;
export let glValidateProgramPipeline: *fp_glValidateProgramPipeline =
	null: *fp_glValidateProgramPipeline;
export let glVariantArrayObjectATI: *fp_glVariantArrayObjectATI =
	null: *fp_glVariantArrayObjectATI;
export let glVariantPointerEXT: *fp_glVariantPointerEXT =
	null: *fp_glVariantPointerEXT;
export let glVariantbvEXT: *fp_glVariantbvEXT =
	null: *fp_glVariantbvEXT;
export let glVariantdvEXT: *fp_glVariantdvEXT =
	null: *fp_glVariantdvEXT;
export let glVariantfvEXT: *fp_glVariantfvEXT =
	null: *fp_glVariantfvEXT;
export let glVariantivEXT: *fp_glVariantivEXT =
	null: *fp_glVariantivEXT;
export let glVariantsvEXT: *fp_glVariantsvEXT =
	null: *fp_glVariantsvEXT;
export let glVariantubvEXT: *fp_glVariantubvEXT =
	null: *fp_glVariantubvEXT;
export let glVariantuivEXT: *fp_glVariantuivEXT =
	null: *fp_glVariantuivEXT;
export let glVariantusvEXT: *fp_glVariantusvEXT =
	null: *fp_glVariantusvEXT;
export let glVertex2bOES: *fp_glVertex2bOES =
	null: *fp_glVertex2bOES;
export let glVertex2bvOES: *fp_glVertex2bvOES =
	null: *fp_glVertex2bvOES;
export let glVertex2d: *fp_glVertex2d =
	null: *fp_glVertex2d;
export let glVertex2dv: *fp_glVertex2dv =
	null: *fp_glVertex2dv;
export let glVertex2f: *fp_glVertex2f =
	null: *fp_glVertex2f;
export let glVertex2fv: *fp_glVertex2fv =
	null: *fp_glVertex2fv;
export let glVertex2hNV: *fp_glVertex2hNV =
	null: *fp_glVertex2hNV;
export let glVertex2hvNV: *fp_glVertex2hvNV =
	null: *fp_glVertex2hvNV;
export let glVertex2i: *fp_glVertex2i =
	null: *fp_glVertex2i;
export let glVertex2iv: *fp_glVertex2iv =
	null: *fp_glVertex2iv;
export let glVertex2s: *fp_glVertex2s =
	null: *fp_glVertex2s;
export let glVertex2sv: *fp_glVertex2sv =
	null: *fp_glVertex2sv;
export let glVertex2xOES: *fp_glVertex2xOES =
	null: *fp_glVertex2xOES;
export let glVertex2xvOES: *fp_glVertex2xvOES =
	null: *fp_glVertex2xvOES;
export let glVertex3bOES: *fp_glVertex3bOES =
	null: *fp_glVertex3bOES;
export let glVertex3bvOES: *fp_glVertex3bvOES =
	null: *fp_glVertex3bvOES;
export let glVertex3d: *fp_glVertex3d =
	null: *fp_glVertex3d;
export let glVertex3dv: *fp_glVertex3dv =
	null: *fp_glVertex3dv;
export let glVertex3f: *fp_glVertex3f =
	null: *fp_glVertex3f;
export let glVertex3fv: *fp_glVertex3fv =
	null: *fp_glVertex3fv;
export let glVertex3hNV: *fp_glVertex3hNV =
	null: *fp_glVertex3hNV;
export let glVertex3hvNV: *fp_glVertex3hvNV =
	null: *fp_glVertex3hvNV;
export let glVertex3i: *fp_glVertex3i =
	null: *fp_glVertex3i;
export let glVertex3iv: *fp_glVertex3iv =
	null: *fp_glVertex3iv;
export let glVertex3s: *fp_glVertex3s =
	null: *fp_glVertex3s;
export let glVertex3sv: *fp_glVertex3sv =
	null: *fp_glVertex3sv;
export let glVertex3xOES: *fp_glVertex3xOES =
	null: *fp_glVertex3xOES;
export let glVertex3xvOES: *fp_glVertex3xvOES =
	null: *fp_glVertex3xvOES;
export let glVertex4bOES: *fp_glVertex4bOES =
	null: *fp_glVertex4bOES;
export let glVertex4bvOES: *fp_glVertex4bvOES =
	null: *fp_glVertex4bvOES;
export let glVertex4d: *fp_glVertex4d =
	null: *fp_glVertex4d;
export let glVertex4dv: *fp_glVertex4dv =
	null: *fp_glVertex4dv;
export let glVertex4f: *fp_glVertex4f =
	null: *fp_glVertex4f;
export let glVertex4fv: *fp_glVertex4fv =
	null: *fp_glVertex4fv;
export let glVertex4hNV: *fp_glVertex4hNV =
	null: *fp_glVertex4hNV;
export let glVertex4hvNV: *fp_glVertex4hvNV =
	null: *fp_glVertex4hvNV;
export let glVertex4i: *fp_glVertex4i =
	null: *fp_glVertex4i;
export let glVertex4iv: *fp_glVertex4iv =
	null: *fp_glVertex4iv;
export let glVertex4s: *fp_glVertex4s =
	null: *fp_glVertex4s;
export let glVertex4sv: *fp_glVertex4sv =
	null: *fp_glVertex4sv;
export let glVertex4xOES: *fp_glVertex4xOES =
	null: *fp_glVertex4xOES;
export let glVertex4xvOES: *fp_glVertex4xvOES =
	null: *fp_glVertex4xvOES;
export let glVertexArrayAttribBinding: *fp_glVertexArrayAttribBinding =
	null: *fp_glVertexArrayAttribBinding;
export let glVertexArrayAttribFormat: *fp_glVertexArrayAttribFormat =
	null: *fp_glVertexArrayAttribFormat;
export let glVertexArrayAttribIFormat: *fp_glVertexArrayAttribIFormat =
	null: *fp_glVertexArrayAttribIFormat;
export let glVertexArrayAttribLFormat: *fp_glVertexArrayAttribLFormat =
	null: *fp_glVertexArrayAttribLFormat;
export let glVertexArrayBindVertexBufferEXT: *fp_glVertexArrayBindVertexBufferEXT =
	null: *fp_glVertexArrayBindVertexBufferEXT;
export let glVertexArrayBindingDivisor: *fp_glVertexArrayBindingDivisor =
	null: *fp_glVertexArrayBindingDivisor;
export let glVertexArrayColorOffsetEXT: *fp_glVertexArrayColorOffsetEXT =
	null: *fp_glVertexArrayColorOffsetEXT;
export let glVertexArrayEdgeFlagOffsetEXT: *fp_glVertexArrayEdgeFlagOffsetEXT =
	null: *fp_glVertexArrayEdgeFlagOffsetEXT;
export let glVertexArrayElementBuffer: *fp_glVertexArrayElementBuffer =
	null: *fp_glVertexArrayElementBuffer;
export let glVertexArrayFogCoordOffsetEXT: *fp_glVertexArrayFogCoordOffsetEXT =
	null: *fp_glVertexArrayFogCoordOffsetEXT;
export let glVertexArrayIndexOffsetEXT: *fp_glVertexArrayIndexOffsetEXT =
	null: *fp_glVertexArrayIndexOffsetEXT;
export let glVertexArrayMultiTexCoordOffsetEXT: *fp_glVertexArrayMultiTexCoordOffsetEXT =
	null: *fp_glVertexArrayMultiTexCoordOffsetEXT;
export let glVertexArrayNormalOffsetEXT: *fp_glVertexArrayNormalOffsetEXT =
	null: *fp_glVertexArrayNormalOffsetEXT;
export let glVertexArrayParameteriAPPLE: *fp_glVertexArrayParameteriAPPLE =
	null: *fp_glVertexArrayParameteriAPPLE;
export let glVertexArrayRangeAPPLE: *fp_glVertexArrayRangeAPPLE =
	null: *fp_glVertexArrayRangeAPPLE;
export let glVertexArrayRangeNV: *fp_glVertexArrayRangeNV =
	null: *fp_glVertexArrayRangeNV;
export let glVertexArraySecondaryColorOffsetEXT: *fp_glVertexArraySecondaryColorOffsetEXT =
	null: *fp_glVertexArraySecondaryColorOffsetEXT;
export let glVertexArrayTexCoordOffsetEXT: *fp_glVertexArrayTexCoordOffsetEXT =
	null: *fp_glVertexArrayTexCoordOffsetEXT;
export let glVertexArrayVertexAttribBindingEXT: *fp_glVertexArrayVertexAttribBindingEXT =
	null: *fp_glVertexArrayVertexAttribBindingEXT;
export let glVertexArrayVertexAttribDivisorEXT: *fp_glVertexArrayVertexAttribDivisorEXT =
	null: *fp_glVertexArrayVertexAttribDivisorEXT;
export let glVertexArrayVertexAttribFormatEXT: *fp_glVertexArrayVertexAttribFormatEXT =
	null: *fp_glVertexArrayVertexAttribFormatEXT;
export let glVertexArrayVertexAttribIFormatEXT: *fp_glVertexArrayVertexAttribIFormatEXT =
	null: *fp_glVertexArrayVertexAttribIFormatEXT;
export let glVertexArrayVertexAttribIOffsetEXT: *fp_glVertexArrayVertexAttribIOffsetEXT =
	null: *fp_glVertexArrayVertexAttribIOffsetEXT;
export let glVertexArrayVertexAttribLFormatEXT: *fp_glVertexArrayVertexAttribLFormatEXT =
	null: *fp_glVertexArrayVertexAttribLFormatEXT;
export let glVertexArrayVertexAttribLOffsetEXT: *fp_glVertexArrayVertexAttribLOffsetEXT =
	null: *fp_glVertexArrayVertexAttribLOffsetEXT;
export let glVertexArrayVertexAttribOffsetEXT: *fp_glVertexArrayVertexAttribOffsetEXT =
	null: *fp_glVertexArrayVertexAttribOffsetEXT;
export let glVertexArrayVertexBindingDivisorEXT: *fp_glVertexArrayVertexBindingDivisorEXT =
	null: *fp_glVertexArrayVertexBindingDivisorEXT;
export let glVertexArrayVertexBuffer: *fp_glVertexArrayVertexBuffer =
	null: *fp_glVertexArrayVertexBuffer;
export let glVertexArrayVertexBuffers: *fp_glVertexArrayVertexBuffers =
	null: *fp_glVertexArrayVertexBuffers;
export let glVertexArrayVertexOffsetEXT: *fp_glVertexArrayVertexOffsetEXT =
	null: *fp_glVertexArrayVertexOffsetEXT;
export let glVertexAttrib1d: *fp_glVertexAttrib1d =
	null: *fp_glVertexAttrib1d;
export let glVertexAttrib1dARB: *fp_glVertexAttrib1dARB =
	null: *fp_glVertexAttrib1dARB;
export let glVertexAttrib1dNV: *fp_glVertexAttrib1dNV =
	null: *fp_glVertexAttrib1dNV;
export let glVertexAttrib1dv: *fp_glVertexAttrib1dv =
	null: *fp_glVertexAttrib1dv;
export let glVertexAttrib1dvARB: *fp_glVertexAttrib1dvARB =
	null: *fp_glVertexAttrib1dvARB;
export let glVertexAttrib1dvNV: *fp_glVertexAttrib1dvNV =
	null: *fp_glVertexAttrib1dvNV;
export let glVertexAttrib1f: *fp_glVertexAttrib1f =
	null: *fp_glVertexAttrib1f;
export let glVertexAttrib1fARB: *fp_glVertexAttrib1fARB =
	null: *fp_glVertexAttrib1fARB;
export let glVertexAttrib1fNV: *fp_glVertexAttrib1fNV =
	null: *fp_glVertexAttrib1fNV;
export let glVertexAttrib1fv: *fp_glVertexAttrib1fv =
	null: *fp_glVertexAttrib1fv;
export let glVertexAttrib1fvARB: *fp_glVertexAttrib1fvARB =
	null: *fp_glVertexAttrib1fvARB;
export let glVertexAttrib1fvNV: *fp_glVertexAttrib1fvNV =
	null: *fp_glVertexAttrib1fvNV;
export let glVertexAttrib1hNV: *fp_glVertexAttrib1hNV =
	null: *fp_glVertexAttrib1hNV;
export let glVertexAttrib1hvNV: *fp_glVertexAttrib1hvNV =
	null: *fp_glVertexAttrib1hvNV;
export let glVertexAttrib1s: *fp_glVertexAttrib1s =
	null: *fp_glVertexAttrib1s;
export let glVertexAttrib1sARB: *fp_glVertexAttrib1sARB =
	null: *fp_glVertexAttrib1sARB;
export let glVertexAttrib1sNV: *fp_glVertexAttrib1sNV =
	null: *fp_glVertexAttrib1sNV;
export let glVertexAttrib1sv: *fp_glVertexAttrib1sv =
	null: *fp_glVertexAttrib1sv;
export let glVertexAttrib1svARB: *fp_glVertexAttrib1svARB =
	null: *fp_glVertexAttrib1svARB;
export let glVertexAttrib1svNV: *fp_glVertexAttrib1svNV =
	null: *fp_glVertexAttrib1svNV;
export let glVertexAttrib2d: *fp_glVertexAttrib2d =
	null: *fp_glVertexAttrib2d;
export let glVertexAttrib2dARB: *fp_glVertexAttrib2dARB =
	null: *fp_glVertexAttrib2dARB;
export let glVertexAttrib2dNV: *fp_glVertexAttrib2dNV =
	null: *fp_glVertexAttrib2dNV;
export let glVertexAttrib2dv: *fp_glVertexAttrib2dv =
	null: *fp_glVertexAttrib2dv;
export let glVertexAttrib2dvARB: *fp_glVertexAttrib2dvARB =
	null: *fp_glVertexAttrib2dvARB;
export let glVertexAttrib2dvNV: *fp_glVertexAttrib2dvNV =
	null: *fp_glVertexAttrib2dvNV;
export let glVertexAttrib2f: *fp_glVertexAttrib2f =
	null: *fp_glVertexAttrib2f;
export let glVertexAttrib2fARB: *fp_glVertexAttrib2fARB =
	null: *fp_glVertexAttrib2fARB;
export let glVertexAttrib2fNV: *fp_glVertexAttrib2fNV =
	null: *fp_glVertexAttrib2fNV;
export let glVertexAttrib2fv: *fp_glVertexAttrib2fv =
	null: *fp_glVertexAttrib2fv;
export let glVertexAttrib2fvARB: *fp_glVertexAttrib2fvARB =
	null: *fp_glVertexAttrib2fvARB;
export let glVertexAttrib2fvNV: *fp_glVertexAttrib2fvNV =
	null: *fp_glVertexAttrib2fvNV;
export let glVertexAttrib2hNV: *fp_glVertexAttrib2hNV =
	null: *fp_glVertexAttrib2hNV;
export let glVertexAttrib2hvNV: *fp_glVertexAttrib2hvNV =
	null: *fp_glVertexAttrib2hvNV;
export let glVertexAttrib2s: *fp_glVertexAttrib2s =
	null: *fp_glVertexAttrib2s;
export let glVertexAttrib2sARB: *fp_glVertexAttrib2sARB =
	null: *fp_glVertexAttrib2sARB;
export let glVertexAttrib2sNV: *fp_glVertexAttrib2sNV =
	null: *fp_glVertexAttrib2sNV;
export let glVertexAttrib2sv: *fp_glVertexAttrib2sv =
	null: *fp_glVertexAttrib2sv;
export let glVertexAttrib2svARB: *fp_glVertexAttrib2svARB =
	null: *fp_glVertexAttrib2svARB;
export let glVertexAttrib2svNV: *fp_glVertexAttrib2svNV =
	null: *fp_glVertexAttrib2svNV;
export let glVertexAttrib3d: *fp_glVertexAttrib3d =
	null: *fp_glVertexAttrib3d;
export let glVertexAttrib3dARB: *fp_glVertexAttrib3dARB =
	null: *fp_glVertexAttrib3dARB;
export let glVertexAttrib3dNV: *fp_glVertexAttrib3dNV =
	null: *fp_glVertexAttrib3dNV;
export let glVertexAttrib3dv: *fp_glVertexAttrib3dv =
	null: *fp_glVertexAttrib3dv;
export let glVertexAttrib3dvARB: *fp_glVertexAttrib3dvARB =
	null: *fp_glVertexAttrib3dvARB;
export let glVertexAttrib3dvNV: *fp_glVertexAttrib3dvNV =
	null: *fp_glVertexAttrib3dvNV;
export let glVertexAttrib3f: *fp_glVertexAttrib3f =
	null: *fp_glVertexAttrib3f;
export let glVertexAttrib3fARB: *fp_glVertexAttrib3fARB =
	null: *fp_glVertexAttrib3fARB;
export let glVertexAttrib3fNV: *fp_glVertexAttrib3fNV =
	null: *fp_glVertexAttrib3fNV;
export let glVertexAttrib3fv: *fp_glVertexAttrib3fv =
	null: *fp_glVertexAttrib3fv;
export let glVertexAttrib3fvARB: *fp_glVertexAttrib3fvARB =
	null: *fp_glVertexAttrib3fvARB;
export let glVertexAttrib3fvNV: *fp_glVertexAttrib3fvNV =
	null: *fp_glVertexAttrib3fvNV;
export let glVertexAttrib3hNV: *fp_glVertexAttrib3hNV =
	null: *fp_glVertexAttrib3hNV;
export let glVertexAttrib3hvNV: *fp_glVertexAttrib3hvNV =
	null: *fp_glVertexAttrib3hvNV;
export let glVertexAttrib3s: *fp_glVertexAttrib3s =
	null: *fp_glVertexAttrib3s;
export let glVertexAttrib3sARB: *fp_glVertexAttrib3sARB =
	null: *fp_glVertexAttrib3sARB;
export let glVertexAttrib3sNV: *fp_glVertexAttrib3sNV =
	null: *fp_glVertexAttrib3sNV;
export let glVertexAttrib3sv: *fp_glVertexAttrib3sv =
	null: *fp_glVertexAttrib3sv;
export let glVertexAttrib3svARB: *fp_glVertexAttrib3svARB =
	null: *fp_glVertexAttrib3svARB;
export let glVertexAttrib3svNV: *fp_glVertexAttrib3svNV =
	null: *fp_glVertexAttrib3svNV;
export let glVertexAttrib4Nbv: *fp_glVertexAttrib4Nbv =
	null: *fp_glVertexAttrib4Nbv;
export let glVertexAttrib4NbvARB: *fp_glVertexAttrib4NbvARB =
	null: *fp_glVertexAttrib4NbvARB;
export let glVertexAttrib4Niv: *fp_glVertexAttrib4Niv =
	null: *fp_glVertexAttrib4Niv;
export let glVertexAttrib4NivARB: *fp_glVertexAttrib4NivARB =
	null: *fp_glVertexAttrib4NivARB;
export let glVertexAttrib4Nsv: *fp_glVertexAttrib4Nsv =
	null: *fp_glVertexAttrib4Nsv;
export let glVertexAttrib4NsvARB: *fp_glVertexAttrib4NsvARB =
	null: *fp_glVertexAttrib4NsvARB;
export let glVertexAttrib4Nub: *fp_glVertexAttrib4Nub =
	null: *fp_glVertexAttrib4Nub;
export let glVertexAttrib4NubARB: *fp_glVertexAttrib4NubARB =
	null: *fp_glVertexAttrib4NubARB;
export let glVertexAttrib4Nubv: *fp_glVertexAttrib4Nubv =
	null: *fp_glVertexAttrib4Nubv;
export let glVertexAttrib4NubvARB: *fp_glVertexAttrib4NubvARB =
	null: *fp_glVertexAttrib4NubvARB;
export let glVertexAttrib4Nuiv: *fp_glVertexAttrib4Nuiv =
	null: *fp_glVertexAttrib4Nuiv;
export let glVertexAttrib4NuivARB: *fp_glVertexAttrib4NuivARB =
	null: *fp_glVertexAttrib4NuivARB;
export let glVertexAttrib4Nusv: *fp_glVertexAttrib4Nusv =
	null: *fp_glVertexAttrib4Nusv;
export let glVertexAttrib4NusvARB: *fp_glVertexAttrib4NusvARB =
	null: *fp_glVertexAttrib4NusvARB;
export let glVertexAttrib4bv: *fp_glVertexAttrib4bv =
	null: *fp_glVertexAttrib4bv;
export let glVertexAttrib4bvARB: *fp_glVertexAttrib4bvARB =
	null: *fp_glVertexAttrib4bvARB;
export let glVertexAttrib4d: *fp_glVertexAttrib4d =
	null: *fp_glVertexAttrib4d;
export let glVertexAttrib4dARB: *fp_glVertexAttrib4dARB =
	null: *fp_glVertexAttrib4dARB;
export let glVertexAttrib4dNV: *fp_glVertexAttrib4dNV =
	null: *fp_glVertexAttrib4dNV;
export let glVertexAttrib4dv: *fp_glVertexAttrib4dv =
	null: *fp_glVertexAttrib4dv;
export let glVertexAttrib4dvARB: *fp_glVertexAttrib4dvARB =
	null: *fp_glVertexAttrib4dvARB;
export let glVertexAttrib4dvNV: *fp_glVertexAttrib4dvNV =
	null: *fp_glVertexAttrib4dvNV;
export let glVertexAttrib4f: *fp_glVertexAttrib4f =
	null: *fp_glVertexAttrib4f;
export let glVertexAttrib4fARB: *fp_glVertexAttrib4fARB =
	null: *fp_glVertexAttrib4fARB;
export let glVertexAttrib4fNV: *fp_glVertexAttrib4fNV =
	null: *fp_glVertexAttrib4fNV;
export let glVertexAttrib4fv: *fp_glVertexAttrib4fv =
	null: *fp_glVertexAttrib4fv;
export let glVertexAttrib4fvARB: *fp_glVertexAttrib4fvARB =
	null: *fp_glVertexAttrib4fvARB;
export let glVertexAttrib4fvNV: *fp_glVertexAttrib4fvNV =
	null: *fp_glVertexAttrib4fvNV;
export let glVertexAttrib4hNV: *fp_glVertexAttrib4hNV =
	null: *fp_glVertexAttrib4hNV;
export let glVertexAttrib4hvNV: *fp_glVertexAttrib4hvNV =
	null: *fp_glVertexAttrib4hvNV;
export let glVertexAttrib4iv: *fp_glVertexAttrib4iv =
	null: *fp_glVertexAttrib4iv;
export let glVertexAttrib4ivARB: *fp_glVertexAttrib4ivARB =
	null: *fp_glVertexAttrib4ivARB;
export let glVertexAttrib4s: *fp_glVertexAttrib4s =
	null: *fp_glVertexAttrib4s;
export let glVertexAttrib4sARB: *fp_glVertexAttrib4sARB =
	null: *fp_glVertexAttrib4sARB;
export let glVertexAttrib4sNV: *fp_glVertexAttrib4sNV =
	null: *fp_glVertexAttrib4sNV;
export let glVertexAttrib4sv: *fp_glVertexAttrib4sv =
	null: *fp_glVertexAttrib4sv;
export let glVertexAttrib4svARB: *fp_glVertexAttrib4svARB =
	null: *fp_glVertexAttrib4svARB;
export let glVertexAttrib4svNV: *fp_glVertexAttrib4svNV =
	null: *fp_glVertexAttrib4svNV;
export let glVertexAttrib4ubNV: *fp_glVertexAttrib4ubNV =
	null: *fp_glVertexAttrib4ubNV;
export let glVertexAttrib4ubv: *fp_glVertexAttrib4ubv =
	null: *fp_glVertexAttrib4ubv;
export let glVertexAttrib4ubvARB: *fp_glVertexAttrib4ubvARB =
	null: *fp_glVertexAttrib4ubvARB;
export let glVertexAttrib4ubvNV: *fp_glVertexAttrib4ubvNV =
	null: *fp_glVertexAttrib4ubvNV;
export let glVertexAttrib4uiv: *fp_glVertexAttrib4uiv =
	null: *fp_glVertexAttrib4uiv;
export let glVertexAttrib4uivARB: *fp_glVertexAttrib4uivARB =
	null: *fp_glVertexAttrib4uivARB;
export let glVertexAttrib4usv: *fp_glVertexAttrib4usv =
	null: *fp_glVertexAttrib4usv;
export let glVertexAttrib4usvARB: *fp_glVertexAttrib4usvARB =
	null: *fp_glVertexAttrib4usvARB;
export let glVertexAttribArrayObjectATI: *fp_glVertexAttribArrayObjectATI =
	null: *fp_glVertexAttribArrayObjectATI;
export let glVertexAttribBinding: *fp_glVertexAttribBinding =
	null: *fp_glVertexAttribBinding;
export let glVertexAttribDivisorARB: *fp_glVertexAttribDivisorARB =
	null: *fp_glVertexAttribDivisorARB;
export let glVertexAttribFormat: *fp_glVertexAttribFormat =
	null: *fp_glVertexAttribFormat;
export let glVertexAttribFormatNV: *fp_glVertexAttribFormatNV =
	null: *fp_glVertexAttribFormatNV;
export let glVertexAttribI1iEXT: *fp_glVertexAttribI1iEXT =
	null: *fp_glVertexAttribI1iEXT;
export let glVertexAttribI1ivEXT: *fp_glVertexAttribI1ivEXT =
	null: *fp_glVertexAttribI1ivEXT;
export let glVertexAttribI1uiEXT: *fp_glVertexAttribI1uiEXT =
	null: *fp_glVertexAttribI1uiEXT;
export let glVertexAttribI1uivEXT: *fp_glVertexAttribI1uivEXT =
	null: *fp_glVertexAttribI1uivEXT;
export let glVertexAttribI2iEXT: *fp_glVertexAttribI2iEXT =
	null: *fp_glVertexAttribI2iEXT;
export let glVertexAttribI2ivEXT: *fp_glVertexAttribI2ivEXT =
	null: *fp_glVertexAttribI2ivEXT;
export let glVertexAttribI2uiEXT: *fp_glVertexAttribI2uiEXT =
	null: *fp_glVertexAttribI2uiEXT;
export let glVertexAttribI2uivEXT: *fp_glVertexAttribI2uivEXT =
	null: *fp_glVertexAttribI2uivEXT;
export let glVertexAttribI3iEXT: *fp_glVertexAttribI3iEXT =
	null: *fp_glVertexAttribI3iEXT;
export let glVertexAttribI3ivEXT: *fp_glVertexAttribI3ivEXT =
	null: *fp_glVertexAttribI3ivEXT;
export let glVertexAttribI3uiEXT: *fp_glVertexAttribI3uiEXT =
	null: *fp_glVertexAttribI3uiEXT;
export let glVertexAttribI3uivEXT: *fp_glVertexAttribI3uivEXT =
	null: *fp_glVertexAttribI3uivEXT;
export let glVertexAttribI4bvEXT: *fp_glVertexAttribI4bvEXT =
	null: *fp_glVertexAttribI4bvEXT;
export let glVertexAttribI4iEXT: *fp_glVertexAttribI4iEXT =
	null: *fp_glVertexAttribI4iEXT;
export let glVertexAttribI4ivEXT: *fp_glVertexAttribI4ivEXT =
	null: *fp_glVertexAttribI4ivEXT;
export let glVertexAttribI4svEXT: *fp_glVertexAttribI4svEXT =
	null: *fp_glVertexAttribI4svEXT;
export let glVertexAttribI4ubvEXT: *fp_glVertexAttribI4ubvEXT =
	null: *fp_glVertexAttribI4ubvEXT;
export let glVertexAttribI4uiEXT: *fp_glVertexAttribI4uiEXT =
	null: *fp_glVertexAttribI4uiEXT;
export let glVertexAttribI4uivEXT: *fp_glVertexAttribI4uivEXT =
	null: *fp_glVertexAttribI4uivEXT;
export let glVertexAttribI4usvEXT: *fp_glVertexAttribI4usvEXT =
	null: *fp_glVertexAttribI4usvEXT;
export let glVertexAttribIFormat: *fp_glVertexAttribIFormat =
	null: *fp_glVertexAttribIFormat;
export let glVertexAttribIFormatNV: *fp_glVertexAttribIFormatNV =
	null: *fp_glVertexAttribIFormatNV;
export let glVertexAttribIPointerEXT: *fp_glVertexAttribIPointerEXT =
	null: *fp_glVertexAttribIPointerEXT;
export let glVertexAttribL1d: *fp_glVertexAttribL1d =
	null: *fp_glVertexAttribL1d;
export let glVertexAttribL1dEXT: *fp_glVertexAttribL1dEXT =
	null: *fp_glVertexAttribL1dEXT;
export let glVertexAttribL1dv: *fp_glVertexAttribL1dv =
	null: *fp_glVertexAttribL1dv;
export let glVertexAttribL1dvEXT: *fp_glVertexAttribL1dvEXT =
	null: *fp_glVertexAttribL1dvEXT;
export let glVertexAttribL1i64NV: *fp_glVertexAttribL1i64NV =
	null: *fp_glVertexAttribL1i64NV;
export let glVertexAttribL1i64vNV: *fp_glVertexAttribL1i64vNV =
	null: *fp_glVertexAttribL1i64vNV;
export let glVertexAttribL1ui64ARB: *fp_glVertexAttribL1ui64ARB =
	null: *fp_glVertexAttribL1ui64ARB;
export let glVertexAttribL1ui64NV: *fp_glVertexAttribL1ui64NV =
	null: *fp_glVertexAttribL1ui64NV;
export let glVertexAttribL1ui64vARB: *fp_glVertexAttribL1ui64vARB =
	null: *fp_glVertexAttribL1ui64vARB;
export let glVertexAttribL1ui64vNV: *fp_glVertexAttribL1ui64vNV =
	null: *fp_glVertexAttribL1ui64vNV;
export let glVertexAttribL2d: *fp_glVertexAttribL2d =
	null: *fp_glVertexAttribL2d;
export let glVertexAttribL2dEXT: *fp_glVertexAttribL2dEXT =
	null: *fp_glVertexAttribL2dEXT;
export let glVertexAttribL2dv: *fp_glVertexAttribL2dv =
	null: *fp_glVertexAttribL2dv;
export let glVertexAttribL2dvEXT: *fp_glVertexAttribL2dvEXT =
	null: *fp_glVertexAttribL2dvEXT;
export let glVertexAttribL2i64NV: *fp_glVertexAttribL2i64NV =
	null: *fp_glVertexAttribL2i64NV;
export let glVertexAttribL2i64vNV: *fp_glVertexAttribL2i64vNV =
	null: *fp_glVertexAttribL2i64vNV;
export let glVertexAttribL2ui64NV: *fp_glVertexAttribL2ui64NV =
	null: *fp_glVertexAttribL2ui64NV;
export let glVertexAttribL2ui64vNV: *fp_glVertexAttribL2ui64vNV =
	null: *fp_glVertexAttribL2ui64vNV;
export let glVertexAttribL3d: *fp_glVertexAttribL3d =
	null: *fp_glVertexAttribL3d;
export let glVertexAttribL3dEXT: *fp_glVertexAttribL3dEXT =
	null: *fp_glVertexAttribL3dEXT;
export let glVertexAttribL3dv: *fp_glVertexAttribL3dv =
	null: *fp_glVertexAttribL3dv;
export let glVertexAttribL3dvEXT: *fp_glVertexAttribL3dvEXT =
	null: *fp_glVertexAttribL3dvEXT;
export let glVertexAttribL3i64NV: *fp_glVertexAttribL3i64NV =
	null: *fp_glVertexAttribL3i64NV;
export let glVertexAttribL3i64vNV: *fp_glVertexAttribL3i64vNV =
	null: *fp_glVertexAttribL3i64vNV;
export let glVertexAttribL3ui64NV: *fp_glVertexAttribL3ui64NV =
	null: *fp_glVertexAttribL3ui64NV;
export let glVertexAttribL3ui64vNV: *fp_glVertexAttribL3ui64vNV =
	null: *fp_glVertexAttribL3ui64vNV;
export let glVertexAttribL4d: *fp_glVertexAttribL4d =
	null: *fp_glVertexAttribL4d;
export let glVertexAttribL4dEXT: *fp_glVertexAttribL4dEXT =
	null: *fp_glVertexAttribL4dEXT;
export let glVertexAttribL4dv: *fp_glVertexAttribL4dv =
	null: *fp_glVertexAttribL4dv;
export let glVertexAttribL4dvEXT: *fp_glVertexAttribL4dvEXT =
	null: *fp_glVertexAttribL4dvEXT;
export let glVertexAttribL4i64NV: *fp_glVertexAttribL4i64NV =
	null: *fp_glVertexAttribL4i64NV;
export let glVertexAttribL4i64vNV: *fp_glVertexAttribL4i64vNV =
	null: *fp_glVertexAttribL4i64vNV;
export let glVertexAttribL4ui64NV: *fp_glVertexAttribL4ui64NV =
	null: *fp_glVertexAttribL4ui64NV;
export let glVertexAttribL4ui64vNV: *fp_glVertexAttribL4ui64vNV =
	null: *fp_glVertexAttribL4ui64vNV;
export let glVertexAttribLFormat: *fp_glVertexAttribLFormat =
	null: *fp_glVertexAttribLFormat;
export let glVertexAttribLFormatNV: *fp_glVertexAttribLFormatNV =
	null: *fp_glVertexAttribLFormatNV;
export let glVertexAttribLPointer: *fp_glVertexAttribLPointer =
	null: *fp_glVertexAttribLPointer;
export let glVertexAttribLPointerEXT: *fp_glVertexAttribLPointerEXT =
	null: *fp_glVertexAttribLPointerEXT;
export let glVertexAttribP1ui: *fp_glVertexAttribP1ui =
	null: *fp_glVertexAttribP1ui;
export let glVertexAttribP1uiv: *fp_glVertexAttribP1uiv =
	null: *fp_glVertexAttribP1uiv;
export let glVertexAttribP2ui: *fp_glVertexAttribP2ui =
	null: *fp_glVertexAttribP2ui;
export let glVertexAttribP2uiv: *fp_glVertexAttribP2uiv =
	null: *fp_glVertexAttribP2uiv;
export let glVertexAttribP3ui: *fp_glVertexAttribP3ui =
	null: *fp_glVertexAttribP3ui;
export let glVertexAttribP3uiv: *fp_glVertexAttribP3uiv =
	null: *fp_glVertexAttribP3uiv;
export let glVertexAttribP4ui: *fp_glVertexAttribP4ui =
	null: *fp_glVertexAttribP4ui;
export let glVertexAttribP4uiv: *fp_glVertexAttribP4uiv =
	null: *fp_glVertexAttribP4uiv;
export let glVertexAttribParameteriAMD: *fp_glVertexAttribParameteriAMD =
	null: *fp_glVertexAttribParameteriAMD;
export let glVertexAttribPointer: *fp_glVertexAttribPointer =
	null: *fp_glVertexAttribPointer;
export let glVertexAttribPointerARB: *fp_glVertexAttribPointerARB =
	null: *fp_glVertexAttribPointerARB;
export let glVertexAttribPointerNV: *fp_glVertexAttribPointerNV =
	null: *fp_glVertexAttribPointerNV;
export let glVertexAttribs1dvNV: *fp_glVertexAttribs1dvNV =
	null: *fp_glVertexAttribs1dvNV;
export let glVertexAttribs1fvNV: *fp_glVertexAttribs1fvNV =
	null: *fp_glVertexAttribs1fvNV;
export let glVertexAttribs1hvNV: *fp_glVertexAttribs1hvNV =
	null: *fp_glVertexAttribs1hvNV;
export let glVertexAttribs1svNV: *fp_glVertexAttribs1svNV =
	null: *fp_glVertexAttribs1svNV;
export let glVertexAttribs2dvNV: *fp_glVertexAttribs2dvNV =
	null: *fp_glVertexAttribs2dvNV;
export let glVertexAttribs2fvNV: *fp_glVertexAttribs2fvNV =
	null: *fp_glVertexAttribs2fvNV;
export let glVertexAttribs2hvNV: *fp_glVertexAttribs2hvNV =
	null: *fp_glVertexAttribs2hvNV;
export let glVertexAttribs2svNV: *fp_glVertexAttribs2svNV =
	null: *fp_glVertexAttribs2svNV;
export let glVertexAttribs3dvNV: *fp_glVertexAttribs3dvNV =
	null: *fp_glVertexAttribs3dvNV;
export let glVertexAttribs3fvNV: *fp_glVertexAttribs3fvNV =
	null: *fp_glVertexAttribs3fvNV;
export let glVertexAttribs3hvNV: *fp_glVertexAttribs3hvNV =
	null: *fp_glVertexAttribs3hvNV;
export let glVertexAttribs3svNV: *fp_glVertexAttribs3svNV =
	null: *fp_glVertexAttribs3svNV;
export let glVertexAttribs4dvNV: *fp_glVertexAttribs4dvNV =
	null: *fp_glVertexAttribs4dvNV;
export let glVertexAttribs4fvNV: *fp_glVertexAttribs4fvNV =
	null: *fp_glVertexAttribs4fvNV;
export let glVertexAttribs4hvNV: *fp_glVertexAttribs4hvNV =
	null: *fp_glVertexAttribs4hvNV;
export let glVertexAttribs4svNV: *fp_glVertexAttribs4svNV =
	null: *fp_glVertexAttribs4svNV;
export let glVertexAttribs4ubvNV: *fp_glVertexAttribs4ubvNV =
	null: *fp_glVertexAttribs4ubvNV;
export let glVertexBindingDivisor: *fp_glVertexBindingDivisor =
	null: *fp_glVertexBindingDivisor;
export let glVertexBlendARB: *fp_glVertexBlendARB =
	null: *fp_glVertexBlendARB;
export let glVertexBlendEnvfATI: *fp_glVertexBlendEnvfATI =
	null: *fp_glVertexBlendEnvfATI;
export let glVertexBlendEnviATI: *fp_glVertexBlendEnviATI =
	null: *fp_glVertexBlendEnviATI;
export let glVertexFormatNV: *fp_glVertexFormatNV =
	null: *fp_glVertexFormatNV;
export let glVertexPointer: *fp_glVertexPointer =
	null: *fp_glVertexPointer;
export let glVertexPointerEXT: *fp_glVertexPointerEXT =
	null: *fp_glVertexPointerEXT;
export let glVertexPointerListIBM: *fp_glVertexPointerListIBM =
	null: *fp_glVertexPointerListIBM;
export let glVertexPointervINTEL: *fp_glVertexPointervINTEL =
	null: *fp_glVertexPointervINTEL;
export let glVertexStream1dATI: *fp_glVertexStream1dATI =
	null: *fp_glVertexStream1dATI;
export let glVertexStream1dvATI: *fp_glVertexStream1dvATI =
	null: *fp_glVertexStream1dvATI;
export let glVertexStream1fATI: *fp_glVertexStream1fATI =
	null: *fp_glVertexStream1fATI;
export let glVertexStream1fvATI: *fp_glVertexStream1fvATI =
	null: *fp_glVertexStream1fvATI;
export let glVertexStream1iATI: *fp_glVertexStream1iATI =
	null: *fp_glVertexStream1iATI;
export let glVertexStream1ivATI: *fp_glVertexStream1ivATI =
	null: *fp_glVertexStream1ivATI;
export let glVertexStream1sATI: *fp_glVertexStream1sATI =
	null: *fp_glVertexStream1sATI;
export let glVertexStream1svATI: *fp_glVertexStream1svATI =
	null: *fp_glVertexStream1svATI;
export let glVertexStream2dATI: *fp_glVertexStream2dATI =
	null: *fp_glVertexStream2dATI;
export let glVertexStream2dvATI: *fp_glVertexStream2dvATI =
	null: *fp_glVertexStream2dvATI;
export let glVertexStream2fATI: *fp_glVertexStream2fATI =
	null: *fp_glVertexStream2fATI;
export let glVertexStream2fvATI: *fp_glVertexStream2fvATI =
	null: *fp_glVertexStream2fvATI;
export let glVertexStream2iATI: *fp_glVertexStream2iATI =
	null: *fp_glVertexStream2iATI;
export let glVertexStream2ivATI: *fp_glVertexStream2ivATI =
	null: *fp_glVertexStream2ivATI;
export let glVertexStream2sATI: *fp_glVertexStream2sATI =
	null: *fp_glVertexStream2sATI;
export let glVertexStream2svATI: *fp_glVertexStream2svATI =
	null: *fp_glVertexStream2svATI;
export let glVertexStream3dATI: *fp_glVertexStream3dATI =
	null: *fp_glVertexStream3dATI;
export let glVertexStream3dvATI: *fp_glVertexStream3dvATI =
	null: *fp_glVertexStream3dvATI;
export let glVertexStream3fATI: *fp_glVertexStream3fATI =
	null: *fp_glVertexStream3fATI;
export let glVertexStream3fvATI: *fp_glVertexStream3fvATI =
	null: *fp_glVertexStream3fvATI;
export let glVertexStream3iATI: *fp_glVertexStream3iATI =
	null: *fp_glVertexStream3iATI;
export let glVertexStream3ivATI: *fp_glVertexStream3ivATI =
	null: *fp_glVertexStream3ivATI;
export let glVertexStream3sATI: *fp_glVertexStream3sATI =
	null: *fp_glVertexStream3sATI;
export let glVertexStream3svATI: *fp_glVertexStream3svATI =
	null: *fp_glVertexStream3svATI;
export let glVertexStream4dATI: *fp_glVertexStream4dATI =
	null: *fp_glVertexStream4dATI;
export let glVertexStream4dvATI: *fp_glVertexStream4dvATI =
	null: *fp_glVertexStream4dvATI;
export let glVertexStream4fATI: *fp_glVertexStream4fATI =
	null: *fp_glVertexStream4fATI;
export let glVertexStream4fvATI: *fp_glVertexStream4fvATI =
	null: *fp_glVertexStream4fvATI;
export let glVertexStream4iATI: *fp_glVertexStream4iATI =
	null: *fp_glVertexStream4iATI;
export let glVertexStream4ivATI: *fp_glVertexStream4ivATI =
	null: *fp_glVertexStream4ivATI;
export let glVertexStream4sATI: *fp_glVertexStream4sATI =
	null: *fp_glVertexStream4sATI;
export let glVertexStream4svATI: *fp_glVertexStream4svATI =
	null: *fp_glVertexStream4svATI;
export let glVertexWeightPointerEXT: *fp_glVertexWeightPointerEXT =
	null: *fp_glVertexWeightPointerEXT;
export let glVertexWeightfEXT: *fp_glVertexWeightfEXT =
	null: *fp_glVertexWeightfEXT;
export let glVertexWeightfvEXT: *fp_glVertexWeightfvEXT =
	null: *fp_glVertexWeightfvEXT;
export let glVertexWeighthNV: *fp_glVertexWeighthNV =
	null: *fp_glVertexWeighthNV;
export let glVertexWeighthvNV: *fp_glVertexWeighthvNV =
	null: *fp_glVertexWeighthvNV;
export let glVideoCaptureNV: *fp_glVideoCaptureNV =
	null: *fp_glVideoCaptureNV;
export let glVideoCaptureStreamParameterdvNV: *fp_glVideoCaptureStreamParameterdvNV =
	null: *fp_glVideoCaptureStreamParameterdvNV;
export let glVideoCaptureStreamParameterfvNV: *fp_glVideoCaptureStreamParameterfvNV =
	null: *fp_glVideoCaptureStreamParameterfvNV;
export let glVideoCaptureStreamParameterivNV: *fp_glVideoCaptureStreamParameterivNV =
	null: *fp_glVideoCaptureStreamParameterivNV;
export let glViewport: *fp_glViewport =
	null: *fp_glViewport;
export let glViewportArrayv: *fp_glViewportArrayv =
	null: *fp_glViewportArrayv;
export let glViewportIndexedf: *fp_glViewportIndexedf =
	null: *fp_glViewportIndexedf;
export let glViewportIndexedfv: *fp_glViewportIndexedfv =
	null: *fp_glViewportIndexedfv;
export let glViewportPositionWScaleNV: *fp_glViewportPositionWScaleNV =
	null: *fp_glViewportPositionWScaleNV;
export let glViewportSwizzleNV: *fp_glViewportSwizzleNV =
	null: *fp_glViewportSwizzleNV;
export let glWaitSemaphoreEXT: *fp_glWaitSemaphoreEXT =
	null: *fp_glWaitSemaphoreEXT;
export let glWaitSemaphoreui64NVX: *fp_glWaitSemaphoreui64NVX =
	null: *fp_glWaitSemaphoreui64NVX;
export let glWaitSync: *fp_glWaitSync =
	null: *fp_glWaitSync;
export let glWaitVkSemaphoreNV: *fp_glWaitVkSemaphoreNV =
	null: *fp_glWaitVkSemaphoreNV;
export let glWeightPathsNV: *fp_glWeightPathsNV =
	null: *fp_glWeightPathsNV;
export let glWeightPointerARB: *fp_glWeightPointerARB =
	null: *fp_glWeightPointerARB;
export let glWeightbvARB: *fp_glWeightbvARB =
	null: *fp_glWeightbvARB;
export let glWeightdvARB: *fp_glWeightdvARB =
	null: *fp_glWeightdvARB;
export let glWeightfvARB: *fp_glWeightfvARB =
	null: *fp_glWeightfvARB;
export let glWeightivARB: *fp_glWeightivARB =
	null: *fp_glWeightivARB;
export let glWeightsvARB: *fp_glWeightsvARB =
	null: *fp_glWeightsvARB;
export let glWeightubvARB: *fp_glWeightubvARB =
	null: *fp_glWeightubvARB;
export let glWeightuivARB: *fp_glWeightuivARB =
	null: *fp_glWeightuivARB;
export let glWeightusvARB: *fp_glWeightusvARB =
	null: *fp_glWeightusvARB;
export let glWindowPos2d: *fp_glWindowPos2d =
	null: *fp_glWindowPos2d;
export let glWindowPos2dARB: *fp_glWindowPos2dARB =
	null: *fp_glWindowPos2dARB;
export let glWindowPos2dMESA: *fp_glWindowPos2dMESA =
	null: *fp_glWindowPos2dMESA;
export let glWindowPos2dv: *fp_glWindowPos2dv =
	null: *fp_glWindowPos2dv;
export let glWindowPos2dvARB: *fp_glWindowPos2dvARB =
	null: *fp_glWindowPos2dvARB;
export let glWindowPos2dvMESA: *fp_glWindowPos2dvMESA =
	null: *fp_glWindowPos2dvMESA;
export let glWindowPos2f: *fp_glWindowPos2f =
	null: *fp_glWindowPos2f;
export let glWindowPos2fARB: *fp_glWindowPos2fARB =
	null: *fp_glWindowPos2fARB;
export let glWindowPos2fMESA: *fp_glWindowPos2fMESA =
	null: *fp_glWindowPos2fMESA;
export let glWindowPos2fv: *fp_glWindowPos2fv =
	null: *fp_glWindowPos2fv;
export let glWindowPos2fvARB: *fp_glWindowPos2fvARB =
	null: *fp_glWindowPos2fvARB;
export let glWindowPos2fvMESA: *fp_glWindowPos2fvMESA =
	null: *fp_glWindowPos2fvMESA;
export let glWindowPos2i: *fp_glWindowPos2i =
	null: *fp_glWindowPos2i;
export let glWindowPos2iARB: *fp_glWindowPos2iARB =
	null: *fp_glWindowPos2iARB;
export let glWindowPos2iMESA: *fp_glWindowPos2iMESA =
	null: *fp_glWindowPos2iMESA;
export let glWindowPos2iv: *fp_glWindowPos2iv =
	null: *fp_glWindowPos2iv;
export let glWindowPos2ivARB: *fp_glWindowPos2ivARB =
	null: *fp_glWindowPos2ivARB;
export let glWindowPos2ivMESA: *fp_glWindowPos2ivMESA =
	null: *fp_glWindowPos2ivMESA;
export let glWindowPos2s: *fp_glWindowPos2s =
	null: *fp_glWindowPos2s;
export let glWindowPos2sARB: *fp_glWindowPos2sARB =
	null: *fp_glWindowPos2sARB;
export let glWindowPos2sMESA: *fp_glWindowPos2sMESA =
	null: *fp_glWindowPos2sMESA;
export let glWindowPos2sv: *fp_glWindowPos2sv =
	null: *fp_glWindowPos2sv;
export let glWindowPos2svARB: *fp_glWindowPos2svARB =
	null: *fp_glWindowPos2svARB;
export let glWindowPos2svMESA: *fp_glWindowPos2svMESA =
	null: *fp_glWindowPos2svMESA;
export let glWindowPos3d: *fp_glWindowPos3d =
	null: *fp_glWindowPos3d;
export let glWindowPos3dARB: *fp_glWindowPos3dARB =
	null: *fp_glWindowPos3dARB;
export let glWindowPos3dMESA: *fp_glWindowPos3dMESA =
	null: *fp_glWindowPos3dMESA;
export let glWindowPos3dv: *fp_glWindowPos3dv =
	null: *fp_glWindowPos3dv;
export let glWindowPos3dvARB: *fp_glWindowPos3dvARB =
	null: *fp_glWindowPos3dvARB;
export let glWindowPos3dvMESA: *fp_glWindowPos3dvMESA =
	null: *fp_glWindowPos3dvMESA;
export let glWindowPos3f: *fp_glWindowPos3f =
	null: *fp_glWindowPos3f;
export let glWindowPos3fARB: *fp_glWindowPos3fARB =
	null: *fp_glWindowPos3fARB;
export let glWindowPos3fMESA: *fp_glWindowPos3fMESA =
	null: *fp_glWindowPos3fMESA;
export let glWindowPos3fv: *fp_glWindowPos3fv =
	null: *fp_glWindowPos3fv;
export let glWindowPos3fvARB: *fp_glWindowPos3fvARB =
	null: *fp_glWindowPos3fvARB;
export let glWindowPos3fvMESA: *fp_glWindowPos3fvMESA =
	null: *fp_glWindowPos3fvMESA;
export let glWindowPos3i: *fp_glWindowPos3i =
	null: *fp_glWindowPos3i;
export let glWindowPos3iARB: *fp_glWindowPos3iARB =
	null: *fp_glWindowPos3iARB;
export let glWindowPos3iMESA: *fp_glWindowPos3iMESA =
	null: *fp_glWindowPos3iMESA;
export let glWindowPos3iv: *fp_glWindowPos3iv =
	null: *fp_glWindowPos3iv;
export let glWindowPos3ivARB: *fp_glWindowPos3ivARB =
	null: *fp_glWindowPos3ivARB;
export let glWindowPos3ivMESA: *fp_glWindowPos3ivMESA =
	null: *fp_glWindowPos3ivMESA;
export let glWindowPos3s: *fp_glWindowPos3s =
	null: *fp_glWindowPos3s;
export let glWindowPos3sARB: *fp_glWindowPos3sARB =
	null: *fp_glWindowPos3sARB;
export let glWindowPos3sMESA: *fp_glWindowPos3sMESA =
	null: *fp_glWindowPos3sMESA;
export let glWindowPos3sv: *fp_glWindowPos3sv =
	null: *fp_glWindowPos3sv;
export let glWindowPos3svARB: *fp_glWindowPos3svARB =
	null: *fp_glWindowPos3svARB;
export let glWindowPos3svMESA: *fp_glWindowPos3svMESA =
	null: *fp_glWindowPos3svMESA;
export let glWindowPos4dMESA: *fp_glWindowPos4dMESA =
	null: *fp_glWindowPos4dMESA;
export let glWindowPos4dvMESA: *fp_glWindowPos4dvMESA =
	null: *fp_glWindowPos4dvMESA;
export let glWindowPos4fMESA: *fp_glWindowPos4fMESA =
	null: *fp_glWindowPos4fMESA;
export let glWindowPos4fvMESA: *fp_glWindowPos4fvMESA =
	null: *fp_glWindowPos4fvMESA;
export let glWindowPos4iMESA: *fp_glWindowPos4iMESA =
	null: *fp_glWindowPos4iMESA;
export let glWindowPos4ivMESA: *fp_glWindowPos4ivMESA =
	null: *fp_glWindowPos4ivMESA;
export let glWindowPos4sMESA: *fp_glWindowPos4sMESA =
	null: *fp_glWindowPos4sMESA;
export let glWindowPos4svMESA: *fp_glWindowPos4svMESA =
	null: *fp_glWindowPos4svMESA;
export let glWindowRectanglesEXT: *fp_glWindowRectanglesEXT =
	null: *fp_glWindowRectanglesEXT;
export let glWriteMaskEXT: *fp_glWriteMaskEXT =
	null: *fp_glWriteMaskEXT;

// Function loading with built-in loader
export fn load() void = {
	let cstr_buf = rt::malloc(2048): nullable *[*]u8;
	let cstr_buf = match (cstr_buf) {
	case null =>
		abort("Out of memory");
	case let p: *[*]u8 =>
		yield p;
	};
	defer { free(cstr_buf); };

	let cstr = strings::to_c_with_buf("glAccum", cstr_buf): *const u8;
	glAccum = get_proc_address("glAccum", cstr): *fp_glAccum;
	let cstr = strings::to_c_with_buf("glAccumxOES", cstr_buf): *const u8;
	glAccumxOES = get_proc_address("glAccumxOES", cstr): *fp_glAccumxOES;
	let cstr = strings::to_c_with_buf("glAcquireKeyedMutexWin32EXT", cstr_buf): *const u8;
	glAcquireKeyedMutexWin32EXT = get_proc_address("glAcquireKeyedMutexWin32EXT", cstr): *fp_glAcquireKeyedMutexWin32EXT;
	let cstr = strings::to_c_with_buf("glActiveProgramEXT", cstr_buf): *const u8;
	glActiveProgramEXT = get_proc_address("glActiveProgramEXT", cstr): *fp_glActiveProgramEXT;
	let cstr = strings::to_c_with_buf("glActiveShaderProgram", cstr_buf): *const u8;
	glActiveShaderProgram = get_proc_address("glActiveShaderProgram", cstr): *fp_glActiveShaderProgram;
	let cstr = strings::to_c_with_buf("glActiveStencilFaceEXT", cstr_buf): *const u8;
	glActiveStencilFaceEXT = get_proc_address("glActiveStencilFaceEXT", cstr): *fp_glActiveStencilFaceEXT;
	let cstr = strings::to_c_with_buf("glActiveTexture", cstr_buf): *const u8;
	glActiveTexture = get_proc_address("glActiveTexture", cstr): *fp_glActiveTexture;
	let cstr = strings::to_c_with_buf("glActiveTextureARB", cstr_buf): *const u8;
	glActiveTextureARB = get_proc_address("glActiveTextureARB", cstr): *fp_glActiveTextureARB;
	let cstr = strings::to_c_with_buf("glActiveVaryingNV", cstr_buf): *const u8;
	glActiveVaryingNV = get_proc_address("glActiveVaryingNV", cstr): *fp_glActiveVaryingNV;
	let cstr = strings::to_c_with_buf("glAlphaFragmentOp1ATI", cstr_buf): *const u8;
	glAlphaFragmentOp1ATI = get_proc_address("glAlphaFragmentOp1ATI", cstr): *fp_glAlphaFragmentOp1ATI;
	let cstr = strings::to_c_with_buf("glAlphaFragmentOp2ATI", cstr_buf): *const u8;
	glAlphaFragmentOp2ATI = get_proc_address("glAlphaFragmentOp2ATI", cstr): *fp_glAlphaFragmentOp2ATI;
	let cstr = strings::to_c_with_buf("glAlphaFragmentOp3ATI", cstr_buf): *const u8;
	glAlphaFragmentOp3ATI = get_proc_address("glAlphaFragmentOp3ATI", cstr): *fp_glAlphaFragmentOp3ATI;
	let cstr = strings::to_c_with_buf("glAlphaFunc", cstr_buf): *const u8;
	glAlphaFunc = get_proc_address("glAlphaFunc", cstr): *fp_glAlphaFunc;
	let cstr = strings::to_c_with_buf("glAlphaFuncxOES", cstr_buf): *const u8;
	glAlphaFuncxOES = get_proc_address("glAlphaFuncxOES", cstr): *fp_glAlphaFuncxOES;
	let cstr = strings::to_c_with_buf("glAlphaToCoverageDitherControlNV", cstr_buf): *const u8;
	glAlphaToCoverageDitherControlNV = get_proc_address("glAlphaToCoverageDitherControlNV", cstr): *fp_glAlphaToCoverageDitherControlNV;
	let cstr = strings::to_c_with_buf("glApplyFramebufferAttachmentCMAAINTEL", cstr_buf): *const u8;
	glApplyFramebufferAttachmentCMAAINTEL = get_proc_address("glApplyFramebufferAttachmentCMAAINTEL", cstr): *fp_glApplyFramebufferAttachmentCMAAINTEL;
	let cstr = strings::to_c_with_buf("glApplyTextureEXT", cstr_buf): *const u8;
	glApplyTextureEXT = get_proc_address("glApplyTextureEXT", cstr): *fp_glApplyTextureEXT;
	let cstr = strings::to_c_with_buf("glAreProgramsResidentNV", cstr_buf): *const u8;
	glAreProgramsResidentNV = get_proc_address("glAreProgramsResidentNV", cstr): *fp_glAreProgramsResidentNV;
	let cstr = strings::to_c_with_buf("glAreTexturesResident", cstr_buf): *const u8;
	glAreTexturesResident = get_proc_address("glAreTexturesResident", cstr): *fp_glAreTexturesResident;
	let cstr = strings::to_c_with_buf("glAreTexturesResidentEXT", cstr_buf): *const u8;
	glAreTexturesResidentEXT = get_proc_address("glAreTexturesResidentEXT", cstr): *fp_glAreTexturesResidentEXT;
	let cstr = strings::to_c_with_buf("glArrayElement", cstr_buf): *const u8;
	glArrayElement = get_proc_address("glArrayElement", cstr): *fp_glArrayElement;
	let cstr = strings::to_c_with_buf("glArrayElementEXT", cstr_buf): *const u8;
	glArrayElementEXT = get_proc_address("glArrayElementEXT", cstr): *fp_glArrayElementEXT;
	let cstr = strings::to_c_with_buf("glArrayObjectATI", cstr_buf): *const u8;
	glArrayObjectATI = get_proc_address("glArrayObjectATI", cstr): *fp_glArrayObjectATI;
	let cstr = strings::to_c_with_buf("glAsyncCopyBufferSubDataNVX", cstr_buf): *const u8;
	glAsyncCopyBufferSubDataNVX = get_proc_address("glAsyncCopyBufferSubDataNVX", cstr): *fp_glAsyncCopyBufferSubDataNVX;
	let cstr = strings::to_c_with_buf("glAsyncCopyImageSubDataNVX", cstr_buf): *const u8;
	glAsyncCopyImageSubDataNVX = get_proc_address("glAsyncCopyImageSubDataNVX", cstr): *fp_glAsyncCopyImageSubDataNVX;
	let cstr = strings::to_c_with_buf("glAsyncMarkerSGIX", cstr_buf): *const u8;
	glAsyncMarkerSGIX = get_proc_address("glAsyncMarkerSGIX", cstr): *fp_glAsyncMarkerSGIX;
	let cstr = strings::to_c_with_buf("glAttachObjectARB", cstr_buf): *const u8;
	glAttachObjectARB = get_proc_address("glAttachObjectARB", cstr): *fp_glAttachObjectARB;
	let cstr = strings::to_c_with_buf("glAttachShader", cstr_buf): *const u8;
	glAttachShader = get_proc_address("glAttachShader", cstr): *fp_glAttachShader;
	let cstr = strings::to_c_with_buf("glBegin", cstr_buf): *const u8;
	glBegin = get_proc_address("glBegin", cstr): *fp_glBegin;
	let cstr = strings::to_c_with_buf("glBeginConditionalRenderNV", cstr_buf): *const u8;
	glBeginConditionalRenderNV = get_proc_address("glBeginConditionalRenderNV", cstr): *fp_glBeginConditionalRenderNV;
	let cstr = strings::to_c_with_buf("glBeginConditionalRenderNVX", cstr_buf): *const u8;
	glBeginConditionalRenderNVX = get_proc_address("glBeginConditionalRenderNVX", cstr): *fp_glBeginConditionalRenderNVX;
	let cstr = strings::to_c_with_buf("glBeginFragmentShaderATI", cstr_buf): *const u8;
	glBeginFragmentShaderATI = get_proc_address("glBeginFragmentShaderATI", cstr): *fp_glBeginFragmentShaderATI;
	let cstr = strings::to_c_with_buf("glBeginOcclusionQueryNV", cstr_buf): *const u8;
	glBeginOcclusionQueryNV = get_proc_address("glBeginOcclusionQueryNV", cstr): *fp_glBeginOcclusionQueryNV;
	let cstr = strings::to_c_with_buf("glBeginPerfMonitorAMD", cstr_buf): *const u8;
	glBeginPerfMonitorAMD = get_proc_address("glBeginPerfMonitorAMD", cstr): *fp_glBeginPerfMonitorAMD;
	let cstr = strings::to_c_with_buf("glBeginPerfQueryINTEL", cstr_buf): *const u8;
	glBeginPerfQueryINTEL = get_proc_address("glBeginPerfQueryINTEL", cstr): *fp_glBeginPerfQueryINTEL;
	let cstr = strings::to_c_with_buf("glBeginQuery", cstr_buf): *const u8;
	glBeginQuery = get_proc_address("glBeginQuery", cstr): *fp_glBeginQuery;
	let cstr = strings::to_c_with_buf("glBeginQueryARB", cstr_buf): *const u8;
	glBeginQueryARB = get_proc_address("glBeginQueryARB", cstr): *fp_glBeginQueryARB;
	let cstr = strings::to_c_with_buf("glBeginQueryIndexed", cstr_buf): *const u8;
	glBeginQueryIndexed = get_proc_address("glBeginQueryIndexed", cstr): *fp_glBeginQueryIndexed;
	let cstr = strings::to_c_with_buf("glBeginTransformFeedbackEXT", cstr_buf): *const u8;
	glBeginTransformFeedbackEXT = get_proc_address("glBeginTransformFeedbackEXT", cstr): *fp_glBeginTransformFeedbackEXT;
	let cstr = strings::to_c_with_buf("glBeginTransformFeedbackNV", cstr_buf): *const u8;
	glBeginTransformFeedbackNV = get_proc_address("glBeginTransformFeedbackNV", cstr): *fp_glBeginTransformFeedbackNV;
	let cstr = strings::to_c_with_buf("glBeginVertexShaderEXT", cstr_buf): *const u8;
	glBeginVertexShaderEXT = get_proc_address("glBeginVertexShaderEXT", cstr): *fp_glBeginVertexShaderEXT;
	let cstr = strings::to_c_with_buf("glBeginVideoCaptureNV", cstr_buf): *const u8;
	glBeginVideoCaptureNV = get_proc_address("glBeginVideoCaptureNV", cstr): *fp_glBeginVideoCaptureNV;
	let cstr = strings::to_c_with_buf("glBindAttribLocation", cstr_buf): *const u8;
	glBindAttribLocation = get_proc_address("glBindAttribLocation", cstr): *fp_glBindAttribLocation;
	let cstr = strings::to_c_with_buf("glBindAttribLocationARB", cstr_buf): *const u8;
	glBindAttribLocationARB = get_proc_address("glBindAttribLocationARB", cstr): *fp_glBindAttribLocationARB;
	let cstr = strings::to_c_with_buf("glBindBuffer", cstr_buf): *const u8;
	glBindBuffer = get_proc_address("glBindBuffer", cstr): *fp_glBindBuffer;
	let cstr = strings::to_c_with_buf("glBindBufferARB", cstr_buf): *const u8;
	glBindBufferARB = get_proc_address("glBindBufferARB", cstr): *fp_glBindBufferARB;
	let cstr = strings::to_c_with_buf("glBindBufferBase", cstr_buf): *const u8;
	glBindBufferBase = get_proc_address("glBindBufferBase", cstr): *fp_glBindBufferBase;
	let cstr = strings::to_c_with_buf("glBindBufferBaseEXT", cstr_buf): *const u8;
	glBindBufferBaseEXT = get_proc_address("glBindBufferBaseEXT", cstr): *fp_glBindBufferBaseEXT;
	let cstr = strings::to_c_with_buf("glBindBufferBaseNV", cstr_buf): *const u8;
	glBindBufferBaseNV = get_proc_address("glBindBufferBaseNV", cstr): *fp_glBindBufferBaseNV;
	let cstr = strings::to_c_with_buf("glBindBufferOffsetEXT", cstr_buf): *const u8;
	glBindBufferOffsetEXT = get_proc_address("glBindBufferOffsetEXT", cstr): *fp_glBindBufferOffsetEXT;
	let cstr = strings::to_c_with_buf("glBindBufferOffsetNV", cstr_buf): *const u8;
	glBindBufferOffsetNV = get_proc_address("glBindBufferOffsetNV", cstr): *fp_glBindBufferOffsetNV;
	let cstr = strings::to_c_with_buf("glBindBufferRange", cstr_buf): *const u8;
	glBindBufferRange = get_proc_address("glBindBufferRange", cstr): *fp_glBindBufferRange;
	let cstr = strings::to_c_with_buf("glBindBufferRangeEXT", cstr_buf): *const u8;
	glBindBufferRangeEXT = get_proc_address("glBindBufferRangeEXT", cstr): *fp_glBindBufferRangeEXT;
	let cstr = strings::to_c_with_buf("glBindBufferRangeNV", cstr_buf): *const u8;
	glBindBufferRangeNV = get_proc_address("glBindBufferRangeNV", cstr): *fp_glBindBufferRangeNV;
	let cstr = strings::to_c_with_buf("glBindBuffersBase", cstr_buf): *const u8;
	glBindBuffersBase = get_proc_address("glBindBuffersBase", cstr): *fp_glBindBuffersBase;
	let cstr = strings::to_c_with_buf("glBindBuffersRange", cstr_buf): *const u8;
	glBindBuffersRange = get_proc_address("glBindBuffersRange", cstr): *fp_glBindBuffersRange;
	let cstr = strings::to_c_with_buf("glBindFragDataLocationEXT", cstr_buf): *const u8;
	glBindFragDataLocationEXT = get_proc_address("glBindFragDataLocationEXT", cstr): *fp_glBindFragDataLocationEXT;
	let cstr = strings::to_c_with_buf("glBindFragDataLocationIndexed", cstr_buf): *const u8;
	glBindFragDataLocationIndexed = get_proc_address("glBindFragDataLocationIndexed", cstr): *fp_glBindFragDataLocationIndexed;
	let cstr = strings::to_c_with_buf("glBindFragmentShaderATI", cstr_buf): *const u8;
	glBindFragmentShaderATI = get_proc_address("glBindFragmentShaderATI", cstr): *fp_glBindFragmentShaderATI;
	let cstr = strings::to_c_with_buf("glBindFramebuffer", cstr_buf): *const u8;
	glBindFramebuffer = get_proc_address("glBindFramebuffer", cstr): *fp_glBindFramebuffer;
	let cstr = strings::to_c_with_buf("glBindFramebufferEXT", cstr_buf): *const u8;
	glBindFramebufferEXT = get_proc_address("glBindFramebufferEXT", cstr): *fp_glBindFramebufferEXT;
	let cstr = strings::to_c_with_buf("glBindImageTexture", cstr_buf): *const u8;
	glBindImageTexture = get_proc_address("glBindImageTexture", cstr): *fp_glBindImageTexture;
	let cstr = strings::to_c_with_buf("glBindImageTextureEXT", cstr_buf): *const u8;
	glBindImageTextureEXT = get_proc_address("glBindImageTextureEXT", cstr): *fp_glBindImageTextureEXT;
	let cstr = strings::to_c_with_buf("glBindImageTextures", cstr_buf): *const u8;
	glBindImageTextures = get_proc_address("glBindImageTextures", cstr): *fp_glBindImageTextures;
	let cstr = strings::to_c_with_buf("glBindLightParameterEXT", cstr_buf): *const u8;
	glBindLightParameterEXT = get_proc_address("glBindLightParameterEXT", cstr): *fp_glBindLightParameterEXT;
	let cstr = strings::to_c_with_buf("glBindMaterialParameterEXT", cstr_buf): *const u8;
	glBindMaterialParameterEXT = get_proc_address("glBindMaterialParameterEXT", cstr): *fp_glBindMaterialParameterEXT;
	let cstr = strings::to_c_with_buf("glBindMultiTextureEXT", cstr_buf): *const u8;
	glBindMultiTextureEXT = get_proc_address("glBindMultiTextureEXT", cstr): *fp_glBindMultiTextureEXT;
	let cstr = strings::to_c_with_buf("glBindParameterEXT", cstr_buf): *const u8;
	glBindParameterEXT = get_proc_address("glBindParameterEXT", cstr): *fp_glBindParameterEXT;
	let cstr = strings::to_c_with_buf("glBindProgramARB", cstr_buf): *const u8;
	glBindProgramARB = get_proc_address("glBindProgramARB", cstr): *fp_glBindProgramARB;
	let cstr = strings::to_c_with_buf("glBindProgramNV", cstr_buf): *const u8;
	glBindProgramNV = get_proc_address("glBindProgramNV", cstr): *fp_glBindProgramNV;
	let cstr = strings::to_c_with_buf("glBindProgramPipeline", cstr_buf): *const u8;
	glBindProgramPipeline = get_proc_address("glBindProgramPipeline", cstr): *fp_glBindProgramPipeline;
	let cstr = strings::to_c_with_buf("glBindRenderbuffer", cstr_buf): *const u8;
	glBindRenderbuffer = get_proc_address("glBindRenderbuffer", cstr): *fp_glBindRenderbuffer;
	let cstr = strings::to_c_with_buf("glBindRenderbufferEXT", cstr_buf): *const u8;
	glBindRenderbufferEXT = get_proc_address("glBindRenderbufferEXT", cstr): *fp_glBindRenderbufferEXT;
	let cstr = strings::to_c_with_buf("glBindSampler", cstr_buf): *const u8;
	glBindSampler = get_proc_address("glBindSampler", cstr): *fp_glBindSampler;
	let cstr = strings::to_c_with_buf("glBindSamplers", cstr_buf): *const u8;
	glBindSamplers = get_proc_address("glBindSamplers", cstr): *fp_glBindSamplers;
	let cstr = strings::to_c_with_buf("glBindShadingRateImageNV", cstr_buf): *const u8;
	glBindShadingRateImageNV = get_proc_address("glBindShadingRateImageNV", cstr): *fp_glBindShadingRateImageNV;
	let cstr = strings::to_c_with_buf("glBindTexGenParameterEXT", cstr_buf): *const u8;
	glBindTexGenParameterEXT = get_proc_address("glBindTexGenParameterEXT", cstr): *fp_glBindTexGenParameterEXT;
	let cstr = strings::to_c_with_buf("glBindTexture", cstr_buf): *const u8;
	glBindTexture = get_proc_address("glBindTexture", cstr): *fp_glBindTexture;
	let cstr = strings::to_c_with_buf("glBindTextureEXT", cstr_buf): *const u8;
	glBindTextureEXT = get_proc_address("glBindTextureEXT", cstr): *fp_glBindTextureEXT;
	let cstr = strings::to_c_with_buf("glBindTextureUnit", cstr_buf): *const u8;
	glBindTextureUnit = get_proc_address("glBindTextureUnit", cstr): *fp_glBindTextureUnit;
	let cstr = strings::to_c_with_buf("glBindTextureUnitParameterEXT", cstr_buf): *const u8;
	glBindTextureUnitParameterEXT = get_proc_address("glBindTextureUnitParameterEXT", cstr): *fp_glBindTextureUnitParameterEXT;
	let cstr = strings::to_c_with_buf("glBindTextures", cstr_buf): *const u8;
	glBindTextures = get_proc_address("glBindTextures", cstr): *fp_glBindTextures;
	let cstr = strings::to_c_with_buf("glBindTransformFeedback", cstr_buf): *const u8;
	glBindTransformFeedback = get_proc_address("glBindTransformFeedback", cstr): *fp_glBindTransformFeedback;
	let cstr = strings::to_c_with_buf("glBindTransformFeedbackNV", cstr_buf): *const u8;
	glBindTransformFeedbackNV = get_proc_address("glBindTransformFeedbackNV", cstr): *fp_glBindTransformFeedbackNV;
	let cstr = strings::to_c_with_buf("glBindVertexArray", cstr_buf): *const u8;
	glBindVertexArray = get_proc_address("glBindVertexArray", cstr): *fp_glBindVertexArray;
	let cstr = strings::to_c_with_buf("glBindVertexArrayAPPLE", cstr_buf): *const u8;
	glBindVertexArrayAPPLE = get_proc_address("glBindVertexArrayAPPLE", cstr): *fp_glBindVertexArrayAPPLE;
	let cstr = strings::to_c_with_buf("glBindVertexBuffer", cstr_buf): *const u8;
	glBindVertexBuffer = get_proc_address("glBindVertexBuffer", cstr): *fp_glBindVertexBuffer;
	let cstr = strings::to_c_with_buf("glBindVertexBuffers", cstr_buf): *const u8;
	glBindVertexBuffers = get_proc_address("glBindVertexBuffers", cstr): *fp_glBindVertexBuffers;
	let cstr = strings::to_c_with_buf("glBindVertexShaderEXT", cstr_buf): *const u8;
	glBindVertexShaderEXT = get_proc_address("glBindVertexShaderEXT", cstr): *fp_glBindVertexShaderEXT;
	let cstr = strings::to_c_with_buf("glBindVideoCaptureStreamBufferNV", cstr_buf): *const u8;
	glBindVideoCaptureStreamBufferNV = get_proc_address("glBindVideoCaptureStreamBufferNV", cstr): *fp_glBindVideoCaptureStreamBufferNV;
	let cstr = strings::to_c_with_buf("glBindVideoCaptureStreamTextureNV", cstr_buf): *const u8;
	glBindVideoCaptureStreamTextureNV = get_proc_address("glBindVideoCaptureStreamTextureNV", cstr): *fp_glBindVideoCaptureStreamTextureNV;
	let cstr = strings::to_c_with_buf("glBinormal3bEXT", cstr_buf): *const u8;
	glBinormal3bEXT = get_proc_address("glBinormal3bEXT", cstr): *fp_glBinormal3bEXT;
	let cstr = strings::to_c_with_buf("glBinormal3bvEXT", cstr_buf): *const u8;
	glBinormal3bvEXT = get_proc_address("glBinormal3bvEXT", cstr): *fp_glBinormal3bvEXT;
	let cstr = strings::to_c_with_buf("glBinormal3dEXT", cstr_buf): *const u8;
	glBinormal3dEXT = get_proc_address("glBinormal3dEXT", cstr): *fp_glBinormal3dEXT;
	let cstr = strings::to_c_with_buf("glBinormal3dvEXT", cstr_buf): *const u8;
	glBinormal3dvEXT = get_proc_address("glBinormal3dvEXT", cstr): *fp_glBinormal3dvEXT;
	let cstr = strings::to_c_with_buf("glBinormal3fEXT", cstr_buf): *const u8;
	glBinormal3fEXT = get_proc_address("glBinormal3fEXT", cstr): *fp_glBinormal3fEXT;
	let cstr = strings::to_c_with_buf("glBinormal3fvEXT", cstr_buf): *const u8;
	glBinormal3fvEXT = get_proc_address("glBinormal3fvEXT", cstr): *fp_glBinormal3fvEXT;
	let cstr = strings::to_c_with_buf("glBinormal3iEXT", cstr_buf): *const u8;
	glBinormal3iEXT = get_proc_address("glBinormal3iEXT", cstr): *fp_glBinormal3iEXT;
	let cstr = strings::to_c_with_buf("glBinormal3ivEXT", cstr_buf): *const u8;
	glBinormal3ivEXT = get_proc_address("glBinormal3ivEXT", cstr): *fp_glBinormal3ivEXT;
	let cstr = strings::to_c_with_buf("glBinormal3sEXT", cstr_buf): *const u8;
	glBinormal3sEXT = get_proc_address("glBinormal3sEXT", cstr): *fp_glBinormal3sEXT;
	let cstr = strings::to_c_with_buf("glBinormal3svEXT", cstr_buf): *const u8;
	glBinormal3svEXT = get_proc_address("glBinormal3svEXT", cstr): *fp_glBinormal3svEXT;
	let cstr = strings::to_c_with_buf("glBinormalPointerEXT", cstr_buf): *const u8;
	glBinormalPointerEXT = get_proc_address("glBinormalPointerEXT", cstr): *fp_glBinormalPointerEXT;
	let cstr = strings::to_c_with_buf("glBitmap", cstr_buf): *const u8;
	glBitmap = get_proc_address("glBitmap", cstr): *fp_glBitmap;
	let cstr = strings::to_c_with_buf("glBitmapxOES", cstr_buf): *const u8;
	glBitmapxOES = get_proc_address("glBitmapxOES", cstr): *fp_glBitmapxOES;
	let cstr = strings::to_c_with_buf("glBlendBarrierKHR", cstr_buf): *const u8;
	glBlendBarrierKHR = get_proc_address("glBlendBarrierKHR", cstr): *fp_glBlendBarrierKHR;
	let cstr = strings::to_c_with_buf("glBlendBarrierNV", cstr_buf): *const u8;
	glBlendBarrierNV = get_proc_address("glBlendBarrierNV", cstr): *fp_glBlendBarrierNV;
	let cstr = strings::to_c_with_buf("glBlendColor", cstr_buf): *const u8;
	glBlendColor = get_proc_address("glBlendColor", cstr): *fp_glBlendColor;
	let cstr = strings::to_c_with_buf("glBlendColorEXT", cstr_buf): *const u8;
	glBlendColorEXT = get_proc_address("glBlendColorEXT", cstr): *fp_glBlendColorEXT;
	let cstr = strings::to_c_with_buf("glBlendColorxOES", cstr_buf): *const u8;
	glBlendColorxOES = get_proc_address("glBlendColorxOES", cstr): *fp_glBlendColorxOES;
	let cstr = strings::to_c_with_buf("glBlendEquation", cstr_buf): *const u8;
	glBlendEquation = get_proc_address("glBlendEquation", cstr): *fp_glBlendEquation;
	let cstr = strings::to_c_with_buf("glBlendEquationEXT", cstr_buf): *const u8;
	glBlendEquationEXT = get_proc_address("glBlendEquationEXT", cstr): *fp_glBlendEquationEXT;
	let cstr = strings::to_c_with_buf("glBlendEquationIndexedAMD", cstr_buf): *const u8;
	glBlendEquationIndexedAMD = get_proc_address("glBlendEquationIndexedAMD", cstr): *fp_glBlendEquationIndexedAMD;
	let cstr = strings::to_c_with_buf("glBlendEquationSeparate", cstr_buf): *const u8;
	glBlendEquationSeparate = get_proc_address("glBlendEquationSeparate", cstr): *fp_glBlendEquationSeparate;
	let cstr = strings::to_c_with_buf("glBlendEquationSeparateEXT", cstr_buf): *const u8;
	glBlendEquationSeparateEXT = get_proc_address("glBlendEquationSeparateEXT", cstr): *fp_glBlendEquationSeparateEXT;
	let cstr = strings::to_c_with_buf("glBlendEquationSeparateIndexedAMD", cstr_buf): *const u8;
	glBlendEquationSeparateIndexedAMD = get_proc_address("glBlendEquationSeparateIndexedAMD", cstr): *fp_glBlendEquationSeparateIndexedAMD;
	let cstr = strings::to_c_with_buf("glBlendEquationSeparateiARB", cstr_buf): *const u8;
	glBlendEquationSeparateiARB = get_proc_address("glBlendEquationSeparateiARB", cstr): *fp_glBlendEquationSeparateiARB;
	let cstr = strings::to_c_with_buf("glBlendEquationiARB", cstr_buf): *const u8;
	glBlendEquationiARB = get_proc_address("glBlendEquationiARB", cstr): *fp_glBlendEquationiARB;
	let cstr = strings::to_c_with_buf("glBlendFunc", cstr_buf): *const u8;
	glBlendFunc = get_proc_address("glBlendFunc", cstr): *fp_glBlendFunc;
	let cstr = strings::to_c_with_buf("glBlendFuncIndexedAMD", cstr_buf): *const u8;
	glBlendFuncIndexedAMD = get_proc_address("glBlendFuncIndexedAMD", cstr): *fp_glBlendFuncIndexedAMD;
	let cstr = strings::to_c_with_buf("glBlendFuncSeparate", cstr_buf): *const u8;
	glBlendFuncSeparate = get_proc_address("glBlendFuncSeparate", cstr): *fp_glBlendFuncSeparate;
	let cstr = strings::to_c_with_buf("glBlendFuncSeparateEXT", cstr_buf): *const u8;
	glBlendFuncSeparateEXT = get_proc_address("glBlendFuncSeparateEXT", cstr): *fp_glBlendFuncSeparateEXT;
	let cstr = strings::to_c_with_buf("glBlendFuncSeparateINGR", cstr_buf): *const u8;
	glBlendFuncSeparateINGR = get_proc_address("glBlendFuncSeparateINGR", cstr): *fp_glBlendFuncSeparateINGR;
	let cstr = strings::to_c_with_buf("glBlendFuncSeparateIndexedAMD", cstr_buf): *const u8;
	glBlendFuncSeparateIndexedAMD = get_proc_address("glBlendFuncSeparateIndexedAMD", cstr): *fp_glBlendFuncSeparateIndexedAMD;
	let cstr = strings::to_c_with_buf("glBlendFuncSeparateiARB", cstr_buf): *const u8;
	glBlendFuncSeparateiARB = get_proc_address("glBlendFuncSeparateiARB", cstr): *fp_glBlendFuncSeparateiARB;
	let cstr = strings::to_c_with_buf("glBlendFunciARB", cstr_buf): *const u8;
	glBlendFunciARB = get_proc_address("glBlendFunciARB", cstr): *fp_glBlendFunciARB;
	let cstr = strings::to_c_with_buf("glBlendParameteriNV", cstr_buf): *const u8;
	glBlendParameteriNV = get_proc_address("glBlendParameteriNV", cstr): *fp_glBlendParameteriNV;
	let cstr = strings::to_c_with_buf("glBlitFramebuffer", cstr_buf): *const u8;
	glBlitFramebuffer = get_proc_address("glBlitFramebuffer", cstr): *fp_glBlitFramebuffer;
	let cstr = strings::to_c_with_buf("glBlitFramebufferEXT", cstr_buf): *const u8;
	glBlitFramebufferEXT = get_proc_address("glBlitFramebufferEXT", cstr): *fp_glBlitFramebufferEXT;
	let cstr = strings::to_c_with_buf("glBlitNamedFramebuffer", cstr_buf): *const u8;
	glBlitNamedFramebuffer = get_proc_address("glBlitNamedFramebuffer", cstr): *fp_glBlitNamedFramebuffer;
	let cstr = strings::to_c_with_buf("glBufferAddressRangeNV", cstr_buf): *const u8;
	glBufferAddressRangeNV = get_proc_address("glBufferAddressRangeNV", cstr): *fp_glBufferAddressRangeNV;
	let cstr = strings::to_c_with_buf("glBufferAttachMemoryNV", cstr_buf): *const u8;
	glBufferAttachMemoryNV = get_proc_address("glBufferAttachMemoryNV", cstr): *fp_glBufferAttachMemoryNV;
	let cstr = strings::to_c_with_buf("glBufferData", cstr_buf): *const u8;
	glBufferData = get_proc_address("glBufferData", cstr): *fp_glBufferData;
	let cstr = strings::to_c_with_buf("glBufferDataARB", cstr_buf): *const u8;
	glBufferDataARB = get_proc_address("glBufferDataARB", cstr): *fp_glBufferDataARB;
	let cstr = strings::to_c_with_buf("glBufferPageCommitmentARB", cstr_buf): *const u8;
	glBufferPageCommitmentARB = get_proc_address("glBufferPageCommitmentARB", cstr): *fp_glBufferPageCommitmentARB;
	let cstr = strings::to_c_with_buf("glBufferPageCommitmentMemNV", cstr_buf): *const u8;
	glBufferPageCommitmentMemNV = get_proc_address("glBufferPageCommitmentMemNV", cstr): *fp_glBufferPageCommitmentMemNV;
	let cstr = strings::to_c_with_buf("glBufferParameteriAPPLE", cstr_buf): *const u8;
	glBufferParameteriAPPLE = get_proc_address("glBufferParameteriAPPLE", cstr): *fp_glBufferParameteriAPPLE;
	let cstr = strings::to_c_with_buf("glBufferStorage", cstr_buf): *const u8;
	glBufferStorage = get_proc_address("glBufferStorage", cstr): *fp_glBufferStorage;
	let cstr = strings::to_c_with_buf("glBufferStorageExternalEXT", cstr_buf): *const u8;
	glBufferStorageExternalEXT = get_proc_address("glBufferStorageExternalEXT", cstr): *fp_glBufferStorageExternalEXT;
	let cstr = strings::to_c_with_buf("glBufferStorageMemEXT", cstr_buf): *const u8;
	glBufferStorageMemEXT = get_proc_address("glBufferStorageMemEXT", cstr): *fp_glBufferStorageMemEXT;
	let cstr = strings::to_c_with_buf("glBufferSubData", cstr_buf): *const u8;
	glBufferSubData = get_proc_address("glBufferSubData", cstr): *fp_glBufferSubData;
	let cstr = strings::to_c_with_buf("glBufferSubDataARB", cstr_buf): *const u8;
	glBufferSubDataARB = get_proc_address("glBufferSubDataARB", cstr): *fp_glBufferSubDataARB;
	let cstr = strings::to_c_with_buf("glCallCommandListNV", cstr_buf): *const u8;
	glCallCommandListNV = get_proc_address("glCallCommandListNV", cstr): *fp_glCallCommandListNV;
	let cstr = strings::to_c_with_buf("glCallList", cstr_buf): *const u8;
	glCallList = get_proc_address("glCallList", cstr): *fp_glCallList;
	let cstr = strings::to_c_with_buf("glCallLists", cstr_buf): *const u8;
	glCallLists = get_proc_address("glCallLists", cstr): *fp_glCallLists;
	let cstr = strings::to_c_with_buf("glCheckFramebufferStatus", cstr_buf): *const u8;
	glCheckFramebufferStatus = get_proc_address("glCheckFramebufferStatus", cstr): *fp_glCheckFramebufferStatus;
	let cstr = strings::to_c_with_buf("glCheckFramebufferStatusEXT", cstr_buf): *const u8;
	glCheckFramebufferStatusEXT = get_proc_address("glCheckFramebufferStatusEXT", cstr): *fp_glCheckFramebufferStatusEXT;
	let cstr = strings::to_c_with_buf("glCheckNamedFramebufferStatus", cstr_buf): *const u8;
	glCheckNamedFramebufferStatus = get_proc_address("glCheckNamedFramebufferStatus", cstr): *fp_glCheckNamedFramebufferStatus;
	let cstr = strings::to_c_with_buf("glCheckNamedFramebufferStatusEXT", cstr_buf): *const u8;
	glCheckNamedFramebufferStatusEXT = get_proc_address("glCheckNamedFramebufferStatusEXT", cstr): *fp_glCheckNamedFramebufferStatusEXT;
	let cstr = strings::to_c_with_buf("glClampColorARB", cstr_buf): *const u8;
	glClampColorARB = get_proc_address("glClampColorARB", cstr): *fp_glClampColorARB;
	let cstr = strings::to_c_with_buf("glClear", cstr_buf): *const u8;
	glClear = get_proc_address("glClear", cstr): *fp_glClear;
	let cstr = strings::to_c_with_buf("glClearAccum", cstr_buf): *const u8;
	glClearAccum = get_proc_address("glClearAccum", cstr): *fp_glClearAccum;
	let cstr = strings::to_c_with_buf("glClearAccumxOES", cstr_buf): *const u8;
	glClearAccumxOES = get_proc_address("glClearAccumxOES", cstr): *fp_glClearAccumxOES;
	let cstr = strings::to_c_with_buf("glClearBufferData", cstr_buf): *const u8;
	glClearBufferData = get_proc_address("glClearBufferData", cstr): *fp_glClearBufferData;
	let cstr = strings::to_c_with_buf("glClearBufferSubData", cstr_buf): *const u8;
	glClearBufferSubData = get_proc_address("glClearBufferSubData", cstr): *fp_glClearBufferSubData;
	let cstr = strings::to_c_with_buf("glClearColor", cstr_buf): *const u8;
	glClearColor = get_proc_address("glClearColor", cstr): *fp_glClearColor;
	let cstr = strings::to_c_with_buf("glClearColorIiEXT", cstr_buf): *const u8;
	glClearColorIiEXT = get_proc_address("glClearColorIiEXT", cstr): *fp_glClearColorIiEXT;
	let cstr = strings::to_c_with_buf("glClearColorIuiEXT", cstr_buf): *const u8;
	glClearColorIuiEXT = get_proc_address("glClearColorIuiEXT", cstr): *fp_glClearColorIuiEXT;
	let cstr = strings::to_c_with_buf("glClearColorxOES", cstr_buf): *const u8;
	glClearColorxOES = get_proc_address("glClearColorxOES", cstr): *fp_glClearColorxOES;
	let cstr = strings::to_c_with_buf("glClearDepth", cstr_buf): *const u8;
	glClearDepth = get_proc_address("glClearDepth", cstr): *fp_glClearDepth;
	let cstr = strings::to_c_with_buf("glClearDepthdNV", cstr_buf): *const u8;
	glClearDepthdNV = get_proc_address("glClearDepthdNV", cstr): *fp_glClearDepthdNV;
	let cstr = strings::to_c_with_buf("glClearDepthf", cstr_buf): *const u8;
	glClearDepthf = get_proc_address("glClearDepthf", cstr): *fp_glClearDepthf;
	let cstr = strings::to_c_with_buf("glClearDepthfOES", cstr_buf): *const u8;
	glClearDepthfOES = get_proc_address("glClearDepthfOES", cstr): *fp_glClearDepthfOES;
	let cstr = strings::to_c_with_buf("glClearDepthxOES", cstr_buf): *const u8;
	glClearDepthxOES = get_proc_address("glClearDepthxOES", cstr): *fp_glClearDepthxOES;
	let cstr = strings::to_c_with_buf("glClearIndex", cstr_buf): *const u8;
	glClearIndex = get_proc_address("glClearIndex", cstr): *fp_glClearIndex;
	let cstr = strings::to_c_with_buf("glClearNamedBufferData", cstr_buf): *const u8;
	glClearNamedBufferData = get_proc_address("glClearNamedBufferData", cstr): *fp_glClearNamedBufferData;
	let cstr = strings::to_c_with_buf("glClearNamedBufferDataEXT", cstr_buf): *const u8;
	glClearNamedBufferDataEXT = get_proc_address("glClearNamedBufferDataEXT", cstr): *fp_glClearNamedBufferDataEXT;
	let cstr = strings::to_c_with_buf("glClearNamedBufferSubData", cstr_buf): *const u8;
	glClearNamedBufferSubData = get_proc_address("glClearNamedBufferSubData", cstr): *fp_glClearNamedBufferSubData;
	let cstr = strings::to_c_with_buf("glClearNamedBufferSubDataEXT", cstr_buf): *const u8;
	glClearNamedBufferSubDataEXT = get_proc_address("glClearNamedBufferSubDataEXT", cstr): *fp_glClearNamedBufferSubDataEXT;
	let cstr = strings::to_c_with_buf("glClearNamedFramebufferfi", cstr_buf): *const u8;
	glClearNamedFramebufferfi = get_proc_address("glClearNamedFramebufferfi", cstr): *fp_glClearNamedFramebufferfi;
	let cstr = strings::to_c_with_buf("glClearNamedFramebufferfv", cstr_buf): *const u8;
	glClearNamedFramebufferfv = get_proc_address("glClearNamedFramebufferfv", cstr): *fp_glClearNamedFramebufferfv;
	let cstr = strings::to_c_with_buf("glClearNamedFramebufferiv", cstr_buf): *const u8;
	glClearNamedFramebufferiv = get_proc_address("glClearNamedFramebufferiv", cstr): *fp_glClearNamedFramebufferiv;
	let cstr = strings::to_c_with_buf("glClearNamedFramebufferuiv", cstr_buf): *const u8;
	glClearNamedFramebufferuiv = get_proc_address("glClearNamedFramebufferuiv", cstr): *fp_glClearNamedFramebufferuiv;
	let cstr = strings::to_c_with_buf("glClearStencil", cstr_buf): *const u8;
	glClearStencil = get_proc_address("glClearStencil", cstr): *fp_glClearStencil;
	let cstr = strings::to_c_with_buf("glClearTexImage", cstr_buf): *const u8;
	glClearTexImage = get_proc_address("glClearTexImage", cstr): *fp_glClearTexImage;
	let cstr = strings::to_c_with_buf("glClearTexSubImage", cstr_buf): *const u8;
	glClearTexSubImage = get_proc_address("glClearTexSubImage", cstr): *fp_glClearTexSubImage;
	let cstr = strings::to_c_with_buf("glClientActiveTexture", cstr_buf): *const u8;
	glClientActiveTexture = get_proc_address("glClientActiveTexture", cstr): *fp_glClientActiveTexture;
	let cstr = strings::to_c_with_buf("glClientActiveTextureARB", cstr_buf): *const u8;
	glClientActiveTextureARB = get_proc_address("glClientActiveTextureARB", cstr): *fp_glClientActiveTextureARB;
	let cstr = strings::to_c_with_buf("glClientActiveVertexStreamATI", cstr_buf): *const u8;
	glClientActiveVertexStreamATI = get_proc_address("glClientActiveVertexStreamATI", cstr): *fp_glClientActiveVertexStreamATI;
	let cstr = strings::to_c_with_buf("glClientAttribDefaultEXT", cstr_buf): *const u8;
	glClientAttribDefaultEXT = get_proc_address("glClientAttribDefaultEXT", cstr): *fp_glClientAttribDefaultEXT;
	let cstr = strings::to_c_with_buf("glClientWaitSemaphoreui64NVX", cstr_buf): *const u8;
	glClientWaitSemaphoreui64NVX = get_proc_address("glClientWaitSemaphoreui64NVX", cstr): *fp_glClientWaitSemaphoreui64NVX;
	let cstr = strings::to_c_with_buf("glClientWaitSync", cstr_buf): *const u8;
	glClientWaitSync = get_proc_address("glClientWaitSync", cstr): *fp_glClientWaitSync;
	let cstr = strings::to_c_with_buf("glClipControl", cstr_buf): *const u8;
	glClipControl = get_proc_address("glClipControl", cstr): *fp_glClipControl;
	let cstr = strings::to_c_with_buf("glClipPlane", cstr_buf): *const u8;
	glClipPlane = get_proc_address("glClipPlane", cstr): *fp_glClipPlane;
	let cstr = strings::to_c_with_buf("glClipPlanefOES", cstr_buf): *const u8;
	glClipPlanefOES = get_proc_address("glClipPlanefOES", cstr): *fp_glClipPlanefOES;
	let cstr = strings::to_c_with_buf("glClipPlanexOES", cstr_buf): *const u8;
	glClipPlanexOES = get_proc_address("glClipPlanexOES", cstr): *fp_glClipPlanexOES;
	let cstr = strings::to_c_with_buf("glColor3b", cstr_buf): *const u8;
	glColor3b = get_proc_address("glColor3b", cstr): *fp_glColor3b;
	let cstr = strings::to_c_with_buf("glColor3bv", cstr_buf): *const u8;
	glColor3bv = get_proc_address("glColor3bv", cstr): *fp_glColor3bv;
	let cstr = strings::to_c_with_buf("glColor3d", cstr_buf): *const u8;
	glColor3d = get_proc_address("glColor3d", cstr): *fp_glColor3d;
	let cstr = strings::to_c_with_buf("glColor3dv", cstr_buf): *const u8;
	glColor3dv = get_proc_address("glColor3dv", cstr): *fp_glColor3dv;
	let cstr = strings::to_c_with_buf("glColor3f", cstr_buf): *const u8;
	glColor3f = get_proc_address("glColor3f", cstr): *fp_glColor3f;
	let cstr = strings::to_c_with_buf("glColor3fVertex3fSUN", cstr_buf): *const u8;
	glColor3fVertex3fSUN = get_proc_address("glColor3fVertex3fSUN", cstr): *fp_glColor3fVertex3fSUN;
	let cstr = strings::to_c_with_buf("glColor3fVertex3fvSUN", cstr_buf): *const u8;
	glColor3fVertex3fvSUN = get_proc_address("glColor3fVertex3fvSUN", cstr): *fp_glColor3fVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glColor3fv", cstr_buf): *const u8;
	glColor3fv = get_proc_address("glColor3fv", cstr): *fp_glColor3fv;
	let cstr = strings::to_c_with_buf("glColor3hNV", cstr_buf): *const u8;
	glColor3hNV = get_proc_address("glColor3hNV", cstr): *fp_glColor3hNV;
	let cstr = strings::to_c_with_buf("glColor3hvNV", cstr_buf): *const u8;
	glColor3hvNV = get_proc_address("glColor3hvNV", cstr): *fp_glColor3hvNV;
	let cstr = strings::to_c_with_buf("glColor3i", cstr_buf): *const u8;
	glColor3i = get_proc_address("glColor3i", cstr): *fp_glColor3i;
	let cstr = strings::to_c_with_buf("glColor3iv", cstr_buf): *const u8;
	glColor3iv = get_proc_address("glColor3iv", cstr): *fp_glColor3iv;
	let cstr = strings::to_c_with_buf("glColor3s", cstr_buf): *const u8;
	glColor3s = get_proc_address("glColor3s", cstr): *fp_glColor3s;
	let cstr = strings::to_c_with_buf("glColor3sv", cstr_buf): *const u8;
	glColor3sv = get_proc_address("glColor3sv", cstr): *fp_glColor3sv;
	let cstr = strings::to_c_with_buf("glColor3ub", cstr_buf): *const u8;
	glColor3ub = get_proc_address("glColor3ub", cstr): *fp_glColor3ub;
	let cstr = strings::to_c_with_buf("glColor3ubv", cstr_buf): *const u8;
	glColor3ubv = get_proc_address("glColor3ubv", cstr): *fp_glColor3ubv;
	let cstr = strings::to_c_with_buf("glColor3ui", cstr_buf): *const u8;
	glColor3ui = get_proc_address("glColor3ui", cstr): *fp_glColor3ui;
	let cstr = strings::to_c_with_buf("glColor3uiv", cstr_buf): *const u8;
	glColor3uiv = get_proc_address("glColor3uiv", cstr): *fp_glColor3uiv;
	let cstr = strings::to_c_with_buf("glColor3us", cstr_buf): *const u8;
	glColor3us = get_proc_address("glColor3us", cstr): *fp_glColor3us;
	let cstr = strings::to_c_with_buf("glColor3usv", cstr_buf): *const u8;
	glColor3usv = get_proc_address("glColor3usv", cstr): *fp_glColor3usv;
	let cstr = strings::to_c_with_buf("glColor3xOES", cstr_buf): *const u8;
	glColor3xOES = get_proc_address("glColor3xOES", cstr): *fp_glColor3xOES;
	let cstr = strings::to_c_with_buf("glColor3xvOES", cstr_buf): *const u8;
	glColor3xvOES = get_proc_address("glColor3xvOES", cstr): *fp_glColor3xvOES;
	let cstr = strings::to_c_with_buf("glColor4b", cstr_buf): *const u8;
	glColor4b = get_proc_address("glColor4b", cstr): *fp_glColor4b;
	let cstr = strings::to_c_with_buf("glColor4bv", cstr_buf): *const u8;
	glColor4bv = get_proc_address("glColor4bv", cstr): *fp_glColor4bv;
	let cstr = strings::to_c_with_buf("glColor4d", cstr_buf): *const u8;
	glColor4d = get_proc_address("glColor4d", cstr): *fp_glColor4d;
	let cstr = strings::to_c_with_buf("glColor4dv", cstr_buf): *const u8;
	glColor4dv = get_proc_address("glColor4dv", cstr): *fp_glColor4dv;
	let cstr = strings::to_c_with_buf("glColor4f", cstr_buf): *const u8;
	glColor4f = get_proc_address("glColor4f", cstr): *fp_glColor4f;
	let cstr = strings::to_c_with_buf("glColor4fNormal3fVertex3fSUN", cstr_buf): *const u8;
	glColor4fNormal3fVertex3fSUN = get_proc_address("glColor4fNormal3fVertex3fSUN", cstr): *fp_glColor4fNormal3fVertex3fSUN;
	let cstr = strings::to_c_with_buf("glColor4fNormal3fVertex3fvSUN", cstr_buf): *const u8;
	glColor4fNormal3fVertex3fvSUN = get_proc_address("glColor4fNormal3fVertex3fvSUN", cstr): *fp_glColor4fNormal3fVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glColor4fv", cstr_buf): *const u8;
	glColor4fv = get_proc_address("glColor4fv", cstr): *fp_glColor4fv;
	let cstr = strings::to_c_with_buf("glColor4hNV", cstr_buf): *const u8;
	glColor4hNV = get_proc_address("glColor4hNV", cstr): *fp_glColor4hNV;
	let cstr = strings::to_c_with_buf("glColor4hvNV", cstr_buf): *const u8;
	glColor4hvNV = get_proc_address("glColor4hvNV", cstr): *fp_glColor4hvNV;
	let cstr = strings::to_c_with_buf("glColor4i", cstr_buf): *const u8;
	glColor4i = get_proc_address("glColor4i", cstr): *fp_glColor4i;
	let cstr = strings::to_c_with_buf("glColor4iv", cstr_buf): *const u8;
	glColor4iv = get_proc_address("glColor4iv", cstr): *fp_glColor4iv;
	let cstr = strings::to_c_with_buf("glColor4s", cstr_buf): *const u8;
	glColor4s = get_proc_address("glColor4s", cstr): *fp_glColor4s;
	let cstr = strings::to_c_with_buf("glColor4sv", cstr_buf): *const u8;
	glColor4sv = get_proc_address("glColor4sv", cstr): *fp_glColor4sv;
	let cstr = strings::to_c_with_buf("glColor4ub", cstr_buf): *const u8;
	glColor4ub = get_proc_address("glColor4ub", cstr): *fp_glColor4ub;
	let cstr = strings::to_c_with_buf("glColor4ubVertex2fSUN", cstr_buf): *const u8;
	glColor4ubVertex2fSUN = get_proc_address("glColor4ubVertex2fSUN", cstr): *fp_glColor4ubVertex2fSUN;
	let cstr = strings::to_c_with_buf("glColor4ubVertex2fvSUN", cstr_buf): *const u8;
	glColor4ubVertex2fvSUN = get_proc_address("glColor4ubVertex2fvSUN", cstr): *fp_glColor4ubVertex2fvSUN;
	let cstr = strings::to_c_with_buf("glColor4ubVertex3fSUN", cstr_buf): *const u8;
	glColor4ubVertex3fSUN = get_proc_address("glColor4ubVertex3fSUN", cstr): *fp_glColor4ubVertex3fSUN;
	let cstr = strings::to_c_with_buf("glColor4ubVertex3fvSUN", cstr_buf): *const u8;
	glColor4ubVertex3fvSUN = get_proc_address("glColor4ubVertex3fvSUN", cstr): *fp_glColor4ubVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glColor4ubv", cstr_buf): *const u8;
	glColor4ubv = get_proc_address("glColor4ubv", cstr): *fp_glColor4ubv;
	let cstr = strings::to_c_with_buf("glColor4ui", cstr_buf): *const u8;
	glColor4ui = get_proc_address("glColor4ui", cstr): *fp_glColor4ui;
	let cstr = strings::to_c_with_buf("glColor4uiv", cstr_buf): *const u8;
	glColor4uiv = get_proc_address("glColor4uiv", cstr): *fp_glColor4uiv;
	let cstr = strings::to_c_with_buf("glColor4us", cstr_buf): *const u8;
	glColor4us = get_proc_address("glColor4us", cstr): *fp_glColor4us;
	let cstr = strings::to_c_with_buf("glColor4usv", cstr_buf): *const u8;
	glColor4usv = get_proc_address("glColor4usv", cstr): *fp_glColor4usv;
	let cstr = strings::to_c_with_buf("glColor4xOES", cstr_buf): *const u8;
	glColor4xOES = get_proc_address("glColor4xOES", cstr): *fp_glColor4xOES;
	let cstr = strings::to_c_with_buf("glColor4xvOES", cstr_buf): *const u8;
	glColor4xvOES = get_proc_address("glColor4xvOES", cstr): *fp_glColor4xvOES;
	let cstr = strings::to_c_with_buf("glColorFormatNV", cstr_buf): *const u8;
	glColorFormatNV = get_proc_address("glColorFormatNV", cstr): *fp_glColorFormatNV;
	let cstr = strings::to_c_with_buf("glColorFragmentOp1ATI", cstr_buf): *const u8;
	glColorFragmentOp1ATI = get_proc_address("glColorFragmentOp1ATI", cstr): *fp_glColorFragmentOp1ATI;
	let cstr = strings::to_c_with_buf("glColorFragmentOp2ATI", cstr_buf): *const u8;
	glColorFragmentOp2ATI = get_proc_address("glColorFragmentOp2ATI", cstr): *fp_glColorFragmentOp2ATI;
	let cstr = strings::to_c_with_buf("glColorFragmentOp3ATI", cstr_buf): *const u8;
	glColorFragmentOp3ATI = get_proc_address("glColorFragmentOp3ATI", cstr): *fp_glColorFragmentOp3ATI;
	let cstr = strings::to_c_with_buf("glColorMask", cstr_buf): *const u8;
	glColorMask = get_proc_address("glColorMask", cstr): *fp_glColorMask;
	let cstr = strings::to_c_with_buf("glColorMaskIndexedEXT", cstr_buf): *const u8;
	glColorMaskIndexedEXT = get_proc_address("glColorMaskIndexedEXT", cstr): *fp_glColorMaskIndexedEXT;
	let cstr = strings::to_c_with_buf("glColorMaterial", cstr_buf): *const u8;
	glColorMaterial = get_proc_address("glColorMaterial", cstr): *fp_glColorMaterial;
	let cstr = strings::to_c_with_buf("glColorPointer", cstr_buf): *const u8;
	glColorPointer = get_proc_address("glColorPointer", cstr): *fp_glColorPointer;
	let cstr = strings::to_c_with_buf("glColorPointerEXT", cstr_buf): *const u8;
	glColorPointerEXT = get_proc_address("glColorPointerEXT", cstr): *fp_glColorPointerEXT;
	let cstr = strings::to_c_with_buf("glColorPointerListIBM", cstr_buf): *const u8;
	glColorPointerListIBM = get_proc_address("glColorPointerListIBM", cstr): *fp_glColorPointerListIBM;
	let cstr = strings::to_c_with_buf("glColorPointervINTEL", cstr_buf): *const u8;
	glColorPointervINTEL = get_proc_address("glColorPointervINTEL", cstr): *fp_glColorPointervINTEL;
	let cstr = strings::to_c_with_buf("glColorSubTableEXT", cstr_buf): *const u8;
	glColorSubTableEXT = get_proc_address("glColorSubTableEXT", cstr): *fp_glColorSubTableEXT;
	let cstr = strings::to_c_with_buf("glColorTableEXT", cstr_buf): *const u8;
	glColorTableEXT = get_proc_address("glColorTableEXT", cstr): *fp_glColorTableEXT;
	let cstr = strings::to_c_with_buf("glColorTableParameterfvSGI", cstr_buf): *const u8;
	glColorTableParameterfvSGI = get_proc_address("glColorTableParameterfvSGI", cstr): *fp_glColorTableParameterfvSGI;
	let cstr = strings::to_c_with_buf("glColorTableParameterivSGI", cstr_buf): *const u8;
	glColorTableParameterivSGI = get_proc_address("glColorTableParameterivSGI", cstr): *fp_glColorTableParameterivSGI;
	let cstr = strings::to_c_with_buf("glColorTableSGI", cstr_buf): *const u8;
	glColorTableSGI = get_proc_address("glColorTableSGI", cstr): *fp_glColorTableSGI;
	let cstr = strings::to_c_with_buf("glCombinerInputNV", cstr_buf): *const u8;
	glCombinerInputNV = get_proc_address("glCombinerInputNV", cstr): *fp_glCombinerInputNV;
	let cstr = strings::to_c_with_buf("glCombinerOutputNV", cstr_buf): *const u8;
	glCombinerOutputNV = get_proc_address("glCombinerOutputNV", cstr): *fp_glCombinerOutputNV;
	let cstr = strings::to_c_with_buf("glCombinerParameterfNV", cstr_buf): *const u8;
	glCombinerParameterfNV = get_proc_address("glCombinerParameterfNV", cstr): *fp_glCombinerParameterfNV;
	let cstr = strings::to_c_with_buf("glCombinerParameterfvNV", cstr_buf): *const u8;
	glCombinerParameterfvNV = get_proc_address("glCombinerParameterfvNV", cstr): *fp_glCombinerParameterfvNV;
	let cstr = strings::to_c_with_buf("glCombinerParameteriNV", cstr_buf): *const u8;
	glCombinerParameteriNV = get_proc_address("glCombinerParameteriNV", cstr): *fp_glCombinerParameteriNV;
	let cstr = strings::to_c_with_buf("glCombinerParameterivNV", cstr_buf): *const u8;
	glCombinerParameterivNV = get_proc_address("glCombinerParameterivNV", cstr): *fp_glCombinerParameterivNV;
	let cstr = strings::to_c_with_buf("glCombinerStageParameterfvNV", cstr_buf): *const u8;
	glCombinerStageParameterfvNV = get_proc_address("glCombinerStageParameterfvNV", cstr): *fp_glCombinerStageParameterfvNV;
	let cstr = strings::to_c_with_buf("glCommandListSegmentsNV", cstr_buf): *const u8;
	glCommandListSegmentsNV = get_proc_address("glCommandListSegmentsNV", cstr): *fp_glCommandListSegmentsNV;
	let cstr = strings::to_c_with_buf("glCompileCommandListNV", cstr_buf): *const u8;
	glCompileCommandListNV = get_proc_address("glCompileCommandListNV", cstr): *fp_glCompileCommandListNV;
	let cstr = strings::to_c_with_buf("glCompileShader", cstr_buf): *const u8;
	glCompileShader = get_proc_address("glCompileShader", cstr): *fp_glCompileShader;
	let cstr = strings::to_c_with_buf("glCompileShaderARB", cstr_buf): *const u8;
	glCompileShaderARB = get_proc_address("glCompileShaderARB", cstr): *fp_glCompileShaderARB;
	let cstr = strings::to_c_with_buf("glCompileShaderIncludeARB", cstr_buf): *const u8;
	glCompileShaderIncludeARB = get_proc_address("glCompileShaderIncludeARB", cstr): *fp_glCompileShaderIncludeARB;
	let cstr = strings::to_c_with_buf("glCompressedMultiTexImage1DEXT", cstr_buf): *const u8;
	glCompressedMultiTexImage1DEXT = get_proc_address("glCompressedMultiTexImage1DEXT", cstr): *fp_glCompressedMultiTexImage1DEXT;
	let cstr = strings::to_c_with_buf("glCompressedMultiTexImage2DEXT", cstr_buf): *const u8;
	glCompressedMultiTexImage2DEXT = get_proc_address("glCompressedMultiTexImage2DEXT", cstr): *fp_glCompressedMultiTexImage2DEXT;
	let cstr = strings::to_c_with_buf("glCompressedMultiTexImage3DEXT", cstr_buf): *const u8;
	glCompressedMultiTexImage3DEXT = get_proc_address("glCompressedMultiTexImage3DEXT", cstr): *fp_glCompressedMultiTexImage3DEXT;
	let cstr = strings::to_c_with_buf("glCompressedMultiTexSubImage1DEXT", cstr_buf): *const u8;
	glCompressedMultiTexSubImage1DEXT = get_proc_address("glCompressedMultiTexSubImage1DEXT", cstr): *fp_glCompressedMultiTexSubImage1DEXT;
	let cstr = strings::to_c_with_buf("glCompressedMultiTexSubImage2DEXT", cstr_buf): *const u8;
	glCompressedMultiTexSubImage2DEXT = get_proc_address("glCompressedMultiTexSubImage2DEXT", cstr): *fp_glCompressedMultiTexSubImage2DEXT;
	let cstr = strings::to_c_with_buf("glCompressedMultiTexSubImage3DEXT", cstr_buf): *const u8;
	glCompressedMultiTexSubImage3DEXT = get_proc_address("glCompressedMultiTexSubImage3DEXT", cstr): *fp_glCompressedMultiTexSubImage3DEXT;
	let cstr = strings::to_c_with_buf("glCompressedTexImage1D", cstr_buf): *const u8;
	glCompressedTexImage1D = get_proc_address("glCompressedTexImage1D", cstr): *fp_glCompressedTexImage1D;
	let cstr = strings::to_c_with_buf("glCompressedTexImage1DARB", cstr_buf): *const u8;
	glCompressedTexImage1DARB = get_proc_address("glCompressedTexImage1DARB", cstr): *fp_glCompressedTexImage1DARB;
	let cstr = strings::to_c_with_buf("glCompressedTexImage2D", cstr_buf): *const u8;
	glCompressedTexImage2D = get_proc_address("glCompressedTexImage2D", cstr): *fp_glCompressedTexImage2D;
	let cstr = strings::to_c_with_buf("glCompressedTexImage2DARB", cstr_buf): *const u8;
	glCompressedTexImage2DARB = get_proc_address("glCompressedTexImage2DARB", cstr): *fp_glCompressedTexImage2DARB;
	let cstr = strings::to_c_with_buf("glCompressedTexImage3D", cstr_buf): *const u8;
	glCompressedTexImage3D = get_proc_address("glCompressedTexImage3D", cstr): *fp_glCompressedTexImage3D;
	let cstr = strings::to_c_with_buf("glCompressedTexImage3DARB", cstr_buf): *const u8;
	glCompressedTexImage3DARB = get_proc_address("glCompressedTexImage3DARB", cstr): *fp_glCompressedTexImage3DARB;
	let cstr = strings::to_c_with_buf("glCompressedTexSubImage1D", cstr_buf): *const u8;
	glCompressedTexSubImage1D = get_proc_address("glCompressedTexSubImage1D", cstr): *fp_glCompressedTexSubImage1D;
	let cstr = strings::to_c_with_buf("glCompressedTexSubImage1DARB", cstr_buf): *const u8;
	glCompressedTexSubImage1DARB = get_proc_address("glCompressedTexSubImage1DARB", cstr): *fp_glCompressedTexSubImage1DARB;
	let cstr = strings::to_c_with_buf("glCompressedTexSubImage2D", cstr_buf): *const u8;
	glCompressedTexSubImage2D = get_proc_address("glCompressedTexSubImage2D", cstr): *fp_glCompressedTexSubImage2D;
	let cstr = strings::to_c_with_buf("glCompressedTexSubImage2DARB", cstr_buf): *const u8;
	glCompressedTexSubImage2DARB = get_proc_address("glCompressedTexSubImage2DARB", cstr): *fp_glCompressedTexSubImage2DARB;
	let cstr = strings::to_c_with_buf("glCompressedTexSubImage3D", cstr_buf): *const u8;
	glCompressedTexSubImage3D = get_proc_address("glCompressedTexSubImage3D", cstr): *fp_glCompressedTexSubImage3D;
	let cstr = strings::to_c_with_buf("glCompressedTexSubImage3DARB", cstr_buf): *const u8;
	glCompressedTexSubImage3DARB = get_proc_address("glCompressedTexSubImage3DARB", cstr): *fp_glCompressedTexSubImage3DARB;
	let cstr = strings::to_c_with_buf("glCompressedTextureImage1DEXT", cstr_buf): *const u8;
	glCompressedTextureImage1DEXT = get_proc_address("glCompressedTextureImage1DEXT", cstr): *fp_glCompressedTextureImage1DEXT;
	let cstr = strings::to_c_with_buf("glCompressedTextureImage2DEXT", cstr_buf): *const u8;
	glCompressedTextureImage2DEXT = get_proc_address("glCompressedTextureImage2DEXT", cstr): *fp_glCompressedTextureImage2DEXT;
	let cstr = strings::to_c_with_buf("glCompressedTextureImage3DEXT", cstr_buf): *const u8;
	glCompressedTextureImage3DEXT = get_proc_address("glCompressedTextureImage3DEXT", cstr): *fp_glCompressedTextureImage3DEXT;
	let cstr = strings::to_c_with_buf("glCompressedTextureSubImage1D", cstr_buf): *const u8;
	glCompressedTextureSubImage1D = get_proc_address("glCompressedTextureSubImage1D", cstr): *fp_glCompressedTextureSubImage1D;
	let cstr = strings::to_c_with_buf("glCompressedTextureSubImage1DEXT", cstr_buf): *const u8;
	glCompressedTextureSubImage1DEXT = get_proc_address("glCompressedTextureSubImage1DEXT", cstr): *fp_glCompressedTextureSubImage1DEXT;
	let cstr = strings::to_c_with_buf("glCompressedTextureSubImage2D", cstr_buf): *const u8;
	glCompressedTextureSubImage2D = get_proc_address("glCompressedTextureSubImage2D", cstr): *fp_glCompressedTextureSubImage2D;
	let cstr = strings::to_c_with_buf("glCompressedTextureSubImage2DEXT", cstr_buf): *const u8;
	glCompressedTextureSubImage2DEXT = get_proc_address("glCompressedTextureSubImage2DEXT", cstr): *fp_glCompressedTextureSubImage2DEXT;
	let cstr = strings::to_c_with_buf("glCompressedTextureSubImage3D", cstr_buf): *const u8;
	glCompressedTextureSubImage3D = get_proc_address("glCompressedTextureSubImage3D", cstr): *fp_glCompressedTextureSubImage3D;
	let cstr = strings::to_c_with_buf("glCompressedTextureSubImage3DEXT", cstr_buf): *const u8;
	glCompressedTextureSubImage3DEXT = get_proc_address("glCompressedTextureSubImage3DEXT", cstr): *fp_glCompressedTextureSubImage3DEXT;
	let cstr = strings::to_c_with_buf("glConservativeRasterParameterfNV", cstr_buf): *const u8;
	glConservativeRasterParameterfNV = get_proc_address("glConservativeRasterParameterfNV", cstr): *fp_glConservativeRasterParameterfNV;
	let cstr = strings::to_c_with_buf("glConservativeRasterParameteriNV", cstr_buf): *const u8;
	glConservativeRasterParameteriNV = get_proc_address("glConservativeRasterParameteriNV", cstr): *fp_glConservativeRasterParameteriNV;
	let cstr = strings::to_c_with_buf("glConvolutionFilter1DEXT", cstr_buf): *const u8;
	glConvolutionFilter1DEXT = get_proc_address("glConvolutionFilter1DEXT", cstr): *fp_glConvolutionFilter1DEXT;
	let cstr = strings::to_c_with_buf("glConvolutionFilter2DEXT", cstr_buf): *const u8;
	glConvolutionFilter2DEXT = get_proc_address("glConvolutionFilter2DEXT", cstr): *fp_glConvolutionFilter2DEXT;
	let cstr = strings::to_c_with_buf("glConvolutionParameterfEXT", cstr_buf): *const u8;
	glConvolutionParameterfEXT = get_proc_address("glConvolutionParameterfEXT", cstr): *fp_glConvolutionParameterfEXT;
	let cstr = strings::to_c_with_buf("glConvolutionParameterfvEXT", cstr_buf): *const u8;
	glConvolutionParameterfvEXT = get_proc_address("glConvolutionParameterfvEXT", cstr): *fp_glConvolutionParameterfvEXT;
	let cstr = strings::to_c_with_buf("glConvolutionParameteriEXT", cstr_buf): *const u8;
	glConvolutionParameteriEXT = get_proc_address("glConvolutionParameteriEXT", cstr): *fp_glConvolutionParameteriEXT;
	let cstr = strings::to_c_with_buf("glConvolutionParameterivEXT", cstr_buf): *const u8;
	glConvolutionParameterivEXT = get_proc_address("glConvolutionParameterivEXT", cstr): *fp_glConvolutionParameterivEXT;
	let cstr = strings::to_c_with_buf("glConvolutionParameterxOES", cstr_buf): *const u8;
	glConvolutionParameterxOES = get_proc_address("glConvolutionParameterxOES", cstr): *fp_glConvolutionParameterxOES;
	let cstr = strings::to_c_with_buf("glConvolutionParameterxvOES", cstr_buf): *const u8;
	glConvolutionParameterxvOES = get_proc_address("glConvolutionParameterxvOES", cstr): *fp_glConvolutionParameterxvOES;
	let cstr = strings::to_c_with_buf("glCopyBufferSubData", cstr_buf): *const u8;
	glCopyBufferSubData = get_proc_address("glCopyBufferSubData", cstr): *fp_glCopyBufferSubData;
	let cstr = strings::to_c_with_buf("glCopyColorSubTableEXT", cstr_buf): *const u8;
	glCopyColorSubTableEXT = get_proc_address("glCopyColorSubTableEXT", cstr): *fp_glCopyColorSubTableEXT;
	let cstr = strings::to_c_with_buf("glCopyColorTableSGI", cstr_buf): *const u8;
	glCopyColorTableSGI = get_proc_address("glCopyColorTableSGI", cstr): *fp_glCopyColorTableSGI;
	let cstr = strings::to_c_with_buf("glCopyConvolutionFilter1DEXT", cstr_buf): *const u8;
	glCopyConvolutionFilter1DEXT = get_proc_address("glCopyConvolutionFilter1DEXT", cstr): *fp_glCopyConvolutionFilter1DEXT;
	let cstr = strings::to_c_with_buf("glCopyConvolutionFilter2DEXT", cstr_buf): *const u8;
	glCopyConvolutionFilter2DEXT = get_proc_address("glCopyConvolutionFilter2DEXT", cstr): *fp_glCopyConvolutionFilter2DEXT;
	let cstr = strings::to_c_with_buf("glCopyImageSubData", cstr_buf): *const u8;
	glCopyImageSubData = get_proc_address("glCopyImageSubData", cstr): *fp_glCopyImageSubData;
	let cstr = strings::to_c_with_buf("glCopyImageSubDataNV", cstr_buf): *const u8;
	glCopyImageSubDataNV = get_proc_address("glCopyImageSubDataNV", cstr): *fp_glCopyImageSubDataNV;
	let cstr = strings::to_c_with_buf("glCopyMultiTexImage1DEXT", cstr_buf): *const u8;
	glCopyMultiTexImage1DEXT = get_proc_address("glCopyMultiTexImage1DEXT", cstr): *fp_glCopyMultiTexImage1DEXT;
	let cstr = strings::to_c_with_buf("glCopyMultiTexImage2DEXT", cstr_buf): *const u8;
	glCopyMultiTexImage2DEXT = get_proc_address("glCopyMultiTexImage2DEXT", cstr): *fp_glCopyMultiTexImage2DEXT;
	let cstr = strings::to_c_with_buf("glCopyMultiTexSubImage1DEXT", cstr_buf): *const u8;
	glCopyMultiTexSubImage1DEXT = get_proc_address("glCopyMultiTexSubImage1DEXT", cstr): *fp_glCopyMultiTexSubImage1DEXT;
	let cstr = strings::to_c_with_buf("glCopyMultiTexSubImage2DEXT", cstr_buf): *const u8;
	glCopyMultiTexSubImage2DEXT = get_proc_address("glCopyMultiTexSubImage2DEXT", cstr): *fp_glCopyMultiTexSubImage2DEXT;
	let cstr = strings::to_c_with_buf("glCopyMultiTexSubImage3DEXT", cstr_buf): *const u8;
	glCopyMultiTexSubImage3DEXT = get_proc_address("glCopyMultiTexSubImage3DEXT", cstr): *fp_glCopyMultiTexSubImage3DEXT;
	let cstr = strings::to_c_with_buf("glCopyNamedBufferSubData", cstr_buf): *const u8;
	glCopyNamedBufferSubData = get_proc_address("glCopyNamedBufferSubData", cstr): *fp_glCopyNamedBufferSubData;
	let cstr = strings::to_c_with_buf("glCopyPathNV", cstr_buf): *const u8;
	glCopyPathNV = get_proc_address("glCopyPathNV", cstr): *fp_glCopyPathNV;
	let cstr = strings::to_c_with_buf("glCopyPixels", cstr_buf): *const u8;
	glCopyPixels = get_proc_address("glCopyPixels", cstr): *fp_glCopyPixels;
	let cstr = strings::to_c_with_buf("glCopyTexImage1D", cstr_buf): *const u8;
	glCopyTexImage1D = get_proc_address("glCopyTexImage1D", cstr): *fp_glCopyTexImage1D;
	let cstr = strings::to_c_with_buf("glCopyTexImage1DEXT", cstr_buf): *const u8;
	glCopyTexImage1DEXT = get_proc_address("glCopyTexImage1DEXT", cstr): *fp_glCopyTexImage1DEXT;
	let cstr = strings::to_c_with_buf("glCopyTexImage2D", cstr_buf): *const u8;
	glCopyTexImage2D = get_proc_address("glCopyTexImage2D", cstr): *fp_glCopyTexImage2D;
	let cstr = strings::to_c_with_buf("glCopyTexImage2DEXT", cstr_buf): *const u8;
	glCopyTexImage2DEXT = get_proc_address("glCopyTexImage2DEXT", cstr): *fp_glCopyTexImage2DEXT;
	let cstr = strings::to_c_with_buf("glCopyTexSubImage1D", cstr_buf): *const u8;
	glCopyTexSubImage1D = get_proc_address("glCopyTexSubImage1D", cstr): *fp_glCopyTexSubImage1D;
	let cstr = strings::to_c_with_buf("glCopyTexSubImage1DEXT", cstr_buf): *const u8;
	glCopyTexSubImage1DEXT = get_proc_address("glCopyTexSubImage1DEXT", cstr): *fp_glCopyTexSubImage1DEXT;
	let cstr = strings::to_c_with_buf("glCopyTexSubImage2D", cstr_buf): *const u8;
	glCopyTexSubImage2D = get_proc_address("glCopyTexSubImage2D", cstr): *fp_glCopyTexSubImage2D;
	let cstr = strings::to_c_with_buf("glCopyTexSubImage2DEXT", cstr_buf): *const u8;
	glCopyTexSubImage2DEXT = get_proc_address("glCopyTexSubImage2DEXT", cstr): *fp_glCopyTexSubImage2DEXT;
	let cstr = strings::to_c_with_buf("glCopyTexSubImage3D", cstr_buf): *const u8;
	glCopyTexSubImage3D = get_proc_address("glCopyTexSubImage3D", cstr): *fp_glCopyTexSubImage3D;
	let cstr = strings::to_c_with_buf("glCopyTexSubImage3DEXT", cstr_buf): *const u8;
	glCopyTexSubImage3DEXT = get_proc_address("glCopyTexSubImage3DEXT", cstr): *fp_glCopyTexSubImage3DEXT;
	let cstr = strings::to_c_with_buf("glCopyTextureImage1DEXT", cstr_buf): *const u8;
	glCopyTextureImage1DEXT = get_proc_address("glCopyTextureImage1DEXT", cstr): *fp_glCopyTextureImage1DEXT;
	let cstr = strings::to_c_with_buf("glCopyTextureImage2DEXT", cstr_buf): *const u8;
	glCopyTextureImage2DEXT = get_proc_address("glCopyTextureImage2DEXT", cstr): *fp_glCopyTextureImage2DEXT;
	let cstr = strings::to_c_with_buf("glCopyTextureSubImage1D", cstr_buf): *const u8;
	glCopyTextureSubImage1D = get_proc_address("glCopyTextureSubImage1D", cstr): *fp_glCopyTextureSubImage1D;
	let cstr = strings::to_c_with_buf("glCopyTextureSubImage1DEXT", cstr_buf): *const u8;
	glCopyTextureSubImage1DEXT = get_proc_address("glCopyTextureSubImage1DEXT", cstr): *fp_glCopyTextureSubImage1DEXT;
	let cstr = strings::to_c_with_buf("glCopyTextureSubImage2D", cstr_buf): *const u8;
	glCopyTextureSubImage2D = get_proc_address("glCopyTextureSubImage2D", cstr): *fp_glCopyTextureSubImage2D;
	let cstr = strings::to_c_with_buf("glCopyTextureSubImage2DEXT", cstr_buf): *const u8;
	glCopyTextureSubImage2DEXT = get_proc_address("glCopyTextureSubImage2DEXT", cstr): *fp_glCopyTextureSubImage2DEXT;
	let cstr = strings::to_c_with_buf("glCopyTextureSubImage3D", cstr_buf): *const u8;
	glCopyTextureSubImage3D = get_proc_address("glCopyTextureSubImage3D", cstr): *fp_glCopyTextureSubImage3D;
	let cstr = strings::to_c_with_buf("glCopyTextureSubImage3DEXT", cstr_buf): *const u8;
	glCopyTextureSubImage3DEXT = get_proc_address("glCopyTextureSubImage3DEXT", cstr): *fp_glCopyTextureSubImage3DEXT;
	let cstr = strings::to_c_with_buf("glCoverFillPathInstancedNV", cstr_buf): *const u8;
	glCoverFillPathInstancedNV = get_proc_address("glCoverFillPathInstancedNV", cstr): *fp_glCoverFillPathInstancedNV;
	let cstr = strings::to_c_with_buf("glCoverFillPathNV", cstr_buf): *const u8;
	glCoverFillPathNV = get_proc_address("glCoverFillPathNV", cstr): *fp_glCoverFillPathNV;
	let cstr = strings::to_c_with_buf("glCoverStrokePathInstancedNV", cstr_buf): *const u8;
	glCoverStrokePathInstancedNV = get_proc_address("glCoverStrokePathInstancedNV", cstr): *fp_glCoverStrokePathInstancedNV;
	let cstr = strings::to_c_with_buf("glCoverStrokePathNV", cstr_buf): *const u8;
	glCoverStrokePathNV = get_proc_address("glCoverStrokePathNV", cstr): *fp_glCoverStrokePathNV;
	let cstr = strings::to_c_with_buf("glCoverageModulationNV", cstr_buf): *const u8;
	glCoverageModulationNV = get_proc_address("glCoverageModulationNV", cstr): *fp_glCoverageModulationNV;
	let cstr = strings::to_c_with_buf("glCoverageModulationTableNV", cstr_buf): *const u8;
	glCoverageModulationTableNV = get_proc_address("glCoverageModulationTableNV", cstr): *fp_glCoverageModulationTableNV;
	let cstr = strings::to_c_with_buf("glCreateBuffers", cstr_buf): *const u8;
	glCreateBuffers = get_proc_address("glCreateBuffers", cstr): *fp_glCreateBuffers;
	let cstr = strings::to_c_with_buf("glCreateCommandListsNV", cstr_buf): *const u8;
	glCreateCommandListsNV = get_proc_address("glCreateCommandListsNV", cstr): *fp_glCreateCommandListsNV;
	let cstr = strings::to_c_with_buf("glCreateFramebuffers", cstr_buf): *const u8;
	glCreateFramebuffers = get_proc_address("glCreateFramebuffers", cstr): *fp_glCreateFramebuffers;
	let cstr = strings::to_c_with_buf("glCreateMemoryObjectsEXT", cstr_buf): *const u8;
	glCreateMemoryObjectsEXT = get_proc_address("glCreateMemoryObjectsEXT", cstr): *fp_glCreateMemoryObjectsEXT;
	let cstr = strings::to_c_with_buf("glCreatePerfQueryINTEL", cstr_buf): *const u8;
	glCreatePerfQueryINTEL = get_proc_address("glCreatePerfQueryINTEL", cstr): *fp_glCreatePerfQueryINTEL;
	let cstr = strings::to_c_with_buf("glCreateProgram", cstr_buf): *const u8;
	glCreateProgram = get_proc_address("glCreateProgram", cstr): *fp_glCreateProgram;
	let cstr = strings::to_c_with_buf("glCreateProgramObjectARB", cstr_buf): *const u8;
	glCreateProgramObjectARB = get_proc_address("glCreateProgramObjectARB", cstr): *fp_glCreateProgramObjectARB;
	let cstr = strings::to_c_with_buf("glCreateProgramPipelines", cstr_buf): *const u8;
	glCreateProgramPipelines = get_proc_address("glCreateProgramPipelines", cstr): *fp_glCreateProgramPipelines;
	let cstr = strings::to_c_with_buf("glCreateProgressFenceNVX", cstr_buf): *const u8;
	glCreateProgressFenceNVX = get_proc_address("glCreateProgressFenceNVX", cstr): *fp_glCreateProgressFenceNVX;
	let cstr = strings::to_c_with_buf("glCreateQueries", cstr_buf): *const u8;
	glCreateQueries = get_proc_address("glCreateQueries", cstr): *fp_glCreateQueries;
	let cstr = strings::to_c_with_buf("glCreateRenderbuffers", cstr_buf): *const u8;
	glCreateRenderbuffers = get_proc_address("glCreateRenderbuffers", cstr): *fp_glCreateRenderbuffers;
	let cstr = strings::to_c_with_buf("glCreateSamplers", cstr_buf): *const u8;
	glCreateSamplers = get_proc_address("glCreateSamplers", cstr): *fp_glCreateSamplers;
	let cstr = strings::to_c_with_buf("glCreateSemaphoresNV", cstr_buf): *const u8;
	glCreateSemaphoresNV = get_proc_address("glCreateSemaphoresNV", cstr): *fp_glCreateSemaphoresNV;
	let cstr = strings::to_c_with_buf("glCreateShader", cstr_buf): *const u8;
	glCreateShader = get_proc_address("glCreateShader", cstr): *fp_glCreateShader;
	let cstr = strings::to_c_with_buf("glCreateShaderObjectARB", cstr_buf): *const u8;
	glCreateShaderObjectARB = get_proc_address("glCreateShaderObjectARB", cstr): *fp_glCreateShaderObjectARB;
	let cstr = strings::to_c_with_buf("glCreateShaderProgramEXT", cstr_buf): *const u8;
	glCreateShaderProgramEXT = get_proc_address("glCreateShaderProgramEXT", cstr): *fp_glCreateShaderProgramEXT;
	let cstr = strings::to_c_with_buf("glCreateShaderProgramv", cstr_buf): *const u8;
	glCreateShaderProgramv = get_proc_address("glCreateShaderProgramv", cstr): *fp_glCreateShaderProgramv;
	let cstr = strings::to_c_with_buf("glCreateStatesNV", cstr_buf): *const u8;
	glCreateStatesNV = get_proc_address("glCreateStatesNV", cstr): *fp_glCreateStatesNV;
	let cstr = strings::to_c_with_buf("glCreateSyncFromCLeventARB", cstr_buf): *const u8;
	glCreateSyncFromCLeventARB = get_proc_address("glCreateSyncFromCLeventARB", cstr): *fp_glCreateSyncFromCLeventARB;
	let cstr = strings::to_c_with_buf("glCreateTextures", cstr_buf): *const u8;
	glCreateTextures = get_proc_address("glCreateTextures", cstr): *fp_glCreateTextures;
	let cstr = strings::to_c_with_buf("glCreateTransformFeedbacks", cstr_buf): *const u8;
	glCreateTransformFeedbacks = get_proc_address("glCreateTransformFeedbacks", cstr): *fp_glCreateTransformFeedbacks;
	let cstr = strings::to_c_with_buf("glCreateVertexArrays", cstr_buf): *const u8;
	glCreateVertexArrays = get_proc_address("glCreateVertexArrays", cstr): *fp_glCreateVertexArrays;
	let cstr = strings::to_c_with_buf("glCullFace", cstr_buf): *const u8;
	glCullFace = get_proc_address("glCullFace", cstr): *fp_glCullFace;
	let cstr = strings::to_c_with_buf("glCullParameterdvEXT", cstr_buf): *const u8;
	glCullParameterdvEXT = get_proc_address("glCullParameterdvEXT", cstr): *fp_glCullParameterdvEXT;
	let cstr = strings::to_c_with_buf("glCullParameterfvEXT", cstr_buf): *const u8;
	glCullParameterfvEXT = get_proc_address("glCullParameterfvEXT", cstr): *fp_glCullParameterfvEXT;
	let cstr = strings::to_c_with_buf("glCurrentPaletteMatrixARB", cstr_buf): *const u8;
	glCurrentPaletteMatrixARB = get_proc_address("glCurrentPaletteMatrixARB", cstr): *fp_glCurrentPaletteMatrixARB;
	let cstr = strings::to_c_with_buf("glDebugMessageCallback", cstr_buf): *const u8;
	glDebugMessageCallback = get_proc_address("glDebugMessageCallback", cstr): *fp_glDebugMessageCallback;
	let cstr = strings::to_c_with_buf("glDebugMessageCallbackAMD", cstr_buf): *const u8;
	glDebugMessageCallbackAMD = get_proc_address("glDebugMessageCallbackAMD", cstr): *fp_glDebugMessageCallbackAMD;
	let cstr = strings::to_c_with_buf("glDebugMessageCallbackARB", cstr_buf): *const u8;
	glDebugMessageCallbackARB = get_proc_address("glDebugMessageCallbackARB", cstr): *fp_glDebugMessageCallbackARB;
	let cstr = strings::to_c_with_buf("glDebugMessageControl", cstr_buf): *const u8;
	glDebugMessageControl = get_proc_address("glDebugMessageControl", cstr): *fp_glDebugMessageControl;
	let cstr = strings::to_c_with_buf("glDebugMessageControlARB", cstr_buf): *const u8;
	glDebugMessageControlARB = get_proc_address("glDebugMessageControlARB", cstr): *fp_glDebugMessageControlARB;
	let cstr = strings::to_c_with_buf("glDebugMessageEnableAMD", cstr_buf): *const u8;
	glDebugMessageEnableAMD = get_proc_address("glDebugMessageEnableAMD", cstr): *fp_glDebugMessageEnableAMD;
	let cstr = strings::to_c_with_buf("glDebugMessageInsert", cstr_buf): *const u8;
	glDebugMessageInsert = get_proc_address("glDebugMessageInsert", cstr): *fp_glDebugMessageInsert;
	let cstr = strings::to_c_with_buf("glDebugMessageInsertAMD", cstr_buf): *const u8;
	glDebugMessageInsertAMD = get_proc_address("glDebugMessageInsertAMD", cstr): *fp_glDebugMessageInsertAMD;
	let cstr = strings::to_c_with_buf("glDebugMessageInsertARB", cstr_buf): *const u8;
	glDebugMessageInsertARB = get_proc_address("glDebugMessageInsertARB", cstr): *fp_glDebugMessageInsertARB;
	let cstr = strings::to_c_with_buf("glDeformSGIX", cstr_buf): *const u8;
	glDeformSGIX = get_proc_address("glDeformSGIX", cstr): *fp_glDeformSGIX;
	let cstr = strings::to_c_with_buf("glDeformationMap3dSGIX", cstr_buf): *const u8;
	glDeformationMap3dSGIX = get_proc_address("glDeformationMap3dSGIX", cstr): *fp_glDeformationMap3dSGIX;
	let cstr = strings::to_c_with_buf("glDeformationMap3fSGIX", cstr_buf): *const u8;
	glDeformationMap3fSGIX = get_proc_address("glDeformationMap3fSGIX", cstr): *fp_glDeformationMap3fSGIX;
	let cstr = strings::to_c_with_buf("glDeleteAsyncMarkersSGIX", cstr_buf): *const u8;
	glDeleteAsyncMarkersSGIX = get_proc_address("glDeleteAsyncMarkersSGIX", cstr): *fp_glDeleteAsyncMarkersSGIX;
	let cstr = strings::to_c_with_buf("glDeleteBuffers", cstr_buf): *const u8;
	glDeleteBuffers = get_proc_address("glDeleteBuffers", cstr): *fp_glDeleteBuffers;
	let cstr = strings::to_c_with_buf("glDeleteBuffersARB", cstr_buf): *const u8;
	glDeleteBuffersARB = get_proc_address("glDeleteBuffersARB", cstr): *fp_glDeleteBuffersARB;
	let cstr = strings::to_c_with_buf("glDeleteCommandListsNV", cstr_buf): *const u8;
	glDeleteCommandListsNV = get_proc_address("glDeleteCommandListsNV", cstr): *fp_glDeleteCommandListsNV;
	let cstr = strings::to_c_with_buf("glDeleteFencesAPPLE", cstr_buf): *const u8;
	glDeleteFencesAPPLE = get_proc_address("glDeleteFencesAPPLE", cstr): *fp_glDeleteFencesAPPLE;
	let cstr = strings::to_c_with_buf("glDeleteFencesNV", cstr_buf): *const u8;
	glDeleteFencesNV = get_proc_address("glDeleteFencesNV", cstr): *fp_glDeleteFencesNV;
	let cstr = strings::to_c_with_buf("glDeleteFragmentShaderATI", cstr_buf): *const u8;
	glDeleteFragmentShaderATI = get_proc_address("glDeleteFragmentShaderATI", cstr): *fp_glDeleteFragmentShaderATI;
	let cstr = strings::to_c_with_buf("glDeleteFramebuffers", cstr_buf): *const u8;
	glDeleteFramebuffers = get_proc_address("glDeleteFramebuffers", cstr): *fp_glDeleteFramebuffers;
	let cstr = strings::to_c_with_buf("glDeleteFramebuffersEXT", cstr_buf): *const u8;
	glDeleteFramebuffersEXT = get_proc_address("glDeleteFramebuffersEXT", cstr): *fp_glDeleteFramebuffersEXT;
	let cstr = strings::to_c_with_buf("glDeleteLists", cstr_buf): *const u8;
	glDeleteLists = get_proc_address("glDeleteLists", cstr): *fp_glDeleteLists;
	let cstr = strings::to_c_with_buf("glDeleteMemoryObjectsEXT", cstr_buf): *const u8;
	glDeleteMemoryObjectsEXT = get_proc_address("glDeleteMemoryObjectsEXT", cstr): *fp_glDeleteMemoryObjectsEXT;
	let cstr = strings::to_c_with_buf("glDeleteNamedStringARB", cstr_buf): *const u8;
	glDeleteNamedStringARB = get_proc_address("glDeleteNamedStringARB", cstr): *fp_glDeleteNamedStringARB;
	let cstr = strings::to_c_with_buf("glDeleteNamesAMD", cstr_buf): *const u8;
	glDeleteNamesAMD = get_proc_address("glDeleteNamesAMD", cstr): *fp_glDeleteNamesAMD;
	let cstr = strings::to_c_with_buf("glDeleteObjectARB", cstr_buf): *const u8;
	glDeleteObjectARB = get_proc_address("glDeleteObjectARB", cstr): *fp_glDeleteObjectARB;
	let cstr = strings::to_c_with_buf("glDeleteOcclusionQueriesNV", cstr_buf): *const u8;
	glDeleteOcclusionQueriesNV = get_proc_address("glDeleteOcclusionQueriesNV", cstr): *fp_glDeleteOcclusionQueriesNV;
	let cstr = strings::to_c_with_buf("glDeletePathsNV", cstr_buf): *const u8;
	glDeletePathsNV = get_proc_address("glDeletePathsNV", cstr): *fp_glDeletePathsNV;
	let cstr = strings::to_c_with_buf("glDeletePerfMonitorsAMD", cstr_buf): *const u8;
	glDeletePerfMonitorsAMD = get_proc_address("glDeletePerfMonitorsAMD", cstr): *fp_glDeletePerfMonitorsAMD;
	let cstr = strings::to_c_with_buf("glDeletePerfQueryINTEL", cstr_buf): *const u8;
	glDeletePerfQueryINTEL = get_proc_address("glDeletePerfQueryINTEL", cstr): *fp_glDeletePerfQueryINTEL;
	let cstr = strings::to_c_with_buf("glDeleteProgram", cstr_buf): *const u8;
	glDeleteProgram = get_proc_address("glDeleteProgram", cstr): *fp_glDeleteProgram;
	let cstr = strings::to_c_with_buf("glDeleteProgramPipelines", cstr_buf): *const u8;
	glDeleteProgramPipelines = get_proc_address("glDeleteProgramPipelines", cstr): *fp_glDeleteProgramPipelines;
	let cstr = strings::to_c_with_buf("glDeleteProgramsARB", cstr_buf): *const u8;
	glDeleteProgramsARB = get_proc_address("glDeleteProgramsARB", cstr): *fp_glDeleteProgramsARB;
	let cstr = strings::to_c_with_buf("glDeleteProgramsNV", cstr_buf): *const u8;
	glDeleteProgramsNV = get_proc_address("glDeleteProgramsNV", cstr): *fp_glDeleteProgramsNV;
	let cstr = strings::to_c_with_buf("glDeleteQueries", cstr_buf): *const u8;
	glDeleteQueries = get_proc_address("glDeleteQueries", cstr): *fp_glDeleteQueries;
	let cstr = strings::to_c_with_buf("glDeleteQueriesARB", cstr_buf): *const u8;
	glDeleteQueriesARB = get_proc_address("glDeleteQueriesARB", cstr): *fp_glDeleteQueriesARB;
	let cstr = strings::to_c_with_buf("glDeleteQueryResourceTagNV", cstr_buf): *const u8;
	glDeleteQueryResourceTagNV = get_proc_address("glDeleteQueryResourceTagNV", cstr): *fp_glDeleteQueryResourceTagNV;
	let cstr = strings::to_c_with_buf("glDeleteRenderbuffers", cstr_buf): *const u8;
	glDeleteRenderbuffers = get_proc_address("glDeleteRenderbuffers", cstr): *fp_glDeleteRenderbuffers;
	let cstr = strings::to_c_with_buf("glDeleteRenderbuffersEXT", cstr_buf): *const u8;
	glDeleteRenderbuffersEXT = get_proc_address("glDeleteRenderbuffersEXT", cstr): *fp_glDeleteRenderbuffersEXT;
	let cstr = strings::to_c_with_buf("glDeleteSamplers", cstr_buf): *const u8;
	glDeleteSamplers = get_proc_address("glDeleteSamplers", cstr): *fp_glDeleteSamplers;
	let cstr = strings::to_c_with_buf("glDeleteSemaphoresEXT", cstr_buf): *const u8;
	glDeleteSemaphoresEXT = get_proc_address("glDeleteSemaphoresEXT", cstr): *fp_glDeleteSemaphoresEXT;
	let cstr = strings::to_c_with_buf("glDeleteShader", cstr_buf): *const u8;
	glDeleteShader = get_proc_address("glDeleteShader", cstr): *fp_glDeleteShader;
	let cstr = strings::to_c_with_buf("glDeleteStatesNV", cstr_buf): *const u8;
	glDeleteStatesNV = get_proc_address("glDeleteStatesNV", cstr): *fp_glDeleteStatesNV;
	let cstr = strings::to_c_with_buf("glDeleteSync", cstr_buf): *const u8;
	glDeleteSync = get_proc_address("glDeleteSync", cstr): *fp_glDeleteSync;
	let cstr = strings::to_c_with_buf("glDeleteTextures", cstr_buf): *const u8;
	glDeleteTextures = get_proc_address("glDeleteTextures", cstr): *fp_glDeleteTextures;
	let cstr = strings::to_c_with_buf("glDeleteTexturesEXT", cstr_buf): *const u8;
	glDeleteTexturesEXT = get_proc_address("glDeleteTexturesEXT", cstr): *fp_glDeleteTexturesEXT;
	let cstr = strings::to_c_with_buf("glDeleteTransformFeedbacks", cstr_buf): *const u8;
	glDeleteTransformFeedbacks = get_proc_address("glDeleteTransformFeedbacks", cstr): *fp_glDeleteTransformFeedbacks;
	let cstr = strings::to_c_with_buf("glDeleteTransformFeedbacksNV", cstr_buf): *const u8;
	glDeleteTransformFeedbacksNV = get_proc_address("glDeleteTransformFeedbacksNV", cstr): *fp_glDeleteTransformFeedbacksNV;
	let cstr = strings::to_c_with_buf("glDeleteVertexArrays", cstr_buf): *const u8;
	glDeleteVertexArrays = get_proc_address("glDeleteVertexArrays", cstr): *fp_glDeleteVertexArrays;
	let cstr = strings::to_c_with_buf("glDeleteVertexArraysAPPLE", cstr_buf): *const u8;
	glDeleteVertexArraysAPPLE = get_proc_address("glDeleteVertexArraysAPPLE", cstr): *fp_glDeleteVertexArraysAPPLE;
	let cstr = strings::to_c_with_buf("glDeleteVertexShaderEXT", cstr_buf): *const u8;
	glDeleteVertexShaderEXT = get_proc_address("glDeleteVertexShaderEXT", cstr): *fp_glDeleteVertexShaderEXT;
	let cstr = strings::to_c_with_buf("glDepthBoundsEXT", cstr_buf): *const u8;
	glDepthBoundsEXT = get_proc_address("glDepthBoundsEXT", cstr): *fp_glDepthBoundsEXT;
	let cstr = strings::to_c_with_buf("glDepthBoundsdNV", cstr_buf): *const u8;
	glDepthBoundsdNV = get_proc_address("glDepthBoundsdNV", cstr): *fp_glDepthBoundsdNV;
	let cstr = strings::to_c_with_buf("glDepthFunc", cstr_buf): *const u8;
	glDepthFunc = get_proc_address("glDepthFunc", cstr): *fp_glDepthFunc;
	let cstr = strings::to_c_with_buf("glDepthMask", cstr_buf): *const u8;
	glDepthMask = get_proc_address("glDepthMask", cstr): *fp_glDepthMask;
	let cstr = strings::to_c_with_buf("glDepthRange", cstr_buf): *const u8;
	glDepthRange = get_proc_address("glDepthRange", cstr): *fp_glDepthRange;
	let cstr = strings::to_c_with_buf("glDepthRangeArraydvNV", cstr_buf): *const u8;
	glDepthRangeArraydvNV = get_proc_address("glDepthRangeArraydvNV", cstr): *fp_glDepthRangeArraydvNV;
	let cstr = strings::to_c_with_buf("glDepthRangeArrayv", cstr_buf): *const u8;
	glDepthRangeArrayv = get_proc_address("glDepthRangeArrayv", cstr): *fp_glDepthRangeArrayv;
	let cstr = strings::to_c_with_buf("glDepthRangeIndexed", cstr_buf): *const u8;
	glDepthRangeIndexed = get_proc_address("glDepthRangeIndexed", cstr): *fp_glDepthRangeIndexed;
	let cstr = strings::to_c_with_buf("glDepthRangeIndexeddNV", cstr_buf): *const u8;
	glDepthRangeIndexeddNV = get_proc_address("glDepthRangeIndexeddNV", cstr): *fp_glDepthRangeIndexeddNV;
	let cstr = strings::to_c_with_buf("glDepthRangedNV", cstr_buf): *const u8;
	glDepthRangedNV = get_proc_address("glDepthRangedNV", cstr): *fp_glDepthRangedNV;
	let cstr = strings::to_c_with_buf("glDepthRangef", cstr_buf): *const u8;
	glDepthRangef = get_proc_address("glDepthRangef", cstr): *fp_glDepthRangef;
	let cstr = strings::to_c_with_buf("glDepthRangefOES", cstr_buf): *const u8;
	glDepthRangefOES = get_proc_address("glDepthRangefOES", cstr): *fp_glDepthRangefOES;
	let cstr = strings::to_c_with_buf("glDepthRangexOES", cstr_buf): *const u8;
	glDepthRangexOES = get_proc_address("glDepthRangexOES", cstr): *fp_glDepthRangexOES;
	let cstr = strings::to_c_with_buf("glDetachObjectARB", cstr_buf): *const u8;
	glDetachObjectARB = get_proc_address("glDetachObjectARB", cstr): *fp_glDetachObjectARB;
	let cstr = strings::to_c_with_buf("glDetachShader", cstr_buf): *const u8;
	glDetachShader = get_proc_address("glDetachShader", cstr): *fp_glDetachShader;
	let cstr = strings::to_c_with_buf("glDetailTexFuncSGIS", cstr_buf): *const u8;
	glDetailTexFuncSGIS = get_proc_address("glDetailTexFuncSGIS", cstr): *fp_glDetailTexFuncSGIS;
	let cstr = strings::to_c_with_buf("glDisable", cstr_buf): *const u8;
	glDisable = get_proc_address("glDisable", cstr): *fp_glDisable;
	let cstr = strings::to_c_with_buf("glDisableClientState", cstr_buf): *const u8;
	glDisableClientState = get_proc_address("glDisableClientState", cstr): *fp_glDisableClientState;
	let cstr = strings::to_c_with_buf("glDisableClientStateIndexedEXT", cstr_buf): *const u8;
	glDisableClientStateIndexedEXT = get_proc_address("glDisableClientStateIndexedEXT", cstr): *fp_glDisableClientStateIndexedEXT;
	let cstr = strings::to_c_with_buf("glDisableClientStateiEXT", cstr_buf): *const u8;
	glDisableClientStateiEXT = get_proc_address("glDisableClientStateiEXT", cstr): *fp_glDisableClientStateiEXT;
	let cstr = strings::to_c_with_buf("glDisableIndexedEXT", cstr_buf): *const u8;
	glDisableIndexedEXT = get_proc_address("glDisableIndexedEXT", cstr): *fp_glDisableIndexedEXT;
	let cstr = strings::to_c_with_buf("glDisableVariantClientStateEXT", cstr_buf): *const u8;
	glDisableVariantClientStateEXT = get_proc_address("glDisableVariantClientStateEXT", cstr): *fp_glDisableVariantClientStateEXT;
	let cstr = strings::to_c_with_buf("glDisableVertexArrayAttrib", cstr_buf): *const u8;
	glDisableVertexArrayAttrib = get_proc_address("glDisableVertexArrayAttrib", cstr): *fp_glDisableVertexArrayAttrib;
	let cstr = strings::to_c_with_buf("glDisableVertexArrayAttribEXT", cstr_buf): *const u8;
	glDisableVertexArrayAttribEXT = get_proc_address("glDisableVertexArrayAttribEXT", cstr): *fp_glDisableVertexArrayAttribEXT;
	let cstr = strings::to_c_with_buf("glDisableVertexArrayEXT", cstr_buf): *const u8;
	glDisableVertexArrayEXT = get_proc_address("glDisableVertexArrayEXT", cstr): *fp_glDisableVertexArrayEXT;
	let cstr = strings::to_c_with_buf("glDisableVertexAttribAPPLE", cstr_buf): *const u8;
	glDisableVertexAttribAPPLE = get_proc_address("glDisableVertexAttribAPPLE", cstr): *fp_glDisableVertexAttribAPPLE;
	let cstr = strings::to_c_with_buf("glDisableVertexAttribArray", cstr_buf): *const u8;
	glDisableVertexAttribArray = get_proc_address("glDisableVertexAttribArray", cstr): *fp_glDisableVertexAttribArray;
	let cstr = strings::to_c_with_buf("glDisableVertexAttribArrayARB", cstr_buf): *const u8;
	glDisableVertexAttribArrayARB = get_proc_address("glDisableVertexAttribArrayARB", cstr): *fp_glDisableVertexAttribArrayARB;
	let cstr = strings::to_c_with_buf("glDispatchCompute", cstr_buf): *const u8;
	glDispatchCompute = get_proc_address("glDispatchCompute", cstr): *fp_glDispatchCompute;
	let cstr = strings::to_c_with_buf("glDispatchComputeGroupSizeARB", cstr_buf): *const u8;
	glDispatchComputeGroupSizeARB = get_proc_address("glDispatchComputeGroupSizeARB", cstr): *fp_glDispatchComputeGroupSizeARB;
	let cstr = strings::to_c_with_buf("glDispatchComputeIndirect", cstr_buf): *const u8;
	glDispatchComputeIndirect = get_proc_address("glDispatchComputeIndirect", cstr): *fp_glDispatchComputeIndirect;
	let cstr = strings::to_c_with_buf("glDrawArrays", cstr_buf): *const u8;
	glDrawArrays = get_proc_address("glDrawArrays", cstr): *fp_glDrawArrays;
	let cstr = strings::to_c_with_buf("glDrawArraysEXT", cstr_buf): *const u8;
	glDrawArraysEXT = get_proc_address("glDrawArraysEXT", cstr): *fp_glDrawArraysEXT;
	let cstr = strings::to_c_with_buf("glDrawArraysIndirect", cstr_buf): *const u8;
	glDrawArraysIndirect = get_proc_address("glDrawArraysIndirect", cstr): *fp_glDrawArraysIndirect;
	let cstr = strings::to_c_with_buf("glDrawArraysInstancedARB", cstr_buf): *const u8;
	glDrawArraysInstancedARB = get_proc_address("glDrawArraysInstancedARB", cstr): *fp_glDrawArraysInstancedARB;
	let cstr = strings::to_c_with_buf("glDrawArraysInstancedBaseInstance", cstr_buf): *const u8;
	glDrawArraysInstancedBaseInstance = get_proc_address("glDrawArraysInstancedBaseInstance", cstr): *fp_glDrawArraysInstancedBaseInstance;
	let cstr = strings::to_c_with_buf("glDrawArraysInstancedEXT", cstr_buf): *const u8;
	glDrawArraysInstancedEXT = get_proc_address("glDrawArraysInstancedEXT", cstr): *fp_glDrawArraysInstancedEXT;
	let cstr = strings::to_c_with_buf("glDrawBuffer", cstr_buf): *const u8;
	glDrawBuffer = get_proc_address("glDrawBuffer", cstr): *fp_glDrawBuffer;
	let cstr = strings::to_c_with_buf("glDrawBuffers", cstr_buf): *const u8;
	glDrawBuffers = get_proc_address("glDrawBuffers", cstr): *fp_glDrawBuffers;
	let cstr = strings::to_c_with_buf("glDrawBuffersARB", cstr_buf): *const u8;
	glDrawBuffersARB = get_proc_address("glDrawBuffersARB", cstr): *fp_glDrawBuffersARB;
	let cstr = strings::to_c_with_buf("glDrawBuffersATI", cstr_buf): *const u8;
	glDrawBuffersATI = get_proc_address("glDrawBuffersATI", cstr): *fp_glDrawBuffersATI;
	let cstr = strings::to_c_with_buf("glDrawCommandsAddressNV", cstr_buf): *const u8;
	glDrawCommandsAddressNV = get_proc_address("glDrawCommandsAddressNV", cstr): *fp_glDrawCommandsAddressNV;
	let cstr = strings::to_c_with_buf("glDrawCommandsNV", cstr_buf): *const u8;
	glDrawCommandsNV = get_proc_address("glDrawCommandsNV", cstr): *fp_glDrawCommandsNV;
	let cstr = strings::to_c_with_buf("glDrawCommandsStatesAddressNV", cstr_buf): *const u8;
	glDrawCommandsStatesAddressNV = get_proc_address("glDrawCommandsStatesAddressNV", cstr): *fp_glDrawCommandsStatesAddressNV;
	let cstr = strings::to_c_with_buf("glDrawCommandsStatesNV", cstr_buf): *const u8;
	glDrawCommandsStatesNV = get_proc_address("glDrawCommandsStatesNV", cstr): *fp_glDrawCommandsStatesNV;
	let cstr = strings::to_c_with_buf("glDrawElementArrayAPPLE", cstr_buf): *const u8;
	glDrawElementArrayAPPLE = get_proc_address("glDrawElementArrayAPPLE", cstr): *fp_glDrawElementArrayAPPLE;
	let cstr = strings::to_c_with_buf("glDrawElementArrayATI", cstr_buf): *const u8;
	glDrawElementArrayATI = get_proc_address("glDrawElementArrayATI", cstr): *fp_glDrawElementArrayATI;
	let cstr = strings::to_c_with_buf("glDrawElements", cstr_buf): *const u8;
	glDrawElements = get_proc_address("glDrawElements", cstr): *fp_glDrawElements;
	let cstr = strings::to_c_with_buf("glDrawElementsBaseVertex", cstr_buf): *const u8;
	glDrawElementsBaseVertex = get_proc_address("glDrawElementsBaseVertex", cstr): *fp_glDrawElementsBaseVertex;
	let cstr = strings::to_c_with_buf("glDrawElementsIndirect", cstr_buf): *const u8;
	glDrawElementsIndirect = get_proc_address("glDrawElementsIndirect", cstr): *fp_glDrawElementsIndirect;
	let cstr = strings::to_c_with_buf("glDrawElementsInstancedARB", cstr_buf): *const u8;
	glDrawElementsInstancedARB = get_proc_address("glDrawElementsInstancedARB", cstr): *fp_glDrawElementsInstancedARB;
	let cstr = strings::to_c_with_buf("glDrawElementsInstancedBaseInstance", cstr_buf): *const u8;
	glDrawElementsInstancedBaseInstance = get_proc_address("glDrawElementsInstancedBaseInstance", cstr): *fp_glDrawElementsInstancedBaseInstance;
	let cstr = strings::to_c_with_buf("glDrawElementsInstancedBaseVertex", cstr_buf): *const u8;
	glDrawElementsInstancedBaseVertex = get_proc_address("glDrawElementsInstancedBaseVertex", cstr): *fp_glDrawElementsInstancedBaseVertex;
	let cstr = strings::to_c_with_buf("glDrawElementsInstancedBaseVertexBaseInstance", cstr_buf): *const u8;
	glDrawElementsInstancedBaseVertexBaseInstance = get_proc_address("glDrawElementsInstancedBaseVertexBaseInstance", cstr): *fp_glDrawElementsInstancedBaseVertexBaseInstance;
	let cstr = strings::to_c_with_buf("glDrawElementsInstancedEXT", cstr_buf): *const u8;
	glDrawElementsInstancedEXT = get_proc_address("glDrawElementsInstancedEXT", cstr): *fp_glDrawElementsInstancedEXT;
	let cstr = strings::to_c_with_buf("glDrawMeshArraysSUN", cstr_buf): *const u8;
	glDrawMeshArraysSUN = get_proc_address("glDrawMeshArraysSUN", cstr): *fp_glDrawMeshArraysSUN;
	let cstr = strings::to_c_with_buf("glDrawMeshTasksIndirectNV", cstr_buf): *const u8;
	glDrawMeshTasksIndirectNV = get_proc_address("glDrawMeshTasksIndirectNV", cstr): *fp_glDrawMeshTasksIndirectNV;
	let cstr = strings::to_c_with_buf("glDrawMeshTasksNV", cstr_buf): *const u8;
	glDrawMeshTasksNV = get_proc_address("glDrawMeshTasksNV", cstr): *fp_glDrawMeshTasksNV;
	let cstr = strings::to_c_with_buf("glDrawPixels", cstr_buf): *const u8;
	glDrawPixels = get_proc_address("glDrawPixels", cstr): *fp_glDrawPixels;
	let cstr = strings::to_c_with_buf("glDrawRangeElementArrayAPPLE", cstr_buf): *const u8;
	glDrawRangeElementArrayAPPLE = get_proc_address("glDrawRangeElementArrayAPPLE", cstr): *fp_glDrawRangeElementArrayAPPLE;
	let cstr = strings::to_c_with_buf("glDrawRangeElementArrayATI", cstr_buf): *const u8;
	glDrawRangeElementArrayATI = get_proc_address("glDrawRangeElementArrayATI", cstr): *fp_glDrawRangeElementArrayATI;
	let cstr = strings::to_c_with_buf("glDrawRangeElements", cstr_buf): *const u8;
	glDrawRangeElements = get_proc_address("glDrawRangeElements", cstr): *fp_glDrawRangeElements;
	let cstr = strings::to_c_with_buf("glDrawRangeElementsBaseVertex", cstr_buf): *const u8;
	glDrawRangeElementsBaseVertex = get_proc_address("glDrawRangeElementsBaseVertex", cstr): *fp_glDrawRangeElementsBaseVertex;
	let cstr = strings::to_c_with_buf("glDrawRangeElementsEXT", cstr_buf): *const u8;
	glDrawRangeElementsEXT = get_proc_address("glDrawRangeElementsEXT", cstr): *fp_glDrawRangeElementsEXT;
	let cstr = strings::to_c_with_buf("glDrawTextureNV", cstr_buf): *const u8;
	glDrawTextureNV = get_proc_address("glDrawTextureNV", cstr): *fp_glDrawTextureNV;
	let cstr = strings::to_c_with_buf("glDrawTransformFeedback", cstr_buf): *const u8;
	glDrawTransformFeedback = get_proc_address("glDrawTransformFeedback", cstr): *fp_glDrawTransformFeedback;
	let cstr = strings::to_c_with_buf("glDrawTransformFeedbackInstanced", cstr_buf): *const u8;
	glDrawTransformFeedbackInstanced = get_proc_address("glDrawTransformFeedbackInstanced", cstr): *fp_glDrawTransformFeedbackInstanced;
	let cstr = strings::to_c_with_buf("glDrawTransformFeedbackNV", cstr_buf): *const u8;
	glDrawTransformFeedbackNV = get_proc_address("glDrawTransformFeedbackNV", cstr): *fp_glDrawTransformFeedbackNV;
	let cstr = strings::to_c_with_buf("glDrawTransformFeedbackStream", cstr_buf): *const u8;
	glDrawTransformFeedbackStream = get_proc_address("glDrawTransformFeedbackStream", cstr): *fp_glDrawTransformFeedbackStream;
	let cstr = strings::to_c_with_buf("glDrawTransformFeedbackStreamInstanced", cstr_buf): *const u8;
	glDrawTransformFeedbackStreamInstanced = get_proc_address("glDrawTransformFeedbackStreamInstanced", cstr): *fp_glDrawTransformFeedbackStreamInstanced;
	let cstr = strings::to_c_with_buf("glDrawVkImageNV", cstr_buf): *const u8;
	glDrawVkImageNV = get_proc_address("glDrawVkImageNV", cstr): *fp_glDrawVkImageNV;
	let cstr = strings::to_c_with_buf("glEGLImageTargetTexStorageEXT", cstr_buf): *const u8;
	glEGLImageTargetTexStorageEXT = get_proc_address("glEGLImageTargetTexStorageEXT", cstr): *fp_glEGLImageTargetTexStorageEXT;
	let cstr = strings::to_c_with_buf("glEGLImageTargetTextureStorageEXT", cstr_buf): *const u8;
	glEGLImageTargetTextureStorageEXT = get_proc_address("glEGLImageTargetTextureStorageEXT", cstr): *fp_glEGLImageTargetTextureStorageEXT;
	let cstr = strings::to_c_with_buf("glEdgeFlag", cstr_buf): *const u8;
	glEdgeFlag = get_proc_address("glEdgeFlag", cstr): *fp_glEdgeFlag;
	let cstr = strings::to_c_with_buf("glEdgeFlagFormatNV", cstr_buf): *const u8;
	glEdgeFlagFormatNV = get_proc_address("glEdgeFlagFormatNV", cstr): *fp_glEdgeFlagFormatNV;
	let cstr = strings::to_c_with_buf("glEdgeFlagPointer", cstr_buf): *const u8;
	glEdgeFlagPointer = get_proc_address("glEdgeFlagPointer", cstr): *fp_glEdgeFlagPointer;
	let cstr = strings::to_c_with_buf("glEdgeFlagPointerEXT", cstr_buf): *const u8;
	glEdgeFlagPointerEXT = get_proc_address("glEdgeFlagPointerEXT", cstr): *fp_glEdgeFlagPointerEXT;
	let cstr = strings::to_c_with_buf("glEdgeFlagPointerListIBM", cstr_buf): *const u8;
	glEdgeFlagPointerListIBM = get_proc_address("glEdgeFlagPointerListIBM", cstr): *fp_glEdgeFlagPointerListIBM;
	let cstr = strings::to_c_with_buf("glEdgeFlagv", cstr_buf): *const u8;
	glEdgeFlagv = get_proc_address("glEdgeFlagv", cstr): *fp_glEdgeFlagv;
	let cstr = strings::to_c_with_buf("glElementPointerAPPLE", cstr_buf): *const u8;
	glElementPointerAPPLE = get_proc_address("glElementPointerAPPLE", cstr): *fp_glElementPointerAPPLE;
	let cstr = strings::to_c_with_buf("glElementPointerATI", cstr_buf): *const u8;
	glElementPointerATI = get_proc_address("glElementPointerATI", cstr): *fp_glElementPointerATI;
	let cstr = strings::to_c_with_buf("glEnable", cstr_buf): *const u8;
	glEnable = get_proc_address("glEnable", cstr): *fp_glEnable;
	let cstr = strings::to_c_with_buf("glEnableClientState", cstr_buf): *const u8;
	glEnableClientState = get_proc_address("glEnableClientState", cstr): *fp_glEnableClientState;
	let cstr = strings::to_c_with_buf("glEnableClientStateIndexedEXT", cstr_buf): *const u8;
	glEnableClientStateIndexedEXT = get_proc_address("glEnableClientStateIndexedEXT", cstr): *fp_glEnableClientStateIndexedEXT;
	let cstr = strings::to_c_with_buf("glEnableClientStateiEXT", cstr_buf): *const u8;
	glEnableClientStateiEXT = get_proc_address("glEnableClientStateiEXT", cstr): *fp_glEnableClientStateiEXT;
	let cstr = strings::to_c_with_buf("glEnableIndexedEXT", cstr_buf): *const u8;
	glEnableIndexedEXT = get_proc_address("glEnableIndexedEXT", cstr): *fp_glEnableIndexedEXT;
	let cstr = strings::to_c_with_buf("glEnableVariantClientStateEXT", cstr_buf): *const u8;
	glEnableVariantClientStateEXT = get_proc_address("glEnableVariantClientStateEXT", cstr): *fp_glEnableVariantClientStateEXT;
	let cstr = strings::to_c_with_buf("glEnableVertexArrayAttrib", cstr_buf): *const u8;
	glEnableVertexArrayAttrib = get_proc_address("glEnableVertexArrayAttrib", cstr): *fp_glEnableVertexArrayAttrib;
	let cstr = strings::to_c_with_buf("glEnableVertexArrayAttribEXT", cstr_buf): *const u8;
	glEnableVertexArrayAttribEXT = get_proc_address("glEnableVertexArrayAttribEXT", cstr): *fp_glEnableVertexArrayAttribEXT;
	let cstr = strings::to_c_with_buf("glEnableVertexArrayEXT", cstr_buf): *const u8;
	glEnableVertexArrayEXT = get_proc_address("glEnableVertexArrayEXT", cstr): *fp_glEnableVertexArrayEXT;
	let cstr = strings::to_c_with_buf("glEnableVertexAttribAPPLE", cstr_buf): *const u8;
	glEnableVertexAttribAPPLE = get_proc_address("glEnableVertexAttribAPPLE", cstr): *fp_glEnableVertexAttribAPPLE;
	let cstr = strings::to_c_with_buf("glEnableVertexAttribArray", cstr_buf): *const u8;
	glEnableVertexAttribArray = get_proc_address("glEnableVertexAttribArray", cstr): *fp_glEnableVertexAttribArray;
	let cstr = strings::to_c_with_buf("glEnableVertexAttribArrayARB", cstr_buf): *const u8;
	glEnableVertexAttribArrayARB = get_proc_address("glEnableVertexAttribArrayARB", cstr): *fp_glEnableVertexAttribArrayARB;
	let cstr = strings::to_c_with_buf("glEnd", cstr_buf): *const u8;
	glEnd = get_proc_address("glEnd", cstr): *fp_glEnd;
	let cstr = strings::to_c_with_buf("glEndConditionalRenderNV", cstr_buf): *const u8;
	glEndConditionalRenderNV = get_proc_address("glEndConditionalRenderNV", cstr): *fp_glEndConditionalRenderNV;
	let cstr = strings::to_c_with_buf("glEndConditionalRenderNVX", cstr_buf): *const u8;
	glEndConditionalRenderNVX = get_proc_address("glEndConditionalRenderNVX", cstr): *fp_glEndConditionalRenderNVX;
	let cstr = strings::to_c_with_buf("glEndFragmentShaderATI", cstr_buf): *const u8;
	glEndFragmentShaderATI = get_proc_address("glEndFragmentShaderATI", cstr): *fp_glEndFragmentShaderATI;
	let cstr = strings::to_c_with_buf("glEndList", cstr_buf): *const u8;
	glEndList = get_proc_address("glEndList", cstr): *fp_glEndList;
	let cstr = strings::to_c_with_buf("glEndOcclusionQueryNV", cstr_buf): *const u8;
	glEndOcclusionQueryNV = get_proc_address("glEndOcclusionQueryNV", cstr): *fp_glEndOcclusionQueryNV;
	let cstr = strings::to_c_with_buf("glEndPerfMonitorAMD", cstr_buf): *const u8;
	glEndPerfMonitorAMD = get_proc_address("glEndPerfMonitorAMD", cstr): *fp_glEndPerfMonitorAMD;
	let cstr = strings::to_c_with_buf("glEndPerfQueryINTEL", cstr_buf): *const u8;
	glEndPerfQueryINTEL = get_proc_address("glEndPerfQueryINTEL", cstr): *fp_glEndPerfQueryINTEL;
	let cstr = strings::to_c_with_buf("glEndQuery", cstr_buf): *const u8;
	glEndQuery = get_proc_address("glEndQuery", cstr): *fp_glEndQuery;
	let cstr = strings::to_c_with_buf("glEndQueryARB", cstr_buf): *const u8;
	glEndQueryARB = get_proc_address("glEndQueryARB", cstr): *fp_glEndQueryARB;
	let cstr = strings::to_c_with_buf("glEndQueryIndexed", cstr_buf): *const u8;
	glEndQueryIndexed = get_proc_address("glEndQueryIndexed", cstr): *fp_glEndQueryIndexed;
	let cstr = strings::to_c_with_buf("glEndTransformFeedbackEXT", cstr_buf): *const u8;
	glEndTransformFeedbackEXT = get_proc_address("glEndTransformFeedbackEXT", cstr): *fp_glEndTransformFeedbackEXT;
	let cstr = strings::to_c_with_buf("glEndTransformFeedbackNV", cstr_buf): *const u8;
	glEndTransformFeedbackNV = get_proc_address("glEndTransformFeedbackNV", cstr): *fp_glEndTransformFeedbackNV;
	let cstr = strings::to_c_with_buf("glEndVertexShaderEXT", cstr_buf): *const u8;
	glEndVertexShaderEXT = get_proc_address("glEndVertexShaderEXT", cstr): *fp_glEndVertexShaderEXT;
	let cstr = strings::to_c_with_buf("glEndVideoCaptureNV", cstr_buf): *const u8;
	glEndVideoCaptureNV = get_proc_address("glEndVideoCaptureNV", cstr): *fp_glEndVideoCaptureNV;
	let cstr = strings::to_c_with_buf("glEvalCoord1d", cstr_buf): *const u8;
	glEvalCoord1d = get_proc_address("glEvalCoord1d", cstr): *fp_glEvalCoord1d;
	let cstr = strings::to_c_with_buf("glEvalCoord1dv", cstr_buf): *const u8;
	glEvalCoord1dv = get_proc_address("glEvalCoord1dv", cstr): *fp_glEvalCoord1dv;
	let cstr = strings::to_c_with_buf("glEvalCoord1f", cstr_buf): *const u8;
	glEvalCoord1f = get_proc_address("glEvalCoord1f", cstr): *fp_glEvalCoord1f;
	let cstr = strings::to_c_with_buf("glEvalCoord1fv", cstr_buf): *const u8;
	glEvalCoord1fv = get_proc_address("glEvalCoord1fv", cstr): *fp_glEvalCoord1fv;
	let cstr = strings::to_c_with_buf("glEvalCoord1xOES", cstr_buf): *const u8;
	glEvalCoord1xOES = get_proc_address("glEvalCoord1xOES", cstr): *fp_glEvalCoord1xOES;
	let cstr = strings::to_c_with_buf("glEvalCoord1xvOES", cstr_buf): *const u8;
	glEvalCoord1xvOES = get_proc_address("glEvalCoord1xvOES", cstr): *fp_glEvalCoord1xvOES;
	let cstr = strings::to_c_with_buf("glEvalCoord2d", cstr_buf): *const u8;
	glEvalCoord2d = get_proc_address("glEvalCoord2d", cstr): *fp_glEvalCoord2d;
	let cstr = strings::to_c_with_buf("glEvalCoord2dv", cstr_buf): *const u8;
	glEvalCoord2dv = get_proc_address("glEvalCoord2dv", cstr): *fp_glEvalCoord2dv;
	let cstr = strings::to_c_with_buf("glEvalCoord2f", cstr_buf): *const u8;
	glEvalCoord2f = get_proc_address("glEvalCoord2f", cstr): *fp_glEvalCoord2f;
	let cstr = strings::to_c_with_buf("glEvalCoord2fv", cstr_buf): *const u8;
	glEvalCoord2fv = get_proc_address("glEvalCoord2fv", cstr): *fp_glEvalCoord2fv;
	let cstr = strings::to_c_with_buf("glEvalCoord2xOES", cstr_buf): *const u8;
	glEvalCoord2xOES = get_proc_address("glEvalCoord2xOES", cstr): *fp_glEvalCoord2xOES;
	let cstr = strings::to_c_with_buf("glEvalCoord2xvOES", cstr_buf): *const u8;
	glEvalCoord2xvOES = get_proc_address("glEvalCoord2xvOES", cstr): *fp_glEvalCoord2xvOES;
	let cstr = strings::to_c_with_buf("glEvalMapsNV", cstr_buf): *const u8;
	glEvalMapsNV = get_proc_address("glEvalMapsNV", cstr): *fp_glEvalMapsNV;
	let cstr = strings::to_c_with_buf("glEvalMesh1", cstr_buf): *const u8;
	glEvalMesh1 = get_proc_address("glEvalMesh1", cstr): *fp_glEvalMesh1;
	let cstr = strings::to_c_with_buf("glEvalMesh2", cstr_buf): *const u8;
	glEvalMesh2 = get_proc_address("glEvalMesh2", cstr): *fp_glEvalMesh2;
	let cstr = strings::to_c_with_buf("glEvalPoint1", cstr_buf): *const u8;
	glEvalPoint1 = get_proc_address("glEvalPoint1", cstr): *fp_glEvalPoint1;
	let cstr = strings::to_c_with_buf("glEvalPoint2", cstr_buf): *const u8;
	glEvalPoint2 = get_proc_address("glEvalPoint2", cstr): *fp_glEvalPoint2;
	let cstr = strings::to_c_with_buf("glEvaluateDepthValuesARB", cstr_buf): *const u8;
	glEvaluateDepthValuesARB = get_proc_address("glEvaluateDepthValuesARB", cstr): *fp_glEvaluateDepthValuesARB;
	let cstr = strings::to_c_with_buf("glExecuteProgramNV", cstr_buf): *const u8;
	glExecuteProgramNV = get_proc_address("glExecuteProgramNV", cstr): *fp_glExecuteProgramNV;
	let cstr = strings::to_c_with_buf("glExtractComponentEXT", cstr_buf): *const u8;
	glExtractComponentEXT = get_proc_address("glExtractComponentEXT", cstr): *fp_glExtractComponentEXT;
	let cstr = strings::to_c_with_buf("glFeedbackBuffer", cstr_buf): *const u8;
	glFeedbackBuffer = get_proc_address("glFeedbackBuffer", cstr): *fp_glFeedbackBuffer;
	let cstr = strings::to_c_with_buf("glFeedbackBufferxOES", cstr_buf): *const u8;
	glFeedbackBufferxOES = get_proc_address("glFeedbackBufferxOES", cstr): *fp_glFeedbackBufferxOES;
	let cstr = strings::to_c_with_buf("glFenceSync", cstr_buf): *const u8;
	glFenceSync = get_proc_address("glFenceSync", cstr): *fp_glFenceSync;
	let cstr = strings::to_c_with_buf("glFinalCombinerInputNV", cstr_buf): *const u8;
	glFinalCombinerInputNV = get_proc_address("glFinalCombinerInputNV", cstr): *fp_glFinalCombinerInputNV;
	let cstr = strings::to_c_with_buf("glFinish", cstr_buf): *const u8;
	glFinish = get_proc_address("glFinish", cstr): *fp_glFinish;
	let cstr = strings::to_c_with_buf("glFinishAsyncSGIX", cstr_buf): *const u8;
	glFinishAsyncSGIX = get_proc_address("glFinishAsyncSGIX", cstr): *fp_glFinishAsyncSGIX;
	let cstr = strings::to_c_with_buf("glFinishFenceAPPLE", cstr_buf): *const u8;
	glFinishFenceAPPLE = get_proc_address("glFinishFenceAPPLE", cstr): *fp_glFinishFenceAPPLE;
	let cstr = strings::to_c_with_buf("glFinishFenceNV", cstr_buf): *const u8;
	glFinishFenceNV = get_proc_address("glFinishFenceNV", cstr): *fp_glFinishFenceNV;
	let cstr = strings::to_c_with_buf("glFinishObjectAPPLE", cstr_buf): *const u8;
	glFinishObjectAPPLE = get_proc_address("glFinishObjectAPPLE", cstr): *fp_glFinishObjectAPPLE;
	let cstr = strings::to_c_with_buf("glFinishTextureSUNX", cstr_buf): *const u8;
	glFinishTextureSUNX = get_proc_address("glFinishTextureSUNX", cstr): *fp_glFinishTextureSUNX;
	let cstr = strings::to_c_with_buf("glFlush", cstr_buf): *const u8;
	glFlush = get_proc_address("glFlush", cstr): *fp_glFlush;
	let cstr = strings::to_c_with_buf("glFlushMappedBufferRange", cstr_buf): *const u8;
	glFlushMappedBufferRange = get_proc_address("glFlushMappedBufferRange", cstr): *fp_glFlushMappedBufferRange;
	let cstr = strings::to_c_with_buf("glFlushMappedBufferRangeAPPLE", cstr_buf): *const u8;
	glFlushMappedBufferRangeAPPLE = get_proc_address("glFlushMappedBufferRangeAPPLE", cstr): *fp_glFlushMappedBufferRangeAPPLE;
	let cstr = strings::to_c_with_buf("glFlushMappedNamedBufferRange", cstr_buf): *const u8;
	glFlushMappedNamedBufferRange = get_proc_address("glFlushMappedNamedBufferRange", cstr): *fp_glFlushMappedNamedBufferRange;
	let cstr = strings::to_c_with_buf("glFlushMappedNamedBufferRangeEXT", cstr_buf): *const u8;
	glFlushMappedNamedBufferRangeEXT = get_proc_address("glFlushMappedNamedBufferRangeEXT", cstr): *fp_glFlushMappedNamedBufferRangeEXT;
	let cstr = strings::to_c_with_buf("glFlushPixelDataRangeNV", cstr_buf): *const u8;
	glFlushPixelDataRangeNV = get_proc_address("glFlushPixelDataRangeNV", cstr): *fp_glFlushPixelDataRangeNV;
	let cstr = strings::to_c_with_buf("glFlushRasterSGIX", cstr_buf): *const u8;
	glFlushRasterSGIX = get_proc_address("glFlushRasterSGIX", cstr): *fp_glFlushRasterSGIX;
	let cstr = strings::to_c_with_buf("glFlushStaticDataIBM", cstr_buf): *const u8;
	glFlushStaticDataIBM = get_proc_address("glFlushStaticDataIBM", cstr): *fp_glFlushStaticDataIBM;
	let cstr = strings::to_c_with_buf("glFlushVertexArrayRangeAPPLE", cstr_buf): *const u8;
	glFlushVertexArrayRangeAPPLE = get_proc_address("glFlushVertexArrayRangeAPPLE", cstr): *fp_glFlushVertexArrayRangeAPPLE;
	let cstr = strings::to_c_with_buf("glFlushVertexArrayRangeNV", cstr_buf): *const u8;
	glFlushVertexArrayRangeNV = get_proc_address("glFlushVertexArrayRangeNV", cstr): *fp_glFlushVertexArrayRangeNV;
	let cstr = strings::to_c_with_buf("glFogCoordFormatNV", cstr_buf): *const u8;
	glFogCoordFormatNV = get_proc_address("glFogCoordFormatNV", cstr): *fp_glFogCoordFormatNV;
	let cstr = strings::to_c_with_buf("glFogCoordPointer", cstr_buf): *const u8;
	glFogCoordPointer = get_proc_address("glFogCoordPointer", cstr): *fp_glFogCoordPointer;
	let cstr = strings::to_c_with_buf("glFogCoordPointerEXT", cstr_buf): *const u8;
	glFogCoordPointerEXT = get_proc_address("glFogCoordPointerEXT", cstr): *fp_glFogCoordPointerEXT;
	let cstr = strings::to_c_with_buf("glFogCoordPointerListIBM", cstr_buf): *const u8;
	glFogCoordPointerListIBM = get_proc_address("glFogCoordPointerListIBM", cstr): *fp_glFogCoordPointerListIBM;
	let cstr = strings::to_c_with_buf("glFogCoordd", cstr_buf): *const u8;
	glFogCoordd = get_proc_address("glFogCoordd", cstr): *fp_glFogCoordd;
	let cstr = strings::to_c_with_buf("glFogCoorddEXT", cstr_buf): *const u8;
	glFogCoorddEXT = get_proc_address("glFogCoorddEXT", cstr): *fp_glFogCoorddEXT;
	let cstr = strings::to_c_with_buf("glFogCoorddv", cstr_buf): *const u8;
	glFogCoorddv = get_proc_address("glFogCoorddv", cstr): *fp_glFogCoorddv;
	let cstr = strings::to_c_with_buf("glFogCoorddvEXT", cstr_buf): *const u8;
	glFogCoorddvEXT = get_proc_address("glFogCoorddvEXT", cstr): *fp_glFogCoorddvEXT;
	let cstr = strings::to_c_with_buf("glFogCoordf", cstr_buf): *const u8;
	glFogCoordf = get_proc_address("glFogCoordf", cstr): *fp_glFogCoordf;
	let cstr = strings::to_c_with_buf("glFogCoordfEXT", cstr_buf): *const u8;
	glFogCoordfEXT = get_proc_address("glFogCoordfEXT", cstr): *fp_glFogCoordfEXT;
	let cstr = strings::to_c_with_buf("glFogCoordfv", cstr_buf): *const u8;
	glFogCoordfv = get_proc_address("glFogCoordfv", cstr): *fp_glFogCoordfv;
	let cstr = strings::to_c_with_buf("glFogCoordfvEXT", cstr_buf): *const u8;
	glFogCoordfvEXT = get_proc_address("glFogCoordfvEXT", cstr): *fp_glFogCoordfvEXT;
	let cstr = strings::to_c_with_buf("glFogCoordhNV", cstr_buf): *const u8;
	glFogCoordhNV = get_proc_address("glFogCoordhNV", cstr): *fp_glFogCoordhNV;
	let cstr = strings::to_c_with_buf("glFogCoordhvNV", cstr_buf): *const u8;
	glFogCoordhvNV = get_proc_address("glFogCoordhvNV", cstr): *fp_glFogCoordhvNV;
	let cstr = strings::to_c_with_buf("glFogFuncSGIS", cstr_buf): *const u8;
	glFogFuncSGIS = get_proc_address("glFogFuncSGIS", cstr): *fp_glFogFuncSGIS;
	let cstr = strings::to_c_with_buf("glFogf", cstr_buf): *const u8;
	glFogf = get_proc_address("glFogf", cstr): *fp_glFogf;
	let cstr = strings::to_c_with_buf("glFogfv", cstr_buf): *const u8;
	glFogfv = get_proc_address("glFogfv", cstr): *fp_glFogfv;
	let cstr = strings::to_c_with_buf("glFogi", cstr_buf): *const u8;
	glFogi = get_proc_address("glFogi", cstr): *fp_glFogi;
	let cstr = strings::to_c_with_buf("glFogiv", cstr_buf): *const u8;
	glFogiv = get_proc_address("glFogiv", cstr): *fp_glFogiv;
	let cstr = strings::to_c_with_buf("glFogxOES", cstr_buf): *const u8;
	glFogxOES = get_proc_address("glFogxOES", cstr): *fp_glFogxOES;
	let cstr = strings::to_c_with_buf("glFogxvOES", cstr_buf): *const u8;
	glFogxvOES = get_proc_address("glFogxvOES", cstr): *fp_glFogxvOES;
	let cstr = strings::to_c_with_buf("glFragmentColorMaterialSGIX", cstr_buf): *const u8;
	glFragmentColorMaterialSGIX = get_proc_address("glFragmentColorMaterialSGIX", cstr): *fp_glFragmentColorMaterialSGIX;
	let cstr = strings::to_c_with_buf("glFragmentCoverageColorNV", cstr_buf): *const u8;
	glFragmentCoverageColorNV = get_proc_address("glFragmentCoverageColorNV", cstr): *fp_glFragmentCoverageColorNV;
	let cstr = strings::to_c_with_buf("glFragmentLightModelfSGIX", cstr_buf): *const u8;
	glFragmentLightModelfSGIX = get_proc_address("glFragmentLightModelfSGIX", cstr): *fp_glFragmentLightModelfSGIX;
	let cstr = strings::to_c_with_buf("glFragmentLightModelfvSGIX", cstr_buf): *const u8;
	glFragmentLightModelfvSGIX = get_proc_address("glFragmentLightModelfvSGIX", cstr): *fp_glFragmentLightModelfvSGIX;
	let cstr = strings::to_c_with_buf("glFragmentLightModeliSGIX", cstr_buf): *const u8;
	glFragmentLightModeliSGIX = get_proc_address("glFragmentLightModeliSGIX", cstr): *fp_glFragmentLightModeliSGIX;
	let cstr = strings::to_c_with_buf("glFragmentLightModelivSGIX", cstr_buf): *const u8;
	glFragmentLightModelivSGIX = get_proc_address("glFragmentLightModelivSGIX", cstr): *fp_glFragmentLightModelivSGIX;
	let cstr = strings::to_c_with_buf("glFragmentLightfSGIX", cstr_buf): *const u8;
	glFragmentLightfSGIX = get_proc_address("glFragmentLightfSGIX", cstr): *fp_glFragmentLightfSGIX;
	let cstr = strings::to_c_with_buf("glFragmentLightfvSGIX", cstr_buf): *const u8;
	glFragmentLightfvSGIX = get_proc_address("glFragmentLightfvSGIX", cstr): *fp_glFragmentLightfvSGIX;
	let cstr = strings::to_c_with_buf("glFragmentLightiSGIX", cstr_buf): *const u8;
	glFragmentLightiSGIX = get_proc_address("glFragmentLightiSGIX", cstr): *fp_glFragmentLightiSGIX;
	let cstr = strings::to_c_with_buf("glFragmentLightivSGIX", cstr_buf): *const u8;
	glFragmentLightivSGIX = get_proc_address("glFragmentLightivSGIX", cstr): *fp_glFragmentLightivSGIX;
	let cstr = strings::to_c_with_buf("glFragmentMaterialfSGIX", cstr_buf): *const u8;
	glFragmentMaterialfSGIX = get_proc_address("glFragmentMaterialfSGIX", cstr): *fp_glFragmentMaterialfSGIX;
	let cstr = strings::to_c_with_buf("glFragmentMaterialfvSGIX", cstr_buf): *const u8;
	glFragmentMaterialfvSGIX = get_proc_address("glFragmentMaterialfvSGIX", cstr): *fp_glFragmentMaterialfvSGIX;
	let cstr = strings::to_c_with_buf("glFragmentMaterialiSGIX", cstr_buf): *const u8;
	glFragmentMaterialiSGIX = get_proc_address("glFragmentMaterialiSGIX", cstr): *fp_glFragmentMaterialiSGIX;
	let cstr = strings::to_c_with_buf("glFragmentMaterialivSGIX", cstr_buf): *const u8;
	glFragmentMaterialivSGIX = get_proc_address("glFragmentMaterialivSGIX", cstr): *fp_glFragmentMaterialivSGIX;
	let cstr = strings::to_c_with_buf("glFrameTerminatorGREMEDY", cstr_buf): *const u8;
	glFrameTerminatorGREMEDY = get_proc_address("glFrameTerminatorGREMEDY", cstr): *fp_glFrameTerminatorGREMEDY;
	let cstr = strings::to_c_with_buf("glFrameZoomSGIX", cstr_buf): *const u8;
	glFrameZoomSGIX = get_proc_address("glFrameZoomSGIX", cstr): *fp_glFrameZoomSGIX;
	let cstr = strings::to_c_with_buf("glFramebufferDrawBufferEXT", cstr_buf): *const u8;
	glFramebufferDrawBufferEXT = get_proc_address("glFramebufferDrawBufferEXT", cstr): *fp_glFramebufferDrawBufferEXT;
	let cstr = strings::to_c_with_buf("glFramebufferDrawBuffersEXT", cstr_buf): *const u8;
	glFramebufferDrawBuffersEXT = get_proc_address("glFramebufferDrawBuffersEXT", cstr): *fp_glFramebufferDrawBuffersEXT;
	let cstr = strings::to_c_with_buf("glFramebufferFetchBarrierEXT", cstr_buf): *const u8;
	glFramebufferFetchBarrierEXT = get_proc_address("glFramebufferFetchBarrierEXT", cstr): *fp_glFramebufferFetchBarrierEXT;
	let cstr = strings::to_c_with_buf("glFramebufferParameteri", cstr_buf): *const u8;
	glFramebufferParameteri = get_proc_address("glFramebufferParameteri", cstr): *fp_glFramebufferParameteri;
	let cstr = strings::to_c_with_buf("glFramebufferParameteriMESA", cstr_buf): *const u8;
	glFramebufferParameteriMESA = get_proc_address("glFramebufferParameteriMESA", cstr): *fp_glFramebufferParameteriMESA;
	let cstr = strings::to_c_with_buf("glFramebufferReadBufferEXT", cstr_buf): *const u8;
	glFramebufferReadBufferEXT = get_proc_address("glFramebufferReadBufferEXT", cstr): *fp_glFramebufferReadBufferEXT;
	let cstr = strings::to_c_with_buf("glFramebufferRenderbuffer", cstr_buf): *const u8;
	glFramebufferRenderbuffer = get_proc_address("glFramebufferRenderbuffer", cstr): *fp_glFramebufferRenderbuffer;
	let cstr = strings::to_c_with_buf("glFramebufferRenderbufferEXT", cstr_buf): *const u8;
	glFramebufferRenderbufferEXT = get_proc_address("glFramebufferRenderbufferEXT", cstr): *fp_glFramebufferRenderbufferEXT;
	let cstr = strings::to_c_with_buf("glFramebufferSampleLocationsfvARB", cstr_buf): *const u8;
	glFramebufferSampleLocationsfvARB = get_proc_address("glFramebufferSampleLocationsfvARB", cstr): *fp_glFramebufferSampleLocationsfvARB;
	let cstr = strings::to_c_with_buf("glFramebufferSampleLocationsfvNV", cstr_buf): *const u8;
	glFramebufferSampleLocationsfvNV = get_proc_address("glFramebufferSampleLocationsfvNV", cstr): *fp_glFramebufferSampleLocationsfvNV;
	let cstr = strings::to_c_with_buf("glFramebufferSamplePositionsfvAMD", cstr_buf): *const u8;
	glFramebufferSamplePositionsfvAMD = get_proc_address("glFramebufferSamplePositionsfvAMD", cstr): *fp_glFramebufferSamplePositionsfvAMD;
	let cstr = strings::to_c_with_buf("glFramebufferTexture1D", cstr_buf): *const u8;
	glFramebufferTexture1D = get_proc_address("glFramebufferTexture1D", cstr): *fp_glFramebufferTexture1D;
	let cstr = strings::to_c_with_buf("glFramebufferTexture1DEXT", cstr_buf): *const u8;
	glFramebufferTexture1DEXT = get_proc_address("glFramebufferTexture1DEXT", cstr): *fp_glFramebufferTexture1DEXT;
	let cstr = strings::to_c_with_buf("glFramebufferTexture2D", cstr_buf): *const u8;
	glFramebufferTexture2D = get_proc_address("glFramebufferTexture2D", cstr): *fp_glFramebufferTexture2D;
	let cstr = strings::to_c_with_buf("glFramebufferTexture2DEXT", cstr_buf): *const u8;
	glFramebufferTexture2DEXT = get_proc_address("glFramebufferTexture2DEXT", cstr): *fp_glFramebufferTexture2DEXT;
	let cstr = strings::to_c_with_buf("glFramebufferTexture3D", cstr_buf): *const u8;
	glFramebufferTexture3D = get_proc_address("glFramebufferTexture3D", cstr): *fp_glFramebufferTexture3D;
	let cstr = strings::to_c_with_buf("glFramebufferTexture3DEXT", cstr_buf): *const u8;
	glFramebufferTexture3DEXT = get_proc_address("glFramebufferTexture3DEXT", cstr): *fp_glFramebufferTexture3DEXT;
	let cstr = strings::to_c_with_buf("glFramebufferTextureARB", cstr_buf): *const u8;
	glFramebufferTextureARB = get_proc_address("glFramebufferTextureARB", cstr): *fp_glFramebufferTextureARB;
	let cstr = strings::to_c_with_buf("glFramebufferTextureEXT", cstr_buf): *const u8;
	glFramebufferTextureEXT = get_proc_address("glFramebufferTextureEXT", cstr): *fp_glFramebufferTextureEXT;
	let cstr = strings::to_c_with_buf("glFramebufferTextureFaceARB", cstr_buf): *const u8;
	glFramebufferTextureFaceARB = get_proc_address("glFramebufferTextureFaceARB", cstr): *fp_glFramebufferTextureFaceARB;
	let cstr = strings::to_c_with_buf("glFramebufferTextureFaceEXT", cstr_buf): *const u8;
	glFramebufferTextureFaceEXT = get_proc_address("glFramebufferTextureFaceEXT", cstr): *fp_glFramebufferTextureFaceEXT;
	let cstr = strings::to_c_with_buf("glFramebufferTextureLayer", cstr_buf): *const u8;
	glFramebufferTextureLayer = get_proc_address("glFramebufferTextureLayer", cstr): *fp_glFramebufferTextureLayer;
	let cstr = strings::to_c_with_buf("glFramebufferTextureLayerARB", cstr_buf): *const u8;
	glFramebufferTextureLayerARB = get_proc_address("glFramebufferTextureLayerARB", cstr): *fp_glFramebufferTextureLayerARB;
	let cstr = strings::to_c_with_buf("glFramebufferTextureLayerEXT", cstr_buf): *const u8;
	glFramebufferTextureLayerEXT = get_proc_address("glFramebufferTextureLayerEXT", cstr): *fp_glFramebufferTextureLayerEXT;
	let cstr = strings::to_c_with_buf("glFramebufferTextureMultiviewOVR", cstr_buf): *const u8;
	glFramebufferTextureMultiviewOVR = get_proc_address("glFramebufferTextureMultiviewOVR", cstr): *fp_glFramebufferTextureMultiviewOVR;
	let cstr = strings::to_c_with_buf("glFreeObjectBufferATI", cstr_buf): *const u8;
	glFreeObjectBufferATI = get_proc_address("glFreeObjectBufferATI", cstr): *fp_glFreeObjectBufferATI;
	let cstr = strings::to_c_with_buf("glFrontFace", cstr_buf): *const u8;
	glFrontFace = get_proc_address("glFrontFace", cstr): *fp_glFrontFace;
	let cstr = strings::to_c_with_buf("glFrustum", cstr_buf): *const u8;
	glFrustum = get_proc_address("glFrustum", cstr): *fp_glFrustum;
	let cstr = strings::to_c_with_buf("glFrustumfOES", cstr_buf): *const u8;
	glFrustumfOES = get_proc_address("glFrustumfOES", cstr): *fp_glFrustumfOES;
	let cstr = strings::to_c_with_buf("glFrustumxOES", cstr_buf): *const u8;
	glFrustumxOES = get_proc_address("glFrustumxOES", cstr): *fp_glFrustumxOES;
	let cstr = strings::to_c_with_buf("glGenAsyncMarkersSGIX", cstr_buf): *const u8;
	glGenAsyncMarkersSGIX = get_proc_address("glGenAsyncMarkersSGIX", cstr): *fp_glGenAsyncMarkersSGIX;
	let cstr = strings::to_c_with_buf("glGenBuffers", cstr_buf): *const u8;
	glGenBuffers = get_proc_address("glGenBuffers", cstr): *fp_glGenBuffers;
	let cstr = strings::to_c_with_buf("glGenBuffersARB", cstr_buf): *const u8;
	glGenBuffersARB = get_proc_address("glGenBuffersARB", cstr): *fp_glGenBuffersARB;
	let cstr = strings::to_c_with_buf("glGenFencesAPPLE", cstr_buf): *const u8;
	glGenFencesAPPLE = get_proc_address("glGenFencesAPPLE", cstr): *fp_glGenFencesAPPLE;
	let cstr = strings::to_c_with_buf("glGenFencesNV", cstr_buf): *const u8;
	glGenFencesNV = get_proc_address("glGenFencesNV", cstr): *fp_glGenFencesNV;
	let cstr = strings::to_c_with_buf("glGenFragmentShadersATI", cstr_buf): *const u8;
	glGenFragmentShadersATI = get_proc_address("glGenFragmentShadersATI", cstr): *fp_glGenFragmentShadersATI;
	let cstr = strings::to_c_with_buf("glGenFramebuffers", cstr_buf): *const u8;
	glGenFramebuffers = get_proc_address("glGenFramebuffers", cstr): *fp_glGenFramebuffers;
	let cstr = strings::to_c_with_buf("glGenFramebuffersEXT", cstr_buf): *const u8;
	glGenFramebuffersEXT = get_proc_address("glGenFramebuffersEXT", cstr): *fp_glGenFramebuffersEXT;
	let cstr = strings::to_c_with_buf("glGenLists", cstr_buf): *const u8;
	glGenLists = get_proc_address("glGenLists", cstr): *fp_glGenLists;
	let cstr = strings::to_c_with_buf("glGenNamesAMD", cstr_buf): *const u8;
	glGenNamesAMD = get_proc_address("glGenNamesAMD", cstr): *fp_glGenNamesAMD;
	let cstr = strings::to_c_with_buf("glGenOcclusionQueriesNV", cstr_buf): *const u8;
	glGenOcclusionQueriesNV = get_proc_address("glGenOcclusionQueriesNV", cstr): *fp_glGenOcclusionQueriesNV;
	let cstr = strings::to_c_with_buf("glGenPathsNV", cstr_buf): *const u8;
	glGenPathsNV = get_proc_address("glGenPathsNV", cstr): *fp_glGenPathsNV;
	let cstr = strings::to_c_with_buf("glGenPerfMonitorsAMD", cstr_buf): *const u8;
	glGenPerfMonitorsAMD = get_proc_address("glGenPerfMonitorsAMD", cstr): *fp_glGenPerfMonitorsAMD;
	let cstr = strings::to_c_with_buf("glGenProgramPipelines", cstr_buf): *const u8;
	glGenProgramPipelines = get_proc_address("glGenProgramPipelines", cstr): *fp_glGenProgramPipelines;
	let cstr = strings::to_c_with_buf("glGenProgramsARB", cstr_buf): *const u8;
	glGenProgramsARB = get_proc_address("glGenProgramsARB", cstr): *fp_glGenProgramsARB;
	let cstr = strings::to_c_with_buf("glGenProgramsNV", cstr_buf): *const u8;
	glGenProgramsNV = get_proc_address("glGenProgramsNV", cstr): *fp_glGenProgramsNV;
	let cstr = strings::to_c_with_buf("glGenQueries", cstr_buf): *const u8;
	glGenQueries = get_proc_address("glGenQueries", cstr): *fp_glGenQueries;
	let cstr = strings::to_c_with_buf("glGenQueriesARB", cstr_buf): *const u8;
	glGenQueriesARB = get_proc_address("glGenQueriesARB", cstr): *fp_glGenQueriesARB;
	let cstr = strings::to_c_with_buf("glGenQueryResourceTagNV", cstr_buf): *const u8;
	glGenQueryResourceTagNV = get_proc_address("glGenQueryResourceTagNV", cstr): *fp_glGenQueryResourceTagNV;
	let cstr = strings::to_c_with_buf("glGenRenderbuffers", cstr_buf): *const u8;
	glGenRenderbuffers = get_proc_address("glGenRenderbuffers", cstr): *fp_glGenRenderbuffers;
	let cstr = strings::to_c_with_buf("glGenRenderbuffersEXT", cstr_buf): *const u8;
	glGenRenderbuffersEXT = get_proc_address("glGenRenderbuffersEXT", cstr): *fp_glGenRenderbuffersEXT;
	let cstr = strings::to_c_with_buf("glGenSamplers", cstr_buf): *const u8;
	glGenSamplers = get_proc_address("glGenSamplers", cstr): *fp_glGenSamplers;
	let cstr = strings::to_c_with_buf("glGenSemaphoresEXT", cstr_buf): *const u8;
	glGenSemaphoresEXT = get_proc_address("glGenSemaphoresEXT", cstr): *fp_glGenSemaphoresEXT;
	let cstr = strings::to_c_with_buf("glGenSymbolsEXT", cstr_buf): *const u8;
	glGenSymbolsEXT = get_proc_address("glGenSymbolsEXT", cstr): *fp_glGenSymbolsEXT;
	let cstr = strings::to_c_with_buf("glGenTextures", cstr_buf): *const u8;
	glGenTextures = get_proc_address("glGenTextures", cstr): *fp_glGenTextures;
	let cstr = strings::to_c_with_buf("glGenTexturesEXT", cstr_buf): *const u8;
	glGenTexturesEXT = get_proc_address("glGenTexturesEXT", cstr): *fp_glGenTexturesEXT;
	let cstr = strings::to_c_with_buf("glGenTransformFeedbacks", cstr_buf): *const u8;
	glGenTransformFeedbacks = get_proc_address("glGenTransformFeedbacks", cstr): *fp_glGenTransformFeedbacks;
	let cstr = strings::to_c_with_buf("glGenTransformFeedbacksNV", cstr_buf): *const u8;
	glGenTransformFeedbacksNV = get_proc_address("glGenTransformFeedbacksNV", cstr): *fp_glGenTransformFeedbacksNV;
	let cstr = strings::to_c_with_buf("glGenVertexArrays", cstr_buf): *const u8;
	glGenVertexArrays = get_proc_address("glGenVertexArrays", cstr): *fp_glGenVertexArrays;
	let cstr = strings::to_c_with_buf("glGenVertexArraysAPPLE", cstr_buf): *const u8;
	glGenVertexArraysAPPLE = get_proc_address("glGenVertexArraysAPPLE", cstr): *fp_glGenVertexArraysAPPLE;
	let cstr = strings::to_c_with_buf("glGenVertexShadersEXT", cstr_buf): *const u8;
	glGenVertexShadersEXT = get_proc_address("glGenVertexShadersEXT", cstr): *fp_glGenVertexShadersEXT;
	let cstr = strings::to_c_with_buf("glGenerateMipmap", cstr_buf): *const u8;
	glGenerateMipmap = get_proc_address("glGenerateMipmap", cstr): *fp_glGenerateMipmap;
	let cstr = strings::to_c_with_buf("glGenerateMipmapEXT", cstr_buf): *const u8;
	glGenerateMipmapEXT = get_proc_address("glGenerateMipmapEXT", cstr): *fp_glGenerateMipmapEXT;
	let cstr = strings::to_c_with_buf("glGenerateMultiTexMipmapEXT", cstr_buf): *const u8;
	glGenerateMultiTexMipmapEXT = get_proc_address("glGenerateMultiTexMipmapEXT", cstr): *fp_glGenerateMultiTexMipmapEXT;
	let cstr = strings::to_c_with_buf("glGenerateTextureMipmap", cstr_buf): *const u8;
	glGenerateTextureMipmap = get_proc_address("glGenerateTextureMipmap", cstr): *fp_glGenerateTextureMipmap;
	let cstr = strings::to_c_with_buf("glGenerateTextureMipmapEXT", cstr_buf): *const u8;
	glGenerateTextureMipmapEXT = get_proc_address("glGenerateTextureMipmapEXT", cstr): *fp_glGenerateTextureMipmapEXT;
	let cstr = strings::to_c_with_buf("glGetActiveAtomicCounterBufferiv", cstr_buf): *const u8;
	glGetActiveAtomicCounterBufferiv = get_proc_address("glGetActiveAtomicCounterBufferiv", cstr): *fp_glGetActiveAtomicCounterBufferiv;
	let cstr = strings::to_c_with_buf("glGetActiveAttrib", cstr_buf): *const u8;
	glGetActiveAttrib = get_proc_address("glGetActiveAttrib", cstr): *fp_glGetActiveAttrib;
	let cstr = strings::to_c_with_buf("glGetActiveAttribARB", cstr_buf): *const u8;
	glGetActiveAttribARB = get_proc_address("glGetActiveAttribARB", cstr): *fp_glGetActiveAttribARB;
	let cstr = strings::to_c_with_buf("glGetActiveSubroutineName", cstr_buf): *const u8;
	glGetActiveSubroutineName = get_proc_address("glGetActiveSubroutineName", cstr): *fp_glGetActiveSubroutineName;
	let cstr = strings::to_c_with_buf("glGetActiveSubroutineUniformName", cstr_buf): *const u8;
	glGetActiveSubroutineUniformName = get_proc_address("glGetActiveSubroutineUniformName", cstr): *fp_glGetActiveSubroutineUniformName;
	let cstr = strings::to_c_with_buf("glGetActiveSubroutineUniformiv", cstr_buf): *const u8;
	glGetActiveSubroutineUniformiv = get_proc_address("glGetActiveSubroutineUniformiv", cstr): *fp_glGetActiveSubroutineUniformiv;
	let cstr = strings::to_c_with_buf("glGetActiveUniform", cstr_buf): *const u8;
	glGetActiveUniform = get_proc_address("glGetActiveUniform", cstr): *fp_glGetActiveUniform;
	let cstr = strings::to_c_with_buf("glGetActiveUniformARB", cstr_buf): *const u8;
	glGetActiveUniformARB = get_proc_address("glGetActiveUniformARB", cstr): *fp_glGetActiveUniformARB;
	let cstr = strings::to_c_with_buf("glGetActiveUniformBlockName", cstr_buf): *const u8;
	glGetActiveUniformBlockName = get_proc_address("glGetActiveUniformBlockName", cstr): *fp_glGetActiveUniformBlockName;
	let cstr = strings::to_c_with_buf("glGetActiveUniformBlockiv", cstr_buf): *const u8;
	glGetActiveUniformBlockiv = get_proc_address("glGetActiveUniformBlockiv", cstr): *fp_glGetActiveUniformBlockiv;
	let cstr = strings::to_c_with_buf("glGetActiveUniformName", cstr_buf): *const u8;
	glGetActiveUniformName = get_proc_address("glGetActiveUniformName", cstr): *fp_glGetActiveUniformName;
	let cstr = strings::to_c_with_buf("glGetActiveUniformsiv", cstr_buf): *const u8;
	glGetActiveUniformsiv = get_proc_address("glGetActiveUniformsiv", cstr): *fp_glGetActiveUniformsiv;
	let cstr = strings::to_c_with_buf("glGetActiveVaryingNV", cstr_buf): *const u8;
	glGetActiveVaryingNV = get_proc_address("glGetActiveVaryingNV", cstr): *fp_glGetActiveVaryingNV;
	let cstr = strings::to_c_with_buf("glGetArrayObjectfvATI", cstr_buf): *const u8;
	glGetArrayObjectfvATI = get_proc_address("glGetArrayObjectfvATI", cstr): *fp_glGetArrayObjectfvATI;
	let cstr = strings::to_c_with_buf("glGetArrayObjectivATI", cstr_buf): *const u8;
	glGetArrayObjectivATI = get_proc_address("glGetArrayObjectivATI", cstr): *fp_glGetArrayObjectivATI;
	let cstr = strings::to_c_with_buf("glGetAttachedObjectsARB", cstr_buf): *const u8;
	glGetAttachedObjectsARB = get_proc_address("glGetAttachedObjectsARB", cstr): *fp_glGetAttachedObjectsARB;
	let cstr = strings::to_c_with_buf("glGetAttachedShaders", cstr_buf): *const u8;
	glGetAttachedShaders = get_proc_address("glGetAttachedShaders", cstr): *fp_glGetAttachedShaders;
	let cstr = strings::to_c_with_buf("glGetAttribLocation", cstr_buf): *const u8;
	glGetAttribLocation = get_proc_address("glGetAttribLocation", cstr): *fp_glGetAttribLocation;
	let cstr = strings::to_c_with_buf("glGetAttribLocationARB", cstr_buf): *const u8;
	glGetAttribLocationARB = get_proc_address("glGetAttribLocationARB", cstr): *fp_glGetAttribLocationARB;
	let cstr = strings::to_c_with_buf("glGetBooleanIndexedvEXT", cstr_buf): *const u8;
	glGetBooleanIndexedvEXT = get_proc_address("glGetBooleanIndexedvEXT", cstr): *fp_glGetBooleanIndexedvEXT;
	let cstr = strings::to_c_with_buf("glGetBooleanv", cstr_buf): *const u8;
	glGetBooleanv = get_proc_address("glGetBooleanv", cstr): *fp_glGetBooleanv;
	let cstr = strings::to_c_with_buf("glGetBufferParameteriv", cstr_buf): *const u8;
	glGetBufferParameteriv = get_proc_address("glGetBufferParameteriv", cstr): *fp_glGetBufferParameteriv;
	let cstr = strings::to_c_with_buf("glGetBufferParameterivARB", cstr_buf): *const u8;
	glGetBufferParameterivARB = get_proc_address("glGetBufferParameterivARB", cstr): *fp_glGetBufferParameterivARB;
	let cstr = strings::to_c_with_buf("glGetBufferParameterui64vNV", cstr_buf): *const u8;
	glGetBufferParameterui64vNV = get_proc_address("glGetBufferParameterui64vNV", cstr): *fp_glGetBufferParameterui64vNV;
	let cstr = strings::to_c_with_buf("glGetBufferPointerv", cstr_buf): *const u8;
	glGetBufferPointerv = get_proc_address("glGetBufferPointerv", cstr): *fp_glGetBufferPointerv;
	let cstr = strings::to_c_with_buf("glGetBufferPointervARB", cstr_buf): *const u8;
	glGetBufferPointervARB = get_proc_address("glGetBufferPointervARB", cstr): *fp_glGetBufferPointervARB;
	let cstr = strings::to_c_with_buf("glGetBufferSubData", cstr_buf): *const u8;
	glGetBufferSubData = get_proc_address("glGetBufferSubData", cstr): *fp_glGetBufferSubData;
	let cstr = strings::to_c_with_buf("glGetBufferSubDataARB", cstr_buf): *const u8;
	glGetBufferSubDataARB = get_proc_address("glGetBufferSubDataARB", cstr): *fp_glGetBufferSubDataARB;
	let cstr = strings::to_c_with_buf("glGetClipPlane", cstr_buf): *const u8;
	glGetClipPlane = get_proc_address("glGetClipPlane", cstr): *fp_glGetClipPlane;
	let cstr = strings::to_c_with_buf("glGetClipPlanefOES", cstr_buf): *const u8;
	glGetClipPlanefOES = get_proc_address("glGetClipPlanefOES", cstr): *fp_glGetClipPlanefOES;
	let cstr = strings::to_c_with_buf("glGetClipPlanexOES", cstr_buf): *const u8;
	glGetClipPlanexOES = get_proc_address("glGetClipPlanexOES", cstr): *fp_glGetClipPlanexOES;
	let cstr = strings::to_c_with_buf("glGetColorTableEXT", cstr_buf): *const u8;
	glGetColorTableEXT = get_proc_address("glGetColorTableEXT", cstr): *fp_glGetColorTableEXT;
	let cstr = strings::to_c_with_buf("glGetColorTableParameterfvEXT", cstr_buf): *const u8;
	glGetColorTableParameterfvEXT = get_proc_address("glGetColorTableParameterfvEXT", cstr): *fp_glGetColorTableParameterfvEXT;
	let cstr = strings::to_c_with_buf("glGetColorTableParameterfvSGI", cstr_buf): *const u8;
	glGetColorTableParameterfvSGI = get_proc_address("glGetColorTableParameterfvSGI", cstr): *fp_glGetColorTableParameterfvSGI;
	let cstr = strings::to_c_with_buf("glGetColorTableParameterivEXT", cstr_buf): *const u8;
	glGetColorTableParameterivEXT = get_proc_address("glGetColorTableParameterivEXT", cstr): *fp_glGetColorTableParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetColorTableParameterivSGI", cstr_buf): *const u8;
	glGetColorTableParameterivSGI = get_proc_address("glGetColorTableParameterivSGI", cstr): *fp_glGetColorTableParameterivSGI;
	let cstr = strings::to_c_with_buf("glGetColorTableSGI", cstr_buf): *const u8;
	glGetColorTableSGI = get_proc_address("glGetColorTableSGI", cstr): *fp_glGetColorTableSGI;
	let cstr = strings::to_c_with_buf("glGetCombinerInputParameterfvNV", cstr_buf): *const u8;
	glGetCombinerInputParameterfvNV = get_proc_address("glGetCombinerInputParameterfvNV", cstr): *fp_glGetCombinerInputParameterfvNV;
	let cstr = strings::to_c_with_buf("glGetCombinerInputParameterivNV", cstr_buf): *const u8;
	glGetCombinerInputParameterivNV = get_proc_address("glGetCombinerInputParameterivNV", cstr): *fp_glGetCombinerInputParameterivNV;
	let cstr = strings::to_c_with_buf("glGetCombinerOutputParameterfvNV", cstr_buf): *const u8;
	glGetCombinerOutputParameterfvNV = get_proc_address("glGetCombinerOutputParameterfvNV", cstr): *fp_glGetCombinerOutputParameterfvNV;
	let cstr = strings::to_c_with_buf("glGetCombinerOutputParameterivNV", cstr_buf): *const u8;
	glGetCombinerOutputParameterivNV = get_proc_address("glGetCombinerOutputParameterivNV", cstr): *fp_glGetCombinerOutputParameterivNV;
	let cstr = strings::to_c_with_buf("glGetCombinerStageParameterfvNV", cstr_buf): *const u8;
	glGetCombinerStageParameterfvNV = get_proc_address("glGetCombinerStageParameterfvNV", cstr): *fp_glGetCombinerStageParameterfvNV;
	let cstr = strings::to_c_with_buf("glGetCommandHeaderNV", cstr_buf): *const u8;
	glGetCommandHeaderNV = get_proc_address("glGetCommandHeaderNV", cstr): *fp_glGetCommandHeaderNV;
	let cstr = strings::to_c_with_buf("glGetCompressedMultiTexImageEXT", cstr_buf): *const u8;
	glGetCompressedMultiTexImageEXT = get_proc_address("glGetCompressedMultiTexImageEXT", cstr): *fp_glGetCompressedMultiTexImageEXT;
	let cstr = strings::to_c_with_buf("glGetCompressedTexImage", cstr_buf): *const u8;
	glGetCompressedTexImage = get_proc_address("glGetCompressedTexImage", cstr): *fp_glGetCompressedTexImage;
	let cstr = strings::to_c_with_buf("glGetCompressedTexImageARB", cstr_buf): *const u8;
	glGetCompressedTexImageARB = get_proc_address("glGetCompressedTexImageARB", cstr): *fp_glGetCompressedTexImageARB;
	let cstr = strings::to_c_with_buf("glGetCompressedTextureImage", cstr_buf): *const u8;
	glGetCompressedTextureImage = get_proc_address("glGetCompressedTextureImage", cstr): *fp_glGetCompressedTextureImage;
	let cstr = strings::to_c_with_buf("glGetCompressedTextureImageEXT", cstr_buf): *const u8;
	glGetCompressedTextureImageEXT = get_proc_address("glGetCompressedTextureImageEXT", cstr): *fp_glGetCompressedTextureImageEXT;
	let cstr = strings::to_c_with_buf("glGetCompressedTextureSubImage", cstr_buf): *const u8;
	glGetCompressedTextureSubImage = get_proc_address("glGetCompressedTextureSubImage", cstr): *fp_glGetCompressedTextureSubImage;
	let cstr = strings::to_c_with_buf("glGetConvolutionFilterEXT", cstr_buf): *const u8;
	glGetConvolutionFilterEXT = get_proc_address("glGetConvolutionFilterEXT", cstr): *fp_glGetConvolutionFilterEXT;
	let cstr = strings::to_c_with_buf("glGetConvolutionParameterfvEXT", cstr_buf): *const u8;
	glGetConvolutionParameterfvEXT = get_proc_address("glGetConvolutionParameterfvEXT", cstr): *fp_glGetConvolutionParameterfvEXT;
	let cstr = strings::to_c_with_buf("glGetConvolutionParameterivEXT", cstr_buf): *const u8;
	glGetConvolutionParameterivEXT = get_proc_address("glGetConvolutionParameterivEXT", cstr): *fp_glGetConvolutionParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetConvolutionParameterxvOES", cstr_buf): *const u8;
	glGetConvolutionParameterxvOES = get_proc_address("glGetConvolutionParameterxvOES", cstr): *fp_glGetConvolutionParameterxvOES;
	let cstr = strings::to_c_with_buf("glGetCoverageModulationTableNV", cstr_buf): *const u8;
	glGetCoverageModulationTableNV = get_proc_address("glGetCoverageModulationTableNV", cstr): *fp_glGetCoverageModulationTableNV;
	let cstr = strings::to_c_with_buf("glGetDebugMessageLog", cstr_buf): *const u8;
	glGetDebugMessageLog = get_proc_address("glGetDebugMessageLog", cstr): *fp_glGetDebugMessageLog;
	let cstr = strings::to_c_with_buf("glGetDebugMessageLogAMD", cstr_buf): *const u8;
	glGetDebugMessageLogAMD = get_proc_address("glGetDebugMessageLogAMD", cstr): *fp_glGetDebugMessageLogAMD;
	let cstr = strings::to_c_with_buf("glGetDebugMessageLogARB", cstr_buf): *const u8;
	glGetDebugMessageLogARB = get_proc_address("glGetDebugMessageLogARB", cstr): *fp_glGetDebugMessageLogARB;
	let cstr = strings::to_c_with_buf("glGetDetailTexFuncSGIS", cstr_buf): *const u8;
	glGetDetailTexFuncSGIS = get_proc_address("glGetDetailTexFuncSGIS", cstr): *fp_glGetDetailTexFuncSGIS;
	let cstr = strings::to_c_with_buf("glGetDoubleIndexedvEXT", cstr_buf): *const u8;
	glGetDoubleIndexedvEXT = get_proc_address("glGetDoubleIndexedvEXT", cstr): *fp_glGetDoubleIndexedvEXT;
	let cstr = strings::to_c_with_buf("glGetDoublei_v", cstr_buf): *const u8;
	glGetDoublei_v = get_proc_address("glGetDoublei_v", cstr): *fp_glGetDoublei_v;
	let cstr = strings::to_c_with_buf("glGetDoublei_vEXT", cstr_buf): *const u8;
	glGetDoublei_vEXT = get_proc_address("glGetDoublei_vEXT", cstr): *fp_glGetDoublei_vEXT;
	let cstr = strings::to_c_with_buf("glGetDoublev", cstr_buf): *const u8;
	glGetDoublev = get_proc_address("glGetDoublev", cstr): *fp_glGetDoublev;
	let cstr = strings::to_c_with_buf("glGetError", cstr_buf): *const u8;
	glGetError = get_proc_address("glGetError", cstr): *fp_glGetError;
	let cstr = strings::to_c_with_buf("glGetFenceivNV", cstr_buf): *const u8;
	glGetFenceivNV = get_proc_address("glGetFenceivNV", cstr): *fp_glGetFenceivNV;
	let cstr = strings::to_c_with_buf("glGetFinalCombinerInputParameterfvNV", cstr_buf): *const u8;
	glGetFinalCombinerInputParameterfvNV = get_proc_address("glGetFinalCombinerInputParameterfvNV", cstr): *fp_glGetFinalCombinerInputParameterfvNV;
	let cstr = strings::to_c_with_buf("glGetFinalCombinerInputParameterivNV", cstr_buf): *const u8;
	glGetFinalCombinerInputParameterivNV = get_proc_address("glGetFinalCombinerInputParameterivNV", cstr): *fp_glGetFinalCombinerInputParameterivNV;
	let cstr = strings::to_c_with_buf("glGetFirstPerfQueryIdINTEL", cstr_buf): *const u8;
	glGetFirstPerfQueryIdINTEL = get_proc_address("glGetFirstPerfQueryIdINTEL", cstr): *fp_glGetFirstPerfQueryIdINTEL;
	let cstr = strings::to_c_with_buf("glGetFixedvOES", cstr_buf): *const u8;
	glGetFixedvOES = get_proc_address("glGetFixedvOES", cstr): *fp_glGetFixedvOES;
	let cstr = strings::to_c_with_buf("glGetFloatIndexedvEXT", cstr_buf): *const u8;
	glGetFloatIndexedvEXT = get_proc_address("glGetFloatIndexedvEXT", cstr): *fp_glGetFloatIndexedvEXT;
	let cstr = strings::to_c_with_buf("glGetFloati_v", cstr_buf): *const u8;
	glGetFloati_v = get_proc_address("glGetFloati_v", cstr): *fp_glGetFloati_v;
	let cstr = strings::to_c_with_buf("glGetFloati_vEXT", cstr_buf): *const u8;
	glGetFloati_vEXT = get_proc_address("glGetFloati_vEXT", cstr): *fp_glGetFloati_vEXT;
	let cstr = strings::to_c_with_buf("glGetFloatv", cstr_buf): *const u8;
	glGetFloatv = get_proc_address("glGetFloatv", cstr): *fp_glGetFloatv;
	let cstr = strings::to_c_with_buf("glGetFogFuncSGIS", cstr_buf): *const u8;
	glGetFogFuncSGIS = get_proc_address("glGetFogFuncSGIS", cstr): *fp_glGetFogFuncSGIS;
	let cstr = strings::to_c_with_buf("glGetFragDataIndex", cstr_buf): *const u8;
	glGetFragDataIndex = get_proc_address("glGetFragDataIndex", cstr): *fp_glGetFragDataIndex;
	let cstr = strings::to_c_with_buf("glGetFragDataLocationEXT", cstr_buf): *const u8;
	glGetFragDataLocationEXT = get_proc_address("glGetFragDataLocationEXT", cstr): *fp_glGetFragDataLocationEXT;
	let cstr = strings::to_c_with_buf("glGetFragmentLightfvSGIX", cstr_buf): *const u8;
	glGetFragmentLightfvSGIX = get_proc_address("glGetFragmentLightfvSGIX", cstr): *fp_glGetFragmentLightfvSGIX;
	let cstr = strings::to_c_with_buf("glGetFragmentLightivSGIX", cstr_buf): *const u8;
	glGetFragmentLightivSGIX = get_proc_address("glGetFragmentLightivSGIX", cstr): *fp_glGetFragmentLightivSGIX;
	let cstr = strings::to_c_with_buf("glGetFragmentMaterialfvSGIX", cstr_buf): *const u8;
	glGetFragmentMaterialfvSGIX = get_proc_address("glGetFragmentMaterialfvSGIX", cstr): *fp_glGetFragmentMaterialfvSGIX;
	let cstr = strings::to_c_with_buf("glGetFragmentMaterialivSGIX", cstr_buf): *const u8;
	glGetFragmentMaterialivSGIX = get_proc_address("glGetFragmentMaterialivSGIX", cstr): *fp_glGetFragmentMaterialivSGIX;
	let cstr = strings::to_c_with_buf("glGetFramebufferAttachmentParameteriv", cstr_buf): *const u8;
	glGetFramebufferAttachmentParameteriv = get_proc_address("glGetFramebufferAttachmentParameteriv", cstr): *fp_glGetFramebufferAttachmentParameteriv;
	let cstr = strings::to_c_with_buf("glGetFramebufferAttachmentParameterivEXT", cstr_buf): *const u8;
	glGetFramebufferAttachmentParameterivEXT = get_proc_address("glGetFramebufferAttachmentParameterivEXT", cstr): *fp_glGetFramebufferAttachmentParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetFramebufferParameterfvAMD", cstr_buf): *const u8;
	glGetFramebufferParameterfvAMD = get_proc_address("glGetFramebufferParameterfvAMD", cstr): *fp_glGetFramebufferParameterfvAMD;
	let cstr = strings::to_c_with_buf("glGetFramebufferParameteriv", cstr_buf): *const u8;
	glGetFramebufferParameteriv = get_proc_address("glGetFramebufferParameteriv", cstr): *fp_glGetFramebufferParameteriv;
	let cstr = strings::to_c_with_buf("glGetFramebufferParameterivEXT", cstr_buf): *const u8;
	glGetFramebufferParameterivEXT = get_proc_address("glGetFramebufferParameterivEXT", cstr): *fp_glGetFramebufferParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetFramebufferParameterivMESA", cstr_buf): *const u8;
	glGetFramebufferParameterivMESA = get_proc_address("glGetFramebufferParameterivMESA", cstr): *fp_glGetFramebufferParameterivMESA;
	let cstr = strings::to_c_with_buf("glGetGraphicsResetStatus", cstr_buf): *const u8;
	glGetGraphicsResetStatus = get_proc_address("glGetGraphicsResetStatus", cstr): *fp_glGetGraphicsResetStatus;
	let cstr = strings::to_c_with_buf("glGetGraphicsResetStatusARB", cstr_buf): *const u8;
	glGetGraphicsResetStatusARB = get_proc_address("glGetGraphicsResetStatusARB", cstr): *fp_glGetGraphicsResetStatusARB;
	let cstr = strings::to_c_with_buf("glGetHandleARB", cstr_buf): *const u8;
	glGetHandleARB = get_proc_address("glGetHandleARB", cstr): *fp_glGetHandleARB;
	let cstr = strings::to_c_with_buf("glGetHistogramEXT", cstr_buf): *const u8;
	glGetHistogramEXT = get_proc_address("glGetHistogramEXT", cstr): *fp_glGetHistogramEXT;
	let cstr = strings::to_c_with_buf("glGetHistogramParameterfvEXT", cstr_buf): *const u8;
	glGetHistogramParameterfvEXT = get_proc_address("glGetHistogramParameterfvEXT", cstr): *fp_glGetHistogramParameterfvEXT;
	let cstr = strings::to_c_with_buf("glGetHistogramParameterivEXT", cstr_buf): *const u8;
	glGetHistogramParameterivEXT = get_proc_address("glGetHistogramParameterivEXT", cstr): *fp_glGetHistogramParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetHistogramParameterxvOES", cstr_buf): *const u8;
	glGetHistogramParameterxvOES = get_proc_address("glGetHistogramParameterxvOES", cstr): *fp_glGetHistogramParameterxvOES;
	let cstr = strings::to_c_with_buf("glGetImageHandleARB", cstr_buf): *const u8;
	glGetImageHandleARB = get_proc_address("glGetImageHandleARB", cstr): *fp_glGetImageHandleARB;
	let cstr = strings::to_c_with_buf("glGetImageHandleNV", cstr_buf): *const u8;
	glGetImageHandleNV = get_proc_address("glGetImageHandleNV", cstr): *fp_glGetImageHandleNV;
	let cstr = strings::to_c_with_buf("glGetImageTransformParameterfvHP", cstr_buf): *const u8;
	glGetImageTransformParameterfvHP = get_proc_address("glGetImageTransformParameterfvHP", cstr): *fp_glGetImageTransformParameterfvHP;
	let cstr = strings::to_c_with_buf("glGetImageTransformParameterivHP", cstr_buf): *const u8;
	glGetImageTransformParameterivHP = get_proc_address("glGetImageTransformParameterivHP", cstr): *fp_glGetImageTransformParameterivHP;
	let cstr = strings::to_c_with_buf("glGetInfoLogARB", cstr_buf): *const u8;
	glGetInfoLogARB = get_proc_address("glGetInfoLogARB", cstr): *fp_glGetInfoLogARB;
	let cstr = strings::to_c_with_buf("glGetInstrumentsSGIX", cstr_buf): *const u8;
	glGetInstrumentsSGIX = get_proc_address("glGetInstrumentsSGIX", cstr): *fp_glGetInstrumentsSGIX;
	let cstr = strings::to_c_with_buf("glGetInteger64v", cstr_buf): *const u8;
	glGetInteger64v = get_proc_address("glGetInteger64v", cstr): *fp_glGetInteger64v;
	let cstr = strings::to_c_with_buf("glGetIntegerIndexedvEXT", cstr_buf): *const u8;
	glGetIntegerIndexedvEXT = get_proc_address("glGetIntegerIndexedvEXT", cstr): *fp_glGetIntegerIndexedvEXT;
	let cstr = strings::to_c_with_buf("glGetIntegeri_v", cstr_buf): *const u8;
	glGetIntegeri_v = get_proc_address("glGetIntegeri_v", cstr): *fp_glGetIntegeri_v;
	let cstr = strings::to_c_with_buf("glGetIntegerui64i_vNV", cstr_buf): *const u8;
	glGetIntegerui64i_vNV = get_proc_address("glGetIntegerui64i_vNV", cstr): *fp_glGetIntegerui64i_vNV;
	let cstr = strings::to_c_with_buf("glGetIntegerui64vNV", cstr_buf): *const u8;
	glGetIntegerui64vNV = get_proc_address("glGetIntegerui64vNV", cstr): *fp_glGetIntegerui64vNV;
	let cstr = strings::to_c_with_buf("glGetIntegerv", cstr_buf): *const u8;
	glGetIntegerv = get_proc_address("glGetIntegerv", cstr): *fp_glGetIntegerv;
	let cstr = strings::to_c_with_buf("glGetInternalformatSampleivNV", cstr_buf): *const u8;
	glGetInternalformatSampleivNV = get_proc_address("glGetInternalformatSampleivNV", cstr): *fp_glGetInternalformatSampleivNV;
	let cstr = strings::to_c_with_buf("glGetInternalformati64v", cstr_buf): *const u8;
	glGetInternalformati64v = get_proc_address("glGetInternalformati64v", cstr): *fp_glGetInternalformati64v;
	let cstr = strings::to_c_with_buf("glGetInternalformativ", cstr_buf): *const u8;
	glGetInternalformativ = get_proc_address("glGetInternalformativ", cstr): *fp_glGetInternalformativ;
	let cstr = strings::to_c_with_buf("glGetInvariantBooleanvEXT", cstr_buf): *const u8;
	glGetInvariantBooleanvEXT = get_proc_address("glGetInvariantBooleanvEXT", cstr): *fp_glGetInvariantBooleanvEXT;
	let cstr = strings::to_c_with_buf("glGetInvariantFloatvEXT", cstr_buf): *const u8;
	glGetInvariantFloatvEXT = get_proc_address("glGetInvariantFloatvEXT", cstr): *fp_glGetInvariantFloatvEXT;
	let cstr = strings::to_c_with_buf("glGetInvariantIntegervEXT", cstr_buf): *const u8;
	glGetInvariantIntegervEXT = get_proc_address("glGetInvariantIntegervEXT", cstr): *fp_glGetInvariantIntegervEXT;
	let cstr = strings::to_c_with_buf("glGetLightfv", cstr_buf): *const u8;
	glGetLightfv = get_proc_address("glGetLightfv", cstr): *fp_glGetLightfv;
	let cstr = strings::to_c_with_buf("glGetLightiv", cstr_buf): *const u8;
	glGetLightiv = get_proc_address("glGetLightiv", cstr): *fp_glGetLightiv;
	let cstr = strings::to_c_with_buf("glGetLightxOES", cstr_buf): *const u8;
	glGetLightxOES = get_proc_address("glGetLightxOES", cstr): *fp_glGetLightxOES;
	let cstr = strings::to_c_with_buf("glGetListParameterfvSGIX", cstr_buf): *const u8;
	glGetListParameterfvSGIX = get_proc_address("glGetListParameterfvSGIX", cstr): *fp_glGetListParameterfvSGIX;
	let cstr = strings::to_c_with_buf("glGetListParameterivSGIX", cstr_buf): *const u8;
	glGetListParameterivSGIX = get_proc_address("glGetListParameterivSGIX", cstr): *fp_glGetListParameterivSGIX;
	let cstr = strings::to_c_with_buf("glGetLocalConstantBooleanvEXT", cstr_buf): *const u8;
	glGetLocalConstantBooleanvEXT = get_proc_address("glGetLocalConstantBooleanvEXT", cstr): *fp_glGetLocalConstantBooleanvEXT;
	let cstr = strings::to_c_with_buf("glGetLocalConstantFloatvEXT", cstr_buf): *const u8;
	glGetLocalConstantFloatvEXT = get_proc_address("glGetLocalConstantFloatvEXT", cstr): *fp_glGetLocalConstantFloatvEXT;
	let cstr = strings::to_c_with_buf("glGetLocalConstantIntegervEXT", cstr_buf): *const u8;
	glGetLocalConstantIntegervEXT = get_proc_address("glGetLocalConstantIntegervEXT", cstr): *fp_glGetLocalConstantIntegervEXT;
	let cstr = strings::to_c_with_buf("glGetMapAttribParameterfvNV", cstr_buf): *const u8;
	glGetMapAttribParameterfvNV = get_proc_address("glGetMapAttribParameterfvNV", cstr): *fp_glGetMapAttribParameterfvNV;
	let cstr = strings::to_c_with_buf("glGetMapAttribParameterivNV", cstr_buf): *const u8;
	glGetMapAttribParameterivNV = get_proc_address("glGetMapAttribParameterivNV", cstr): *fp_glGetMapAttribParameterivNV;
	let cstr = strings::to_c_with_buf("glGetMapControlPointsNV", cstr_buf): *const u8;
	glGetMapControlPointsNV = get_proc_address("glGetMapControlPointsNV", cstr): *fp_glGetMapControlPointsNV;
	let cstr = strings::to_c_with_buf("glGetMapParameterfvNV", cstr_buf): *const u8;
	glGetMapParameterfvNV = get_proc_address("glGetMapParameterfvNV", cstr): *fp_glGetMapParameterfvNV;
	let cstr = strings::to_c_with_buf("glGetMapParameterivNV", cstr_buf): *const u8;
	glGetMapParameterivNV = get_proc_address("glGetMapParameterivNV", cstr): *fp_glGetMapParameterivNV;
	let cstr = strings::to_c_with_buf("glGetMapdv", cstr_buf): *const u8;
	glGetMapdv = get_proc_address("glGetMapdv", cstr): *fp_glGetMapdv;
	let cstr = strings::to_c_with_buf("glGetMapfv", cstr_buf): *const u8;
	glGetMapfv = get_proc_address("glGetMapfv", cstr): *fp_glGetMapfv;
	let cstr = strings::to_c_with_buf("glGetMapiv", cstr_buf): *const u8;
	glGetMapiv = get_proc_address("glGetMapiv", cstr): *fp_glGetMapiv;
	let cstr = strings::to_c_with_buf("glGetMapxvOES", cstr_buf): *const u8;
	glGetMapxvOES = get_proc_address("glGetMapxvOES", cstr): *fp_glGetMapxvOES;
	let cstr = strings::to_c_with_buf("glGetMaterialfv", cstr_buf): *const u8;
	glGetMaterialfv = get_proc_address("glGetMaterialfv", cstr): *fp_glGetMaterialfv;
	let cstr = strings::to_c_with_buf("glGetMaterialiv", cstr_buf): *const u8;
	glGetMaterialiv = get_proc_address("glGetMaterialiv", cstr): *fp_glGetMaterialiv;
	let cstr = strings::to_c_with_buf("glGetMaterialxOES", cstr_buf): *const u8;
	glGetMaterialxOES = get_proc_address("glGetMaterialxOES", cstr): *fp_glGetMaterialxOES;
	let cstr = strings::to_c_with_buf("glGetMemoryObjectDetachedResourcesuivNV", cstr_buf): *const u8;
	glGetMemoryObjectDetachedResourcesuivNV = get_proc_address("glGetMemoryObjectDetachedResourcesuivNV", cstr): *fp_glGetMemoryObjectDetachedResourcesuivNV;
	let cstr = strings::to_c_with_buf("glGetMemoryObjectParameterivEXT", cstr_buf): *const u8;
	glGetMemoryObjectParameterivEXT = get_proc_address("glGetMemoryObjectParameterivEXT", cstr): *fp_glGetMemoryObjectParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetMinmaxEXT", cstr_buf): *const u8;
	glGetMinmaxEXT = get_proc_address("glGetMinmaxEXT", cstr): *fp_glGetMinmaxEXT;
	let cstr = strings::to_c_with_buf("glGetMinmaxParameterfvEXT", cstr_buf): *const u8;
	glGetMinmaxParameterfvEXT = get_proc_address("glGetMinmaxParameterfvEXT", cstr): *fp_glGetMinmaxParameterfvEXT;
	let cstr = strings::to_c_with_buf("glGetMinmaxParameterivEXT", cstr_buf): *const u8;
	glGetMinmaxParameterivEXT = get_proc_address("glGetMinmaxParameterivEXT", cstr): *fp_glGetMinmaxParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetMultiTexEnvfvEXT", cstr_buf): *const u8;
	glGetMultiTexEnvfvEXT = get_proc_address("glGetMultiTexEnvfvEXT", cstr): *fp_glGetMultiTexEnvfvEXT;
	let cstr = strings::to_c_with_buf("glGetMultiTexEnvivEXT", cstr_buf): *const u8;
	glGetMultiTexEnvivEXT = get_proc_address("glGetMultiTexEnvivEXT", cstr): *fp_glGetMultiTexEnvivEXT;
	let cstr = strings::to_c_with_buf("glGetMultiTexGendvEXT", cstr_buf): *const u8;
	glGetMultiTexGendvEXT = get_proc_address("glGetMultiTexGendvEXT", cstr): *fp_glGetMultiTexGendvEXT;
	let cstr = strings::to_c_with_buf("glGetMultiTexGenfvEXT", cstr_buf): *const u8;
	glGetMultiTexGenfvEXT = get_proc_address("glGetMultiTexGenfvEXT", cstr): *fp_glGetMultiTexGenfvEXT;
	let cstr = strings::to_c_with_buf("glGetMultiTexGenivEXT", cstr_buf): *const u8;
	glGetMultiTexGenivEXT = get_proc_address("glGetMultiTexGenivEXT", cstr): *fp_glGetMultiTexGenivEXT;
	let cstr = strings::to_c_with_buf("glGetMultiTexImageEXT", cstr_buf): *const u8;
	glGetMultiTexImageEXT = get_proc_address("glGetMultiTexImageEXT", cstr): *fp_glGetMultiTexImageEXT;
	let cstr = strings::to_c_with_buf("glGetMultiTexLevelParameterfvEXT", cstr_buf): *const u8;
	glGetMultiTexLevelParameterfvEXT = get_proc_address("glGetMultiTexLevelParameterfvEXT", cstr): *fp_glGetMultiTexLevelParameterfvEXT;
	let cstr = strings::to_c_with_buf("glGetMultiTexLevelParameterivEXT", cstr_buf): *const u8;
	glGetMultiTexLevelParameterivEXT = get_proc_address("glGetMultiTexLevelParameterivEXT", cstr): *fp_glGetMultiTexLevelParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetMultiTexParameterIivEXT", cstr_buf): *const u8;
	glGetMultiTexParameterIivEXT = get_proc_address("glGetMultiTexParameterIivEXT", cstr): *fp_glGetMultiTexParameterIivEXT;
	let cstr = strings::to_c_with_buf("glGetMultiTexParameterIuivEXT", cstr_buf): *const u8;
	glGetMultiTexParameterIuivEXT = get_proc_address("glGetMultiTexParameterIuivEXT", cstr): *fp_glGetMultiTexParameterIuivEXT;
	let cstr = strings::to_c_with_buf("glGetMultiTexParameterfvEXT", cstr_buf): *const u8;
	glGetMultiTexParameterfvEXT = get_proc_address("glGetMultiTexParameterfvEXT", cstr): *fp_glGetMultiTexParameterfvEXT;
	let cstr = strings::to_c_with_buf("glGetMultiTexParameterivEXT", cstr_buf): *const u8;
	glGetMultiTexParameterivEXT = get_proc_address("glGetMultiTexParameterivEXT", cstr): *fp_glGetMultiTexParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetMultisamplefv", cstr_buf): *const u8;
	glGetMultisamplefv = get_proc_address("glGetMultisamplefv", cstr): *fp_glGetMultisamplefv;
	let cstr = strings::to_c_with_buf("glGetMultisamplefvNV", cstr_buf): *const u8;
	glGetMultisamplefvNV = get_proc_address("glGetMultisamplefvNV", cstr): *fp_glGetMultisamplefvNV;
	let cstr = strings::to_c_with_buf("glGetNamedBufferParameteri64v", cstr_buf): *const u8;
	glGetNamedBufferParameteri64v = get_proc_address("glGetNamedBufferParameteri64v", cstr): *fp_glGetNamedBufferParameteri64v;
	let cstr = strings::to_c_with_buf("glGetNamedBufferParameteriv", cstr_buf): *const u8;
	glGetNamedBufferParameteriv = get_proc_address("glGetNamedBufferParameteriv", cstr): *fp_glGetNamedBufferParameteriv;
	let cstr = strings::to_c_with_buf("glGetNamedBufferParameterivEXT", cstr_buf): *const u8;
	glGetNamedBufferParameterivEXT = get_proc_address("glGetNamedBufferParameterivEXT", cstr): *fp_glGetNamedBufferParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetNamedBufferParameterui64vNV", cstr_buf): *const u8;
	glGetNamedBufferParameterui64vNV = get_proc_address("glGetNamedBufferParameterui64vNV", cstr): *fp_glGetNamedBufferParameterui64vNV;
	let cstr = strings::to_c_with_buf("glGetNamedBufferPointerv", cstr_buf): *const u8;
	glGetNamedBufferPointerv = get_proc_address("glGetNamedBufferPointerv", cstr): *fp_glGetNamedBufferPointerv;
	let cstr = strings::to_c_with_buf("glGetNamedBufferPointervEXT", cstr_buf): *const u8;
	glGetNamedBufferPointervEXT = get_proc_address("glGetNamedBufferPointervEXT", cstr): *fp_glGetNamedBufferPointervEXT;
	let cstr = strings::to_c_with_buf("glGetNamedBufferSubData", cstr_buf): *const u8;
	glGetNamedBufferSubData = get_proc_address("glGetNamedBufferSubData", cstr): *fp_glGetNamedBufferSubData;
	let cstr = strings::to_c_with_buf("glGetNamedBufferSubDataEXT", cstr_buf): *const u8;
	glGetNamedBufferSubDataEXT = get_proc_address("glGetNamedBufferSubDataEXT", cstr): *fp_glGetNamedBufferSubDataEXT;
	let cstr = strings::to_c_with_buf("glGetNamedFramebufferAttachmentParameteriv", cstr_buf): *const u8;
	glGetNamedFramebufferAttachmentParameteriv = get_proc_address("glGetNamedFramebufferAttachmentParameteriv", cstr): *fp_glGetNamedFramebufferAttachmentParameteriv;
	let cstr = strings::to_c_with_buf("glGetNamedFramebufferAttachmentParameterivEXT", cstr_buf): *const u8;
	glGetNamedFramebufferAttachmentParameterivEXT = get_proc_address("glGetNamedFramebufferAttachmentParameterivEXT", cstr): *fp_glGetNamedFramebufferAttachmentParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetNamedFramebufferParameterfvAMD", cstr_buf): *const u8;
	glGetNamedFramebufferParameterfvAMD = get_proc_address("glGetNamedFramebufferParameterfvAMD", cstr): *fp_glGetNamedFramebufferParameterfvAMD;
	let cstr = strings::to_c_with_buf("glGetNamedFramebufferParameteriv", cstr_buf): *const u8;
	glGetNamedFramebufferParameteriv = get_proc_address("glGetNamedFramebufferParameteriv", cstr): *fp_glGetNamedFramebufferParameteriv;
	let cstr = strings::to_c_with_buf("glGetNamedFramebufferParameterivEXT", cstr_buf): *const u8;
	glGetNamedFramebufferParameterivEXT = get_proc_address("glGetNamedFramebufferParameterivEXT", cstr): *fp_glGetNamedFramebufferParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetNamedProgramLocalParameterIivEXT", cstr_buf): *const u8;
	glGetNamedProgramLocalParameterIivEXT = get_proc_address("glGetNamedProgramLocalParameterIivEXT", cstr): *fp_glGetNamedProgramLocalParameterIivEXT;
	let cstr = strings::to_c_with_buf("glGetNamedProgramLocalParameterIuivEXT", cstr_buf): *const u8;
	glGetNamedProgramLocalParameterIuivEXT = get_proc_address("glGetNamedProgramLocalParameterIuivEXT", cstr): *fp_glGetNamedProgramLocalParameterIuivEXT;
	let cstr = strings::to_c_with_buf("glGetNamedProgramLocalParameterdvEXT", cstr_buf): *const u8;
	glGetNamedProgramLocalParameterdvEXT = get_proc_address("glGetNamedProgramLocalParameterdvEXT", cstr): *fp_glGetNamedProgramLocalParameterdvEXT;
	let cstr = strings::to_c_with_buf("glGetNamedProgramLocalParameterfvEXT", cstr_buf): *const u8;
	glGetNamedProgramLocalParameterfvEXT = get_proc_address("glGetNamedProgramLocalParameterfvEXT", cstr): *fp_glGetNamedProgramLocalParameterfvEXT;
	let cstr = strings::to_c_with_buf("glGetNamedProgramStringEXT", cstr_buf): *const u8;
	glGetNamedProgramStringEXT = get_proc_address("glGetNamedProgramStringEXT", cstr): *fp_glGetNamedProgramStringEXT;
	let cstr = strings::to_c_with_buf("glGetNamedProgramivEXT", cstr_buf): *const u8;
	glGetNamedProgramivEXT = get_proc_address("glGetNamedProgramivEXT", cstr): *fp_glGetNamedProgramivEXT;
	let cstr = strings::to_c_with_buf("glGetNamedRenderbufferParameteriv", cstr_buf): *const u8;
	glGetNamedRenderbufferParameteriv = get_proc_address("glGetNamedRenderbufferParameteriv", cstr): *fp_glGetNamedRenderbufferParameteriv;
	let cstr = strings::to_c_with_buf("glGetNamedRenderbufferParameterivEXT", cstr_buf): *const u8;
	glGetNamedRenderbufferParameterivEXT = get_proc_address("glGetNamedRenderbufferParameterivEXT", cstr): *fp_glGetNamedRenderbufferParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetNamedStringARB", cstr_buf): *const u8;
	glGetNamedStringARB = get_proc_address("glGetNamedStringARB", cstr): *fp_glGetNamedStringARB;
	let cstr = strings::to_c_with_buf("glGetNamedStringivARB", cstr_buf): *const u8;
	glGetNamedStringivARB = get_proc_address("glGetNamedStringivARB", cstr): *fp_glGetNamedStringivARB;
	let cstr = strings::to_c_with_buf("glGetNextPerfQueryIdINTEL", cstr_buf): *const u8;
	glGetNextPerfQueryIdINTEL = get_proc_address("glGetNextPerfQueryIdINTEL", cstr): *fp_glGetNextPerfQueryIdINTEL;
	let cstr = strings::to_c_with_buf("glGetObjectBufferfvATI", cstr_buf): *const u8;
	glGetObjectBufferfvATI = get_proc_address("glGetObjectBufferfvATI", cstr): *fp_glGetObjectBufferfvATI;
	let cstr = strings::to_c_with_buf("glGetObjectBufferivATI", cstr_buf): *const u8;
	glGetObjectBufferivATI = get_proc_address("glGetObjectBufferivATI", cstr): *fp_glGetObjectBufferivATI;
	let cstr = strings::to_c_with_buf("glGetObjectLabel", cstr_buf): *const u8;
	glGetObjectLabel = get_proc_address("glGetObjectLabel", cstr): *fp_glGetObjectLabel;
	let cstr = strings::to_c_with_buf("glGetObjectLabelEXT", cstr_buf): *const u8;
	glGetObjectLabelEXT = get_proc_address("glGetObjectLabelEXT", cstr): *fp_glGetObjectLabelEXT;
	let cstr = strings::to_c_with_buf("glGetObjectParameterfvARB", cstr_buf): *const u8;
	glGetObjectParameterfvARB = get_proc_address("glGetObjectParameterfvARB", cstr): *fp_glGetObjectParameterfvARB;
	let cstr = strings::to_c_with_buf("glGetObjectParameterivAPPLE", cstr_buf): *const u8;
	glGetObjectParameterivAPPLE = get_proc_address("glGetObjectParameterivAPPLE", cstr): *fp_glGetObjectParameterivAPPLE;
	let cstr = strings::to_c_with_buf("glGetObjectParameterivARB", cstr_buf): *const u8;
	glGetObjectParameterivARB = get_proc_address("glGetObjectParameterivARB", cstr): *fp_glGetObjectParameterivARB;
	let cstr = strings::to_c_with_buf("glGetObjectPtrLabel", cstr_buf): *const u8;
	glGetObjectPtrLabel = get_proc_address("glGetObjectPtrLabel", cstr): *fp_glGetObjectPtrLabel;
	let cstr = strings::to_c_with_buf("glGetOcclusionQueryivNV", cstr_buf): *const u8;
	glGetOcclusionQueryivNV = get_proc_address("glGetOcclusionQueryivNV", cstr): *fp_glGetOcclusionQueryivNV;
	let cstr = strings::to_c_with_buf("glGetOcclusionQueryuivNV", cstr_buf): *const u8;
	glGetOcclusionQueryuivNV = get_proc_address("glGetOcclusionQueryuivNV", cstr): *fp_glGetOcclusionQueryuivNV;
	let cstr = strings::to_c_with_buf("glGetPathCommandsNV", cstr_buf): *const u8;
	glGetPathCommandsNV = get_proc_address("glGetPathCommandsNV", cstr): *fp_glGetPathCommandsNV;
	let cstr = strings::to_c_with_buf("glGetPathCoordsNV", cstr_buf): *const u8;
	glGetPathCoordsNV = get_proc_address("glGetPathCoordsNV", cstr): *fp_glGetPathCoordsNV;
	let cstr = strings::to_c_with_buf("glGetPathDashArrayNV", cstr_buf): *const u8;
	glGetPathDashArrayNV = get_proc_address("glGetPathDashArrayNV", cstr): *fp_glGetPathDashArrayNV;
	let cstr = strings::to_c_with_buf("glGetPathLengthNV", cstr_buf): *const u8;
	glGetPathLengthNV = get_proc_address("glGetPathLengthNV", cstr): *fp_glGetPathLengthNV;
	let cstr = strings::to_c_with_buf("glGetPathMetricRangeNV", cstr_buf): *const u8;
	glGetPathMetricRangeNV = get_proc_address("glGetPathMetricRangeNV", cstr): *fp_glGetPathMetricRangeNV;
	let cstr = strings::to_c_with_buf("glGetPathMetricsNV", cstr_buf): *const u8;
	glGetPathMetricsNV = get_proc_address("glGetPathMetricsNV", cstr): *fp_glGetPathMetricsNV;
	let cstr = strings::to_c_with_buf("glGetPathParameterfvNV", cstr_buf): *const u8;
	glGetPathParameterfvNV = get_proc_address("glGetPathParameterfvNV", cstr): *fp_glGetPathParameterfvNV;
	let cstr = strings::to_c_with_buf("glGetPathParameterivNV", cstr_buf): *const u8;
	glGetPathParameterivNV = get_proc_address("glGetPathParameterivNV", cstr): *fp_glGetPathParameterivNV;
	let cstr = strings::to_c_with_buf("glGetPathSpacingNV", cstr_buf): *const u8;
	glGetPathSpacingNV = get_proc_address("glGetPathSpacingNV", cstr): *fp_glGetPathSpacingNV;
	let cstr = strings::to_c_with_buf("glGetPerfCounterInfoINTEL", cstr_buf): *const u8;
	glGetPerfCounterInfoINTEL = get_proc_address("glGetPerfCounterInfoINTEL", cstr): *fp_glGetPerfCounterInfoINTEL;
	let cstr = strings::to_c_with_buf("glGetPerfMonitorCounterDataAMD", cstr_buf): *const u8;
	glGetPerfMonitorCounterDataAMD = get_proc_address("glGetPerfMonitorCounterDataAMD", cstr): *fp_glGetPerfMonitorCounterDataAMD;
	let cstr = strings::to_c_with_buf("glGetPerfMonitorCounterInfoAMD", cstr_buf): *const u8;
	glGetPerfMonitorCounterInfoAMD = get_proc_address("glGetPerfMonitorCounterInfoAMD", cstr): *fp_glGetPerfMonitorCounterInfoAMD;
	let cstr = strings::to_c_with_buf("glGetPerfMonitorCounterStringAMD", cstr_buf): *const u8;
	glGetPerfMonitorCounterStringAMD = get_proc_address("glGetPerfMonitorCounterStringAMD", cstr): *fp_glGetPerfMonitorCounterStringAMD;
	let cstr = strings::to_c_with_buf("glGetPerfMonitorCountersAMD", cstr_buf): *const u8;
	glGetPerfMonitorCountersAMD = get_proc_address("glGetPerfMonitorCountersAMD", cstr): *fp_glGetPerfMonitorCountersAMD;
	let cstr = strings::to_c_with_buf("glGetPerfMonitorGroupStringAMD", cstr_buf): *const u8;
	glGetPerfMonitorGroupStringAMD = get_proc_address("glGetPerfMonitorGroupStringAMD", cstr): *fp_glGetPerfMonitorGroupStringAMD;
	let cstr = strings::to_c_with_buf("glGetPerfMonitorGroupsAMD", cstr_buf): *const u8;
	glGetPerfMonitorGroupsAMD = get_proc_address("glGetPerfMonitorGroupsAMD", cstr): *fp_glGetPerfMonitorGroupsAMD;
	let cstr = strings::to_c_with_buf("glGetPerfQueryDataINTEL", cstr_buf): *const u8;
	glGetPerfQueryDataINTEL = get_proc_address("glGetPerfQueryDataINTEL", cstr): *fp_glGetPerfQueryDataINTEL;
	let cstr = strings::to_c_with_buf("glGetPerfQueryIdByNameINTEL", cstr_buf): *const u8;
	glGetPerfQueryIdByNameINTEL = get_proc_address("glGetPerfQueryIdByNameINTEL", cstr): *fp_glGetPerfQueryIdByNameINTEL;
	let cstr = strings::to_c_with_buf("glGetPerfQueryInfoINTEL", cstr_buf): *const u8;
	glGetPerfQueryInfoINTEL = get_proc_address("glGetPerfQueryInfoINTEL", cstr): *fp_glGetPerfQueryInfoINTEL;
	let cstr = strings::to_c_with_buf("glGetPixelMapfv", cstr_buf): *const u8;
	glGetPixelMapfv = get_proc_address("glGetPixelMapfv", cstr): *fp_glGetPixelMapfv;
	let cstr = strings::to_c_with_buf("glGetPixelMapuiv", cstr_buf): *const u8;
	glGetPixelMapuiv = get_proc_address("glGetPixelMapuiv", cstr): *fp_glGetPixelMapuiv;
	let cstr = strings::to_c_with_buf("glGetPixelMapusv", cstr_buf): *const u8;
	glGetPixelMapusv = get_proc_address("glGetPixelMapusv", cstr): *fp_glGetPixelMapusv;
	let cstr = strings::to_c_with_buf("glGetPixelMapxv", cstr_buf): *const u8;
	glGetPixelMapxv = get_proc_address("glGetPixelMapxv", cstr): *fp_glGetPixelMapxv;
	let cstr = strings::to_c_with_buf("glGetPixelTexGenParameterfvSGIS", cstr_buf): *const u8;
	glGetPixelTexGenParameterfvSGIS = get_proc_address("glGetPixelTexGenParameterfvSGIS", cstr): *fp_glGetPixelTexGenParameterfvSGIS;
	let cstr = strings::to_c_with_buf("glGetPixelTexGenParameterivSGIS", cstr_buf): *const u8;
	glGetPixelTexGenParameterivSGIS = get_proc_address("glGetPixelTexGenParameterivSGIS", cstr): *fp_glGetPixelTexGenParameterivSGIS;
	let cstr = strings::to_c_with_buf("glGetPixelTransformParameterfvEXT", cstr_buf): *const u8;
	glGetPixelTransformParameterfvEXT = get_proc_address("glGetPixelTransformParameterfvEXT", cstr): *fp_glGetPixelTransformParameterfvEXT;
	let cstr = strings::to_c_with_buf("glGetPixelTransformParameterivEXT", cstr_buf): *const u8;
	glGetPixelTransformParameterivEXT = get_proc_address("glGetPixelTransformParameterivEXT", cstr): *fp_glGetPixelTransformParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetPointerIndexedvEXT", cstr_buf): *const u8;
	glGetPointerIndexedvEXT = get_proc_address("glGetPointerIndexedvEXT", cstr): *fp_glGetPointerIndexedvEXT;
	let cstr = strings::to_c_with_buf("glGetPointeri_vEXT", cstr_buf): *const u8;
	glGetPointeri_vEXT = get_proc_address("glGetPointeri_vEXT", cstr): *fp_glGetPointeri_vEXT;
	let cstr = strings::to_c_with_buf("glGetPointerv", cstr_buf): *const u8;
	glGetPointerv = get_proc_address("glGetPointerv", cstr): *fp_glGetPointerv;
	let cstr = strings::to_c_with_buf("glGetPointervEXT", cstr_buf): *const u8;
	glGetPointervEXT = get_proc_address("glGetPointervEXT", cstr): *fp_glGetPointervEXT;
	let cstr = strings::to_c_with_buf("glGetPolygonStipple", cstr_buf): *const u8;
	glGetPolygonStipple = get_proc_address("glGetPolygonStipple", cstr): *fp_glGetPolygonStipple;
	let cstr = strings::to_c_with_buf("glGetProgramBinary", cstr_buf): *const u8;
	glGetProgramBinary = get_proc_address("glGetProgramBinary", cstr): *fp_glGetProgramBinary;
	let cstr = strings::to_c_with_buf("glGetProgramEnvParameterIivNV", cstr_buf): *const u8;
	glGetProgramEnvParameterIivNV = get_proc_address("glGetProgramEnvParameterIivNV", cstr): *fp_glGetProgramEnvParameterIivNV;
	let cstr = strings::to_c_with_buf("glGetProgramEnvParameterIuivNV", cstr_buf): *const u8;
	glGetProgramEnvParameterIuivNV = get_proc_address("glGetProgramEnvParameterIuivNV", cstr): *fp_glGetProgramEnvParameterIuivNV;
	let cstr = strings::to_c_with_buf("glGetProgramEnvParameterdvARB", cstr_buf): *const u8;
	glGetProgramEnvParameterdvARB = get_proc_address("glGetProgramEnvParameterdvARB", cstr): *fp_glGetProgramEnvParameterdvARB;
	let cstr = strings::to_c_with_buf("glGetProgramEnvParameterfvARB", cstr_buf): *const u8;
	glGetProgramEnvParameterfvARB = get_proc_address("glGetProgramEnvParameterfvARB", cstr): *fp_glGetProgramEnvParameterfvARB;
	let cstr = strings::to_c_with_buf("glGetProgramInfoLog", cstr_buf): *const u8;
	glGetProgramInfoLog = get_proc_address("glGetProgramInfoLog", cstr): *fp_glGetProgramInfoLog;
	let cstr = strings::to_c_with_buf("glGetProgramInterfaceiv", cstr_buf): *const u8;
	glGetProgramInterfaceiv = get_proc_address("glGetProgramInterfaceiv", cstr): *fp_glGetProgramInterfaceiv;
	let cstr = strings::to_c_with_buf("glGetProgramLocalParameterIivNV", cstr_buf): *const u8;
	glGetProgramLocalParameterIivNV = get_proc_address("glGetProgramLocalParameterIivNV", cstr): *fp_glGetProgramLocalParameterIivNV;
	let cstr = strings::to_c_with_buf("glGetProgramLocalParameterIuivNV", cstr_buf): *const u8;
	glGetProgramLocalParameterIuivNV = get_proc_address("glGetProgramLocalParameterIuivNV", cstr): *fp_glGetProgramLocalParameterIuivNV;
	let cstr = strings::to_c_with_buf("glGetProgramLocalParameterdvARB", cstr_buf): *const u8;
	glGetProgramLocalParameterdvARB = get_proc_address("glGetProgramLocalParameterdvARB", cstr): *fp_glGetProgramLocalParameterdvARB;
	let cstr = strings::to_c_with_buf("glGetProgramLocalParameterfvARB", cstr_buf): *const u8;
	glGetProgramLocalParameterfvARB = get_proc_address("glGetProgramLocalParameterfvARB", cstr): *fp_glGetProgramLocalParameterfvARB;
	let cstr = strings::to_c_with_buf("glGetProgramNamedParameterdvNV", cstr_buf): *const u8;
	glGetProgramNamedParameterdvNV = get_proc_address("glGetProgramNamedParameterdvNV", cstr): *fp_glGetProgramNamedParameterdvNV;
	let cstr = strings::to_c_with_buf("glGetProgramNamedParameterfvNV", cstr_buf): *const u8;
	glGetProgramNamedParameterfvNV = get_proc_address("glGetProgramNamedParameterfvNV", cstr): *fp_glGetProgramNamedParameterfvNV;
	let cstr = strings::to_c_with_buf("glGetProgramParameterdvNV", cstr_buf): *const u8;
	glGetProgramParameterdvNV = get_proc_address("glGetProgramParameterdvNV", cstr): *fp_glGetProgramParameterdvNV;
	let cstr = strings::to_c_with_buf("glGetProgramParameterfvNV", cstr_buf): *const u8;
	glGetProgramParameterfvNV = get_proc_address("glGetProgramParameterfvNV", cstr): *fp_glGetProgramParameterfvNV;
	let cstr = strings::to_c_with_buf("glGetProgramPipelineInfoLog", cstr_buf): *const u8;
	glGetProgramPipelineInfoLog = get_proc_address("glGetProgramPipelineInfoLog", cstr): *fp_glGetProgramPipelineInfoLog;
	let cstr = strings::to_c_with_buf("glGetProgramPipelineiv", cstr_buf): *const u8;
	glGetProgramPipelineiv = get_proc_address("glGetProgramPipelineiv", cstr): *fp_glGetProgramPipelineiv;
	let cstr = strings::to_c_with_buf("glGetProgramResourceIndex", cstr_buf): *const u8;
	glGetProgramResourceIndex = get_proc_address("glGetProgramResourceIndex", cstr): *fp_glGetProgramResourceIndex;
	let cstr = strings::to_c_with_buf("glGetProgramResourceLocation", cstr_buf): *const u8;
	glGetProgramResourceLocation = get_proc_address("glGetProgramResourceLocation", cstr): *fp_glGetProgramResourceLocation;
	let cstr = strings::to_c_with_buf("glGetProgramResourceLocationIndex", cstr_buf): *const u8;
	glGetProgramResourceLocationIndex = get_proc_address("glGetProgramResourceLocationIndex", cstr): *fp_glGetProgramResourceLocationIndex;
	let cstr = strings::to_c_with_buf("glGetProgramResourceName", cstr_buf): *const u8;
	glGetProgramResourceName = get_proc_address("glGetProgramResourceName", cstr): *fp_glGetProgramResourceName;
	let cstr = strings::to_c_with_buf("glGetProgramResourcefvNV", cstr_buf): *const u8;
	glGetProgramResourcefvNV = get_proc_address("glGetProgramResourcefvNV", cstr): *fp_glGetProgramResourcefvNV;
	let cstr = strings::to_c_with_buf("glGetProgramResourceiv", cstr_buf): *const u8;
	glGetProgramResourceiv = get_proc_address("glGetProgramResourceiv", cstr): *fp_glGetProgramResourceiv;
	let cstr = strings::to_c_with_buf("glGetProgramStageiv", cstr_buf): *const u8;
	glGetProgramStageiv = get_proc_address("glGetProgramStageiv", cstr): *fp_glGetProgramStageiv;
	let cstr = strings::to_c_with_buf("glGetProgramStringARB", cstr_buf): *const u8;
	glGetProgramStringARB = get_proc_address("glGetProgramStringARB", cstr): *fp_glGetProgramStringARB;
	let cstr = strings::to_c_with_buf("glGetProgramStringNV", cstr_buf): *const u8;
	glGetProgramStringNV = get_proc_address("glGetProgramStringNV", cstr): *fp_glGetProgramStringNV;
	let cstr = strings::to_c_with_buf("glGetProgramSubroutineParameteruivNV", cstr_buf): *const u8;
	glGetProgramSubroutineParameteruivNV = get_proc_address("glGetProgramSubroutineParameteruivNV", cstr): *fp_glGetProgramSubroutineParameteruivNV;
	let cstr = strings::to_c_with_buf("glGetProgramiv", cstr_buf): *const u8;
	glGetProgramiv = get_proc_address("glGetProgramiv", cstr): *fp_glGetProgramiv;
	let cstr = strings::to_c_with_buf("glGetProgramivARB", cstr_buf): *const u8;
	glGetProgramivARB = get_proc_address("glGetProgramivARB", cstr): *fp_glGetProgramivARB;
	let cstr = strings::to_c_with_buf("glGetProgramivNV", cstr_buf): *const u8;
	glGetProgramivNV = get_proc_address("glGetProgramivNV", cstr): *fp_glGetProgramivNV;
	let cstr = strings::to_c_with_buf("glGetQueryBufferObjecti64v", cstr_buf): *const u8;
	glGetQueryBufferObjecti64v = get_proc_address("glGetQueryBufferObjecti64v", cstr): *fp_glGetQueryBufferObjecti64v;
	let cstr = strings::to_c_with_buf("glGetQueryBufferObjectiv", cstr_buf): *const u8;
	glGetQueryBufferObjectiv = get_proc_address("glGetQueryBufferObjectiv", cstr): *fp_glGetQueryBufferObjectiv;
	let cstr = strings::to_c_with_buf("glGetQueryBufferObjectui64v", cstr_buf): *const u8;
	glGetQueryBufferObjectui64v = get_proc_address("glGetQueryBufferObjectui64v", cstr): *fp_glGetQueryBufferObjectui64v;
	let cstr = strings::to_c_with_buf("glGetQueryBufferObjectuiv", cstr_buf): *const u8;
	glGetQueryBufferObjectuiv = get_proc_address("glGetQueryBufferObjectuiv", cstr): *fp_glGetQueryBufferObjectuiv;
	let cstr = strings::to_c_with_buf("glGetQueryIndexediv", cstr_buf): *const u8;
	glGetQueryIndexediv = get_proc_address("glGetQueryIndexediv", cstr): *fp_glGetQueryIndexediv;
	let cstr = strings::to_c_with_buf("glGetQueryObjecti64v", cstr_buf): *const u8;
	glGetQueryObjecti64v = get_proc_address("glGetQueryObjecti64v", cstr): *fp_glGetQueryObjecti64v;
	let cstr = strings::to_c_with_buf("glGetQueryObjecti64vEXT", cstr_buf): *const u8;
	glGetQueryObjecti64vEXT = get_proc_address("glGetQueryObjecti64vEXT", cstr): *fp_glGetQueryObjecti64vEXT;
	let cstr = strings::to_c_with_buf("glGetQueryObjectiv", cstr_buf): *const u8;
	glGetQueryObjectiv = get_proc_address("glGetQueryObjectiv", cstr): *fp_glGetQueryObjectiv;
	let cstr = strings::to_c_with_buf("glGetQueryObjectivARB", cstr_buf): *const u8;
	glGetQueryObjectivARB = get_proc_address("glGetQueryObjectivARB", cstr): *fp_glGetQueryObjectivARB;
	let cstr = strings::to_c_with_buf("glGetQueryObjectui64v", cstr_buf): *const u8;
	glGetQueryObjectui64v = get_proc_address("glGetQueryObjectui64v", cstr): *fp_glGetQueryObjectui64v;
	let cstr = strings::to_c_with_buf("glGetQueryObjectui64vEXT", cstr_buf): *const u8;
	glGetQueryObjectui64vEXT = get_proc_address("glGetQueryObjectui64vEXT", cstr): *fp_glGetQueryObjectui64vEXT;
	let cstr = strings::to_c_with_buf("glGetQueryObjectuiv", cstr_buf): *const u8;
	glGetQueryObjectuiv = get_proc_address("glGetQueryObjectuiv", cstr): *fp_glGetQueryObjectuiv;
	let cstr = strings::to_c_with_buf("glGetQueryObjectuivARB", cstr_buf): *const u8;
	glGetQueryObjectuivARB = get_proc_address("glGetQueryObjectuivARB", cstr): *fp_glGetQueryObjectuivARB;
	let cstr = strings::to_c_with_buf("glGetQueryiv", cstr_buf): *const u8;
	glGetQueryiv = get_proc_address("glGetQueryiv", cstr): *fp_glGetQueryiv;
	let cstr = strings::to_c_with_buf("glGetQueryivARB", cstr_buf): *const u8;
	glGetQueryivARB = get_proc_address("glGetQueryivARB", cstr): *fp_glGetQueryivARB;
	let cstr = strings::to_c_with_buf("glGetRenderbufferParameteriv", cstr_buf): *const u8;
	glGetRenderbufferParameteriv = get_proc_address("glGetRenderbufferParameteriv", cstr): *fp_glGetRenderbufferParameteriv;
	let cstr = strings::to_c_with_buf("glGetRenderbufferParameterivEXT", cstr_buf): *const u8;
	glGetRenderbufferParameterivEXT = get_proc_address("glGetRenderbufferParameterivEXT", cstr): *fp_glGetRenderbufferParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetSamplerParameterIiv", cstr_buf): *const u8;
	glGetSamplerParameterIiv = get_proc_address("glGetSamplerParameterIiv", cstr): *fp_glGetSamplerParameterIiv;
	let cstr = strings::to_c_with_buf("glGetSamplerParameterIuiv", cstr_buf): *const u8;
	glGetSamplerParameterIuiv = get_proc_address("glGetSamplerParameterIuiv", cstr): *fp_glGetSamplerParameterIuiv;
	let cstr = strings::to_c_with_buf("glGetSamplerParameterfv", cstr_buf): *const u8;
	glGetSamplerParameterfv = get_proc_address("glGetSamplerParameterfv", cstr): *fp_glGetSamplerParameterfv;
	let cstr = strings::to_c_with_buf("glGetSamplerParameteriv", cstr_buf): *const u8;
	glGetSamplerParameteriv = get_proc_address("glGetSamplerParameteriv", cstr): *fp_glGetSamplerParameteriv;
	let cstr = strings::to_c_with_buf("glGetSemaphoreParameterivNV", cstr_buf): *const u8;
	glGetSemaphoreParameterivNV = get_proc_address("glGetSemaphoreParameterivNV", cstr): *fp_glGetSemaphoreParameterivNV;
	let cstr = strings::to_c_with_buf("glGetSemaphoreParameterui64vEXT", cstr_buf): *const u8;
	glGetSemaphoreParameterui64vEXT = get_proc_address("glGetSemaphoreParameterui64vEXT", cstr): *fp_glGetSemaphoreParameterui64vEXT;
	let cstr = strings::to_c_with_buf("glGetSeparableFilterEXT", cstr_buf): *const u8;
	glGetSeparableFilterEXT = get_proc_address("glGetSeparableFilterEXT", cstr): *fp_glGetSeparableFilterEXT;
	let cstr = strings::to_c_with_buf("glGetShaderInfoLog", cstr_buf): *const u8;
	glGetShaderInfoLog = get_proc_address("glGetShaderInfoLog", cstr): *fp_glGetShaderInfoLog;
	let cstr = strings::to_c_with_buf("glGetShaderPrecisionFormat", cstr_buf): *const u8;
	glGetShaderPrecisionFormat = get_proc_address("glGetShaderPrecisionFormat", cstr): *fp_glGetShaderPrecisionFormat;
	let cstr = strings::to_c_with_buf("glGetShaderSource", cstr_buf): *const u8;
	glGetShaderSource = get_proc_address("glGetShaderSource", cstr): *fp_glGetShaderSource;
	let cstr = strings::to_c_with_buf("glGetShaderSourceARB", cstr_buf): *const u8;
	glGetShaderSourceARB = get_proc_address("glGetShaderSourceARB", cstr): *fp_glGetShaderSourceARB;
	let cstr = strings::to_c_with_buf("glGetShaderiv", cstr_buf): *const u8;
	glGetShaderiv = get_proc_address("glGetShaderiv", cstr): *fp_glGetShaderiv;
	let cstr = strings::to_c_with_buf("glGetShadingRateImagePaletteNV", cstr_buf): *const u8;
	glGetShadingRateImagePaletteNV = get_proc_address("glGetShadingRateImagePaletteNV", cstr): *fp_glGetShadingRateImagePaletteNV;
	let cstr = strings::to_c_with_buf("glGetShadingRateSampleLocationivNV", cstr_buf): *const u8;
	glGetShadingRateSampleLocationivNV = get_proc_address("glGetShadingRateSampleLocationivNV", cstr): *fp_glGetShadingRateSampleLocationivNV;
	let cstr = strings::to_c_with_buf("glGetSharpenTexFuncSGIS", cstr_buf): *const u8;
	glGetSharpenTexFuncSGIS = get_proc_address("glGetSharpenTexFuncSGIS", cstr): *fp_glGetSharpenTexFuncSGIS;
	let cstr = strings::to_c_with_buf("glGetStageIndexNV", cstr_buf): *const u8;
	glGetStageIndexNV = get_proc_address("glGetStageIndexNV", cstr): *fp_glGetStageIndexNV;
	let cstr = strings::to_c_with_buf("glGetString", cstr_buf): *const u8;
	glGetString = get_proc_address("glGetString", cstr): *fp_glGetString;
	let cstr = strings::to_c_with_buf("glGetSubroutineIndex", cstr_buf): *const u8;
	glGetSubroutineIndex = get_proc_address("glGetSubroutineIndex", cstr): *fp_glGetSubroutineIndex;
	let cstr = strings::to_c_with_buf("glGetSubroutineUniformLocation", cstr_buf): *const u8;
	glGetSubroutineUniformLocation = get_proc_address("glGetSubroutineUniformLocation", cstr): *fp_glGetSubroutineUniformLocation;
	let cstr = strings::to_c_with_buf("glGetSynciv", cstr_buf): *const u8;
	glGetSynciv = get_proc_address("glGetSynciv", cstr): *fp_glGetSynciv;
	let cstr = strings::to_c_with_buf("glGetTexBumpParameterfvATI", cstr_buf): *const u8;
	glGetTexBumpParameterfvATI = get_proc_address("glGetTexBumpParameterfvATI", cstr): *fp_glGetTexBumpParameterfvATI;
	let cstr = strings::to_c_with_buf("glGetTexBumpParameterivATI", cstr_buf): *const u8;
	glGetTexBumpParameterivATI = get_proc_address("glGetTexBumpParameterivATI", cstr): *fp_glGetTexBumpParameterivATI;
	let cstr = strings::to_c_with_buf("glGetTexEnvfv", cstr_buf): *const u8;
	glGetTexEnvfv = get_proc_address("glGetTexEnvfv", cstr): *fp_glGetTexEnvfv;
	let cstr = strings::to_c_with_buf("glGetTexEnviv", cstr_buf): *const u8;
	glGetTexEnviv = get_proc_address("glGetTexEnviv", cstr): *fp_glGetTexEnviv;
	let cstr = strings::to_c_with_buf("glGetTexEnvxvOES", cstr_buf): *const u8;
	glGetTexEnvxvOES = get_proc_address("glGetTexEnvxvOES", cstr): *fp_glGetTexEnvxvOES;
	let cstr = strings::to_c_with_buf("glGetTexFilterFuncSGIS", cstr_buf): *const u8;
	glGetTexFilterFuncSGIS = get_proc_address("glGetTexFilterFuncSGIS", cstr): *fp_glGetTexFilterFuncSGIS;
	let cstr = strings::to_c_with_buf("glGetTexGendv", cstr_buf): *const u8;
	glGetTexGendv = get_proc_address("glGetTexGendv", cstr): *fp_glGetTexGendv;
	let cstr = strings::to_c_with_buf("glGetTexGenfv", cstr_buf): *const u8;
	glGetTexGenfv = get_proc_address("glGetTexGenfv", cstr): *fp_glGetTexGenfv;
	let cstr = strings::to_c_with_buf("glGetTexGeniv", cstr_buf): *const u8;
	glGetTexGeniv = get_proc_address("glGetTexGeniv", cstr): *fp_glGetTexGeniv;
	let cstr = strings::to_c_with_buf("glGetTexGenxvOES", cstr_buf): *const u8;
	glGetTexGenxvOES = get_proc_address("glGetTexGenxvOES", cstr): *fp_glGetTexGenxvOES;
	let cstr = strings::to_c_with_buf("glGetTexImage", cstr_buf): *const u8;
	glGetTexImage = get_proc_address("glGetTexImage", cstr): *fp_glGetTexImage;
	let cstr = strings::to_c_with_buf("glGetTexLevelParameterfv", cstr_buf): *const u8;
	glGetTexLevelParameterfv = get_proc_address("glGetTexLevelParameterfv", cstr): *fp_glGetTexLevelParameterfv;
	let cstr = strings::to_c_with_buf("glGetTexLevelParameteriv", cstr_buf): *const u8;
	glGetTexLevelParameteriv = get_proc_address("glGetTexLevelParameteriv", cstr): *fp_glGetTexLevelParameteriv;
	let cstr = strings::to_c_with_buf("glGetTexLevelParameterxvOES", cstr_buf): *const u8;
	glGetTexLevelParameterxvOES = get_proc_address("glGetTexLevelParameterxvOES", cstr): *fp_glGetTexLevelParameterxvOES;
	let cstr = strings::to_c_with_buf("glGetTexParameterIivEXT", cstr_buf): *const u8;
	glGetTexParameterIivEXT = get_proc_address("glGetTexParameterIivEXT", cstr): *fp_glGetTexParameterIivEXT;
	let cstr = strings::to_c_with_buf("glGetTexParameterIuivEXT", cstr_buf): *const u8;
	glGetTexParameterIuivEXT = get_proc_address("glGetTexParameterIuivEXT", cstr): *fp_glGetTexParameterIuivEXT;
	let cstr = strings::to_c_with_buf("glGetTexParameterPointervAPPLE", cstr_buf): *const u8;
	glGetTexParameterPointervAPPLE = get_proc_address("glGetTexParameterPointervAPPLE", cstr): *fp_glGetTexParameterPointervAPPLE;
	let cstr = strings::to_c_with_buf("glGetTexParameterfv", cstr_buf): *const u8;
	glGetTexParameterfv = get_proc_address("glGetTexParameterfv", cstr): *fp_glGetTexParameterfv;
	let cstr = strings::to_c_with_buf("glGetTexParameteriv", cstr_buf): *const u8;
	glGetTexParameteriv = get_proc_address("glGetTexParameteriv", cstr): *fp_glGetTexParameteriv;
	let cstr = strings::to_c_with_buf("glGetTexParameterxvOES", cstr_buf): *const u8;
	glGetTexParameterxvOES = get_proc_address("glGetTexParameterxvOES", cstr): *fp_glGetTexParameterxvOES;
	let cstr = strings::to_c_with_buf("glGetTextureHandleARB", cstr_buf): *const u8;
	glGetTextureHandleARB = get_proc_address("glGetTextureHandleARB", cstr): *fp_glGetTextureHandleARB;
	let cstr = strings::to_c_with_buf("glGetTextureHandleNV", cstr_buf): *const u8;
	glGetTextureHandleNV = get_proc_address("glGetTextureHandleNV", cstr): *fp_glGetTextureHandleNV;
	let cstr = strings::to_c_with_buf("glGetTextureImage", cstr_buf): *const u8;
	glGetTextureImage = get_proc_address("glGetTextureImage", cstr): *fp_glGetTextureImage;
	let cstr = strings::to_c_with_buf("glGetTextureImageEXT", cstr_buf): *const u8;
	glGetTextureImageEXT = get_proc_address("glGetTextureImageEXT", cstr): *fp_glGetTextureImageEXT;
	let cstr = strings::to_c_with_buf("glGetTextureLevelParameterfv", cstr_buf): *const u8;
	glGetTextureLevelParameterfv = get_proc_address("glGetTextureLevelParameterfv", cstr): *fp_glGetTextureLevelParameterfv;
	let cstr = strings::to_c_with_buf("glGetTextureLevelParameterfvEXT", cstr_buf): *const u8;
	glGetTextureLevelParameterfvEXT = get_proc_address("glGetTextureLevelParameterfvEXT", cstr): *fp_glGetTextureLevelParameterfvEXT;
	let cstr = strings::to_c_with_buf("glGetTextureLevelParameteriv", cstr_buf): *const u8;
	glGetTextureLevelParameteriv = get_proc_address("glGetTextureLevelParameteriv", cstr): *fp_glGetTextureLevelParameteriv;
	let cstr = strings::to_c_with_buf("glGetTextureLevelParameterivEXT", cstr_buf): *const u8;
	glGetTextureLevelParameterivEXT = get_proc_address("glGetTextureLevelParameterivEXT", cstr): *fp_glGetTextureLevelParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetTextureParameterIiv", cstr_buf): *const u8;
	glGetTextureParameterIiv = get_proc_address("glGetTextureParameterIiv", cstr): *fp_glGetTextureParameterIiv;
	let cstr = strings::to_c_with_buf("glGetTextureParameterIivEXT", cstr_buf): *const u8;
	glGetTextureParameterIivEXT = get_proc_address("glGetTextureParameterIivEXT", cstr): *fp_glGetTextureParameterIivEXT;
	let cstr = strings::to_c_with_buf("glGetTextureParameterIuiv", cstr_buf): *const u8;
	glGetTextureParameterIuiv = get_proc_address("glGetTextureParameterIuiv", cstr): *fp_glGetTextureParameterIuiv;
	let cstr = strings::to_c_with_buf("glGetTextureParameterIuivEXT", cstr_buf): *const u8;
	glGetTextureParameterIuivEXT = get_proc_address("glGetTextureParameterIuivEXT", cstr): *fp_glGetTextureParameterIuivEXT;
	let cstr = strings::to_c_with_buf("glGetTextureParameterfv", cstr_buf): *const u8;
	glGetTextureParameterfv = get_proc_address("glGetTextureParameterfv", cstr): *fp_glGetTextureParameterfv;
	let cstr = strings::to_c_with_buf("glGetTextureParameterfvEXT", cstr_buf): *const u8;
	glGetTextureParameterfvEXT = get_proc_address("glGetTextureParameterfvEXT", cstr): *fp_glGetTextureParameterfvEXT;
	let cstr = strings::to_c_with_buf("glGetTextureParameteriv", cstr_buf): *const u8;
	glGetTextureParameteriv = get_proc_address("glGetTextureParameteriv", cstr): *fp_glGetTextureParameteriv;
	let cstr = strings::to_c_with_buf("glGetTextureParameterivEXT", cstr_buf): *const u8;
	glGetTextureParameterivEXT = get_proc_address("glGetTextureParameterivEXT", cstr): *fp_glGetTextureParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetTextureSamplerHandleARB", cstr_buf): *const u8;
	glGetTextureSamplerHandleARB = get_proc_address("glGetTextureSamplerHandleARB", cstr): *fp_glGetTextureSamplerHandleARB;
	let cstr = strings::to_c_with_buf("glGetTextureSamplerHandleNV", cstr_buf): *const u8;
	glGetTextureSamplerHandleNV = get_proc_address("glGetTextureSamplerHandleNV", cstr): *fp_glGetTextureSamplerHandleNV;
	let cstr = strings::to_c_with_buf("glGetTextureSubImage", cstr_buf): *const u8;
	glGetTextureSubImage = get_proc_address("glGetTextureSubImage", cstr): *fp_glGetTextureSubImage;
	let cstr = strings::to_c_with_buf("glGetTrackMatrixivNV", cstr_buf): *const u8;
	glGetTrackMatrixivNV = get_proc_address("glGetTrackMatrixivNV", cstr): *fp_glGetTrackMatrixivNV;
	let cstr = strings::to_c_with_buf("glGetTransformFeedbackVaryingEXT", cstr_buf): *const u8;
	glGetTransformFeedbackVaryingEXT = get_proc_address("glGetTransformFeedbackVaryingEXT", cstr): *fp_glGetTransformFeedbackVaryingEXT;
	let cstr = strings::to_c_with_buf("glGetTransformFeedbackVaryingNV", cstr_buf): *const u8;
	glGetTransformFeedbackVaryingNV = get_proc_address("glGetTransformFeedbackVaryingNV", cstr): *fp_glGetTransformFeedbackVaryingNV;
	let cstr = strings::to_c_with_buf("glGetTransformFeedbacki64_v", cstr_buf): *const u8;
	glGetTransformFeedbacki64_v = get_proc_address("glGetTransformFeedbacki64_v", cstr): *fp_glGetTransformFeedbacki64_v;
	let cstr = strings::to_c_with_buf("glGetTransformFeedbacki_v", cstr_buf): *const u8;
	glGetTransformFeedbacki_v = get_proc_address("glGetTransformFeedbacki_v", cstr): *fp_glGetTransformFeedbacki_v;
	let cstr = strings::to_c_with_buf("glGetTransformFeedbackiv", cstr_buf): *const u8;
	glGetTransformFeedbackiv = get_proc_address("glGetTransformFeedbackiv", cstr): *fp_glGetTransformFeedbackiv;
	let cstr = strings::to_c_with_buf("glGetUniformBlockIndex", cstr_buf): *const u8;
	glGetUniformBlockIndex = get_proc_address("glGetUniformBlockIndex", cstr): *fp_glGetUniformBlockIndex;
	let cstr = strings::to_c_with_buf("glGetUniformBufferSizeEXT", cstr_buf): *const u8;
	glGetUniformBufferSizeEXT = get_proc_address("glGetUniformBufferSizeEXT", cstr): *fp_glGetUniformBufferSizeEXT;
	let cstr = strings::to_c_with_buf("glGetUniformIndices", cstr_buf): *const u8;
	glGetUniformIndices = get_proc_address("glGetUniformIndices", cstr): *fp_glGetUniformIndices;
	let cstr = strings::to_c_with_buf("glGetUniformLocation", cstr_buf): *const u8;
	glGetUniformLocation = get_proc_address("glGetUniformLocation", cstr): *fp_glGetUniformLocation;
	let cstr = strings::to_c_with_buf("glGetUniformLocationARB", cstr_buf): *const u8;
	glGetUniformLocationARB = get_proc_address("glGetUniformLocationARB", cstr): *fp_glGetUniformLocationARB;
	let cstr = strings::to_c_with_buf("glGetUniformOffsetEXT", cstr_buf): *const u8;
	glGetUniformOffsetEXT = get_proc_address("glGetUniformOffsetEXT", cstr): *fp_glGetUniformOffsetEXT;
	let cstr = strings::to_c_with_buf("glGetUniformSubroutineuiv", cstr_buf): *const u8;
	glGetUniformSubroutineuiv = get_proc_address("glGetUniformSubroutineuiv", cstr): *fp_glGetUniformSubroutineuiv;
	let cstr = strings::to_c_with_buf("glGetUniformdv", cstr_buf): *const u8;
	glGetUniformdv = get_proc_address("glGetUniformdv", cstr): *fp_glGetUniformdv;
	let cstr = strings::to_c_with_buf("glGetUniformfv", cstr_buf): *const u8;
	glGetUniformfv = get_proc_address("glGetUniformfv", cstr): *fp_glGetUniformfv;
	let cstr = strings::to_c_with_buf("glGetUniformfvARB", cstr_buf): *const u8;
	glGetUniformfvARB = get_proc_address("glGetUniformfvARB", cstr): *fp_glGetUniformfvARB;
	let cstr = strings::to_c_with_buf("glGetUniformi64vARB", cstr_buf): *const u8;
	glGetUniformi64vARB = get_proc_address("glGetUniformi64vARB", cstr): *fp_glGetUniformi64vARB;
	let cstr = strings::to_c_with_buf("glGetUniformi64vNV", cstr_buf): *const u8;
	glGetUniformi64vNV = get_proc_address("glGetUniformi64vNV", cstr): *fp_glGetUniformi64vNV;
	let cstr = strings::to_c_with_buf("glGetUniformiv", cstr_buf): *const u8;
	glGetUniformiv = get_proc_address("glGetUniformiv", cstr): *fp_glGetUniformiv;
	let cstr = strings::to_c_with_buf("glGetUniformivARB", cstr_buf): *const u8;
	glGetUniformivARB = get_proc_address("glGetUniformivARB", cstr): *fp_glGetUniformivARB;
	let cstr = strings::to_c_with_buf("glGetUniformui64vARB", cstr_buf): *const u8;
	glGetUniformui64vARB = get_proc_address("glGetUniformui64vARB", cstr): *fp_glGetUniformui64vARB;
	let cstr = strings::to_c_with_buf("glGetUniformui64vNV", cstr_buf): *const u8;
	glGetUniformui64vNV = get_proc_address("glGetUniformui64vNV", cstr): *fp_glGetUniformui64vNV;
	let cstr = strings::to_c_with_buf("glGetUniformuivEXT", cstr_buf): *const u8;
	glGetUniformuivEXT = get_proc_address("glGetUniformuivEXT", cstr): *fp_glGetUniformuivEXT;
	let cstr = strings::to_c_with_buf("glGetUnsignedBytei_vEXT", cstr_buf): *const u8;
	glGetUnsignedBytei_vEXT = get_proc_address("glGetUnsignedBytei_vEXT", cstr): *fp_glGetUnsignedBytei_vEXT;
	let cstr = strings::to_c_with_buf("glGetUnsignedBytevEXT", cstr_buf): *const u8;
	glGetUnsignedBytevEXT = get_proc_address("glGetUnsignedBytevEXT", cstr): *fp_glGetUnsignedBytevEXT;
	let cstr = strings::to_c_with_buf("glGetVariantArrayObjectfvATI", cstr_buf): *const u8;
	glGetVariantArrayObjectfvATI = get_proc_address("glGetVariantArrayObjectfvATI", cstr): *fp_glGetVariantArrayObjectfvATI;
	let cstr = strings::to_c_with_buf("glGetVariantArrayObjectivATI", cstr_buf): *const u8;
	glGetVariantArrayObjectivATI = get_proc_address("glGetVariantArrayObjectivATI", cstr): *fp_glGetVariantArrayObjectivATI;
	let cstr = strings::to_c_with_buf("glGetVariantBooleanvEXT", cstr_buf): *const u8;
	glGetVariantBooleanvEXT = get_proc_address("glGetVariantBooleanvEXT", cstr): *fp_glGetVariantBooleanvEXT;
	let cstr = strings::to_c_with_buf("glGetVariantFloatvEXT", cstr_buf): *const u8;
	glGetVariantFloatvEXT = get_proc_address("glGetVariantFloatvEXT", cstr): *fp_glGetVariantFloatvEXT;
	let cstr = strings::to_c_with_buf("glGetVariantIntegervEXT", cstr_buf): *const u8;
	glGetVariantIntegervEXT = get_proc_address("glGetVariantIntegervEXT", cstr): *fp_glGetVariantIntegervEXT;
	let cstr = strings::to_c_with_buf("glGetVariantPointervEXT", cstr_buf): *const u8;
	glGetVariantPointervEXT = get_proc_address("glGetVariantPointervEXT", cstr): *fp_glGetVariantPointervEXT;
	let cstr = strings::to_c_with_buf("glGetVaryingLocationNV", cstr_buf): *const u8;
	glGetVaryingLocationNV = get_proc_address("glGetVaryingLocationNV", cstr): *fp_glGetVaryingLocationNV;
	let cstr = strings::to_c_with_buf("glGetVertexArrayIndexed64iv", cstr_buf): *const u8;
	glGetVertexArrayIndexed64iv = get_proc_address("glGetVertexArrayIndexed64iv", cstr): *fp_glGetVertexArrayIndexed64iv;
	let cstr = strings::to_c_with_buf("glGetVertexArrayIndexediv", cstr_buf): *const u8;
	glGetVertexArrayIndexediv = get_proc_address("glGetVertexArrayIndexediv", cstr): *fp_glGetVertexArrayIndexediv;
	let cstr = strings::to_c_with_buf("glGetVertexArrayIntegeri_vEXT", cstr_buf): *const u8;
	glGetVertexArrayIntegeri_vEXT = get_proc_address("glGetVertexArrayIntegeri_vEXT", cstr): *fp_glGetVertexArrayIntegeri_vEXT;
	let cstr = strings::to_c_with_buf("glGetVertexArrayIntegervEXT", cstr_buf): *const u8;
	glGetVertexArrayIntegervEXT = get_proc_address("glGetVertexArrayIntegervEXT", cstr): *fp_glGetVertexArrayIntegervEXT;
	let cstr = strings::to_c_with_buf("glGetVertexArrayPointeri_vEXT", cstr_buf): *const u8;
	glGetVertexArrayPointeri_vEXT = get_proc_address("glGetVertexArrayPointeri_vEXT", cstr): *fp_glGetVertexArrayPointeri_vEXT;
	let cstr = strings::to_c_with_buf("glGetVertexArrayPointervEXT", cstr_buf): *const u8;
	glGetVertexArrayPointervEXT = get_proc_address("glGetVertexArrayPointervEXT", cstr): *fp_glGetVertexArrayPointervEXT;
	let cstr = strings::to_c_with_buf("glGetVertexArrayiv", cstr_buf): *const u8;
	glGetVertexArrayiv = get_proc_address("glGetVertexArrayiv", cstr): *fp_glGetVertexArrayiv;
	let cstr = strings::to_c_with_buf("glGetVertexAttribArrayObjectfvATI", cstr_buf): *const u8;
	glGetVertexAttribArrayObjectfvATI = get_proc_address("glGetVertexAttribArrayObjectfvATI", cstr): *fp_glGetVertexAttribArrayObjectfvATI;
	let cstr = strings::to_c_with_buf("glGetVertexAttribArrayObjectivATI", cstr_buf): *const u8;
	glGetVertexAttribArrayObjectivATI = get_proc_address("glGetVertexAttribArrayObjectivATI", cstr): *fp_glGetVertexAttribArrayObjectivATI;
	let cstr = strings::to_c_with_buf("glGetVertexAttribIivEXT", cstr_buf): *const u8;
	glGetVertexAttribIivEXT = get_proc_address("glGetVertexAttribIivEXT", cstr): *fp_glGetVertexAttribIivEXT;
	let cstr = strings::to_c_with_buf("glGetVertexAttribIuivEXT", cstr_buf): *const u8;
	glGetVertexAttribIuivEXT = get_proc_address("glGetVertexAttribIuivEXT", cstr): *fp_glGetVertexAttribIuivEXT;
	let cstr = strings::to_c_with_buf("glGetVertexAttribLdv", cstr_buf): *const u8;
	glGetVertexAttribLdv = get_proc_address("glGetVertexAttribLdv", cstr): *fp_glGetVertexAttribLdv;
	let cstr = strings::to_c_with_buf("glGetVertexAttribLdvEXT", cstr_buf): *const u8;
	glGetVertexAttribLdvEXT = get_proc_address("glGetVertexAttribLdvEXT", cstr): *fp_glGetVertexAttribLdvEXT;
	let cstr = strings::to_c_with_buf("glGetVertexAttribLi64vNV", cstr_buf): *const u8;
	glGetVertexAttribLi64vNV = get_proc_address("glGetVertexAttribLi64vNV", cstr): *fp_glGetVertexAttribLi64vNV;
	let cstr = strings::to_c_with_buf("glGetVertexAttribLui64vARB", cstr_buf): *const u8;
	glGetVertexAttribLui64vARB = get_proc_address("glGetVertexAttribLui64vARB", cstr): *fp_glGetVertexAttribLui64vARB;
	let cstr = strings::to_c_with_buf("glGetVertexAttribLui64vNV", cstr_buf): *const u8;
	glGetVertexAttribLui64vNV = get_proc_address("glGetVertexAttribLui64vNV", cstr): *fp_glGetVertexAttribLui64vNV;
	let cstr = strings::to_c_with_buf("glGetVertexAttribPointerv", cstr_buf): *const u8;
	glGetVertexAttribPointerv = get_proc_address("glGetVertexAttribPointerv", cstr): *fp_glGetVertexAttribPointerv;
	let cstr = strings::to_c_with_buf("glGetVertexAttribPointervARB", cstr_buf): *const u8;
	glGetVertexAttribPointervARB = get_proc_address("glGetVertexAttribPointervARB", cstr): *fp_glGetVertexAttribPointervARB;
	let cstr = strings::to_c_with_buf("glGetVertexAttribPointervNV", cstr_buf): *const u8;
	glGetVertexAttribPointervNV = get_proc_address("glGetVertexAttribPointervNV", cstr): *fp_glGetVertexAttribPointervNV;
	let cstr = strings::to_c_with_buf("glGetVertexAttribdv", cstr_buf): *const u8;
	glGetVertexAttribdv = get_proc_address("glGetVertexAttribdv", cstr): *fp_glGetVertexAttribdv;
	let cstr = strings::to_c_with_buf("glGetVertexAttribdvARB", cstr_buf): *const u8;
	glGetVertexAttribdvARB = get_proc_address("glGetVertexAttribdvARB", cstr): *fp_glGetVertexAttribdvARB;
	let cstr = strings::to_c_with_buf("glGetVertexAttribdvNV", cstr_buf): *const u8;
	glGetVertexAttribdvNV = get_proc_address("glGetVertexAttribdvNV", cstr): *fp_glGetVertexAttribdvNV;
	let cstr = strings::to_c_with_buf("glGetVertexAttribfv", cstr_buf): *const u8;
	glGetVertexAttribfv = get_proc_address("glGetVertexAttribfv", cstr): *fp_glGetVertexAttribfv;
	let cstr = strings::to_c_with_buf("glGetVertexAttribfvARB", cstr_buf): *const u8;
	glGetVertexAttribfvARB = get_proc_address("glGetVertexAttribfvARB", cstr): *fp_glGetVertexAttribfvARB;
	let cstr = strings::to_c_with_buf("glGetVertexAttribfvNV", cstr_buf): *const u8;
	glGetVertexAttribfvNV = get_proc_address("glGetVertexAttribfvNV", cstr): *fp_glGetVertexAttribfvNV;
	let cstr = strings::to_c_with_buf("glGetVertexAttribiv", cstr_buf): *const u8;
	glGetVertexAttribiv = get_proc_address("glGetVertexAttribiv", cstr): *fp_glGetVertexAttribiv;
	let cstr = strings::to_c_with_buf("glGetVertexAttribivARB", cstr_buf): *const u8;
	glGetVertexAttribivARB = get_proc_address("glGetVertexAttribivARB", cstr): *fp_glGetVertexAttribivARB;
	let cstr = strings::to_c_with_buf("glGetVertexAttribivNV", cstr_buf): *const u8;
	glGetVertexAttribivNV = get_proc_address("glGetVertexAttribivNV", cstr): *fp_glGetVertexAttribivNV;
	let cstr = strings::to_c_with_buf("glGetVideoCaptureStreamdvNV", cstr_buf): *const u8;
	glGetVideoCaptureStreamdvNV = get_proc_address("glGetVideoCaptureStreamdvNV", cstr): *fp_glGetVideoCaptureStreamdvNV;
	let cstr = strings::to_c_with_buf("glGetVideoCaptureStreamfvNV", cstr_buf): *const u8;
	glGetVideoCaptureStreamfvNV = get_proc_address("glGetVideoCaptureStreamfvNV", cstr): *fp_glGetVideoCaptureStreamfvNV;
	let cstr = strings::to_c_with_buf("glGetVideoCaptureStreamivNV", cstr_buf): *const u8;
	glGetVideoCaptureStreamivNV = get_proc_address("glGetVideoCaptureStreamivNV", cstr): *fp_glGetVideoCaptureStreamivNV;
	let cstr = strings::to_c_with_buf("glGetVideoCaptureivNV", cstr_buf): *const u8;
	glGetVideoCaptureivNV = get_proc_address("glGetVideoCaptureivNV", cstr): *fp_glGetVideoCaptureivNV;
	let cstr = strings::to_c_with_buf("glGetVideoi64vNV", cstr_buf): *const u8;
	glGetVideoi64vNV = get_proc_address("glGetVideoi64vNV", cstr): *fp_glGetVideoi64vNV;
	let cstr = strings::to_c_with_buf("glGetVideoivNV", cstr_buf): *const u8;
	glGetVideoivNV = get_proc_address("glGetVideoivNV", cstr): *fp_glGetVideoivNV;
	let cstr = strings::to_c_with_buf("glGetVideoui64vNV", cstr_buf): *const u8;
	glGetVideoui64vNV = get_proc_address("glGetVideoui64vNV", cstr): *fp_glGetVideoui64vNV;
	let cstr = strings::to_c_with_buf("glGetVideouivNV", cstr_buf): *const u8;
	glGetVideouivNV = get_proc_address("glGetVideouivNV", cstr): *fp_glGetVideouivNV;
	let cstr = strings::to_c_with_buf("glGetVkProcAddrNV", cstr_buf): *const u8;
	glGetVkProcAddrNV = get_proc_address("glGetVkProcAddrNV", cstr): *fp_glGetVkProcAddrNV;
	let cstr = strings::to_c_with_buf("glGetnCompressedTexImageARB", cstr_buf): *const u8;
	glGetnCompressedTexImageARB = get_proc_address("glGetnCompressedTexImageARB", cstr): *fp_glGetnCompressedTexImageARB;
	let cstr = strings::to_c_with_buf("glGetnTexImageARB", cstr_buf): *const u8;
	glGetnTexImageARB = get_proc_address("glGetnTexImageARB", cstr): *fp_glGetnTexImageARB;
	let cstr = strings::to_c_with_buf("glGetnUniformdvARB", cstr_buf): *const u8;
	glGetnUniformdvARB = get_proc_address("glGetnUniformdvARB", cstr): *fp_glGetnUniformdvARB;
	let cstr = strings::to_c_with_buf("glGetnUniformfv", cstr_buf): *const u8;
	glGetnUniformfv = get_proc_address("glGetnUniformfv", cstr): *fp_glGetnUniformfv;
	let cstr = strings::to_c_with_buf("glGetnUniformfvARB", cstr_buf): *const u8;
	glGetnUniformfvARB = get_proc_address("glGetnUniformfvARB", cstr): *fp_glGetnUniformfvARB;
	let cstr = strings::to_c_with_buf("glGetnUniformi64vARB", cstr_buf): *const u8;
	glGetnUniformi64vARB = get_proc_address("glGetnUniformi64vARB", cstr): *fp_glGetnUniformi64vARB;
	let cstr = strings::to_c_with_buf("glGetnUniformiv", cstr_buf): *const u8;
	glGetnUniformiv = get_proc_address("glGetnUniformiv", cstr): *fp_glGetnUniformiv;
	let cstr = strings::to_c_with_buf("glGetnUniformivARB", cstr_buf): *const u8;
	glGetnUniformivARB = get_proc_address("glGetnUniformivARB", cstr): *fp_glGetnUniformivARB;
	let cstr = strings::to_c_with_buf("glGetnUniformui64vARB", cstr_buf): *const u8;
	glGetnUniformui64vARB = get_proc_address("glGetnUniformui64vARB", cstr): *fp_glGetnUniformui64vARB;
	let cstr = strings::to_c_with_buf("glGetnUniformuiv", cstr_buf): *const u8;
	glGetnUniformuiv = get_proc_address("glGetnUniformuiv", cstr): *fp_glGetnUniformuiv;
	let cstr = strings::to_c_with_buf("glGetnUniformuivARB", cstr_buf): *const u8;
	glGetnUniformuivARB = get_proc_address("glGetnUniformuivARB", cstr): *fp_glGetnUniformuivARB;
	let cstr = strings::to_c_with_buf("glGlobalAlphaFactorbSUN", cstr_buf): *const u8;
	glGlobalAlphaFactorbSUN = get_proc_address("glGlobalAlphaFactorbSUN", cstr): *fp_glGlobalAlphaFactorbSUN;
	let cstr = strings::to_c_with_buf("glGlobalAlphaFactordSUN", cstr_buf): *const u8;
	glGlobalAlphaFactordSUN = get_proc_address("glGlobalAlphaFactordSUN", cstr): *fp_glGlobalAlphaFactordSUN;
	let cstr = strings::to_c_with_buf("glGlobalAlphaFactorfSUN", cstr_buf): *const u8;
	glGlobalAlphaFactorfSUN = get_proc_address("glGlobalAlphaFactorfSUN", cstr): *fp_glGlobalAlphaFactorfSUN;
	let cstr = strings::to_c_with_buf("glGlobalAlphaFactoriSUN", cstr_buf): *const u8;
	glGlobalAlphaFactoriSUN = get_proc_address("glGlobalAlphaFactoriSUN", cstr): *fp_glGlobalAlphaFactoriSUN;
	let cstr = strings::to_c_with_buf("glGlobalAlphaFactorsSUN", cstr_buf): *const u8;
	glGlobalAlphaFactorsSUN = get_proc_address("glGlobalAlphaFactorsSUN", cstr): *fp_glGlobalAlphaFactorsSUN;
	let cstr = strings::to_c_with_buf("glGlobalAlphaFactorubSUN", cstr_buf): *const u8;
	glGlobalAlphaFactorubSUN = get_proc_address("glGlobalAlphaFactorubSUN", cstr): *fp_glGlobalAlphaFactorubSUN;
	let cstr = strings::to_c_with_buf("glGlobalAlphaFactoruiSUN", cstr_buf): *const u8;
	glGlobalAlphaFactoruiSUN = get_proc_address("glGlobalAlphaFactoruiSUN", cstr): *fp_glGlobalAlphaFactoruiSUN;
	let cstr = strings::to_c_with_buf("glGlobalAlphaFactorusSUN", cstr_buf): *const u8;
	glGlobalAlphaFactorusSUN = get_proc_address("glGlobalAlphaFactorusSUN", cstr): *fp_glGlobalAlphaFactorusSUN;
	let cstr = strings::to_c_with_buf("glHint", cstr_buf): *const u8;
	glHint = get_proc_address("glHint", cstr): *fp_glHint;
	let cstr = strings::to_c_with_buf("glHintPGI", cstr_buf): *const u8;
	glHintPGI = get_proc_address("glHintPGI", cstr): *fp_glHintPGI;
	let cstr = strings::to_c_with_buf("glHistogramEXT", cstr_buf): *const u8;
	glHistogramEXT = get_proc_address("glHistogramEXT", cstr): *fp_glHistogramEXT;
	let cstr = strings::to_c_with_buf("glIglooInterfaceSGIX", cstr_buf): *const u8;
	glIglooInterfaceSGIX = get_proc_address("glIglooInterfaceSGIX", cstr): *fp_glIglooInterfaceSGIX;
	let cstr = strings::to_c_with_buf("glImageTransformParameterfHP", cstr_buf): *const u8;
	glImageTransformParameterfHP = get_proc_address("glImageTransformParameterfHP", cstr): *fp_glImageTransformParameterfHP;
	let cstr = strings::to_c_with_buf("glImageTransformParameterfvHP", cstr_buf): *const u8;
	glImageTransformParameterfvHP = get_proc_address("glImageTransformParameterfvHP", cstr): *fp_glImageTransformParameterfvHP;
	let cstr = strings::to_c_with_buf("glImageTransformParameteriHP", cstr_buf): *const u8;
	glImageTransformParameteriHP = get_proc_address("glImageTransformParameteriHP", cstr): *fp_glImageTransformParameteriHP;
	let cstr = strings::to_c_with_buf("glImageTransformParameterivHP", cstr_buf): *const u8;
	glImageTransformParameterivHP = get_proc_address("glImageTransformParameterivHP", cstr): *fp_glImageTransformParameterivHP;
	let cstr = strings::to_c_with_buf("glImportMemoryFdEXT", cstr_buf): *const u8;
	glImportMemoryFdEXT = get_proc_address("glImportMemoryFdEXT", cstr): *fp_glImportMemoryFdEXT;
	let cstr = strings::to_c_with_buf("glImportMemoryWin32HandleEXT", cstr_buf): *const u8;
	glImportMemoryWin32HandleEXT = get_proc_address("glImportMemoryWin32HandleEXT", cstr): *fp_glImportMemoryWin32HandleEXT;
	let cstr = strings::to_c_with_buf("glImportMemoryWin32NameEXT", cstr_buf): *const u8;
	glImportMemoryWin32NameEXT = get_proc_address("glImportMemoryWin32NameEXT", cstr): *fp_glImportMemoryWin32NameEXT;
	let cstr = strings::to_c_with_buf("glImportSemaphoreFdEXT", cstr_buf): *const u8;
	glImportSemaphoreFdEXT = get_proc_address("glImportSemaphoreFdEXT", cstr): *fp_glImportSemaphoreFdEXT;
	let cstr = strings::to_c_with_buf("glImportSemaphoreWin32HandleEXT", cstr_buf): *const u8;
	glImportSemaphoreWin32HandleEXT = get_proc_address("glImportSemaphoreWin32HandleEXT", cstr): *fp_glImportSemaphoreWin32HandleEXT;
	let cstr = strings::to_c_with_buf("glImportSemaphoreWin32NameEXT", cstr_buf): *const u8;
	glImportSemaphoreWin32NameEXT = get_proc_address("glImportSemaphoreWin32NameEXT", cstr): *fp_glImportSemaphoreWin32NameEXT;
	let cstr = strings::to_c_with_buf("glImportSyncEXT", cstr_buf): *const u8;
	glImportSyncEXT = get_proc_address("glImportSyncEXT", cstr): *fp_glImportSyncEXT;
	let cstr = strings::to_c_with_buf("glIndexFormatNV", cstr_buf): *const u8;
	glIndexFormatNV = get_proc_address("glIndexFormatNV", cstr): *fp_glIndexFormatNV;
	let cstr = strings::to_c_with_buf("glIndexFuncEXT", cstr_buf): *const u8;
	glIndexFuncEXT = get_proc_address("glIndexFuncEXT", cstr): *fp_glIndexFuncEXT;
	let cstr = strings::to_c_with_buf("glIndexMask", cstr_buf): *const u8;
	glIndexMask = get_proc_address("glIndexMask", cstr): *fp_glIndexMask;
	let cstr = strings::to_c_with_buf("glIndexMaterialEXT", cstr_buf): *const u8;
	glIndexMaterialEXT = get_proc_address("glIndexMaterialEXT", cstr): *fp_glIndexMaterialEXT;
	let cstr = strings::to_c_with_buf("glIndexPointer", cstr_buf): *const u8;
	glIndexPointer = get_proc_address("glIndexPointer", cstr): *fp_glIndexPointer;
	let cstr = strings::to_c_with_buf("glIndexPointerEXT", cstr_buf): *const u8;
	glIndexPointerEXT = get_proc_address("glIndexPointerEXT", cstr): *fp_glIndexPointerEXT;
	let cstr = strings::to_c_with_buf("glIndexPointerListIBM", cstr_buf): *const u8;
	glIndexPointerListIBM = get_proc_address("glIndexPointerListIBM", cstr): *fp_glIndexPointerListIBM;
	let cstr = strings::to_c_with_buf("glIndexd", cstr_buf): *const u8;
	glIndexd = get_proc_address("glIndexd", cstr): *fp_glIndexd;
	let cstr = strings::to_c_with_buf("glIndexdv", cstr_buf): *const u8;
	glIndexdv = get_proc_address("glIndexdv", cstr): *fp_glIndexdv;
	let cstr = strings::to_c_with_buf("glIndexf", cstr_buf): *const u8;
	glIndexf = get_proc_address("glIndexf", cstr): *fp_glIndexf;
	let cstr = strings::to_c_with_buf("glIndexfv", cstr_buf): *const u8;
	glIndexfv = get_proc_address("glIndexfv", cstr): *fp_glIndexfv;
	let cstr = strings::to_c_with_buf("glIndexi", cstr_buf): *const u8;
	glIndexi = get_proc_address("glIndexi", cstr): *fp_glIndexi;
	let cstr = strings::to_c_with_buf("glIndexiv", cstr_buf): *const u8;
	glIndexiv = get_proc_address("glIndexiv", cstr): *fp_glIndexiv;
	let cstr = strings::to_c_with_buf("glIndexs", cstr_buf): *const u8;
	glIndexs = get_proc_address("glIndexs", cstr): *fp_glIndexs;
	let cstr = strings::to_c_with_buf("glIndexsv", cstr_buf): *const u8;
	glIndexsv = get_proc_address("glIndexsv", cstr): *fp_glIndexsv;
	let cstr = strings::to_c_with_buf("glIndexub", cstr_buf): *const u8;
	glIndexub = get_proc_address("glIndexub", cstr): *fp_glIndexub;
	let cstr = strings::to_c_with_buf("glIndexubv", cstr_buf): *const u8;
	glIndexubv = get_proc_address("glIndexubv", cstr): *fp_glIndexubv;
	let cstr = strings::to_c_with_buf("glIndexxOES", cstr_buf): *const u8;
	glIndexxOES = get_proc_address("glIndexxOES", cstr): *fp_glIndexxOES;
	let cstr = strings::to_c_with_buf("glIndexxvOES", cstr_buf): *const u8;
	glIndexxvOES = get_proc_address("glIndexxvOES", cstr): *fp_glIndexxvOES;
	let cstr = strings::to_c_with_buf("glInitNames", cstr_buf): *const u8;
	glInitNames = get_proc_address("glInitNames", cstr): *fp_glInitNames;
	let cstr = strings::to_c_with_buf("glInsertComponentEXT", cstr_buf): *const u8;
	glInsertComponentEXT = get_proc_address("glInsertComponentEXT", cstr): *fp_glInsertComponentEXT;
	let cstr = strings::to_c_with_buf("glInsertEventMarkerEXT", cstr_buf): *const u8;
	glInsertEventMarkerEXT = get_proc_address("glInsertEventMarkerEXT", cstr): *fp_glInsertEventMarkerEXT;
	let cstr = strings::to_c_with_buf("glInstrumentsBufferSGIX", cstr_buf): *const u8;
	glInstrumentsBufferSGIX = get_proc_address("glInstrumentsBufferSGIX", cstr): *fp_glInstrumentsBufferSGIX;
	let cstr = strings::to_c_with_buf("glInterleavedArrays", cstr_buf): *const u8;
	glInterleavedArrays = get_proc_address("glInterleavedArrays", cstr): *fp_glInterleavedArrays;
	let cstr = strings::to_c_with_buf("glInterpolatePathsNV", cstr_buf): *const u8;
	glInterpolatePathsNV = get_proc_address("glInterpolatePathsNV", cstr): *fp_glInterpolatePathsNV;
	let cstr = strings::to_c_with_buf("glInvalidateBufferData", cstr_buf): *const u8;
	glInvalidateBufferData = get_proc_address("glInvalidateBufferData", cstr): *fp_glInvalidateBufferData;
	let cstr = strings::to_c_with_buf("glInvalidateBufferSubData", cstr_buf): *const u8;
	glInvalidateBufferSubData = get_proc_address("glInvalidateBufferSubData", cstr): *fp_glInvalidateBufferSubData;
	let cstr = strings::to_c_with_buf("glInvalidateFramebuffer", cstr_buf): *const u8;
	glInvalidateFramebuffer = get_proc_address("glInvalidateFramebuffer", cstr): *fp_glInvalidateFramebuffer;
	let cstr = strings::to_c_with_buf("glInvalidateNamedFramebufferData", cstr_buf): *const u8;
	glInvalidateNamedFramebufferData = get_proc_address("glInvalidateNamedFramebufferData", cstr): *fp_glInvalidateNamedFramebufferData;
	let cstr = strings::to_c_with_buf("glInvalidateNamedFramebufferSubData", cstr_buf): *const u8;
	glInvalidateNamedFramebufferSubData = get_proc_address("glInvalidateNamedFramebufferSubData", cstr): *fp_glInvalidateNamedFramebufferSubData;
	let cstr = strings::to_c_with_buf("glInvalidateSubFramebuffer", cstr_buf): *const u8;
	glInvalidateSubFramebuffer = get_proc_address("glInvalidateSubFramebuffer", cstr): *fp_glInvalidateSubFramebuffer;
	let cstr = strings::to_c_with_buf("glInvalidateTexImage", cstr_buf): *const u8;
	glInvalidateTexImage = get_proc_address("glInvalidateTexImage", cstr): *fp_glInvalidateTexImage;
	let cstr = strings::to_c_with_buf("glInvalidateTexSubImage", cstr_buf): *const u8;
	glInvalidateTexSubImage = get_proc_address("glInvalidateTexSubImage", cstr): *fp_glInvalidateTexSubImage;
	let cstr = strings::to_c_with_buf("glIsAsyncMarkerSGIX", cstr_buf): *const u8;
	glIsAsyncMarkerSGIX = get_proc_address("glIsAsyncMarkerSGIX", cstr): *fp_glIsAsyncMarkerSGIX;
	let cstr = strings::to_c_with_buf("glIsBuffer", cstr_buf): *const u8;
	glIsBuffer = get_proc_address("glIsBuffer", cstr): *fp_glIsBuffer;
	let cstr = strings::to_c_with_buf("glIsBufferARB", cstr_buf): *const u8;
	glIsBufferARB = get_proc_address("glIsBufferARB", cstr): *fp_glIsBufferARB;
	let cstr = strings::to_c_with_buf("glIsBufferResidentNV", cstr_buf): *const u8;
	glIsBufferResidentNV = get_proc_address("glIsBufferResidentNV", cstr): *fp_glIsBufferResidentNV;
	let cstr = strings::to_c_with_buf("glIsCommandListNV", cstr_buf): *const u8;
	glIsCommandListNV = get_proc_address("glIsCommandListNV", cstr): *fp_glIsCommandListNV;
	let cstr = strings::to_c_with_buf("glIsEnabled", cstr_buf): *const u8;
	glIsEnabled = get_proc_address("glIsEnabled", cstr): *fp_glIsEnabled;
	let cstr = strings::to_c_with_buf("glIsEnabledIndexedEXT", cstr_buf): *const u8;
	glIsEnabledIndexedEXT = get_proc_address("glIsEnabledIndexedEXT", cstr): *fp_glIsEnabledIndexedEXT;
	let cstr = strings::to_c_with_buf("glIsFenceAPPLE", cstr_buf): *const u8;
	glIsFenceAPPLE = get_proc_address("glIsFenceAPPLE", cstr): *fp_glIsFenceAPPLE;
	let cstr = strings::to_c_with_buf("glIsFenceNV", cstr_buf): *const u8;
	glIsFenceNV = get_proc_address("glIsFenceNV", cstr): *fp_glIsFenceNV;
	let cstr = strings::to_c_with_buf("glIsFramebuffer", cstr_buf): *const u8;
	glIsFramebuffer = get_proc_address("glIsFramebuffer", cstr): *fp_glIsFramebuffer;
	let cstr = strings::to_c_with_buf("glIsFramebufferEXT", cstr_buf): *const u8;
	glIsFramebufferEXT = get_proc_address("glIsFramebufferEXT", cstr): *fp_glIsFramebufferEXT;
	let cstr = strings::to_c_with_buf("glIsImageHandleResidentARB", cstr_buf): *const u8;
	glIsImageHandleResidentARB = get_proc_address("glIsImageHandleResidentARB", cstr): *fp_glIsImageHandleResidentARB;
	let cstr = strings::to_c_with_buf("glIsImageHandleResidentNV", cstr_buf): *const u8;
	glIsImageHandleResidentNV = get_proc_address("glIsImageHandleResidentNV", cstr): *fp_glIsImageHandleResidentNV;
	let cstr = strings::to_c_with_buf("glIsList", cstr_buf): *const u8;
	glIsList = get_proc_address("glIsList", cstr): *fp_glIsList;
	let cstr = strings::to_c_with_buf("glIsMemoryObjectEXT", cstr_buf): *const u8;
	glIsMemoryObjectEXT = get_proc_address("glIsMemoryObjectEXT", cstr): *fp_glIsMemoryObjectEXT;
	let cstr = strings::to_c_with_buf("glIsNameAMD", cstr_buf): *const u8;
	glIsNameAMD = get_proc_address("glIsNameAMD", cstr): *fp_glIsNameAMD;
	let cstr = strings::to_c_with_buf("glIsNamedBufferResidentNV", cstr_buf): *const u8;
	glIsNamedBufferResidentNV = get_proc_address("glIsNamedBufferResidentNV", cstr): *fp_glIsNamedBufferResidentNV;
	let cstr = strings::to_c_with_buf("glIsNamedStringARB", cstr_buf): *const u8;
	glIsNamedStringARB = get_proc_address("glIsNamedStringARB", cstr): *fp_glIsNamedStringARB;
	let cstr = strings::to_c_with_buf("glIsObjectBufferATI", cstr_buf): *const u8;
	glIsObjectBufferATI = get_proc_address("glIsObjectBufferATI", cstr): *fp_glIsObjectBufferATI;
	let cstr = strings::to_c_with_buf("glIsOcclusionQueryNV", cstr_buf): *const u8;
	glIsOcclusionQueryNV = get_proc_address("glIsOcclusionQueryNV", cstr): *fp_glIsOcclusionQueryNV;
	let cstr = strings::to_c_with_buf("glIsPathNV", cstr_buf): *const u8;
	glIsPathNV = get_proc_address("glIsPathNV", cstr): *fp_glIsPathNV;
	let cstr = strings::to_c_with_buf("glIsPointInFillPathNV", cstr_buf): *const u8;
	glIsPointInFillPathNV = get_proc_address("glIsPointInFillPathNV", cstr): *fp_glIsPointInFillPathNV;
	let cstr = strings::to_c_with_buf("glIsPointInStrokePathNV", cstr_buf): *const u8;
	glIsPointInStrokePathNV = get_proc_address("glIsPointInStrokePathNV", cstr): *fp_glIsPointInStrokePathNV;
	let cstr = strings::to_c_with_buf("glIsProgram", cstr_buf): *const u8;
	glIsProgram = get_proc_address("glIsProgram", cstr): *fp_glIsProgram;
	let cstr = strings::to_c_with_buf("glIsProgramARB", cstr_buf): *const u8;
	glIsProgramARB = get_proc_address("glIsProgramARB", cstr): *fp_glIsProgramARB;
	let cstr = strings::to_c_with_buf("glIsProgramNV", cstr_buf): *const u8;
	glIsProgramNV = get_proc_address("glIsProgramNV", cstr): *fp_glIsProgramNV;
	let cstr = strings::to_c_with_buf("glIsProgramPipeline", cstr_buf): *const u8;
	glIsProgramPipeline = get_proc_address("glIsProgramPipeline", cstr): *fp_glIsProgramPipeline;
	let cstr = strings::to_c_with_buf("glIsQuery", cstr_buf): *const u8;
	glIsQuery = get_proc_address("glIsQuery", cstr): *fp_glIsQuery;
	let cstr = strings::to_c_with_buf("glIsQueryARB", cstr_buf): *const u8;
	glIsQueryARB = get_proc_address("glIsQueryARB", cstr): *fp_glIsQueryARB;
	let cstr = strings::to_c_with_buf("glIsRenderbuffer", cstr_buf): *const u8;
	glIsRenderbuffer = get_proc_address("glIsRenderbuffer", cstr): *fp_glIsRenderbuffer;
	let cstr = strings::to_c_with_buf("glIsRenderbufferEXT", cstr_buf): *const u8;
	glIsRenderbufferEXT = get_proc_address("glIsRenderbufferEXT", cstr): *fp_glIsRenderbufferEXT;
	let cstr = strings::to_c_with_buf("glIsSampler", cstr_buf): *const u8;
	glIsSampler = get_proc_address("glIsSampler", cstr): *fp_glIsSampler;
	let cstr = strings::to_c_with_buf("glIsSemaphoreEXT", cstr_buf): *const u8;
	glIsSemaphoreEXT = get_proc_address("glIsSemaphoreEXT", cstr): *fp_glIsSemaphoreEXT;
	let cstr = strings::to_c_with_buf("glIsShader", cstr_buf): *const u8;
	glIsShader = get_proc_address("glIsShader", cstr): *fp_glIsShader;
	let cstr = strings::to_c_with_buf("glIsStateNV", cstr_buf): *const u8;
	glIsStateNV = get_proc_address("glIsStateNV", cstr): *fp_glIsStateNV;
	let cstr = strings::to_c_with_buf("glIsSync", cstr_buf): *const u8;
	glIsSync = get_proc_address("glIsSync", cstr): *fp_glIsSync;
	let cstr = strings::to_c_with_buf("glIsTexture", cstr_buf): *const u8;
	glIsTexture = get_proc_address("glIsTexture", cstr): *fp_glIsTexture;
	let cstr = strings::to_c_with_buf("glIsTextureEXT", cstr_buf): *const u8;
	glIsTextureEXT = get_proc_address("glIsTextureEXT", cstr): *fp_glIsTextureEXT;
	let cstr = strings::to_c_with_buf("glIsTextureHandleResidentARB", cstr_buf): *const u8;
	glIsTextureHandleResidentARB = get_proc_address("glIsTextureHandleResidentARB", cstr): *fp_glIsTextureHandleResidentARB;
	let cstr = strings::to_c_with_buf("glIsTextureHandleResidentNV", cstr_buf): *const u8;
	glIsTextureHandleResidentNV = get_proc_address("glIsTextureHandleResidentNV", cstr): *fp_glIsTextureHandleResidentNV;
	let cstr = strings::to_c_with_buf("glIsTransformFeedback", cstr_buf): *const u8;
	glIsTransformFeedback = get_proc_address("glIsTransformFeedback", cstr): *fp_glIsTransformFeedback;
	let cstr = strings::to_c_with_buf("glIsTransformFeedbackNV", cstr_buf): *const u8;
	glIsTransformFeedbackNV = get_proc_address("glIsTransformFeedbackNV", cstr): *fp_glIsTransformFeedbackNV;
	let cstr = strings::to_c_with_buf("glIsVariantEnabledEXT", cstr_buf): *const u8;
	glIsVariantEnabledEXT = get_proc_address("glIsVariantEnabledEXT", cstr): *fp_glIsVariantEnabledEXT;
	let cstr = strings::to_c_with_buf("glIsVertexArray", cstr_buf): *const u8;
	glIsVertexArray = get_proc_address("glIsVertexArray", cstr): *fp_glIsVertexArray;
	let cstr = strings::to_c_with_buf("glIsVertexArrayAPPLE", cstr_buf): *const u8;
	glIsVertexArrayAPPLE = get_proc_address("glIsVertexArrayAPPLE", cstr): *fp_glIsVertexArrayAPPLE;
	let cstr = strings::to_c_with_buf("glIsVertexAttribEnabledAPPLE", cstr_buf): *const u8;
	glIsVertexAttribEnabledAPPLE = get_proc_address("glIsVertexAttribEnabledAPPLE", cstr): *fp_glIsVertexAttribEnabledAPPLE;
	let cstr = strings::to_c_with_buf("glLGPUCopyImageSubDataNVX", cstr_buf): *const u8;
	glLGPUCopyImageSubDataNVX = get_proc_address("glLGPUCopyImageSubDataNVX", cstr): *fp_glLGPUCopyImageSubDataNVX;
	let cstr = strings::to_c_with_buf("glLGPUInterlockNVX", cstr_buf): *const u8;
	glLGPUInterlockNVX = get_proc_address("glLGPUInterlockNVX", cstr): *fp_glLGPUInterlockNVX;
	let cstr = strings::to_c_with_buf("glLGPUNamedBufferSubDataNVX", cstr_buf): *const u8;
	glLGPUNamedBufferSubDataNVX = get_proc_address("glLGPUNamedBufferSubDataNVX", cstr): *fp_glLGPUNamedBufferSubDataNVX;
	let cstr = strings::to_c_with_buf("glLabelObjectEXT", cstr_buf): *const u8;
	glLabelObjectEXT = get_proc_address("glLabelObjectEXT", cstr): *fp_glLabelObjectEXT;
	let cstr = strings::to_c_with_buf("glLightEnviSGIX", cstr_buf): *const u8;
	glLightEnviSGIX = get_proc_address("glLightEnviSGIX", cstr): *fp_glLightEnviSGIX;
	let cstr = strings::to_c_with_buf("glLightModelf", cstr_buf): *const u8;
	glLightModelf = get_proc_address("glLightModelf", cstr): *fp_glLightModelf;
	let cstr = strings::to_c_with_buf("glLightModelfv", cstr_buf): *const u8;
	glLightModelfv = get_proc_address("glLightModelfv", cstr): *fp_glLightModelfv;
	let cstr = strings::to_c_with_buf("glLightModeli", cstr_buf): *const u8;
	glLightModeli = get_proc_address("glLightModeli", cstr): *fp_glLightModeli;
	let cstr = strings::to_c_with_buf("glLightModeliv", cstr_buf): *const u8;
	glLightModeliv = get_proc_address("glLightModeliv", cstr): *fp_glLightModeliv;
	let cstr = strings::to_c_with_buf("glLightModelxOES", cstr_buf): *const u8;
	glLightModelxOES = get_proc_address("glLightModelxOES", cstr): *fp_glLightModelxOES;
	let cstr = strings::to_c_with_buf("glLightModelxvOES", cstr_buf): *const u8;
	glLightModelxvOES = get_proc_address("glLightModelxvOES", cstr): *fp_glLightModelxvOES;
	let cstr = strings::to_c_with_buf("glLightf", cstr_buf): *const u8;
	glLightf = get_proc_address("glLightf", cstr): *fp_glLightf;
	let cstr = strings::to_c_with_buf("glLightfv", cstr_buf): *const u8;
	glLightfv = get_proc_address("glLightfv", cstr): *fp_glLightfv;
	let cstr = strings::to_c_with_buf("glLighti", cstr_buf): *const u8;
	glLighti = get_proc_address("glLighti", cstr): *fp_glLighti;
	let cstr = strings::to_c_with_buf("glLightiv", cstr_buf): *const u8;
	glLightiv = get_proc_address("glLightiv", cstr): *fp_glLightiv;
	let cstr = strings::to_c_with_buf("glLightxOES", cstr_buf): *const u8;
	glLightxOES = get_proc_address("glLightxOES", cstr): *fp_glLightxOES;
	let cstr = strings::to_c_with_buf("glLightxvOES", cstr_buf): *const u8;
	glLightxvOES = get_proc_address("glLightxvOES", cstr): *fp_glLightxvOES;
	let cstr = strings::to_c_with_buf("glLineStipple", cstr_buf): *const u8;
	glLineStipple = get_proc_address("glLineStipple", cstr): *fp_glLineStipple;
	let cstr = strings::to_c_with_buf("glLineWidth", cstr_buf): *const u8;
	glLineWidth = get_proc_address("glLineWidth", cstr): *fp_glLineWidth;
	let cstr = strings::to_c_with_buf("glLineWidthxOES", cstr_buf): *const u8;
	glLineWidthxOES = get_proc_address("glLineWidthxOES", cstr): *fp_glLineWidthxOES;
	let cstr = strings::to_c_with_buf("glLinkProgram", cstr_buf): *const u8;
	glLinkProgram = get_proc_address("glLinkProgram", cstr): *fp_glLinkProgram;
	let cstr = strings::to_c_with_buf("glLinkProgramARB", cstr_buf): *const u8;
	glLinkProgramARB = get_proc_address("glLinkProgramARB", cstr): *fp_glLinkProgramARB;
	let cstr = strings::to_c_with_buf("glListBase", cstr_buf): *const u8;
	glListBase = get_proc_address("glListBase", cstr): *fp_glListBase;
	let cstr = strings::to_c_with_buf("glListDrawCommandsStatesClientNV", cstr_buf): *const u8;
	glListDrawCommandsStatesClientNV = get_proc_address("glListDrawCommandsStatesClientNV", cstr): *fp_glListDrawCommandsStatesClientNV;
	let cstr = strings::to_c_with_buf("glListParameterfSGIX", cstr_buf): *const u8;
	glListParameterfSGIX = get_proc_address("glListParameterfSGIX", cstr): *fp_glListParameterfSGIX;
	let cstr = strings::to_c_with_buf("glListParameterfvSGIX", cstr_buf): *const u8;
	glListParameterfvSGIX = get_proc_address("glListParameterfvSGIX", cstr): *fp_glListParameterfvSGIX;
	let cstr = strings::to_c_with_buf("glListParameteriSGIX", cstr_buf): *const u8;
	glListParameteriSGIX = get_proc_address("glListParameteriSGIX", cstr): *fp_glListParameteriSGIX;
	let cstr = strings::to_c_with_buf("glListParameterivSGIX", cstr_buf): *const u8;
	glListParameterivSGIX = get_proc_address("glListParameterivSGIX", cstr): *fp_glListParameterivSGIX;
	let cstr = strings::to_c_with_buf("glLoadIdentity", cstr_buf): *const u8;
	glLoadIdentity = get_proc_address("glLoadIdentity", cstr): *fp_glLoadIdentity;
	let cstr = strings::to_c_with_buf("glLoadIdentityDeformationMapSGIX", cstr_buf): *const u8;
	glLoadIdentityDeformationMapSGIX = get_proc_address("glLoadIdentityDeformationMapSGIX", cstr): *fp_glLoadIdentityDeformationMapSGIX;
	let cstr = strings::to_c_with_buf("glLoadMatrixd", cstr_buf): *const u8;
	glLoadMatrixd = get_proc_address("glLoadMatrixd", cstr): *fp_glLoadMatrixd;
	let cstr = strings::to_c_with_buf("glLoadMatrixf", cstr_buf): *const u8;
	glLoadMatrixf = get_proc_address("glLoadMatrixf", cstr): *fp_glLoadMatrixf;
	let cstr = strings::to_c_with_buf("glLoadMatrixxOES", cstr_buf): *const u8;
	glLoadMatrixxOES = get_proc_address("glLoadMatrixxOES", cstr): *fp_glLoadMatrixxOES;
	let cstr = strings::to_c_with_buf("glLoadName", cstr_buf): *const u8;
	glLoadName = get_proc_address("glLoadName", cstr): *fp_glLoadName;
	let cstr = strings::to_c_with_buf("glLoadProgramNV", cstr_buf): *const u8;
	glLoadProgramNV = get_proc_address("glLoadProgramNV", cstr): *fp_glLoadProgramNV;
	let cstr = strings::to_c_with_buf("glLoadTransposeMatrixd", cstr_buf): *const u8;
	glLoadTransposeMatrixd = get_proc_address("glLoadTransposeMatrixd", cstr): *fp_glLoadTransposeMatrixd;
	let cstr = strings::to_c_with_buf("glLoadTransposeMatrixdARB", cstr_buf): *const u8;
	glLoadTransposeMatrixdARB = get_proc_address("glLoadTransposeMatrixdARB", cstr): *fp_glLoadTransposeMatrixdARB;
	let cstr = strings::to_c_with_buf("glLoadTransposeMatrixf", cstr_buf): *const u8;
	glLoadTransposeMatrixf = get_proc_address("glLoadTransposeMatrixf", cstr): *fp_glLoadTransposeMatrixf;
	let cstr = strings::to_c_with_buf("glLoadTransposeMatrixfARB", cstr_buf): *const u8;
	glLoadTransposeMatrixfARB = get_proc_address("glLoadTransposeMatrixfARB", cstr): *fp_glLoadTransposeMatrixfARB;
	let cstr = strings::to_c_with_buf("glLoadTransposeMatrixxOES", cstr_buf): *const u8;
	glLoadTransposeMatrixxOES = get_proc_address("glLoadTransposeMatrixxOES", cstr): *fp_glLoadTransposeMatrixxOES;
	let cstr = strings::to_c_with_buf("glLockArraysEXT", cstr_buf): *const u8;
	glLockArraysEXT = get_proc_address("glLockArraysEXT", cstr): *fp_glLockArraysEXT;
	let cstr = strings::to_c_with_buf("glLogicOp", cstr_buf): *const u8;
	glLogicOp = get_proc_address("glLogicOp", cstr): *fp_glLogicOp;
	let cstr = strings::to_c_with_buf("glMakeBufferNonResidentNV", cstr_buf): *const u8;
	glMakeBufferNonResidentNV = get_proc_address("glMakeBufferNonResidentNV", cstr): *fp_glMakeBufferNonResidentNV;
	let cstr = strings::to_c_with_buf("glMakeBufferResidentNV", cstr_buf): *const u8;
	glMakeBufferResidentNV = get_proc_address("glMakeBufferResidentNV", cstr): *fp_glMakeBufferResidentNV;
	let cstr = strings::to_c_with_buf("glMakeImageHandleNonResidentARB", cstr_buf): *const u8;
	glMakeImageHandleNonResidentARB = get_proc_address("glMakeImageHandleNonResidentARB", cstr): *fp_glMakeImageHandleNonResidentARB;
	let cstr = strings::to_c_with_buf("glMakeImageHandleNonResidentNV", cstr_buf): *const u8;
	glMakeImageHandleNonResidentNV = get_proc_address("glMakeImageHandleNonResidentNV", cstr): *fp_glMakeImageHandleNonResidentNV;
	let cstr = strings::to_c_with_buf("glMakeImageHandleResidentARB", cstr_buf): *const u8;
	glMakeImageHandleResidentARB = get_proc_address("glMakeImageHandleResidentARB", cstr): *fp_glMakeImageHandleResidentARB;
	let cstr = strings::to_c_with_buf("glMakeImageHandleResidentNV", cstr_buf): *const u8;
	glMakeImageHandleResidentNV = get_proc_address("glMakeImageHandleResidentNV", cstr): *fp_glMakeImageHandleResidentNV;
	let cstr = strings::to_c_with_buf("glMakeNamedBufferNonResidentNV", cstr_buf): *const u8;
	glMakeNamedBufferNonResidentNV = get_proc_address("glMakeNamedBufferNonResidentNV", cstr): *fp_glMakeNamedBufferNonResidentNV;
	let cstr = strings::to_c_with_buf("glMakeNamedBufferResidentNV", cstr_buf): *const u8;
	glMakeNamedBufferResidentNV = get_proc_address("glMakeNamedBufferResidentNV", cstr): *fp_glMakeNamedBufferResidentNV;
	let cstr = strings::to_c_with_buf("glMakeTextureHandleNonResidentARB", cstr_buf): *const u8;
	glMakeTextureHandleNonResidentARB = get_proc_address("glMakeTextureHandleNonResidentARB", cstr): *fp_glMakeTextureHandleNonResidentARB;
	let cstr = strings::to_c_with_buf("glMakeTextureHandleNonResidentNV", cstr_buf): *const u8;
	glMakeTextureHandleNonResidentNV = get_proc_address("glMakeTextureHandleNonResidentNV", cstr): *fp_glMakeTextureHandleNonResidentNV;
	let cstr = strings::to_c_with_buf("glMakeTextureHandleResidentARB", cstr_buf): *const u8;
	glMakeTextureHandleResidentARB = get_proc_address("glMakeTextureHandleResidentARB", cstr): *fp_glMakeTextureHandleResidentARB;
	let cstr = strings::to_c_with_buf("glMakeTextureHandleResidentNV", cstr_buf): *const u8;
	glMakeTextureHandleResidentNV = get_proc_address("glMakeTextureHandleResidentNV", cstr): *fp_glMakeTextureHandleResidentNV;
	let cstr = strings::to_c_with_buf("glMap1d", cstr_buf): *const u8;
	glMap1d = get_proc_address("glMap1d", cstr): *fp_glMap1d;
	let cstr = strings::to_c_with_buf("glMap1f", cstr_buf): *const u8;
	glMap1f = get_proc_address("glMap1f", cstr): *fp_glMap1f;
	let cstr = strings::to_c_with_buf("glMap1xOES", cstr_buf): *const u8;
	glMap1xOES = get_proc_address("glMap1xOES", cstr): *fp_glMap1xOES;
	let cstr = strings::to_c_with_buf("glMap2d", cstr_buf): *const u8;
	glMap2d = get_proc_address("glMap2d", cstr): *fp_glMap2d;
	let cstr = strings::to_c_with_buf("glMap2f", cstr_buf): *const u8;
	glMap2f = get_proc_address("glMap2f", cstr): *fp_glMap2f;
	let cstr = strings::to_c_with_buf("glMap2xOES", cstr_buf): *const u8;
	glMap2xOES = get_proc_address("glMap2xOES", cstr): *fp_glMap2xOES;
	let cstr = strings::to_c_with_buf("glMapBuffer", cstr_buf): *const u8;
	glMapBuffer = get_proc_address("glMapBuffer", cstr): *fp_glMapBuffer;
	let cstr = strings::to_c_with_buf("glMapBufferARB", cstr_buf): *const u8;
	glMapBufferARB = get_proc_address("glMapBufferARB", cstr): *fp_glMapBufferARB;
	let cstr = strings::to_c_with_buf("glMapBufferRange", cstr_buf): *const u8;
	glMapBufferRange = get_proc_address("glMapBufferRange", cstr): *fp_glMapBufferRange;
	let cstr = strings::to_c_with_buf("glMapControlPointsNV", cstr_buf): *const u8;
	glMapControlPointsNV = get_proc_address("glMapControlPointsNV", cstr): *fp_glMapControlPointsNV;
	let cstr = strings::to_c_with_buf("glMapGrid1d", cstr_buf): *const u8;
	glMapGrid1d = get_proc_address("glMapGrid1d", cstr): *fp_glMapGrid1d;
	let cstr = strings::to_c_with_buf("glMapGrid1f", cstr_buf): *const u8;
	glMapGrid1f = get_proc_address("glMapGrid1f", cstr): *fp_glMapGrid1f;
	let cstr = strings::to_c_with_buf("glMapGrid1xOES", cstr_buf): *const u8;
	glMapGrid1xOES = get_proc_address("glMapGrid1xOES", cstr): *fp_glMapGrid1xOES;
	let cstr = strings::to_c_with_buf("glMapGrid2d", cstr_buf): *const u8;
	glMapGrid2d = get_proc_address("glMapGrid2d", cstr): *fp_glMapGrid2d;
	let cstr = strings::to_c_with_buf("glMapGrid2f", cstr_buf): *const u8;
	glMapGrid2f = get_proc_address("glMapGrid2f", cstr): *fp_glMapGrid2f;
	let cstr = strings::to_c_with_buf("glMapGrid2xOES", cstr_buf): *const u8;
	glMapGrid2xOES = get_proc_address("glMapGrid2xOES", cstr): *fp_glMapGrid2xOES;
	let cstr = strings::to_c_with_buf("glMapNamedBuffer", cstr_buf): *const u8;
	glMapNamedBuffer = get_proc_address("glMapNamedBuffer", cstr): *fp_glMapNamedBuffer;
	let cstr = strings::to_c_with_buf("glMapNamedBufferEXT", cstr_buf): *const u8;
	glMapNamedBufferEXT = get_proc_address("glMapNamedBufferEXT", cstr): *fp_glMapNamedBufferEXT;
	let cstr = strings::to_c_with_buf("glMapNamedBufferRange", cstr_buf): *const u8;
	glMapNamedBufferRange = get_proc_address("glMapNamedBufferRange", cstr): *fp_glMapNamedBufferRange;
	let cstr = strings::to_c_with_buf("glMapNamedBufferRangeEXT", cstr_buf): *const u8;
	glMapNamedBufferRangeEXT = get_proc_address("glMapNamedBufferRangeEXT", cstr): *fp_glMapNamedBufferRangeEXT;
	let cstr = strings::to_c_with_buf("glMapObjectBufferATI", cstr_buf): *const u8;
	glMapObjectBufferATI = get_proc_address("glMapObjectBufferATI", cstr): *fp_glMapObjectBufferATI;
	let cstr = strings::to_c_with_buf("glMapParameterfvNV", cstr_buf): *const u8;
	glMapParameterfvNV = get_proc_address("glMapParameterfvNV", cstr): *fp_glMapParameterfvNV;
	let cstr = strings::to_c_with_buf("glMapParameterivNV", cstr_buf): *const u8;
	glMapParameterivNV = get_proc_address("glMapParameterivNV", cstr): *fp_glMapParameterivNV;
	let cstr = strings::to_c_with_buf("glMapTexture2DINTEL", cstr_buf): *const u8;
	glMapTexture2DINTEL = get_proc_address("glMapTexture2DINTEL", cstr): *fp_glMapTexture2DINTEL;
	let cstr = strings::to_c_with_buf("glMapVertexAttrib1dAPPLE", cstr_buf): *const u8;
	glMapVertexAttrib1dAPPLE = get_proc_address("glMapVertexAttrib1dAPPLE", cstr): *fp_glMapVertexAttrib1dAPPLE;
	let cstr = strings::to_c_with_buf("glMapVertexAttrib1fAPPLE", cstr_buf): *const u8;
	glMapVertexAttrib1fAPPLE = get_proc_address("glMapVertexAttrib1fAPPLE", cstr): *fp_glMapVertexAttrib1fAPPLE;
	let cstr = strings::to_c_with_buf("glMapVertexAttrib2dAPPLE", cstr_buf): *const u8;
	glMapVertexAttrib2dAPPLE = get_proc_address("glMapVertexAttrib2dAPPLE", cstr): *fp_glMapVertexAttrib2dAPPLE;
	let cstr = strings::to_c_with_buf("glMapVertexAttrib2fAPPLE", cstr_buf): *const u8;
	glMapVertexAttrib2fAPPLE = get_proc_address("glMapVertexAttrib2fAPPLE", cstr): *fp_glMapVertexAttrib2fAPPLE;
	let cstr = strings::to_c_with_buf("glMaterialf", cstr_buf): *const u8;
	glMaterialf = get_proc_address("glMaterialf", cstr): *fp_glMaterialf;
	let cstr = strings::to_c_with_buf("glMaterialfv", cstr_buf): *const u8;
	glMaterialfv = get_proc_address("glMaterialfv", cstr): *fp_glMaterialfv;
	let cstr = strings::to_c_with_buf("glMateriali", cstr_buf): *const u8;
	glMateriali = get_proc_address("glMateriali", cstr): *fp_glMateriali;
	let cstr = strings::to_c_with_buf("glMaterialiv", cstr_buf): *const u8;
	glMaterialiv = get_proc_address("glMaterialiv", cstr): *fp_glMaterialiv;
	let cstr = strings::to_c_with_buf("glMaterialxOES", cstr_buf): *const u8;
	glMaterialxOES = get_proc_address("glMaterialxOES", cstr): *fp_glMaterialxOES;
	let cstr = strings::to_c_with_buf("glMaterialxvOES", cstr_buf): *const u8;
	glMaterialxvOES = get_proc_address("glMaterialxvOES", cstr): *fp_glMaterialxvOES;
	let cstr = strings::to_c_with_buf("glMatrixFrustumEXT", cstr_buf): *const u8;
	glMatrixFrustumEXT = get_proc_address("glMatrixFrustumEXT", cstr): *fp_glMatrixFrustumEXT;
	let cstr = strings::to_c_with_buf("glMatrixIndexPointerARB", cstr_buf): *const u8;
	glMatrixIndexPointerARB = get_proc_address("glMatrixIndexPointerARB", cstr): *fp_glMatrixIndexPointerARB;
	let cstr = strings::to_c_with_buf("glMatrixIndexubvARB", cstr_buf): *const u8;
	glMatrixIndexubvARB = get_proc_address("glMatrixIndexubvARB", cstr): *fp_glMatrixIndexubvARB;
	let cstr = strings::to_c_with_buf("glMatrixIndexuivARB", cstr_buf): *const u8;
	glMatrixIndexuivARB = get_proc_address("glMatrixIndexuivARB", cstr): *fp_glMatrixIndexuivARB;
	let cstr = strings::to_c_with_buf("glMatrixIndexusvARB", cstr_buf): *const u8;
	glMatrixIndexusvARB = get_proc_address("glMatrixIndexusvARB", cstr): *fp_glMatrixIndexusvARB;
	let cstr = strings::to_c_with_buf("glMatrixLoad3x2fNV", cstr_buf): *const u8;
	glMatrixLoad3x2fNV = get_proc_address("glMatrixLoad3x2fNV", cstr): *fp_glMatrixLoad3x2fNV;
	let cstr = strings::to_c_with_buf("glMatrixLoad3x3fNV", cstr_buf): *const u8;
	glMatrixLoad3x3fNV = get_proc_address("glMatrixLoad3x3fNV", cstr): *fp_glMatrixLoad3x3fNV;
	let cstr = strings::to_c_with_buf("glMatrixLoadIdentityEXT", cstr_buf): *const u8;
	glMatrixLoadIdentityEXT = get_proc_address("glMatrixLoadIdentityEXT", cstr): *fp_glMatrixLoadIdentityEXT;
	let cstr = strings::to_c_with_buf("glMatrixLoadTranspose3x3fNV", cstr_buf): *const u8;
	glMatrixLoadTranspose3x3fNV = get_proc_address("glMatrixLoadTranspose3x3fNV", cstr): *fp_glMatrixLoadTranspose3x3fNV;
	let cstr = strings::to_c_with_buf("glMatrixLoadTransposedEXT", cstr_buf): *const u8;
	glMatrixLoadTransposedEXT = get_proc_address("glMatrixLoadTransposedEXT", cstr): *fp_glMatrixLoadTransposedEXT;
	let cstr = strings::to_c_with_buf("glMatrixLoadTransposefEXT", cstr_buf): *const u8;
	glMatrixLoadTransposefEXT = get_proc_address("glMatrixLoadTransposefEXT", cstr): *fp_glMatrixLoadTransposefEXT;
	let cstr = strings::to_c_with_buf("glMatrixLoaddEXT", cstr_buf): *const u8;
	glMatrixLoaddEXT = get_proc_address("glMatrixLoaddEXT", cstr): *fp_glMatrixLoaddEXT;
	let cstr = strings::to_c_with_buf("glMatrixLoadfEXT", cstr_buf): *const u8;
	glMatrixLoadfEXT = get_proc_address("glMatrixLoadfEXT", cstr): *fp_glMatrixLoadfEXT;
	let cstr = strings::to_c_with_buf("glMatrixMode", cstr_buf): *const u8;
	glMatrixMode = get_proc_address("glMatrixMode", cstr): *fp_glMatrixMode;
	let cstr = strings::to_c_with_buf("glMatrixMult3x2fNV", cstr_buf): *const u8;
	glMatrixMult3x2fNV = get_proc_address("glMatrixMult3x2fNV", cstr): *fp_glMatrixMult3x2fNV;
	let cstr = strings::to_c_with_buf("glMatrixMult3x3fNV", cstr_buf): *const u8;
	glMatrixMult3x3fNV = get_proc_address("glMatrixMult3x3fNV", cstr): *fp_glMatrixMult3x3fNV;
	let cstr = strings::to_c_with_buf("glMatrixMultTranspose3x3fNV", cstr_buf): *const u8;
	glMatrixMultTranspose3x3fNV = get_proc_address("glMatrixMultTranspose3x3fNV", cstr): *fp_glMatrixMultTranspose3x3fNV;
	let cstr = strings::to_c_with_buf("glMatrixMultTransposedEXT", cstr_buf): *const u8;
	glMatrixMultTransposedEXT = get_proc_address("glMatrixMultTransposedEXT", cstr): *fp_glMatrixMultTransposedEXT;
	let cstr = strings::to_c_with_buf("glMatrixMultTransposefEXT", cstr_buf): *const u8;
	glMatrixMultTransposefEXT = get_proc_address("glMatrixMultTransposefEXT", cstr): *fp_glMatrixMultTransposefEXT;
	let cstr = strings::to_c_with_buf("glMatrixMultdEXT", cstr_buf): *const u8;
	glMatrixMultdEXT = get_proc_address("glMatrixMultdEXT", cstr): *fp_glMatrixMultdEXT;
	let cstr = strings::to_c_with_buf("glMatrixMultfEXT", cstr_buf): *const u8;
	glMatrixMultfEXT = get_proc_address("glMatrixMultfEXT", cstr): *fp_glMatrixMultfEXT;
	let cstr = strings::to_c_with_buf("glMatrixOrthoEXT", cstr_buf): *const u8;
	glMatrixOrthoEXT = get_proc_address("glMatrixOrthoEXT", cstr): *fp_glMatrixOrthoEXT;
	let cstr = strings::to_c_with_buf("glMatrixPopEXT", cstr_buf): *const u8;
	glMatrixPopEXT = get_proc_address("glMatrixPopEXT", cstr): *fp_glMatrixPopEXT;
	let cstr = strings::to_c_with_buf("glMatrixPushEXT", cstr_buf): *const u8;
	glMatrixPushEXT = get_proc_address("glMatrixPushEXT", cstr): *fp_glMatrixPushEXT;
	let cstr = strings::to_c_with_buf("glMatrixRotatedEXT", cstr_buf): *const u8;
	glMatrixRotatedEXT = get_proc_address("glMatrixRotatedEXT", cstr): *fp_glMatrixRotatedEXT;
	let cstr = strings::to_c_with_buf("glMatrixRotatefEXT", cstr_buf): *const u8;
	glMatrixRotatefEXT = get_proc_address("glMatrixRotatefEXT", cstr): *fp_glMatrixRotatefEXT;
	let cstr = strings::to_c_with_buf("glMatrixScaledEXT", cstr_buf): *const u8;
	glMatrixScaledEXT = get_proc_address("glMatrixScaledEXT", cstr): *fp_glMatrixScaledEXT;
	let cstr = strings::to_c_with_buf("glMatrixScalefEXT", cstr_buf): *const u8;
	glMatrixScalefEXT = get_proc_address("glMatrixScalefEXT", cstr): *fp_glMatrixScalefEXT;
	let cstr = strings::to_c_with_buf("glMatrixTranslatedEXT", cstr_buf): *const u8;
	glMatrixTranslatedEXT = get_proc_address("glMatrixTranslatedEXT", cstr): *fp_glMatrixTranslatedEXT;
	let cstr = strings::to_c_with_buf("glMatrixTranslatefEXT", cstr_buf): *const u8;
	glMatrixTranslatefEXT = get_proc_address("glMatrixTranslatefEXT", cstr): *fp_glMatrixTranslatefEXT;
	let cstr = strings::to_c_with_buf("glMaxShaderCompilerThreadsARB", cstr_buf): *const u8;
	glMaxShaderCompilerThreadsARB = get_proc_address("glMaxShaderCompilerThreadsARB", cstr): *fp_glMaxShaderCompilerThreadsARB;
	let cstr = strings::to_c_with_buf("glMaxShaderCompilerThreadsKHR", cstr_buf): *const u8;
	glMaxShaderCompilerThreadsKHR = get_proc_address("glMaxShaderCompilerThreadsKHR", cstr): *fp_glMaxShaderCompilerThreadsKHR;
	let cstr = strings::to_c_with_buf("glMemoryBarrier", cstr_buf): *const u8;
	glMemoryBarrier = get_proc_address("glMemoryBarrier", cstr): *fp_glMemoryBarrier;
	let cstr = strings::to_c_with_buf("glMemoryBarrierByRegion", cstr_buf): *const u8;
	glMemoryBarrierByRegion = get_proc_address("glMemoryBarrierByRegion", cstr): *fp_glMemoryBarrierByRegion;
	let cstr = strings::to_c_with_buf("glMemoryBarrierEXT", cstr_buf): *const u8;
	glMemoryBarrierEXT = get_proc_address("glMemoryBarrierEXT", cstr): *fp_glMemoryBarrierEXT;
	let cstr = strings::to_c_with_buf("glMemoryObjectParameterivEXT", cstr_buf): *const u8;
	glMemoryObjectParameterivEXT = get_proc_address("glMemoryObjectParameterivEXT", cstr): *fp_glMemoryObjectParameterivEXT;
	let cstr = strings::to_c_with_buf("glMinSampleShadingARB", cstr_buf): *const u8;
	glMinSampleShadingARB = get_proc_address("glMinSampleShadingARB", cstr): *fp_glMinSampleShadingARB;
	let cstr = strings::to_c_with_buf("glMinmaxEXT", cstr_buf): *const u8;
	glMinmaxEXT = get_proc_address("glMinmaxEXT", cstr): *fp_glMinmaxEXT;
	let cstr = strings::to_c_with_buf("glMultMatrixd", cstr_buf): *const u8;
	glMultMatrixd = get_proc_address("glMultMatrixd", cstr): *fp_glMultMatrixd;
	let cstr = strings::to_c_with_buf("glMultMatrixf", cstr_buf): *const u8;
	glMultMatrixf = get_proc_address("glMultMatrixf", cstr): *fp_glMultMatrixf;
	let cstr = strings::to_c_with_buf("glMultMatrixxOES", cstr_buf): *const u8;
	glMultMatrixxOES = get_proc_address("glMultMatrixxOES", cstr): *fp_glMultMatrixxOES;
	let cstr = strings::to_c_with_buf("glMultTransposeMatrixd", cstr_buf): *const u8;
	glMultTransposeMatrixd = get_proc_address("glMultTransposeMatrixd", cstr): *fp_glMultTransposeMatrixd;
	let cstr = strings::to_c_with_buf("glMultTransposeMatrixdARB", cstr_buf): *const u8;
	glMultTransposeMatrixdARB = get_proc_address("glMultTransposeMatrixdARB", cstr): *fp_glMultTransposeMatrixdARB;
	let cstr = strings::to_c_with_buf("glMultTransposeMatrixf", cstr_buf): *const u8;
	glMultTransposeMatrixf = get_proc_address("glMultTransposeMatrixf", cstr): *fp_glMultTransposeMatrixf;
	let cstr = strings::to_c_with_buf("glMultTransposeMatrixfARB", cstr_buf): *const u8;
	glMultTransposeMatrixfARB = get_proc_address("glMultTransposeMatrixfARB", cstr): *fp_glMultTransposeMatrixfARB;
	let cstr = strings::to_c_with_buf("glMultTransposeMatrixxOES", cstr_buf): *const u8;
	glMultTransposeMatrixxOES = get_proc_address("glMultTransposeMatrixxOES", cstr): *fp_glMultTransposeMatrixxOES;
	let cstr = strings::to_c_with_buf("glMultiDrawArrays", cstr_buf): *const u8;
	glMultiDrawArrays = get_proc_address("glMultiDrawArrays", cstr): *fp_glMultiDrawArrays;
	let cstr = strings::to_c_with_buf("glMultiDrawArraysEXT", cstr_buf): *const u8;
	glMultiDrawArraysEXT = get_proc_address("glMultiDrawArraysEXT", cstr): *fp_glMultiDrawArraysEXT;
	let cstr = strings::to_c_with_buf("glMultiDrawArraysIndirect", cstr_buf): *const u8;
	glMultiDrawArraysIndirect = get_proc_address("glMultiDrawArraysIndirect", cstr): *fp_glMultiDrawArraysIndirect;
	let cstr = strings::to_c_with_buf("glMultiDrawArraysIndirectAMD", cstr_buf): *const u8;
	glMultiDrawArraysIndirectAMD = get_proc_address("glMultiDrawArraysIndirectAMD", cstr): *fp_glMultiDrawArraysIndirectAMD;
	let cstr = strings::to_c_with_buf("glMultiDrawArraysIndirectBindlessCountNV", cstr_buf): *const u8;
	glMultiDrawArraysIndirectBindlessCountNV = get_proc_address("glMultiDrawArraysIndirectBindlessCountNV", cstr): *fp_glMultiDrawArraysIndirectBindlessCountNV;
	let cstr = strings::to_c_with_buf("glMultiDrawArraysIndirectBindlessNV", cstr_buf): *const u8;
	glMultiDrawArraysIndirectBindlessNV = get_proc_address("glMultiDrawArraysIndirectBindlessNV", cstr): *fp_glMultiDrawArraysIndirectBindlessNV;
	let cstr = strings::to_c_with_buf("glMultiDrawArraysIndirectCountARB", cstr_buf): *const u8;
	glMultiDrawArraysIndirectCountARB = get_proc_address("glMultiDrawArraysIndirectCountARB", cstr): *fp_glMultiDrawArraysIndirectCountARB;
	let cstr = strings::to_c_with_buf("glMultiDrawElementArrayAPPLE", cstr_buf): *const u8;
	glMultiDrawElementArrayAPPLE = get_proc_address("glMultiDrawElementArrayAPPLE", cstr): *fp_glMultiDrawElementArrayAPPLE;
	let cstr = strings::to_c_with_buf("glMultiDrawElements", cstr_buf): *const u8;
	glMultiDrawElements = get_proc_address("glMultiDrawElements", cstr): *fp_glMultiDrawElements;
	let cstr = strings::to_c_with_buf("glMultiDrawElementsBaseVertex", cstr_buf): *const u8;
	glMultiDrawElementsBaseVertex = get_proc_address("glMultiDrawElementsBaseVertex", cstr): *fp_glMultiDrawElementsBaseVertex;
	let cstr = strings::to_c_with_buf("glMultiDrawElementsEXT", cstr_buf): *const u8;
	glMultiDrawElementsEXT = get_proc_address("glMultiDrawElementsEXT", cstr): *fp_glMultiDrawElementsEXT;
	let cstr = strings::to_c_with_buf("glMultiDrawElementsIndirect", cstr_buf): *const u8;
	glMultiDrawElementsIndirect = get_proc_address("glMultiDrawElementsIndirect", cstr): *fp_glMultiDrawElementsIndirect;
	let cstr = strings::to_c_with_buf("glMultiDrawElementsIndirectAMD", cstr_buf): *const u8;
	glMultiDrawElementsIndirectAMD = get_proc_address("glMultiDrawElementsIndirectAMD", cstr): *fp_glMultiDrawElementsIndirectAMD;
	let cstr = strings::to_c_with_buf("glMultiDrawElementsIndirectBindlessCountNV", cstr_buf): *const u8;
	glMultiDrawElementsIndirectBindlessCountNV = get_proc_address("glMultiDrawElementsIndirectBindlessCountNV", cstr): *fp_glMultiDrawElementsIndirectBindlessCountNV;
	let cstr = strings::to_c_with_buf("glMultiDrawElementsIndirectBindlessNV", cstr_buf): *const u8;
	glMultiDrawElementsIndirectBindlessNV = get_proc_address("glMultiDrawElementsIndirectBindlessNV", cstr): *fp_glMultiDrawElementsIndirectBindlessNV;
	let cstr = strings::to_c_with_buf("glMultiDrawElementsIndirectCountARB", cstr_buf): *const u8;
	glMultiDrawElementsIndirectCountARB = get_proc_address("glMultiDrawElementsIndirectCountARB", cstr): *fp_glMultiDrawElementsIndirectCountARB;
	let cstr = strings::to_c_with_buf("glMultiDrawMeshTasksIndirectCountNV", cstr_buf): *const u8;
	glMultiDrawMeshTasksIndirectCountNV = get_proc_address("glMultiDrawMeshTasksIndirectCountNV", cstr): *fp_glMultiDrawMeshTasksIndirectCountNV;
	let cstr = strings::to_c_with_buf("glMultiDrawMeshTasksIndirectNV", cstr_buf): *const u8;
	glMultiDrawMeshTasksIndirectNV = get_proc_address("glMultiDrawMeshTasksIndirectNV", cstr): *fp_glMultiDrawMeshTasksIndirectNV;
	let cstr = strings::to_c_with_buf("glMultiDrawRangeElementArrayAPPLE", cstr_buf): *const u8;
	glMultiDrawRangeElementArrayAPPLE = get_proc_address("glMultiDrawRangeElementArrayAPPLE", cstr): *fp_glMultiDrawRangeElementArrayAPPLE;
	let cstr = strings::to_c_with_buf("glMultiModeDrawArraysIBM", cstr_buf): *const u8;
	glMultiModeDrawArraysIBM = get_proc_address("glMultiModeDrawArraysIBM", cstr): *fp_glMultiModeDrawArraysIBM;
	let cstr = strings::to_c_with_buf("glMultiModeDrawElementsIBM", cstr_buf): *const u8;
	glMultiModeDrawElementsIBM = get_proc_address("glMultiModeDrawElementsIBM", cstr): *fp_glMultiModeDrawElementsIBM;
	let cstr = strings::to_c_with_buf("glMultiTexBufferEXT", cstr_buf): *const u8;
	glMultiTexBufferEXT = get_proc_address("glMultiTexBufferEXT", cstr): *fp_glMultiTexBufferEXT;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1bOES", cstr_buf): *const u8;
	glMultiTexCoord1bOES = get_proc_address("glMultiTexCoord1bOES", cstr): *fp_glMultiTexCoord1bOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1bvOES", cstr_buf): *const u8;
	glMultiTexCoord1bvOES = get_proc_address("glMultiTexCoord1bvOES", cstr): *fp_glMultiTexCoord1bvOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1d", cstr_buf): *const u8;
	glMultiTexCoord1d = get_proc_address("glMultiTexCoord1d", cstr): *fp_glMultiTexCoord1d;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1dARB", cstr_buf): *const u8;
	glMultiTexCoord1dARB = get_proc_address("glMultiTexCoord1dARB", cstr): *fp_glMultiTexCoord1dARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1dv", cstr_buf): *const u8;
	glMultiTexCoord1dv = get_proc_address("glMultiTexCoord1dv", cstr): *fp_glMultiTexCoord1dv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1dvARB", cstr_buf): *const u8;
	glMultiTexCoord1dvARB = get_proc_address("glMultiTexCoord1dvARB", cstr): *fp_glMultiTexCoord1dvARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1f", cstr_buf): *const u8;
	glMultiTexCoord1f = get_proc_address("glMultiTexCoord1f", cstr): *fp_glMultiTexCoord1f;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1fARB", cstr_buf): *const u8;
	glMultiTexCoord1fARB = get_proc_address("glMultiTexCoord1fARB", cstr): *fp_glMultiTexCoord1fARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1fv", cstr_buf): *const u8;
	glMultiTexCoord1fv = get_proc_address("glMultiTexCoord1fv", cstr): *fp_glMultiTexCoord1fv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1fvARB", cstr_buf): *const u8;
	glMultiTexCoord1fvARB = get_proc_address("glMultiTexCoord1fvARB", cstr): *fp_glMultiTexCoord1fvARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1hNV", cstr_buf): *const u8;
	glMultiTexCoord1hNV = get_proc_address("glMultiTexCoord1hNV", cstr): *fp_glMultiTexCoord1hNV;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1hvNV", cstr_buf): *const u8;
	glMultiTexCoord1hvNV = get_proc_address("glMultiTexCoord1hvNV", cstr): *fp_glMultiTexCoord1hvNV;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1i", cstr_buf): *const u8;
	glMultiTexCoord1i = get_proc_address("glMultiTexCoord1i", cstr): *fp_glMultiTexCoord1i;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1iARB", cstr_buf): *const u8;
	glMultiTexCoord1iARB = get_proc_address("glMultiTexCoord1iARB", cstr): *fp_glMultiTexCoord1iARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1iv", cstr_buf): *const u8;
	glMultiTexCoord1iv = get_proc_address("glMultiTexCoord1iv", cstr): *fp_glMultiTexCoord1iv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1ivARB", cstr_buf): *const u8;
	glMultiTexCoord1ivARB = get_proc_address("glMultiTexCoord1ivARB", cstr): *fp_glMultiTexCoord1ivARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1s", cstr_buf): *const u8;
	glMultiTexCoord1s = get_proc_address("glMultiTexCoord1s", cstr): *fp_glMultiTexCoord1s;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1sARB", cstr_buf): *const u8;
	glMultiTexCoord1sARB = get_proc_address("glMultiTexCoord1sARB", cstr): *fp_glMultiTexCoord1sARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1sv", cstr_buf): *const u8;
	glMultiTexCoord1sv = get_proc_address("glMultiTexCoord1sv", cstr): *fp_glMultiTexCoord1sv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1svARB", cstr_buf): *const u8;
	glMultiTexCoord1svARB = get_proc_address("glMultiTexCoord1svARB", cstr): *fp_glMultiTexCoord1svARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1xOES", cstr_buf): *const u8;
	glMultiTexCoord1xOES = get_proc_address("glMultiTexCoord1xOES", cstr): *fp_glMultiTexCoord1xOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1xvOES", cstr_buf): *const u8;
	glMultiTexCoord1xvOES = get_proc_address("glMultiTexCoord1xvOES", cstr): *fp_glMultiTexCoord1xvOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2bOES", cstr_buf): *const u8;
	glMultiTexCoord2bOES = get_proc_address("glMultiTexCoord2bOES", cstr): *fp_glMultiTexCoord2bOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2bvOES", cstr_buf): *const u8;
	glMultiTexCoord2bvOES = get_proc_address("glMultiTexCoord2bvOES", cstr): *fp_glMultiTexCoord2bvOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2d", cstr_buf): *const u8;
	glMultiTexCoord2d = get_proc_address("glMultiTexCoord2d", cstr): *fp_glMultiTexCoord2d;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2dARB", cstr_buf): *const u8;
	glMultiTexCoord2dARB = get_proc_address("glMultiTexCoord2dARB", cstr): *fp_glMultiTexCoord2dARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2dv", cstr_buf): *const u8;
	glMultiTexCoord2dv = get_proc_address("glMultiTexCoord2dv", cstr): *fp_glMultiTexCoord2dv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2dvARB", cstr_buf): *const u8;
	glMultiTexCoord2dvARB = get_proc_address("glMultiTexCoord2dvARB", cstr): *fp_glMultiTexCoord2dvARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2f", cstr_buf): *const u8;
	glMultiTexCoord2f = get_proc_address("glMultiTexCoord2f", cstr): *fp_glMultiTexCoord2f;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2fARB", cstr_buf): *const u8;
	glMultiTexCoord2fARB = get_proc_address("glMultiTexCoord2fARB", cstr): *fp_glMultiTexCoord2fARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2fv", cstr_buf): *const u8;
	glMultiTexCoord2fv = get_proc_address("glMultiTexCoord2fv", cstr): *fp_glMultiTexCoord2fv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2fvARB", cstr_buf): *const u8;
	glMultiTexCoord2fvARB = get_proc_address("glMultiTexCoord2fvARB", cstr): *fp_glMultiTexCoord2fvARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2hNV", cstr_buf): *const u8;
	glMultiTexCoord2hNV = get_proc_address("glMultiTexCoord2hNV", cstr): *fp_glMultiTexCoord2hNV;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2hvNV", cstr_buf): *const u8;
	glMultiTexCoord2hvNV = get_proc_address("glMultiTexCoord2hvNV", cstr): *fp_glMultiTexCoord2hvNV;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2i", cstr_buf): *const u8;
	glMultiTexCoord2i = get_proc_address("glMultiTexCoord2i", cstr): *fp_glMultiTexCoord2i;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2iARB", cstr_buf): *const u8;
	glMultiTexCoord2iARB = get_proc_address("glMultiTexCoord2iARB", cstr): *fp_glMultiTexCoord2iARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2iv", cstr_buf): *const u8;
	glMultiTexCoord2iv = get_proc_address("glMultiTexCoord2iv", cstr): *fp_glMultiTexCoord2iv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2ivARB", cstr_buf): *const u8;
	glMultiTexCoord2ivARB = get_proc_address("glMultiTexCoord2ivARB", cstr): *fp_glMultiTexCoord2ivARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2s", cstr_buf): *const u8;
	glMultiTexCoord2s = get_proc_address("glMultiTexCoord2s", cstr): *fp_glMultiTexCoord2s;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2sARB", cstr_buf): *const u8;
	glMultiTexCoord2sARB = get_proc_address("glMultiTexCoord2sARB", cstr): *fp_glMultiTexCoord2sARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2sv", cstr_buf): *const u8;
	glMultiTexCoord2sv = get_proc_address("glMultiTexCoord2sv", cstr): *fp_glMultiTexCoord2sv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2svARB", cstr_buf): *const u8;
	glMultiTexCoord2svARB = get_proc_address("glMultiTexCoord2svARB", cstr): *fp_glMultiTexCoord2svARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2xOES", cstr_buf): *const u8;
	glMultiTexCoord2xOES = get_proc_address("glMultiTexCoord2xOES", cstr): *fp_glMultiTexCoord2xOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2xvOES", cstr_buf): *const u8;
	glMultiTexCoord2xvOES = get_proc_address("glMultiTexCoord2xvOES", cstr): *fp_glMultiTexCoord2xvOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3bOES", cstr_buf): *const u8;
	glMultiTexCoord3bOES = get_proc_address("glMultiTexCoord3bOES", cstr): *fp_glMultiTexCoord3bOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3bvOES", cstr_buf): *const u8;
	glMultiTexCoord3bvOES = get_proc_address("glMultiTexCoord3bvOES", cstr): *fp_glMultiTexCoord3bvOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3d", cstr_buf): *const u8;
	glMultiTexCoord3d = get_proc_address("glMultiTexCoord3d", cstr): *fp_glMultiTexCoord3d;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3dARB", cstr_buf): *const u8;
	glMultiTexCoord3dARB = get_proc_address("glMultiTexCoord3dARB", cstr): *fp_glMultiTexCoord3dARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3dv", cstr_buf): *const u8;
	glMultiTexCoord3dv = get_proc_address("glMultiTexCoord3dv", cstr): *fp_glMultiTexCoord3dv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3dvARB", cstr_buf): *const u8;
	glMultiTexCoord3dvARB = get_proc_address("glMultiTexCoord3dvARB", cstr): *fp_glMultiTexCoord3dvARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3f", cstr_buf): *const u8;
	glMultiTexCoord3f = get_proc_address("glMultiTexCoord3f", cstr): *fp_glMultiTexCoord3f;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3fARB", cstr_buf): *const u8;
	glMultiTexCoord3fARB = get_proc_address("glMultiTexCoord3fARB", cstr): *fp_glMultiTexCoord3fARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3fv", cstr_buf): *const u8;
	glMultiTexCoord3fv = get_proc_address("glMultiTexCoord3fv", cstr): *fp_glMultiTexCoord3fv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3fvARB", cstr_buf): *const u8;
	glMultiTexCoord3fvARB = get_proc_address("glMultiTexCoord3fvARB", cstr): *fp_glMultiTexCoord3fvARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3hNV", cstr_buf): *const u8;
	glMultiTexCoord3hNV = get_proc_address("glMultiTexCoord3hNV", cstr): *fp_glMultiTexCoord3hNV;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3hvNV", cstr_buf): *const u8;
	glMultiTexCoord3hvNV = get_proc_address("glMultiTexCoord3hvNV", cstr): *fp_glMultiTexCoord3hvNV;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3i", cstr_buf): *const u8;
	glMultiTexCoord3i = get_proc_address("glMultiTexCoord3i", cstr): *fp_glMultiTexCoord3i;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3iARB", cstr_buf): *const u8;
	glMultiTexCoord3iARB = get_proc_address("glMultiTexCoord3iARB", cstr): *fp_glMultiTexCoord3iARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3iv", cstr_buf): *const u8;
	glMultiTexCoord3iv = get_proc_address("glMultiTexCoord3iv", cstr): *fp_glMultiTexCoord3iv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3ivARB", cstr_buf): *const u8;
	glMultiTexCoord3ivARB = get_proc_address("glMultiTexCoord3ivARB", cstr): *fp_glMultiTexCoord3ivARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3s", cstr_buf): *const u8;
	glMultiTexCoord3s = get_proc_address("glMultiTexCoord3s", cstr): *fp_glMultiTexCoord3s;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3sARB", cstr_buf): *const u8;
	glMultiTexCoord3sARB = get_proc_address("glMultiTexCoord3sARB", cstr): *fp_glMultiTexCoord3sARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3sv", cstr_buf): *const u8;
	glMultiTexCoord3sv = get_proc_address("glMultiTexCoord3sv", cstr): *fp_glMultiTexCoord3sv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3svARB", cstr_buf): *const u8;
	glMultiTexCoord3svARB = get_proc_address("glMultiTexCoord3svARB", cstr): *fp_glMultiTexCoord3svARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3xOES", cstr_buf): *const u8;
	glMultiTexCoord3xOES = get_proc_address("glMultiTexCoord3xOES", cstr): *fp_glMultiTexCoord3xOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3xvOES", cstr_buf): *const u8;
	glMultiTexCoord3xvOES = get_proc_address("glMultiTexCoord3xvOES", cstr): *fp_glMultiTexCoord3xvOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4bOES", cstr_buf): *const u8;
	glMultiTexCoord4bOES = get_proc_address("glMultiTexCoord4bOES", cstr): *fp_glMultiTexCoord4bOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4bvOES", cstr_buf): *const u8;
	glMultiTexCoord4bvOES = get_proc_address("glMultiTexCoord4bvOES", cstr): *fp_glMultiTexCoord4bvOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4d", cstr_buf): *const u8;
	glMultiTexCoord4d = get_proc_address("glMultiTexCoord4d", cstr): *fp_glMultiTexCoord4d;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4dARB", cstr_buf): *const u8;
	glMultiTexCoord4dARB = get_proc_address("glMultiTexCoord4dARB", cstr): *fp_glMultiTexCoord4dARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4dv", cstr_buf): *const u8;
	glMultiTexCoord4dv = get_proc_address("glMultiTexCoord4dv", cstr): *fp_glMultiTexCoord4dv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4dvARB", cstr_buf): *const u8;
	glMultiTexCoord4dvARB = get_proc_address("glMultiTexCoord4dvARB", cstr): *fp_glMultiTexCoord4dvARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4f", cstr_buf): *const u8;
	glMultiTexCoord4f = get_proc_address("glMultiTexCoord4f", cstr): *fp_glMultiTexCoord4f;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4fARB", cstr_buf): *const u8;
	glMultiTexCoord4fARB = get_proc_address("glMultiTexCoord4fARB", cstr): *fp_glMultiTexCoord4fARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4fv", cstr_buf): *const u8;
	glMultiTexCoord4fv = get_proc_address("glMultiTexCoord4fv", cstr): *fp_glMultiTexCoord4fv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4fvARB", cstr_buf): *const u8;
	glMultiTexCoord4fvARB = get_proc_address("glMultiTexCoord4fvARB", cstr): *fp_glMultiTexCoord4fvARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4hNV", cstr_buf): *const u8;
	glMultiTexCoord4hNV = get_proc_address("glMultiTexCoord4hNV", cstr): *fp_glMultiTexCoord4hNV;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4hvNV", cstr_buf): *const u8;
	glMultiTexCoord4hvNV = get_proc_address("glMultiTexCoord4hvNV", cstr): *fp_glMultiTexCoord4hvNV;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4i", cstr_buf): *const u8;
	glMultiTexCoord4i = get_proc_address("glMultiTexCoord4i", cstr): *fp_glMultiTexCoord4i;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4iARB", cstr_buf): *const u8;
	glMultiTexCoord4iARB = get_proc_address("glMultiTexCoord4iARB", cstr): *fp_glMultiTexCoord4iARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4iv", cstr_buf): *const u8;
	glMultiTexCoord4iv = get_proc_address("glMultiTexCoord4iv", cstr): *fp_glMultiTexCoord4iv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4ivARB", cstr_buf): *const u8;
	glMultiTexCoord4ivARB = get_proc_address("glMultiTexCoord4ivARB", cstr): *fp_glMultiTexCoord4ivARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4s", cstr_buf): *const u8;
	glMultiTexCoord4s = get_proc_address("glMultiTexCoord4s", cstr): *fp_glMultiTexCoord4s;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4sARB", cstr_buf): *const u8;
	glMultiTexCoord4sARB = get_proc_address("glMultiTexCoord4sARB", cstr): *fp_glMultiTexCoord4sARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4sv", cstr_buf): *const u8;
	glMultiTexCoord4sv = get_proc_address("glMultiTexCoord4sv", cstr): *fp_glMultiTexCoord4sv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4svARB", cstr_buf): *const u8;
	glMultiTexCoord4svARB = get_proc_address("glMultiTexCoord4svARB", cstr): *fp_glMultiTexCoord4svARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4xOES", cstr_buf): *const u8;
	glMultiTexCoord4xOES = get_proc_address("glMultiTexCoord4xOES", cstr): *fp_glMultiTexCoord4xOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4xvOES", cstr_buf): *const u8;
	glMultiTexCoord4xvOES = get_proc_address("glMultiTexCoord4xvOES", cstr): *fp_glMultiTexCoord4xvOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoordPointerEXT", cstr_buf): *const u8;
	glMultiTexCoordPointerEXT = get_proc_address("glMultiTexCoordPointerEXT", cstr): *fp_glMultiTexCoordPointerEXT;
	let cstr = strings::to_c_with_buf("glMultiTexEnvfEXT", cstr_buf): *const u8;
	glMultiTexEnvfEXT = get_proc_address("glMultiTexEnvfEXT", cstr): *fp_glMultiTexEnvfEXT;
	let cstr = strings::to_c_with_buf("glMultiTexEnvfvEXT", cstr_buf): *const u8;
	glMultiTexEnvfvEXT = get_proc_address("glMultiTexEnvfvEXT", cstr): *fp_glMultiTexEnvfvEXT;
	let cstr = strings::to_c_with_buf("glMultiTexEnviEXT", cstr_buf): *const u8;
	glMultiTexEnviEXT = get_proc_address("glMultiTexEnviEXT", cstr): *fp_glMultiTexEnviEXT;
	let cstr = strings::to_c_with_buf("glMultiTexEnvivEXT", cstr_buf): *const u8;
	glMultiTexEnvivEXT = get_proc_address("glMultiTexEnvivEXT", cstr): *fp_glMultiTexEnvivEXT;
	let cstr = strings::to_c_with_buf("glMultiTexGendEXT", cstr_buf): *const u8;
	glMultiTexGendEXT = get_proc_address("glMultiTexGendEXT", cstr): *fp_glMultiTexGendEXT;
	let cstr = strings::to_c_with_buf("glMultiTexGendvEXT", cstr_buf): *const u8;
	glMultiTexGendvEXT = get_proc_address("glMultiTexGendvEXT", cstr): *fp_glMultiTexGendvEXT;
	let cstr = strings::to_c_with_buf("glMultiTexGenfEXT", cstr_buf): *const u8;
	glMultiTexGenfEXT = get_proc_address("glMultiTexGenfEXT", cstr): *fp_glMultiTexGenfEXT;
	let cstr = strings::to_c_with_buf("glMultiTexGenfvEXT", cstr_buf): *const u8;
	glMultiTexGenfvEXT = get_proc_address("glMultiTexGenfvEXT", cstr): *fp_glMultiTexGenfvEXT;
	let cstr = strings::to_c_with_buf("glMultiTexGeniEXT", cstr_buf): *const u8;
	glMultiTexGeniEXT = get_proc_address("glMultiTexGeniEXT", cstr): *fp_glMultiTexGeniEXT;
	let cstr = strings::to_c_with_buf("glMultiTexGenivEXT", cstr_buf): *const u8;
	glMultiTexGenivEXT = get_proc_address("glMultiTexGenivEXT", cstr): *fp_glMultiTexGenivEXT;
	let cstr = strings::to_c_with_buf("glMultiTexImage1DEXT", cstr_buf): *const u8;
	glMultiTexImage1DEXT = get_proc_address("glMultiTexImage1DEXT", cstr): *fp_glMultiTexImage1DEXT;
	let cstr = strings::to_c_with_buf("glMultiTexImage2DEXT", cstr_buf): *const u8;
	glMultiTexImage2DEXT = get_proc_address("glMultiTexImage2DEXT", cstr): *fp_glMultiTexImage2DEXT;
	let cstr = strings::to_c_with_buf("glMultiTexImage3DEXT", cstr_buf): *const u8;
	glMultiTexImage3DEXT = get_proc_address("glMultiTexImage3DEXT", cstr): *fp_glMultiTexImage3DEXT;
	let cstr = strings::to_c_with_buf("glMultiTexParameterIivEXT", cstr_buf): *const u8;
	glMultiTexParameterIivEXT = get_proc_address("glMultiTexParameterIivEXT", cstr): *fp_glMultiTexParameterIivEXT;
	let cstr = strings::to_c_with_buf("glMultiTexParameterIuivEXT", cstr_buf): *const u8;
	glMultiTexParameterIuivEXT = get_proc_address("glMultiTexParameterIuivEXT", cstr): *fp_glMultiTexParameterIuivEXT;
	let cstr = strings::to_c_with_buf("glMultiTexParameterfEXT", cstr_buf): *const u8;
	glMultiTexParameterfEXT = get_proc_address("glMultiTexParameterfEXT", cstr): *fp_glMultiTexParameterfEXT;
	let cstr = strings::to_c_with_buf("glMultiTexParameterfvEXT", cstr_buf): *const u8;
	glMultiTexParameterfvEXT = get_proc_address("glMultiTexParameterfvEXT", cstr): *fp_glMultiTexParameterfvEXT;
	let cstr = strings::to_c_with_buf("glMultiTexParameteriEXT", cstr_buf): *const u8;
	glMultiTexParameteriEXT = get_proc_address("glMultiTexParameteriEXT", cstr): *fp_glMultiTexParameteriEXT;
	let cstr = strings::to_c_with_buf("glMultiTexParameterivEXT", cstr_buf): *const u8;
	glMultiTexParameterivEXT = get_proc_address("glMultiTexParameterivEXT", cstr): *fp_glMultiTexParameterivEXT;
	let cstr = strings::to_c_with_buf("glMultiTexRenderbufferEXT", cstr_buf): *const u8;
	glMultiTexRenderbufferEXT = get_proc_address("glMultiTexRenderbufferEXT", cstr): *fp_glMultiTexRenderbufferEXT;
	let cstr = strings::to_c_with_buf("glMultiTexSubImage1DEXT", cstr_buf): *const u8;
	glMultiTexSubImage1DEXT = get_proc_address("glMultiTexSubImage1DEXT", cstr): *fp_glMultiTexSubImage1DEXT;
	let cstr = strings::to_c_with_buf("glMultiTexSubImage2DEXT", cstr_buf): *const u8;
	glMultiTexSubImage2DEXT = get_proc_address("glMultiTexSubImage2DEXT", cstr): *fp_glMultiTexSubImage2DEXT;
	let cstr = strings::to_c_with_buf("glMultiTexSubImage3DEXT", cstr_buf): *const u8;
	glMultiTexSubImage3DEXT = get_proc_address("glMultiTexSubImage3DEXT", cstr): *fp_glMultiTexSubImage3DEXT;
	let cstr = strings::to_c_with_buf("glMulticastBarrierNV", cstr_buf): *const u8;
	glMulticastBarrierNV = get_proc_address("glMulticastBarrierNV", cstr): *fp_glMulticastBarrierNV;
	let cstr = strings::to_c_with_buf("glMulticastBlitFramebufferNV", cstr_buf): *const u8;
	glMulticastBlitFramebufferNV = get_proc_address("glMulticastBlitFramebufferNV", cstr): *fp_glMulticastBlitFramebufferNV;
	let cstr = strings::to_c_with_buf("glMulticastBufferSubDataNV", cstr_buf): *const u8;
	glMulticastBufferSubDataNV = get_proc_address("glMulticastBufferSubDataNV", cstr): *fp_glMulticastBufferSubDataNV;
	let cstr = strings::to_c_with_buf("glMulticastCopyBufferSubDataNV", cstr_buf): *const u8;
	glMulticastCopyBufferSubDataNV = get_proc_address("glMulticastCopyBufferSubDataNV", cstr): *fp_glMulticastCopyBufferSubDataNV;
	let cstr = strings::to_c_with_buf("glMulticastCopyImageSubDataNV", cstr_buf): *const u8;
	glMulticastCopyImageSubDataNV = get_proc_address("glMulticastCopyImageSubDataNV", cstr): *fp_glMulticastCopyImageSubDataNV;
	let cstr = strings::to_c_with_buf("glMulticastFramebufferSampleLocationsfvNV", cstr_buf): *const u8;
	glMulticastFramebufferSampleLocationsfvNV = get_proc_address("glMulticastFramebufferSampleLocationsfvNV", cstr): *fp_glMulticastFramebufferSampleLocationsfvNV;
	let cstr = strings::to_c_with_buf("glMulticastGetQueryObjecti64vNV", cstr_buf): *const u8;
	glMulticastGetQueryObjecti64vNV = get_proc_address("glMulticastGetQueryObjecti64vNV", cstr): *fp_glMulticastGetQueryObjecti64vNV;
	let cstr = strings::to_c_with_buf("glMulticastGetQueryObjectivNV", cstr_buf): *const u8;
	glMulticastGetQueryObjectivNV = get_proc_address("glMulticastGetQueryObjectivNV", cstr): *fp_glMulticastGetQueryObjectivNV;
	let cstr = strings::to_c_with_buf("glMulticastGetQueryObjectui64vNV", cstr_buf): *const u8;
	glMulticastGetQueryObjectui64vNV = get_proc_address("glMulticastGetQueryObjectui64vNV", cstr): *fp_glMulticastGetQueryObjectui64vNV;
	let cstr = strings::to_c_with_buf("glMulticastGetQueryObjectuivNV", cstr_buf): *const u8;
	glMulticastGetQueryObjectuivNV = get_proc_address("glMulticastGetQueryObjectuivNV", cstr): *fp_glMulticastGetQueryObjectuivNV;
	let cstr = strings::to_c_with_buf("glMulticastScissorArrayvNVX", cstr_buf): *const u8;
	glMulticastScissorArrayvNVX = get_proc_address("glMulticastScissorArrayvNVX", cstr): *fp_glMulticastScissorArrayvNVX;
	let cstr = strings::to_c_with_buf("glMulticastViewportArrayvNVX", cstr_buf): *const u8;
	glMulticastViewportArrayvNVX = get_proc_address("glMulticastViewportArrayvNVX", cstr): *fp_glMulticastViewportArrayvNVX;
	let cstr = strings::to_c_with_buf("glMulticastViewportPositionWScaleNVX", cstr_buf): *const u8;
	glMulticastViewportPositionWScaleNVX = get_proc_address("glMulticastViewportPositionWScaleNVX", cstr): *fp_glMulticastViewportPositionWScaleNVX;
	let cstr = strings::to_c_with_buf("glMulticastWaitSyncNV", cstr_buf): *const u8;
	glMulticastWaitSyncNV = get_proc_address("glMulticastWaitSyncNV", cstr): *fp_glMulticastWaitSyncNV;
	let cstr = strings::to_c_with_buf("glNamedBufferAttachMemoryNV", cstr_buf): *const u8;
	glNamedBufferAttachMemoryNV = get_proc_address("glNamedBufferAttachMemoryNV", cstr): *fp_glNamedBufferAttachMemoryNV;
	let cstr = strings::to_c_with_buf("glNamedBufferData", cstr_buf): *const u8;
	glNamedBufferData = get_proc_address("glNamedBufferData", cstr): *fp_glNamedBufferData;
	let cstr = strings::to_c_with_buf("glNamedBufferDataEXT", cstr_buf): *const u8;
	glNamedBufferDataEXT = get_proc_address("glNamedBufferDataEXT", cstr): *fp_glNamedBufferDataEXT;
	let cstr = strings::to_c_with_buf("glNamedBufferPageCommitmentARB", cstr_buf): *const u8;
	glNamedBufferPageCommitmentARB = get_proc_address("glNamedBufferPageCommitmentARB", cstr): *fp_glNamedBufferPageCommitmentARB;
	let cstr = strings::to_c_with_buf("glNamedBufferPageCommitmentEXT", cstr_buf): *const u8;
	glNamedBufferPageCommitmentEXT = get_proc_address("glNamedBufferPageCommitmentEXT", cstr): *fp_glNamedBufferPageCommitmentEXT;
	let cstr = strings::to_c_with_buf("glNamedBufferPageCommitmentMemNV", cstr_buf): *const u8;
	glNamedBufferPageCommitmentMemNV = get_proc_address("glNamedBufferPageCommitmentMemNV", cstr): *fp_glNamedBufferPageCommitmentMemNV;
	let cstr = strings::to_c_with_buf("glNamedBufferStorage", cstr_buf): *const u8;
	glNamedBufferStorage = get_proc_address("glNamedBufferStorage", cstr): *fp_glNamedBufferStorage;
	let cstr = strings::to_c_with_buf("glNamedBufferStorageEXT", cstr_buf): *const u8;
	glNamedBufferStorageEXT = get_proc_address("glNamedBufferStorageEXT", cstr): *fp_glNamedBufferStorageEXT;
	let cstr = strings::to_c_with_buf("glNamedBufferStorageExternalEXT", cstr_buf): *const u8;
	glNamedBufferStorageExternalEXT = get_proc_address("glNamedBufferStorageExternalEXT", cstr): *fp_glNamedBufferStorageExternalEXT;
	let cstr = strings::to_c_with_buf("glNamedBufferStorageMemEXT", cstr_buf): *const u8;
	glNamedBufferStorageMemEXT = get_proc_address("glNamedBufferStorageMemEXT", cstr): *fp_glNamedBufferStorageMemEXT;
	let cstr = strings::to_c_with_buf("glNamedBufferSubData", cstr_buf): *const u8;
	glNamedBufferSubData = get_proc_address("glNamedBufferSubData", cstr): *fp_glNamedBufferSubData;
	let cstr = strings::to_c_with_buf("glNamedBufferSubDataEXT", cstr_buf): *const u8;
	glNamedBufferSubDataEXT = get_proc_address("glNamedBufferSubDataEXT", cstr): *fp_glNamedBufferSubDataEXT;
	let cstr = strings::to_c_with_buf("glNamedCopyBufferSubDataEXT", cstr_buf): *const u8;
	glNamedCopyBufferSubDataEXT = get_proc_address("glNamedCopyBufferSubDataEXT", cstr): *fp_glNamedCopyBufferSubDataEXT;
	let cstr = strings::to_c_with_buf("glNamedFramebufferDrawBuffer", cstr_buf): *const u8;
	glNamedFramebufferDrawBuffer = get_proc_address("glNamedFramebufferDrawBuffer", cstr): *fp_glNamedFramebufferDrawBuffer;
	let cstr = strings::to_c_with_buf("glNamedFramebufferDrawBuffers", cstr_buf): *const u8;
	glNamedFramebufferDrawBuffers = get_proc_address("glNamedFramebufferDrawBuffers", cstr): *fp_glNamedFramebufferDrawBuffers;
	let cstr = strings::to_c_with_buf("glNamedFramebufferParameteri", cstr_buf): *const u8;
	glNamedFramebufferParameteri = get_proc_address("glNamedFramebufferParameteri", cstr): *fp_glNamedFramebufferParameteri;
	let cstr = strings::to_c_with_buf("glNamedFramebufferParameteriEXT", cstr_buf): *const u8;
	glNamedFramebufferParameteriEXT = get_proc_address("glNamedFramebufferParameteriEXT", cstr): *fp_glNamedFramebufferParameteriEXT;
	let cstr = strings::to_c_with_buf("glNamedFramebufferReadBuffer", cstr_buf): *const u8;
	glNamedFramebufferReadBuffer = get_proc_address("glNamedFramebufferReadBuffer", cstr): *fp_glNamedFramebufferReadBuffer;
	let cstr = strings::to_c_with_buf("glNamedFramebufferRenderbuffer", cstr_buf): *const u8;
	glNamedFramebufferRenderbuffer = get_proc_address("glNamedFramebufferRenderbuffer", cstr): *fp_glNamedFramebufferRenderbuffer;
	let cstr = strings::to_c_with_buf("glNamedFramebufferRenderbufferEXT", cstr_buf): *const u8;
	glNamedFramebufferRenderbufferEXT = get_proc_address("glNamedFramebufferRenderbufferEXT", cstr): *fp_glNamedFramebufferRenderbufferEXT;
	let cstr = strings::to_c_with_buf("glNamedFramebufferSampleLocationsfvARB", cstr_buf): *const u8;
	glNamedFramebufferSampleLocationsfvARB = get_proc_address("glNamedFramebufferSampleLocationsfvARB", cstr): *fp_glNamedFramebufferSampleLocationsfvARB;
	let cstr = strings::to_c_with_buf("glNamedFramebufferSampleLocationsfvNV", cstr_buf): *const u8;
	glNamedFramebufferSampleLocationsfvNV = get_proc_address("glNamedFramebufferSampleLocationsfvNV", cstr): *fp_glNamedFramebufferSampleLocationsfvNV;
	let cstr = strings::to_c_with_buf("glNamedFramebufferSamplePositionsfvAMD", cstr_buf): *const u8;
	glNamedFramebufferSamplePositionsfvAMD = get_proc_address("glNamedFramebufferSamplePositionsfvAMD", cstr): *fp_glNamedFramebufferSamplePositionsfvAMD;
	let cstr = strings::to_c_with_buf("glNamedFramebufferTexture", cstr_buf): *const u8;
	glNamedFramebufferTexture = get_proc_address("glNamedFramebufferTexture", cstr): *fp_glNamedFramebufferTexture;
	let cstr = strings::to_c_with_buf("glNamedFramebufferTexture1DEXT", cstr_buf): *const u8;
	glNamedFramebufferTexture1DEXT = get_proc_address("glNamedFramebufferTexture1DEXT", cstr): *fp_glNamedFramebufferTexture1DEXT;
	let cstr = strings::to_c_with_buf("glNamedFramebufferTexture2DEXT", cstr_buf): *const u8;
	glNamedFramebufferTexture2DEXT = get_proc_address("glNamedFramebufferTexture2DEXT", cstr): *fp_glNamedFramebufferTexture2DEXT;
	let cstr = strings::to_c_with_buf("glNamedFramebufferTexture3DEXT", cstr_buf): *const u8;
	glNamedFramebufferTexture3DEXT = get_proc_address("glNamedFramebufferTexture3DEXT", cstr): *fp_glNamedFramebufferTexture3DEXT;
	let cstr = strings::to_c_with_buf("glNamedFramebufferTextureEXT", cstr_buf): *const u8;
	glNamedFramebufferTextureEXT = get_proc_address("glNamedFramebufferTextureEXT", cstr): *fp_glNamedFramebufferTextureEXT;
	let cstr = strings::to_c_with_buf("glNamedFramebufferTextureFaceEXT", cstr_buf): *const u8;
	glNamedFramebufferTextureFaceEXT = get_proc_address("glNamedFramebufferTextureFaceEXT", cstr): *fp_glNamedFramebufferTextureFaceEXT;
	let cstr = strings::to_c_with_buf("glNamedFramebufferTextureLayer", cstr_buf): *const u8;
	glNamedFramebufferTextureLayer = get_proc_address("glNamedFramebufferTextureLayer", cstr): *fp_glNamedFramebufferTextureLayer;
	let cstr = strings::to_c_with_buf("glNamedFramebufferTextureLayerEXT", cstr_buf): *const u8;
	glNamedFramebufferTextureLayerEXT = get_proc_address("glNamedFramebufferTextureLayerEXT", cstr): *fp_glNamedFramebufferTextureLayerEXT;
	let cstr = strings::to_c_with_buf("glNamedProgramLocalParameter4dEXT", cstr_buf): *const u8;
	glNamedProgramLocalParameter4dEXT = get_proc_address("glNamedProgramLocalParameter4dEXT", cstr): *fp_glNamedProgramLocalParameter4dEXT;
	let cstr = strings::to_c_with_buf("glNamedProgramLocalParameter4dvEXT", cstr_buf): *const u8;
	glNamedProgramLocalParameter4dvEXT = get_proc_address("glNamedProgramLocalParameter4dvEXT", cstr): *fp_glNamedProgramLocalParameter4dvEXT;
	let cstr = strings::to_c_with_buf("glNamedProgramLocalParameter4fEXT", cstr_buf): *const u8;
	glNamedProgramLocalParameter4fEXT = get_proc_address("glNamedProgramLocalParameter4fEXT", cstr): *fp_glNamedProgramLocalParameter4fEXT;
	let cstr = strings::to_c_with_buf("glNamedProgramLocalParameter4fvEXT", cstr_buf): *const u8;
	glNamedProgramLocalParameter4fvEXT = get_proc_address("glNamedProgramLocalParameter4fvEXT", cstr): *fp_glNamedProgramLocalParameter4fvEXT;
	let cstr = strings::to_c_with_buf("glNamedProgramLocalParameterI4iEXT", cstr_buf): *const u8;
	glNamedProgramLocalParameterI4iEXT = get_proc_address("glNamedProgramLocalParameterI4iEXT", cstr): *fp_glNamedProgramLocalParameterI4iEXT;
	let cstr = strings::to_c_with_buf("glNamedProgramLocalParameterI4ivEXT", cstr_buf): *const u8;
	glNamedProgramLocalParameterI4ivEXT = get_proc_address("glNamedProgramLocalParameterI4ivEXT", cstr): *fp_glNamedProgramLocalParameterI4ivEXT;
	let cstr = strings::to_c_with_buf("glNamedProgramLocalParameterI4uiEXT", cstr_buf): *const u8;
	glNamedProgramLocalParameterI4uiEXT = get_proc_address("glNamedProgramLocalParameterI4uiEXT", cstr): *fp_glNamedProgramLocalParameterI4uiEXT;
	let cstr = strings::to_c_with_buf("glNamedProgramLocalParameterI4uivEXT", cstr_buf): *const u8;
	glNamedProgramLocalParameterI4uivEXT = get_proc_address("glNamedProgramLocalParameterI4uivEXT", cstr): *fp_glNamedProgramLocalParameterI4uivEXT;
	let cstr = strings::to_c_with_buf("glNamedProgramLocalParameters4fvEXT", cstr_buf): *const u8;
	glNamedProgramLocalParameters4fvEXT = get_proc_address("glNamedProgramLocalParameters4fvEXT", cstr): *fp_glNamedProgramLocalParameters4fvEXT;
	let cstr = strings::to_c_with_buf("glNamedProgramLocalParametersI4ivEXT", cstr_buf): *const u8;
	glNamedProgramLocalParametersI4ivEXT = get_proc_address("glNamedProgramLocalParametersI4ivEXT", cstr): *fp_glNamedProgramLocalParametersI4ivEXT;
	let cstr = strings::to_c_with_buf("glNamedProgramLocalParametersI4uivEXT", cstr_buf): *const u8;
	glNamedProgramLocalParametersI4uivEXT = get_proc_address("glNamedProgramLocalParametersI4uivEXT", cstr): *fp_glNamedProgramLocalParametersI4uivEXT;
	let cstr = strings::to_c_with_buf("glNamedProgramStringEXT", cstr_buf): *const u8;
	glNamedProgramStringEXT = get_proc_address("glNamedProgramStringEXT", cstr): *fp_glNamedProgramStringEXT;
	let cstr = strings::to_c_with_buf("glNamedRenderbufferStorage", cstr_buf): *const u8;
	glNamedRenderbufferStorage = get_proc_address("glNamedRenderbufferStorage", cstr): *fp_glNamedRenderbufferStorage;
	let cstr = strings::to_c_with_buf("glNamedRenderbufferStorageEXT", cstr_buf): *const u8;
	glNamedRenderbufferStorageEXT = get_proc_address("glNamedRenderbufferStorageEXT", cstr): *fp_glNamedRenderbufferStorageEXT;
	let cstr = strings::to_c_with_buf("glNamedRenderbufferStorageMultisample", cstr_buf): *const u8;
	glNamedRenderbufferStorageMultisample = get_proc_address("glNamedRenderbufferStorageMultisample", cstr): *fp_glNamedRenderbufferStorageMultisample;
	let cstr = strings::to_c_with_buf("glNamedRenderbufferStorageMultisampleAdvancedAMD", cstr_buf): *const u8;
	glNamedRenderbufferStorageMultisampleAdvancedAMD = get_proc_address("glNamedRenderbufferStorageMultisampleAdvancedAMD", cstr): *fp_glNamedRenderbufferStorageMultisampleAdvancedAMD;
	let cstr = strings::to_c_with_buf("glNamedRenderbufferStorageMultisampleCoverageEXT", cstr_buf): *const u8;
	glNamedRenderbufferStorageMultisampleCoverageEXT = get_proc_address("glNamedRenderbufferStorageMultisampleCoverageEXT", cstr): *fp_glNamedRenderbufferStorageMultisampleCoverageEXT;
	let cstr = strings::to_c_with_buf("glNamedRenderbufferStorageMultisampleEXT", cstr_buf): *const u8;
	glNamedRenderbufferStorageMultisampleEXT = get_proc_address("glNamedRenderbufferStorageMultisampleEXT", cstr): *fp_glNamedRenderbufferStorageMultisampleEXT;
	let cstr = strings::to_c_with_buf("glNamedStringARB", cstr_buf): *const u8;
	glNamedStringARB = get_proc_address("glNamedStringARB", cstr): *fp_glNamedStringARB;
	let cstr = strings::to_c_with_buf("glNewList", cstr_buf): *const u8;
	glNewList = get_proc_address("glNewList", cstr): *fp_glNewList;
	let cstr = strings::to_c_with_buf("glNewObjectBufferATI", cstr_buf): *const u8;
	glNewObjectBufferATI = get_proc_address("glNewObjectBufferATI", cstr): *fp_glNewObjectBufferATI;
	let cstr = strings::to_c_with_buf("glNormal3b", cstr_buf): *const u8;
	glNormal3b = get_proc_address("glNormal3b", cstr): *fp_glNormal3b;
	let cstr = strings::to_c_with_buf("glNormal3bv", cstr_buf): *const u8;
	glNormal3bv = get_proc_address("glNormal3bv", cstr): *fp_glNormal3bv;
	let cstr = strings::to_c_with_buf("glNormal3d", cstr_buf): *const u8;
	glNormal3d = get_proc_address("glNormal3d", cstr): *fp_glNormal3d;
	let cstr = strings::to_c_with_buf("glNormal3dv", cstr_buf): *const u8;
	glNormal3dv = get_proc_address("glNormal3dv", cstr): *fp_glNormal3dv;
	let cstr = strings::to_c_with_buf("glNormal3f", cstr_buf): *const u8;
	glNormal3f = get_proc_address("glNormal3f", cstr): *fp_glNormal3f;
	let cstr = strings::to_c_with_buf("glNormal3fVertex3fSUN", cstr_buf): *const u8;
	glNormal3fVertex3fSUN = get_proc_address("glNormal3fVertex3fSUN", cstr): *fp_glNormal3fVertex3fSUN;
	let cstr = strings::to_c_with_buf("glNormal3fVertex3fvSUN", cstr_buf): *const u8;
	glNormal3fVertex3fvSUN = get_proc_address("glNormal3fVertex3fvSUN", cstr): *fp_glNormal3fVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glNormal3fv", cstr_buf): *const u8;
	glNormal3fv = get_proc_address("glNormal3fv", cstr): *fp_glNormal3fv;
	let cstr = strings::to_c_with_buf("glNormal3hNV", cstr_buf): *const u8;
	glNormal3hNV = get_proc_address("glNormal3hNV", cstr): *fp_glNormal3hNV;
	let cstr = strings::to_c_with_buf("glNormal3hvNV", cstr_buf): *const u8;
	glNormal3hvNV = get_proc_address("glNormal3hvNV", cstr): *fp_glNormal3hvNV;
	let cstr = strings::to_c_with_buf("glNormal3i", cstr_buf): *const u8;
	glNormal3i = get_proc_address("glNormal3i", cstr): *fp_glNormal3i;
	let cstr = strings::to_c_with_buf("glNormal3iv", cstr_buf): *const u8;
	glNormal3iv = get_proc_address("glNormal3iv", cstr): *fp_glNormal3iv;
	let cstr = strings::to_c_with_buf("glNormal3s", cstr_buf): *const u8;
	glNormal3s = get_proc_address("glNormal3s", cstr): *fp_glNormal3s;
	let cstr = strings::to_c_with_buf("glNormal3sv", cstr_buf): *const u8;
	glNormal3sv = get_proc_address("glNormal3sv", cstr): *fp_glNormal3sv;
	let cstr = strings::to_c_with_buf("glNormal3xOES", cstr_buf): *const u8;
	glNormal3xOES = get_proc_address("glNormal3xOES", cstr): *fp_glNormal3xOES;
	let cstr = strings::to_c_with_buf("glNormal3xvOES", cstr_buf): *const u8;
	glNormal3xvOES = get_proc_address("glNormal3xvOES", cstr): *fp_glNormal3xvOES;
	let cstr = strings::to_c_with_buf("glNormalFormatNV", cstr_buf): *const u8;
	glNormalFormatNV = get_proc_address("glNormalFormatNV", cstr): *fp_glNormalFormatNV;
	let cstr = strings::to_c_with_buf("glNormalPointer", cstr_buf): *const u8;
	glNormalPointer = get_proc_address("glNormalPointer", cstr): *fp_glNormalPointer;
	let cstr = strings::to_c_with_buf("glNormalPointerEXT", cstr_buf): *const u8;
	glNormalPointerEXT = get_proc_address("glNormalPointerEXT", cstr): *fp_glNormalPointerEXT;
	let cstr = strings::to_c_with_buf("glNormalPointerListIBM", cstr_buf): *const u8;
	glNormalPointerListIBM = get_proc_address("glNormalPointerListIBM", cstr): *fp_glNormalPointerListIBM;
	let cstr = strings::to_c_with_buf("glNormalPointervINTEL", cstr_buf): *const u8;
	glNormalPointervINTEL = get_proc_address("glNormalPointervINTEL", cstr): *fp_glNormalPointervINTEL;
	let cstr = strings::to_c_with_buf("glNormalStream3bATI", cstr_buf): *const u8;
	glNormalStream3bATI = get_proc_address("glNormalStream3bATI", cstr): *fp_glNormalStream3bATI;
	let cstr = strings::to_c_with_buf("glNormalStream3bvATI", cstr_buf): *const u8;
	glNormalStream3bvATI = get_proc_address("glNormalStream3bvATI", cstr): *fp_glNormalStream3bvATI;
	let cstr = strings::to_c_with_buf("glNormalStream3dATI", cstr_buf): *const u8;
	glNormalStream3dATI = get_proc_address("glNormalStream3dATI", cstr): *fp_glNormalStream3dATI;
	let cstr = strings::to_c_with_buf("glNormalStream3dvATI", cstr_buf): *const u8;
	glNormalStream3dvATI = get_proc_address("glNormalStream3dvATI", cstr): *fp_glNormalStream3dvATI;
	let cstr = strings::to_c_with_buf("glNormalStream3fATI", cstr_buf): *const u8;
	glNormalStream3fATI = get_proc_address("glNormalStream3fATI", cstr): *fp_glNormalStream3fATI;
	let cstr = strings::to_c_with_buf("glNormalStream3fvATI", cstr_buf): *const u8;
	glNormalStream3fvATI = get_proc_address("glNormalStream3fvATI", cstr): *fp_glNormalStream3fvATI;
	let cstr = strings::to_c_with_buf("glNormalStream3iATI", cstr_buf): *const u8;
	glNormalStream3iATI = get_proc_address("glNormalStream3iATI", cstr): *fp_glNormalStream3iATI;
	let cstr = strings::to_c_with_buf("glNormalStream3ivATI", cstr_buf): *const u8;
	glNormalStream3ivATI = get_proc_address("glNormalStream3ivATI", cstr): *fp_glNormalStream3ivATI;
	let cstr = strings::to_c_with_buf("glNormalStream3sATI", cstr_buf): *const u8;
	glNormalStream3sATI = get_proc_address("glNormalStream3sATI", cstr): *fp_glNormalStream3sATI;
	let cstr = strings::to_c_with_buf("glNormalStream3svATI", cstr_buf): *const u8;
	glNormalStream3svATI = get_proc_address("glNormalStream3svATI", cstr): *fp_glNormalStream3svATI;
	let cstr = strings::to_c_with_buf("glObjectLabel", cstr_buf): *const u8;
	glObjectLabel = get_proc_address("glObjectLabel", cstr): *fp_glObjectLabel;
	let cstr = strings::to_c_with_buf("glObjectPtrLabel", cstr_buf): *const u8;
	glObjectPtrLabel = get_proc_address("glObjectPtrLabel", cstr): *fp_glObjectPtrLabel;
	let cstr = strings::to_c_with_buf("glObjectPurgeableAPPLE", cstr_buf): *const u8;
	glObjectPurgeableAPPLE = get_proc_address("glObjectPurgeableAPPLE", cstr): *fp_glObjectPurgeableAPPLE;
	let cstr = strings::to_c_with_buf("glObjectUnpurgeableAPPLE", cstr_buf): *const u8;
	glObjectUnpurgeableAPPLE = get_proc_address("glObjectUnpurgeableAPPLE", cstr): *fp_glObjectUnpurgeableAPPLE;
	let cstr = strings::to_c_with_buf("glOrtho", cstr_buf): *const u8;
	glOrtho = get_proc_address("glOrtho", cstr): *fp_glOrtho;
	let cstr = strings::to_c_with_buf("glOrthofOES", cstr_buf): *const u8;
	glOrthofOES = get_proc_address("glOrthofOES", cstr): *fp_glOrthofOES;
	let cstr = strings::to_c_with_buf("glOrthoxOES", cstr_buf): *const u8;
	glOrthoxOES = get_proc_address("glOrthoxOES", cstr): *fp_glOrthoxOES;
	let cstr = strings::to_c_with_buf("glPNTrianglesfATI", cstr_buf): *const u8;
	glPNTrianglesfATI = get_proc_address("glPNTrianglesfATI", cstr): *fp_glPNTrianglesfATI;
	let cstr = strings::to_c_with_buf("glPNTrianglesiATI", cstr_buf): *const u8;
	glPNTrianglesiATI = get_proc_address("glPNTrianglesiATI", cstr): *fp_glPNTrianglesiATI;
	let cstr = strings::to_c_with_buf("glPassTexCoordATI", cstr_buf): *const u8;
	glPassTexCoordATI = get_proc_address("glPassTexCoordATI", cstr): *fp_glPassTexCoordATI;
	let cstr = strings::to_c_with_buf("glPassThrough", cstr_buf): *const u8;
	glPassThrough = get_proc_address("glPassThrough", cstr): *fp_glPassThrough;
	let cstr = strings::to_c_with_buf("glPassThroughxOES", cstr_buf): *const u8;
	glPassThroughxOES = get_proc_address("glPassThroughxOES", cstr): *fp_glPassThroughxOES;
	let cstr = strings::to_c_with_buf("glPatchParameterfv", cstr_buf): *const u8;
	glPatchParameterfv = get_proc_address("glPatchParameterfv", cstr): *fp_glPatchParameterfv;
	let cstr = strings::to_c_with_buf("glPatchParameteri", cstr_buf): *const u8;
	glPatchParameteri = get_proc_address("glPatchParameteri", cstr): *fp_glPatchParameteri;
	let cstr = strings::to_c_with_buf("glPathCommandsNV", cstr_buf): *const u8;
	glPathCommandsNV = get_proc_address("glPathCommandsNV", cstr): *fp_glPathCommandsNV;
	let cstr = strings::to_c_with_buf("glPathCoordsNV", cstr_buf): *const u8;
	glPathCoordsNV = get_proc_address("glPathCoordsNV", cstr): *fp_glPathCoordsNV;
	let cstr = strings::to_c_with_buf("glPathCoverDepthFuncNV", cstr_buf): *const u8;
	glPathCoverDepthFuncNV = get_proc_address("glPathCoverDepthFuncNV", cstr): *fp_glPathCoverDepthFuncNV;
	let cstr = strings::to_c_with_buf("glPathDashArrayNV", cstr_buf): *const u8;
	glPathDashArrayNV = get_proc_address("glPathDashArrayNV", cstr): *fp_glPathDashArrayNV;
	let cstr = strings::to_c_with_buf("glPathGlyphIndexArrayNV", cstr_buf): *const u8;
	glPathGlyphIndexArrayNV = get_proc_address("glPathGlyphIndexArrayNV", cstr): *fp_glPathGlyphIndexArrayNV;
	let cstr = strings::to_c_with_buf("glPathGlyphIndexRangeNV", cstr_buf): *const u8;
	glPathGlyphIndexRangeNV = get_proc_address("glPathGlyphIndexRangeNV", cstr): *fp_glPathGlyphIndexRangeNV;
	let cstr = strings::to_c_with_buf("glPathGlyphRangeNV", cstr_buf): *const u8;
	glPathGlyphRangeNV = get_proc_address("glPathGlyphRangeNV", cstr): *fp_glPathGlyphRangeNV;
	let cstr = strings::to_c_with_buf("glPathGlyphsNV", cstr_buf): *const u8;
	glPathGlyphsNV = get_proc_address("glPathGlyphsNV", cstr): *fp_glPathGlyphsNV;
	let cstr = strings::to_c_with_buf("glPathMemoryGlyphIndexArrayNV", cstr_buf): *const u8;
	glPathMemoryGlyphIndexArrayNV = get_proc_address("glPathMemoryGlyphIndexArrayNV", cstr): *fp_glPathMemoryGlyphIndexArrayNV;
	let cstr = strings::to_c_with_buf("glPathParameterfNV", cstr_buf): *const u8;
	glPathParameterfNV = get_proc_address("glPathParameterfNV", cstr): *fp_glPathParameterfNV;
	let cstr = strings::to_c_with_buf("glPathParameterfvNV", cstr_buf): *const u8;
	glPathParameterfvNV = get_proc_address("glPathParameterfvNV", cstr): *fp_glPathParameterfvNV;
	let cstr = strings::to_c_with_buf("glPathParameteriNV", cstr_buf): *const u8;
	glPathParameteriNV = get_proc_address("glPathParameteriNV", cstr): *fp_glPathParameteriNV;
	let cstr = strings::to_c_with_buf("glPathParameterivNV", cstr_buf): *const u8;
	glPathParameterivNV = get_proc_address("glPathParameterivNV", cstr): *fp_glPathParameterivNV;
	let cstr = strings::to_c_with_buf("glPathStencilDepthOffsetNV", cstr_buf): *const u8;
	glPathStencilDepthOffsetNV = get_proc_address("glPathStencilDepthOffsetNV", cstr): *fp_glPathStencilDepthOffsetNV;
	let cstr = strings::to_c_with_buf("glPathStencilFuncNV", cstr_buf): *const u8;
	glPathStencilFuncNV = get_proc_address("glPathStencilFuncNV", cstr): *fp_glPathStencilFuncNV;
	let cstr = strings::to_c_with_buf("glPathStringNV", cstr_buf): *const u8;
	glPathStringNV = get_proc_address("glPathStringNV", cstr): *fp_glPathStringNV;
	let cstr = strings::to_c_with_buf("glPathSubCommandsNV", cstr_buf): *const u8;
	glPathSubCommandsNV = get_proc_address("glPathSubCommandsNV", cstr): *fp_glPathSubCommandsNV;
	let cstr = strings::to_c_with_buf("glPathSubCoordsNV", cstr_buf): *const u8;
	glPathSubCoordsNV = get_proc_address("glPathSubCoordsNV", cstr): *fp_glPathSubCoordsNV;
	let cstr = strings::to_c_with_buf("glPauseTransformFeedback", cstr_buf): *const u8;
	glPauseTransformFeedback = get_proc_address("glPauseTransformFeedback", cstr): *fp_glPauseTransformFeedback;
	let cstr = strings::to_c_with_buf("glPauseTransformFeedbackNV", cstr_buf): *const u8;
	glPauseTransformFeedbackNV = get_proc_address("glPauseTransformFeedbackNV", cstr): *fp_glPauseTransformFeedbackNV;
	let cstr = strings::to_c_with_buf("glPixelDataRangeNV", cstr_buf): *const u8;
	glPixelDataRangeNV = get_proc_address("glPixelDataRangeNV", cstr): *fp_glPixelDataRangeNV;
	let cstr = strings::to_c_with_buf("glPixelMapfv", cstr_buf): *const u8;
	glPixelMapfv = get_proc_address("glPixelMapfv", cstr): *fp_glPixelMapfv;
	let cstr = strings::to_c_with_buf("glPixelMapuiv", cstr_buf): *const u8;
	glPixelMapuiv = get_proc_address("glPixelMapuiv", cstr): *fp_glPixelMapuiv;
	let cstr = strings::to_c_with_buf("glPixelMapusv", cstr_buf): *const u8;
	glPixelMapusv = get_proc_address("glPixelMapusv", cstr): *fp_glPixelMapusv;
	let cstr = strings::to_c_with_buf("glPixelMapx", cstr_buf): *const u8;
	glPixelMapx = get_proc_address("glPixelMapx", cstr): *fp_glPixelMapx;
	let cstr = strings::to_c_with_buf("glPixelStoref", cstr_buf): *const u8;
	glPixelStoref = get_proc_address("glPixelStoref", cstr): *fp_glPixelStoref;
	let cstr = strings::to_c_with_buf("glPixelStorei", cstr_buf): *const u8;
	glPixelStorei = get_proc_address("glPixelStorei", cstr): *fp_glPixelStorei;
	let cstr = strings::to_c_with_buf("glPixelStorex", cstr_buf): *const u8;
	glPixelStorex = get_proc_address("glPixelStorex", cstr): *fp_glPixelStorex;
	let cstr = strings::to_c_with_buf("glPixelTexGenParameterfSGIS", cstr_buf): *const u8;
	glPixelTexGenParameterfSGIS = get_proc_address("glPixelTexGenParameterfSGIS", cstr): *fp_glPixelTexGenParameterfSGIS;
	let cstr = strings::to_c_with_buf("glPixelTexGenParameterfvSGIS", cstr_buf): *const u8;
	glPixelTexGenParameterfvSGIS = get_proc_address("glPixelTexGenParameterfvSGIS", cstr): *fp_glPixelTexGenParameterfvSGIS;
	let cstr = strings::to_c_with_buf("glPixelTexGenParameteriSGIS", cstr_buf): *const u8;
	glPixelTexGenParameteriSGIS = get_proc_address("glPixelTexGenParameteriSGIS", cstr): *fp_glPixelTexGenParameteriSGIS;
	let cstr = strings::to_c_with_buf("glPixelTexGenParameterivSGIS", cstr_buf): *const u8;
	glPixelTexGenParameterivSGIS = get_proc_address("glPixelTexGenParameterivSGIS", cstr): *fp_glPixelTexGenParameterivSGIS;
	let cstr = strings::to_c_with_buf("glPixelTexGenSGIX", cstr_buf): *const u8;
	glPixelTexGenSGIX = get_proc_address("glPixelTexGenSGIX", cstr): *fp_glPixelTexGenSGIX;
	let cstr = strings::to_c_with_buf("glPixelTransferf", cstr_buf): *const u8;
	glPixelTransferf = get_proc_address("glPixelTransferf", cstr): *fp_glPixelTransferf;
	let cstr = strings::to_c_with_buf("glPixelTransferi", cstr_buf): *const u8;
	glPixelTransferi = get_proc_address("glPixelTransferi", cstr): *fp_glPixelTransferi;
	let cstr = strings::to_c_with_buf("glPixelTransferxOES", cstr_buf): *const u8;
	glPixelTransferxOES = get_proc_address("glPixelTransferxOES", cstr): *fp_glPixelTransferxOES;
	let cstr = strings::to_c_with_buf("glPixelTransformParameterfEXT", cstr_buf): *const u8;
	glPixelTransformParameterfEXT = get_proc_address("glPixelTransformParameterfEXT", cstr): *fp_glPixelTransformParameterfEXT;
	let cstr = strings::to_c_with_buf("glPixelTransformParameterfvEXT", cstr_buf): *const u8;
	glPixelTransformParameterfvEXT = get_proc_address("glPixelTransformParameterfvEXT", cstr): *fp_glPixelTransformParameterfvEXT;
	let cstr = strings::to_c_with_buf("glPixelTransformParameteriEXT", cstr_buf): *const u8;
	glPixelTransformParameteriEXT = get_proc_address("glPixelTransformParameteriEXT", cstr): *fp_glPixelTransformParameteriEXT;
	let cstr = strings::to_c_with_buf("glPixelTransformParameterivEXT", cstr_buf): *const u8;
	glPixelTransformParameterivEXT = get_proc_address("glPixelTransformParameterivEXT", cstr): *fp_glPixelTransformParameterivEXT;
	let cstr = strings::to_c_with_buf("glPixelZoom", cstr_buf): *const u8;
	glPixelZoom = get_proc_address("glPixelZoom", cstr): *fp_glPixelZoom;
	let cstr = strings::to_c_with_buf("glPixelZoomxOES", cstr_buf): *const u8;
	glPixelZoomxOES = get_proc_address("glPixelZoomxOES", cstr): *fp_glPixelZoomxOES;
	let cstr = strings::to_c_with_buf("glPointAlongPathNV", cstr_buf): *const u8;
	glPointAlongPathNV = get_proc_address("glPointAlongPathNV", cstr): *fp_glPointAlongPathNV;
	let cstr = strings::to_c_with_buf("glPointParameterf", cstr_buf): *const u8;
	glPointParameterf = get_proc_address("glPointParameterf", cstr): *fp_glPointParameterf;
	let cstr = strings::to_c_with_buf("glPointParameterfARB", cstr_buf): *const u8;
	glPointParameterfARB = get_proc_address("glPointParameterfARB", cstr): *fp_glPointParameterfARB;
	let cstr = strings::to_c_with_buf("glPointParameterfEXT", cstr_buf): *const u8;
	glPointParameterfEXT = get_proc_address("glPointParameterfEXT", cstr): *fp_glPointParameterfEXT;
	let cstr = strings::to_c_with_buf("glPointParameterfSGIS", cstr_buf): *const u8;
	glPointParameterfSGIS = get_proc_address("glPointParameterfSGIS", cstr): *fp_glPointParameterfSGIS;
	let cstr = strings::to_c_with_buf("glPointParameterfv", cstr_buf): *const u8;
	glPointParameterfv = get_proc_address("glPointParameterfv", cstr): *fp_glPointParameterfv;
	let cstr = strings::to_c_with_buf("glPointParameterfvARB", cstr_buf): *const u8;
	glPointParameterfvARB = get_proc_address("glPointParameterfvARB", cstr): *fp_glPointParameterfvARB;
	let cstr = strings::to_c_with_buf("glPointParameterfvEXT", cstr_buf): *const u8;
	glPointParameterfvEXT = get_proc_address("glPointParameterfvEXT", cstr): *fp_glPointParameterfvEXT;
	let cstr = strings::to_c_with_buf("glPointParameterfvSGIS", cstr_buf): *const u8;
	glPointParameterfvSGIS = get_proc_address("glPointParameterfvSGIS", cstr): *fp_glPointParameterfvSGIS;
	let cstr = strings::to_c_with_buf("glPointParameteri", cstr_buf): *const u8;
	glPointParameteri = get_proc_address("glPointParameteri", cstr): *fp_glPointParameteri;
	let cstr = strings::to_c_with_buf("glPointParameteriNV", cstr_buf): *const u8;
	glPointParameteriNV = get_proc_address("glPointParameteriNV", cstr): *fp_glPointParameteriNV;
	let cstr = strings::to_c_with_buf("glPointParameteriv", cstr_buf): *const u8;
	glPointParameteriv = get_proc_address("glPointParameteriv", cstr): *fp_glPointParameteriv;
	let cstr = strings::to_c_with_buf("glPointParameterivNV", cstr_buf): *const u8;
	glPointParameterivNV = get_proc_address("glPointParameterivNV", cstr): *fp_glPointParameterivNV;
	let cstr = strings::to_c_with_buf("glPointParameterxvOES", cstr_buf): *const u8;
	glPointParameterxvOES = get_proc_address("glPointParameterxvOES", cstr): *fp_glPointParameterxvOES;
	let cstr = strings::to_c_with_buf("glPointSize", cstr_buf): *const u8;
	glPointSize = get_proc_address("glPointSize", cstr): *fp_glPointSize;
	let cstr = strings::to_c_with_buf("glPointSizexOES", cstr_buf): *const u8;
	glPointSizexOES = get_proc_address("glPointSizexOES", cstr): *fp_glPointSizexOES;
	let cstr = strings::to_c_with_buf("glPollAsyncSGIX", cstr_buf): *const u8;
	glPollAsyncSGIX = get_proc_address("glPollAsyncSGIX", cstr): *fp_glPollAsyncSGIX;
	let cstr = strings::to_c_with_buf("glPollInstrumentsSGIX", cstr_buf): *const u8;
	glPollInstrumentsSGIX = get_proc_address("glPollInstrumentsSGIX", cstr): *fp_glPollInstrumentsSGIX;
	let cstr = strings::to_c_with_buf("glPolygonMode", cstr_buf): *const u8;
	glPolygonMode = get_proc_address("glPolygonMode", cstr): *fp_glPolygonMode;
	let cstr = strings::to_c_with_buf("glPolygonOffset", cstr_buf): *const u8;
	glPolygonOffset = get_proc_address("glPolygonOffset", cstr): *fp_glPolygonOffset;
	let cstr = strings::to_c_with_buf("glPolygonOffsetClamp", cstr_buf): *const u8;
	glPolygonOffsetClamp = get_proc_address("glPolygonOffsetClamp", cstr): *fp_glPolygonOffsetClamp;
	let cstr = strings::to_c_with_buf("glPolygonOffsetClampEXT", cstr_buf): *const u8;
	glPolygonOffsetClampEXT = get_proc_address("glPolygonOffsetClampEXT", cstr): *fp_glPolygonOffsetClampEXT;
	let cstr = strings::to_c_with_buf("glPolygonOffsetEXT", cstr_buf): *const u8;
	glPolygonOffsetEXT = get_proc_address("glPolygonOffsetEXT", cstr): *fp_glPolygonOffsetEXT;
	let cstr = strings::to_c_with_buf("glPolygonOffsetxOES", cstr_buf): *const u8;
	glPolygonOffsetxOES = get_proc_address("glPolygonOffsetxOES", cstr): *fp_glPolygonOffsetxOES;
	let cstr = strings::to_c_with_buf("glPolygonStipple", cstr_buf): *const u8;
	glPolygonStipple = get_proc_address("glPolygonStipple", cstr): *fp_glPolygonStipple;
	let cstr = strings::to_c_with_buf("glPopAttrib", cstr_buf): *const u8;
	glPopAttrib = get_proc_address("glPopAttrib", cstr): *fp_glPopAttrib;
	let cstr = strings::to_c_with_buf("glPopClientAttrib", cstr_buf): *const u8;
	glPopClientAttrib = get_proc_address("glPopClientAttrib", cstr): *fp_glPopClientAttrib;
	let cstr = strings::to_c_with_buf("glPopDebugGroup", cstr_buf): *const u8;
	glPopDebugGroup = get_proc_address("glPopDebugGroup", cstr): *fp_glPopDebugGroup;
	let cstr = strings::to_c_with_buf("glPopGroupMarkerEXT", cstr_buf): *const u8;
	glPopGroupMarkerEXT = get_proc_address("glPopGroupMarkerEXT", cstr): *fp_glPopGroupMarkerEXT;
	let cstr = strings::to_c_with_buf("glPopMatrix", cstr_buf): *const u8;
	glPopMatrix = get_proc_address("glPopMatrix", cstr): *fp_glPopMatrix;
	let cstr = strings::to_c_with_buf("glPopName", cstr_buf): *const u8;
	glPopName = get_proc_address("glPopName", cstr): *fp_glPopName;
	let cstr = strings::to_c_with_buf("glPresentFrameDualFillNV", cstr_buf): *const u8;
	glPresentFrameDualFillNV = get_proc_address("glPresentFrameDualFillNV", cstr): *fp_glPresentFrameDualFillNV;
	let cstr = strings::to_c_with_buf("glPresentFrameKeyedNV", cstr_buf): *const u8;
	glPresentFrameKeyedNV = get_proc_address("glPresentFrameKeyedNV", cstr): *fp_glPresentFrameKeyedNV;
	let cstr = strings::to_c_with_buf("glPrimitiveBoundingBoxARB", cstr_buf): *const u8;
	glPrimitiveBoundingBoxARB = get_proc_address("glPrimitiveBoundingBoxARB", cstr): *fp_glPrimitiveBoundingBoxARB;
	let cstr = strings::to_c_with_buf("glPrimitiveRestartIndexNV", cstr_buf): *const u8;
	glPrimitiveRestartIndexNV = get_proc_address("glPrimitiveRestartIndexNV", cstr): *fp_glPrimitiveRestartIndexNV;
	let cstr = strings::to_c_with_buf("glPrimitiveRestartNV", cstr_buf): *const u8;
	glPrimitiveRestartNV = get_proc_address("glPrimitiveRestartNV", cstr): *fp_glPrimitiveRestartNV;
	let cstr = strings::to_c_with_buf("glPrioritizeTextures", cstr_buf): *const u8;
	glPrioritizeTextures = get_proc_address("glPrioritizeTextures", cstr): *fp_glPrioritizeTextures;
	let cstr = strings::to_c_with_buf("glPrioritizeTexturesEXT", cstr_buf): *const u8;
	glPrioritizeTexturesEXT = get_proc_address("glPrioritizeTexturesEXT", cstr): *fp_glPrioritizeTexturesEXT;
	let cstr = strings::to_c_with_buf("glPrioritizeTexturesxOES", cstr_buf): *const u8;
	glPrioritizeTexturesxOES = get_proc_address("glPrioritizeTexturesxOES", cstr): *fp_glPrioritizeTexturesxOES;
	let cstr = strings::to_c_with_buf("glProgramBinary", cstr_buf): *const u8;
	glProgramBinary = get_proc_address("glProgramBinary", cstr): *fp_glProgramBinary;
	let cstr = strings::to_c_with_buf("glProgramBufferParametersIivNV", cstr_buf): *const u8;
	glProgramBufferParametersIivNV = get_proc_address("glProgramBufferParametersIivNV", cstr): *fp_glProgramBufferParametersIivNV;
	let cstr = strings::to_c_with_buf("glProgramBufferParametersIuivNV", cstr_buf): *const u8;
	glProgramBufferParametersIuivNV = get_proc_address("glProgramBufferParametersIuivNV", cstr): *fp_glProgramBufferParametersIuivNV;
	let cstr = strings::to_c_with_buf("glProgramBufferParametersfvNV", cstr_buf): *const u8;
	glProgramBufferParametersfvNV = get_proc_address("glProgramBufferParametersfvNV", cstr): *fp_glProgramBufferParametersfvNV;
	let cstr = strings::to_c_with_buf("glProgramEnvParameter4dARB", cstr_buf): *const u8;
	glProgramEnvParameter4dARB = get_proc_address("glProgramEnvParameter4dARB", cstr): *fp_glProgramEnvParameter4dARB;
	let cstr = strings::to_c_with_buf("glProgramEnvParameter4dvARB", cstr_buf): *const u8;
	glProgramEnvParameter4dvARB = get_proc_address("glProgramEnvParameter4dvARB", cstr): *fp_glProgramEnvParameter4dvARB;
	let cstr = strings::to_c_with_buf("glProgramEnvParameter4fARB", cstr_buf): *const u8;
	glProgramEnvParameter4fARB = get_proc_address("glProgramEnvParameter4fARB", cstr): *fp_glProgramEnvParameter4fARB;
	let cstr = strings::to_c_with_buf("glProgramEnvParameter4fvARB", cstr_buf): *const u8;
	glProgramEnvParameter4fvARB = get_proc_address("glProgramEnvParameter4fvARB", cstr): *fp_glProgramEnvParameter4fvARB;
	let cstr = strings::to_c_with_buf("glProgramEnvParameterI4iNV", cstr_buf): *const u8;
	glProgramEnvParameterI4iNV = get_proc_address("glProgramEnvParameterI4iNV", cstr): *fp_glProgramEnvParameterI4iNV;
	let cstr = strings::to_c_with_buf("glProgramEnvParameterI4ivNV", cstr_buf): *const u8;
	glProgramEnvParameterI4ivNV = get_proc_address("glProgramEnvParameterI4ivNV", cstr): *fp_glProgramEnvParameterI4ivNV;
	let cstr = strings::to_c_with_buf("glProgramEnvParameterI4uiNV", cstr_buf): *const u8;
	glProgramEnvParameterI4uiNV = get_proc_address("glProgramEnvParameterI4uiNV", cstr): *fp_glProgramEnvParameterI4uiNV;
	let cstr = strings::to_c_with_buf("glProgramEnvParameterI4uivNV", cstr_buf): *const u8;
	glProgramEnvParameterI4uivNV = get_proc_address("glProgramEnvParameterI4uivNV", cstr): *fp_glProgramEnvParameterI4uivNV;
	let cstr = strings::to_c_with_buf("glProgramEnvParameters4fvEXT", cstr_buf): *const u8;
	glProgramEnvParameters4fvEXT = get_proc_address("glProgramEnvParameters4fvEXT", cstr): *fp_glProgramEnvParameters4fvEXT;
	let cstr = strings::to_c_with_buf("glProgramEnvParametersI4ivNV", cstr_buf): *const u8;
	glProgramEnvParametersI4ivNV = get_proc_address("glProgramEnvParametersI4ivNV", cstr): *fp_glProgramEnvParametersI4ivNV;
	let cstr = strings::to_c_with_buf("glProgramEnvParametersI4uivNV", cstr_buf): *const u8;
	glProgramEnvParametersI4uivNV = get_proc_address("glProgramEnvParametersI4uivNV", cstr): *fp_glProgramEnvParametersI4uivNV;
	let cstr = strings::to_c_with_buf("glProgramLocalParameter4dARB", cstr_buf): *const u8;
	glProgramLocalParameter4dARB = get_proc_address("glProgramLocalParameter4dARB", cstr): *fp_glProgramLocalParameter4dARB;
	let cstr = strings::to_c_with_buf("glProgramLocalParameter4dvARB", cstr_buf): *const u8;
	glProgramLocalParameter4dvARB = get_proc_address("glProgramLocalParameter4dvARB", cstr): *fp_glProgramLocalParameter4dvARB;
	let cstr = strings::to_c_with_buf("glProgramLocalParameter4fARB", cstr_buf): *const u8;
	glProgramLocalParameter4fARB = get_proc_address("glProgramLocalParameter4fARB", cstr): *fp_glProgramLocalParameter4fARB;
	let cstr = strings::to_c_with_buf("glProgramLocalParameter4fvARB", cstr_buf): *const u8;
	glProgramLocalParameter4fvARB = get_proc_address("glProgramLocalParameter4fvARB", cstr): *fp_glProgramLocalParameter4fvARB;
	let cstr = strings::to_c_with_buf("glProgramLocalParameterI4iNV", cstr_buf): *const u8;
	glProgramLocalParameterI4iNV = get_proc_address("glProgramLocalParameterI4iNV", cstr): *fp_glProgramLocalParameterI4iNV;
	let cstr = strings::to_c_with_buf("glProgramLocalParameterI4ivNV", cstr_buf): *const u8;
	glProgramLocalParameterI4ivNV = get_proc_address("glProgramLocalParameterI4ivNV", cstr): *fp_glProgramLocalParameterI4ivNV;
	let cstr = strings::to_c_with_buf("glProgramLocalParameterI4uiNV", cstr_buf): *const u8;
	glProgramLocalParameterI4uiNV = get_proc_address("glProgramLocalParameterI4uiNV", cstr): *fp_glProgramLocalParameterI4uiNV;
	let cstr = strings::to_c_with_buf("glProgramLocalParameterI4uivNV", cstr_buf): *const u8;
	glProgramLocalParameterI4uivNV = get_proc_address("glProgramLocalParameterI4uivNV", cstr): *fp_glProgramLocalParameterI4uivNV;
	let cstr = strings::to_c_with_buf("glProgramLocalParameters4fvEXT", cstr_buf): *const u8;
	glProgramLocalParameters4fvEXT = get_proc_address("glProgramLocalParameters4fvEXT", cstr): *fp_glProgramLocalParameters4fvEXT;
	let cstr = strings::to_c_with_buf("glProgramLocalParametersI4ivNV", cstr_buf): *const u8;
	glProgramLocalParametersI4ivNV = get_proc_address("glProgramLocalParametersI4ivNV", cstr): *fp_glProgramLocalParametersI4ivNV;
	let cstr = strings::to_c_with_buf("glProgramLocalParametersI4uivNV", cstr_buf): *const u8;
	glProgramLocalParametersI4uivNV = get_proc_address("glProgramLocalParametersI4uivNV", cstr): *fp_glProgramLocalParametersI4uivNV;
	let cstr = strings::to_c_with_buf("glProgramNamedParameter4dNV", cstr_buf): *const u8;
	glProgramNamedParameter4dNV = get_proc_address("glProgramNamedParameter4dNV", cstr): *fp_glProgramNamedParameter4dNV;
	let cstr = strings::to_c_with_buf("glProgramNamedParameter4dvNV", cstr_buf): *const u8;
	glProgramNamedParameter4dvNV = get_proc_address("glProgramNamedParameter4dvNV", cstr): *fp_glProgramNamedParameter4dvNV;
	let cstr = strings::to_c_with_buf("glProgramNamedParameter4fNV", cstr_buf): *const u8;
	glProgramNamedParameter4fNV = get_proc_address("glProgramNamedParameter4fNV", cstr): *fp_glProgramNamedParameter4fNV;
	let cstr = strings::to_c_with_buf("glProgramNamedParameter4fvNV", cstr_buf): *const u8;
	glProgramNamedParameter4fvNV = get_proc_address("glProgramNamedParameter4fvNV", cstr): *fp_glProgramNamedParameter4fvNV;
	let cstr = strings::to_c_with_buf("glProgramParameter4dNV", cstr_buf): *const u8;
	glProgramParameter4dNV = get_proc_address("glProgramParameter4dNV", cstr): *fp_glProgramParameter4dNV;
	let cstr = strings::to_c_with_buf("glProgramParameter4dvNV", cstr_buf): *const u8;
	glProgramParameter4dvNV = get_proc_address("glProgramParameter4dvNV", cstr): *fp_glProgramParameter4dvNV;
	let cstr = strings::to_c_with_buf("glProgramParameter4fNV", cstr_buf): *const u8;
	glProgramParameter4fNV = get_proc_address("glProgramParameter4fNV", cstr): *fp_glProgramParameter4fNV;
	let cstr = strings::to_c_with_buf("glProgramParameter4fvNV", cstr_buf): *const u8;
	glProgramParameter4fvNV = get_proc_address("glProgramParameter4fvNV", cstr): *fp_glProgramParameter4fvNV;
	let cstr = strings::to_c_with_buf("glProgramParameteri", cstr_buf): *const u8;
	glProgramParameteri = get_proc_address("glProgramParameteri", cstr): *fp_glProgramParameteri;
	let cstr = strings::to_c_with_buf("glProgramParameteriARB", cstr_buf): *const u8;
	glProgramParameteriARB = get_proc_address("glProgramParameteriARB", cstr): *fp_glProgramParameteriARB;
	let cstr = strings::to_c_with_buf("glProgramParameteriEXT", cstr_buf): *const u8;
	glProgramParameteriEXT = get_proc_address("glProgramParameteriEXT", cstr): *fp_glProgramParameteriEXT;
	let cstr = strings::to_c_with_buf("glProgramParameters4dvNV", cstr_buf): *const u8;
	glProgramParameters4dvNV = get_proc_address("glProgramParameters4dvNV", cstr): *fp_glProgramParameters4dvNV;
	let cstr = strings::to_c_with_buf("glProgramParameters4fvNV", cstr_buf): *const u8;
	glProgramParameters4fvNV = get_proc_address("glProgramParameters4fvNV", cstr): *fp_glProgramParameters4fvNV;
	let cstr = strings::to_c_with_buf("glProgramPathFragmentInputGenNV", cstr_buf): *const u8;
	glProgramPathFragmentInputGenNV = get_proc_address("glProgramPathFragmentInputGenNV", cstr): *fp_glProgramPathFragmentInputGenNV;
	let cstr = strings::to_c_with_buf("glProgramStringARB", cstr_buf): *const u8;
	glProgramStringARB = get_proc_address("glProgramStringARB", cstr): *fp_glProgramStringARB;
	let cstr = strings::to_c_with_buf("glProgramSubroutineParametersuivNV", cstr_buf): *const u8;
	glProgramSubroutineParametersuivNV = get_proc_address("glProgramSubroutineParametersuivNV", cstr): *fp_glProgramSubroutineParametersuivNV;
	let cstr = strings::to_c_with_buf("glProgramUniform1d", cstr_buf): *const u8;
	glProgramUniform1d = get_proc_address("glProgramUniform1d", cstr): *fp_glProgramUniform1d;
	let cstr = strings::to_c_with_buf("glProgramUniform1dEXT", cstr_buf): *const u8;
	glProgramUniform1dEXT = get_proc_address("glProgramUniform1dEXT", cstr): *fp_glProgramUniform1dEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform1dv", cstr_buf): *const u8;
	glProgramUniform1dv = get_proc_address("glProgramUniform1dv", cstr): *fp_glProgramUniform1dv;
	let cstr = strings::to_c_with_buf("glProgramUniform1dvEXT", cstr_buf): *const u8;
	glProgramUniform1dvEXT = get_proc_address("glProgramUniform1dvEXT", cstr): *fp_glProgramUniform1dvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform1f", cstr_buf): *const u8;
	glProgramUniform1f = get_proc_address("glProgramUniform1f", cstr): *fp_glProgramUniform1f;
	let cstr = strings::to_c_with_buf("glProgramUniform1fEXT", cstr_buf): *const u8;
	glProgramUniform1fEXT = get_proc_address("glProgramUniform1fEXT", cstr): *fp_glProgramUniform1fEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform1fv", cstr_buf): *const u8;
	glProgramUniform1fv = get_proc_address("glProgramUniform1fv", cstr): *fp_glProgramUniform1fv;
	let cstr = strings::to_c_with_buf("glProgramUniform1fvEXT", cstr_buf): *const u8;
	glProgramUniform1fvEXT = get_proc_address("glProgramUniform1fvEXT", cstr): *fp_glProgramUniform1fvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform1i", cstr_buf): *const u8;
	glProgramUniform1i = get_proc_address("glProgramUniform1i", cstr): *fp_glProgramUniform1i;
	let cstr = strings::to_c_with_buf("glProgramUniform1i64ARB", cstr_buf): *const u8;
	glProgramUniform1i64ARB = get_proc_address("glProgramUniform1i64ARB", cstr): *fp_glProgramUniform1i64ARB;
	let cstr = strings::to_c_with_buf("glProgramUniform1i64NV", cstr_buf): *const u8;
	glProgramUniform1i64NV = get_proc_address("glProgramUniform1i64NV", cstr): *fp_glProgramUniform1i64NV;
	let cstr = strings::to_c_with_buf("glProgramUniform1i64vARB", cstr_buf): *const u8;
	glProgramUniform1i64vARB = get_proc_address("glProgramUniform1i64vARB", cstr): *fp_glProgramUniform1i64vARB;
	let cstr = strings::to_c_with_buf("glProgramUniform1i64vNV", cstr_buf): *const u8;
	glProgramUniform1i64vNV = get_proc_address("glProgramUniform1i64vNV", cstr): *fp_glProgramUniform1i64vNV;
	let cstr = strings::to_c_with_buf("glProgramUniform1iEXT", cstr_buf): *const u8;
	glProgramUniform1iEXT = get_proc_address("glProgramUniform1iEXT", cstr): *fp_glProgramUniform1iEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform1iv", cstr_buf): *const u8;
	glProgramUniform1iv = get_proc_address("glProgramUniform1iv", cstr): *fp_glProgramUniform1iv;
	let cstr = strings::to_c_with_buf("glProgramUniform1ivEXT", cstr_buf): *const u8;
	glProgramUniform1ivEXT = get_proc_address("glProgramUniform1ivEXT", cstr): *fp_glProgramUniform1ivEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform1ui", cstr_buf): *const u8;
	glProgramUniform1ui = get_proc_address("glProgramUniform1ui", cstr): *fp_glProgramUniform1ui;
	let cstr = strings::to_c_with_buf("glProgramUniform1ui64ARB", cstr_buf): *const u8;
	glProgramUniform1ui64ARB = get_proc_address("glProgramUniform1ui64ARB", cstr): *fp_glProgramUniform1ui64ARB;
	let cstr = strings::to_c_with_buf("glProgramUniform1ui64NV", cstr_buf): *const u8;
	glProgramUniform1ui64NV = get_proc_address("glProgramUniform1ui64NV", cstr): *fp_glProgramUniform1ui64NV;
	let cstr = strings::to_c_with_buf("glProgramUniform1ui64vARB", cstr_buf): *const u8;
	glProgramUniform1ui64vARB = get_proc_address("glProgramUniform1ui64vARB", cstr): *fp_glProgramUniform1ui64vARB;
	let cstr = strings::to_c_with_buf("glProgramUniform1ui64vNV", cstr_buf): *const u8;
	glProgramUniform1ui64vNV = get_proc_address("glProgramUniform1ui64vNV", cstr): *fp_glProgramUniform1ui64vNV;
	let cstr = strings::to_c_with_buf("glProgramUniform1uiEXT", cstr_buf): *const u8;
	glProgramUniform1uiEXT = get_proc_address("glProgramUniform1uiEXT", cstr): *fp_glProgramUniform1uiEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform1uiv", cstr_buf): *const u8;
	glProgramUniform1uiv = get_proc_address("glProgramUniform1uiv", cstr): *fp_glProgramUniform1uiv;
	let cstr = strings::to_c_with_buf("glProgramUniform1uivEXT", cstr_buf): *const u8;
	glProgramUniform1uivEXT = get_proc_address("glProgramUniform1uivEXT", cstr): *fp_glProgramUniform1uivEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform2d", cstr_buf): *const u8;
	glProgramUniform2d = get_proc_address("glProgramUniform2d", cstr): *fp_glProgramUniform2d;
	let cstr = strings::to_c_with_buf("glProgramUniform2dEXT", cstr_buf): *const u8;
	glProgramUniform2dEXT = get_proc_address("glProgramUniform2dEXT", cstr): *fp_glProgramUniform2dEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform2dv", cstr_buf): *const u8;
	glProgramUniform2dv = get_proc_address("glProgramUniform2dv", cstr): *fp_glProgramUniform2dv;
	let cstr = strings::to_c_with_buf("glProgramUniform2dvEXT", cstr_buf): *const u8;
	glProgramUniform2dvEXT = get_proc_address("glProgramUniform2dvEXT", cstr): *fp_glProgramUniform2dvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform2f", cstr_buf): *const u8;
	glProgramUniform2f = get_proc_address("glProgramUniform2f", cstr): *fp_glProgramUniform2f;
	let cstr = strings::to_c_with_buf("glProgramUniform2fEXT", cstr_buf): *const u8;
	glProgramUniform2fEXT = get_proc_address("glProgramUniform2fEXT", cstr): *fp_glProgramUniform2fEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform2fv", cstr_buf): *const u8;
	glProgramUniform2fv = get_proc_address("glProgramUniform2fv", cstr): *fp_glProgramUniform2fv;
	let cstr = strings::to_c_with_buf("glProgramUniform2fvEXT", cstr_buf): *const u8;
	glProgramUniform2fvEXT = get_proc_address("glProgramUniform2fvEXT", cstr): *fp_glProgramUniform2fvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform2i", cstr_buf): *const u8;
	glProgramUniform2i = get_proc_address("glProgramUniform2i", cstr): *fp_glProgramUniform2i;
	let cstr = strings::to_c_with_buf("glProgramUniform2i64ARB", cstr_buf): *const u8;
	glProgramUniform2i64ARB = get_proc_address("glProgramUniform2i64ARB", cstr): *fp_glProgramUniform2i64ARB;
	let cstr = strings::to_c_with_buf("glProgramUniform2i64NV", cstr_buf): *const u8;
	glProgramUniform2i64NV = get_proc_address("glProgramUniform2i64NV", cstr): *fp_glProgramUniform2i64NV;
	let cstr = strings::to_c_with_buf("glProgramUniform2i64vARB", cstr_buf): *const u8;
	glProgramUniform2i64vARB = get_proc_address("glProgramUniform2i64vARB", cstr): *fp_glProgramUniform2i64vARB;
	let cstr = strings::to_c_with_buf("glProgramUniform2i64vNV", cstr_buf): *const u8;
	glProgramUniform2i64vNV = get_proc_address("glProgramUniform2i64vNV", cstr): *fp_glProgramUniform2i64vNV;
	let cstr = strings::to_c_with_buf("glProgramUniform2iEXT", cstr_buf): *const u8;
	glProgramUniform2iEXT = get_proc_address("glProgramUniform2iEXT", cstr): *fp_glProgramUniform2iEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform2iv", cstr_buf): *const u8;
	glProgramUniform2iv = get_proc_address("glProgramUniform2iv", cstr): *fp_glProgramUniform2iv;
	let cstr = strings::to_c_with_buf("glProgramUniform2ivEXT", cstr_buf): *const u8;
	glProgramUniform2ivEXT = get_proc_address("glProgramUniform2ivEXT", cstr): *fp_glProgramUniform2ivEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform2ui", cstr_buf): *const u8;
	glProgramUniform2ui = get_proc_address("glProgramUniform2ui", cstr): *fp_glProgramUniform2ui;
	let cstr = strings::to_c_with_buf("glProgramUniform2ui64ARB", cstr_buf): *const u8;
	glProgramUniform2ui64ARB = get_proc_address("glProgramUniform2ui64ARB", cstr): *fp_glProgramUniform2ui64ARB;
	let cstr = strings::to_c_with_buf("glProgramUniform2ui64NV", cstr_buf): *const u8;
	glProgramUniform2ui64NV = get_proc_address("glProgramUniform2ui64NV", cstr): *fp_glProgramUniform2ui64NV;
	let cstr = strings::to_c_with_buf("glProgramUniform2ui64vARB", cstr_buf): *const u8;
	glProgramUniform2ui64vARB = get_proc_address("glProgramUniform2ui64vARB", cstr): *fp_glProgramUniform2ui64vARB;
	let cstr = strings::to_c_with_buf("glProgramUniform2ui64vNV", cstr_buf): *const u8;
	glProgramUniform2ui64vNV = get_proc_address("glProgramUniform2ui64vNV", cstr): *fp_glProgramUniform2ui64vNV;
	let cstr = strings::to_c_with_buf("glProgramUniform2uiEXT", cstr_buf): *const u8;
	glProgramUniform2uiEXT = get_proc_address("glProgramUniform2uiEXT", cstr): *fp_glProgramUniform2uiEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform2uiv", cstr_buf): *const u8;
	glProgramUniform2uiv = get_proc_address("glProgramUniform2uiv", cstr): *fp_glProgramUniform2uiv;
	let cstr = strings::to_c_with_buf("glProgramUniform2uivEXT", cstr_buf): *const u8;
	glProgramUniform2uivEXT = get_proc_address("glProgramUniform2uivEXT", cstr): *fp_glProgramUniform2uivEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform3d", cstr_buf): *const u8;
	glProgramUniform3d = get_proc_address("glProgramUniform3d", cstr): *fp_glProgramUniform3d;
	let cstr = strings::to_c_with_buf("glProgramUniform3dEXT", cstr_buf): *const u8;
	glProgramUniform3dEXT = get_proc_address("glProgramUniform3dEXT", cstr): *fp_glProgramUniform3dEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform3dv", cstr_buf): *const u8;
	glProgramUniform3dv = get_proc_address("glProgramUniform3dv", cstr): *fp_glProgramUniform3dv;
	let cstr = strings::to_c_with_buf("glProgramUniform3dvEXT", cstr_buf): *const u8;
	glProgramUniform3dvEXT = get_proc_address("glProgramUniform3dvEXT", cstr): *fp_glProgramUniform3dvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform3f", cstr_buf): *const u8;
	glProgramUniform3f = get_proc_address("glProgramUniform3f", cstr): *fp_glProgramUniform3f;
	let cstr = strings::to_c_with_buf("glProgramUniform3fEXT", cstr_buf): *const u8;
	glProgramUniform3fEXT = get_proc_address("glProgramUniform3fEXT", cstr): *fp_glProgramUniform3fEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform3fv", cstr_buf): *const u8;
	glProgramUniform3fv = get_proc_address("glProgramUniform3fv", cstr): *fp_glProgramUniform3fv;
	let cstr = strings::to_c_with_buf("glProgramUniform3fvEXT", cstr_buf): *const u8;
	glProgramUniform3fvEXT = get_proc_address("glProgramUniform3fvEXT", cstr): *fp_glProgramUniform3fvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform3i", cstr_buf): *const u8;
	glProgramUniform3i = get_proc_address("glProgramUniform3i", cstr): *fp_glProgramUniform3i;
	let cstr = strings::to_c_with_buf("glProgramUniform3i64ARB", cstr_buf): *const u8;
	glProgramUniform3i64ARB = get_proc_address("glProgramUniform3i64ARB", cstr): *fp_glProgramUniform3i64ARB;
	let cstr = strings::to_c_with_buf("glProgramUniform3i64NV", cstr_buf): *const u8;
	glProgramUniform3i64NV = get_proc_address("glProgramUniform3i64NV", cstr): *fp_glProgramUniform3i64NV;
	let cstr = strings::to_c_with_buf("glProgramUniform3i64vARB", cstr_buf): *const u8;
	glProgramUniform3i64vARB = get_proc_address("glProgramUniform3i64vARB", cstr): *fp_glProgramUniform3i64vARB;
	let cstr = strings::to_c_with_buf("glProgramUniform3i64vNV", cstr_buf): *const u8;
	glProgramUniform3i64vNV = get_proc_address("glProgramUniform3i64vNV", cstr): *fp_glProgramUniform3i64vNV;
	let cstr = strings::to_c_with_buf("glProgramUniform3iEXT", cstr_buf): *const u8;
	glProgramUniform3iEXT = get_proc_address("glProgramUniform3iEXT", cstr): *fp_glProgramUniform3iEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform3iv", cstr_buf): *const u8;
	glProgramUniform3iv = get_proc_address("glProgramUniform3iv", cstr): *fp_glProgramUniform3iv;
	let cstr = strings::to_c_with_buf("glProgramUniform3ivEXT", cstr_buf): *const u8;
	glProgramUniform3ivEXT = get_proc_address("glProgramUniform3ivEXT", cstr): *fp_glProgramUniform3ivEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform3ui", cstr_buf): *const u8;
	glProgramUniform3ui = get_proc_address("glProgramUniform3ui", cstr): *fp_glProgramUniform3ui;
	let cstr = strings::to_c_with_buf("glProgramUniform3ui64ARB", cstr_buf): *const u8;
	glProgramUniform3ui64ARB = get_proc_address("glProgramUniform3ui64ARB", cstr): *fp_glProgramUniform3ui64ARB;
	let cstr = strings::to_c_with_buf("glProgramUniform3ui64NV", cstr_buf): *const u8;
	glProgramUniform3ui64NV = get_proc_address("glProgramUniform3ui64NV", cstr): *fp_glProgramUniform3ui64NV;
	let cstr = strings::to_c_with_buf("glProgramUniform3ui64vARB", cstr_buf): *const u8;
	glProgramUniform3ui64vARB = get_proc_address("glProgramUniform3ui64vARB", cstr): *fp_glProgramUniform3ui64vARB;
	let cstr = strings::to_c_with_buf("glProgramUniform3ui64vNV", cstr_buf): *const u8;
	glProgramUniform3ui64vNV = get_proc_address("glProgramUniform3ui64vNV", cstr): *fp_glProgramUniform3ui64vNV;
	let cstr = strings::to_c_with_buf("glProgramUniform3uiEXT", cstr_buf): *const u8;
	glProgramUniform3uiEXT = get_proc_address("glProgramUniform3uiEXT", cstr): *fp_glProgramUniform3uiEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform3uiv", cstr_buf): *const u8;
	glProgramUniform3uiv = get_proc_address("glProgramUniform3uiv", cstr): *fp_glProgramUniform3uiv;
	let cstr = strings::to_c_with_buf("glProgramUniform3uivEXT", cstr_buf): *const u8;
	glProgramUniform3uivEXT = get_proc_address("glProgramUniform3uivEXT", cstr): *fp_glProgramUniform3uivEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform4d", cstr_buf): *const u8;
	glProgramUniform4d = get_proc_address("glProgramUniform4d", cstr): *fp_glProgramUniform4d;
	let cstr = strings::to_c_with_buf("glProgramUniform4dEXT", cstr_buf): *const u8;
	glProgramUniform4dEXT = get_proc_address("glProgramUniform4dEXT", cstr): *fp_glProgramUniform4dEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform4dv", cstr_buf): *const u8;
	glProgramUniform4dv = get_proc_address("glProgramUniform4dv", cstr): *fp_glProgramUniform4dv;
	let cstr = strings::to_c_with_buf("glProgramUniform4dvEXT", cstr_buf): *const u8;
	glProgramUniform4dvEXT = get_proc_address("glProgramUniform4dvEXT", cstr): *fp_glProgramUniform4dvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform4f", cstr_buf): *const u8;
	glProgramUniform4f = get_proc_address("glProgramUniform4f", cstr): *fp_glProgramUniform4f;
	let cstr = strings::to_c_with_buf("glProgramUniform4fEXT", cstr_buf): *const u8;
	glProgramUniform4fEXT = get_proc_address("glProgramUniform4fEXT", cstr): *fp_glProgramUniform4fEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform4fv", cstr_buf): *const u8;
	glProgramUniform4fv = get_proc_address("glProgramUniform4fv", cstr): *fp_glProgramUniform4fv;
	let cstr = strings::to_c_with_buf("glProgramUniform4fvEXT", cstr_buf): *const u8;
	glProgramUniform4fvEXT = get_proc_address("glProgramUniform4fvEXT", cstr): *fp_glProgramUniform4fvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform4i", cstr_buf): *const u8;
	glProgramUniform4i = get_proc_address("glProgramUniform4i", cstr): *fp_glProgramUniform4i;
	let cstr = strings::to_c_with_buf("glProgramUniform4i64ARB", cstr_buf): *const u8;
	glProgramUniform4i64ARB = get_proc_address("glProgramUniform4i64ARB", cstr): *fp_glProgramUniform4i64ARB;
	let cstr = strings::to_c_with_buf("glProgramUniform4i64NV", cstr_buf): *const u8;
	glProgramUniform4i64NV = get_proc_address("glProgramUniform4i64NV", cstr): *fp_glProgramUniform4i64NV;
	let cstr = strings::to_c_with_buf("glProgramUniform4i64vARB", cstr_buf): *const u8;
	glProgramUniform4i64vARB = get_proc_address("glProgramUniform4i64vARB", cstr): *fp_glProgramUniform4i64vARB;
	let cstr = strings::to_c_with_buf("glProgramUniform4i64vNV", cstr_buf): *const u8;
	glProgramUniform4i64vNV = get_proc_address("glProgramUniform4i64vNV", cstr): *fp_glProgramUniform4i64vNV;
	let cstr = strings::to_c_with_buf("glProgramUniform4iEXT", cstr_buf): *const u8;
	glProgramUniform4iEXT = get_proc_address("glProgramUniform4iEXT", cstr): *fp_glProgramUniform4iEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform4iv", cstr_buf): *const u8;
	glProgramUniform4iv = get_proc_address("glProgramUniform4iv", cstr): *fp_glProgramUniform4iv;
	let cstr = strings::to_c_with_buf("glProgramUniform4ivEXT", cstr_buf): *const u8;
	glProgramUniform4ivEXT = get_proc_address("glProgramUniform4ivEXT", cstr): *fp_glProgramUniform4ivEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform4ui", cstr_buf): *const u8;
	glProgramUniform4ui = get_proc_address("glProgramUniform4ui", cstr): *fp_glProgramUniform4ui;
	let cstr = strings::to_c_with_buf("glProgramUniform4ui64ARB", cstr_buf): *const u8;
	glProgramUniform4ui64ARB = get_proc_address("glProgramUniform4ui64ARB", cstr): *fp_glProgramUniform4ui64ARB;
	let cstr = strings::to_c_with_buf("glProgramUniform4ui64NV", cstr_buf): *const u8;
	glProgramUniform4ui64NV = get_proc_address("glProgramUniform4ui64NV", cstr): *fp_glProgramUniform4ui64NV;
	let cstr = strings::to_c_with_buf("glProgramUniform4ui64vARB", cstr_buf): *const u8;
	glProgramUniform4ui64vARB = get_proc_address("glProgramUniform4ui64vARB", cstr): *fp_glProgramUniform4ui64vARB;
	let cstr = strings::to_c_with_buf("glProgramUniform4ui64vNV", cstr_buf): *const u8;
	glProgramUniform4ui64vNV = get_proc_address("glProgramUniform4ui64vNV", cstr): *fp_glProgramUniform4ui64vNV;
	let cstr = strings::to_c_with_buf("glProgramUniform4uiEXT", cstr_buf): *const u8;
	glProgramUniform4uiEXT = get_proc_address("glProgramUniform4uiEXT", cstr): *fp_glProgramUniform4uiEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform4uiv", cstr_buf): *const u8;
	glProgramUniform4uiv = get_proc_address("glProgramUniform4uiv", cstr): *fp_glProgramUniform4uiv;
	let cstr = strings::to_c_with_buf("glProgramUniform4uivEXT", cstr_buf): *const u8;
	glProgramUniform4uivEXT = get_proc_address("glProgramUniform4uivEXT", cstr): *fp_glProgramUniform4uivEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformHandleui64ARB", cstr_buf): *const u8;
	glProgramUniformHandleui64ARB = get_proc_address("glProgramUniformHandleui64ARB", cstr): *fp_glProgramUniformHandleui64ARB;
	let cstr = strings::to_c_with_buf("glProgramUniformHandleui64NV", cstr_buf): *const u8;
	glProgramUniformHandleui64NV = get_proc_address("glProgramUniformHandleui64NV", cstr): *fp_glProgramUniformHandleui64NV;
	let cstr = strings::to_c_with_buf("glProgramUniformHandleui64vARB", cstr_buf): *const u8;
	glProgramUniformHandleui64vARB = get_proc_address("glProgramUniformHandleui64vARB", cstr): *fp_glProgramUniformHandleui64vARB;
	let cstr = strings::to_c_with_buf("glProgramUniformHandleui64vNV", cstr_buf): *const u8;
	glProgramUniformHandleui64vNV = get_proc_address("glProgramUniformHandleui64vNV", cstr): *fp_glProgramUniformHandleui64vNV;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix2dv", cstr_buf): *const u8;
	glProgramUniformMatrix2dv = get_proc_address("glProgramUniformMatrix2dv", cstr): *fp_glProgramUniformMatrix2dv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix2dvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix2dvEXT = get_proc_address("glProgramUniformMatrix2dvEXT", cstr): *fp_glProgramUniformMatrix2dvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix2fv", cstr_buf): *const u8;
	glProgramUniformMatrix2fv = get_proc_address("glProgramUniformMatrix2fv", cstr): *fp_glProgramUniformMatrix2fv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix2fvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix2fvEXT = get_proc_address("glProgramUniformMatrix2fvEXT", cstr): *fp_glProgramUniformMatrix2fvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix2x3dv", cstr_buf): *const u8;
	glProgramUniformMatrix2x3dv = get_proc_address("glProgramUniformMatrix2x3dv", cstr): *fp_glProgramUniformMatrix2x3dv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix2x3dvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix2x3dvEXT = get_proc_address("glProgramUniformMatrix2x3dvEXT", cstr): *fp_glProgramUniformMatrix2x3dvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix2x3fv", cstr_buf): *const u8;
	glProgramUniformMatrix2x3fv = get_proc_address("glProgramUniformMatrix2x3fv", cstr): *fp_glProgramUniformMatrix2x3fv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix2x3fvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix2x3fvEXT = get_proc_address("glProgramUniformMatrix2x3fvEXT", cstr): *fp_glProgramUniformMatrix2x3fvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix2x4dv", cstr_buf): *const u8;
	glProgramUniformMatrix2x4dv = get_proc_address("glProgramUniformMatrix2x4dv", cstr): *fp_glProgramUniformMatrix2x4dv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix2x4dvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix2x4dvEXT = get_proc_address("glProgramUniformMatrix2x4dvEXT", cstr): *fp_glProgramUniformMatrix2x4dvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix2x4fv", cstr_buf): *const u8;
	glProgramUniformMatrix2x4fv = get_proc_address("glProgramUniformMatrix2x4fv", cstr): *fp_glProgramUniformMatrix2x4fv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix2x4fvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix2x4fvEXT = get_proc_address("glProgramUniformMatrix2x4fvEXT", cstr): *fp_glProgramUniformMatrix2x4fvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix3dv", cstr_buf): *const u8;
	glProgramUniformMatrix3dv = get_proc_address("glProgramUniformMatrix3dv", cstr): *fp_glProgramUniformMatrix3dv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix3dvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix3dvEXT = get_proc_address("glProgramUniformMatrix3dvEXT", cstr): *fp_glProgramUniformMatrix3dvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix3fv", cstr_buf): *const u8;
	glProgramUniformMatrix3fv = get_proc_address("glProgramUniformMatrix3fv", cstr): *fp_glProgramUniformMatrix3fv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix3fvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix3fvEXT = get_proc_address("glProgramUniformMatrix3fvEXT", cstr): *fp_glProgramUniformMatrix3fvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix3x2dv", cstr_buf): *const u8;
	glProgramUniformMatrix3x2dv = get_proc_address("glProgramUniformMatrix3x2dv", cstr): *fp_glProgramUniformMatrix3x2dv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix3x2dvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix3x2dvEXT = get_proc_address("glProgramUniformMatrix3x2dvEXT", cstr): *fp_glProgramUniformMatrix3x2dvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix3x2fv", cstr_buf): *const u8;
	glProgramUniformMatrix3x2fv = get_proc_address("glProgramUniformMatrix3x2fv", cstr): *fp_glProgramUniformMatrix3x2fv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix3x2fvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix3x2fvEXT = get_proc_address("glProgramUniformMatrix3x2fvEXT", cstr): *fp_glProgramUniformMatrix3x2fvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix3x4dv", cstr_buf): *const u8;
	glProgramUniformMatrix3x4dv = get_proc_address("glProgramUniformMatrix3x4dv", cstr): *fp_glProgramUniformMatrix3x4dv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix3x4dvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix3x4dvEXT = get_proc_address("glProgramUniformMatrix3x4dvEXT", cstr): *fp_glProgramUniformMatrix3x4dvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix3x4fv", cstr_buf): *const u8;
	glProgramUniformMatrix3x4fv = get_proc_address("glProgramUniformMatrix3x4fv", cstr): *fp_glProgramUniformMatrix3x4fv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix3x4fvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix3x4fvEXT = get_proc_address("glProgramUniformMatrix3x4fvEXT", cstr): *fp_glProgramUniformMatrix3x4fvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix4dv", cstr_buf): *const u8;
	glProgramUniformMatrix4dv = get_proc_address("glProgramUniformMatrix4dv", cstr): *fp_glProgramUniformMatrix4dv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix4dvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix4dvEXT = get_proc_address("glProgramUniformMatrix4dvEXT", cstr): *fp_glProgramUniformMatrix4dvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix4fv", cstr_buf): *const u8;
	glProgramUniformMatrix4fv = get_proc_address("glProgramUniformMatrix4fv", cstr): *fp_glProgramUniformMatrix4fv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix4fvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix4fvEXT = get_proc_address("glProgramUniformMatrix4fvEXT", cstr): *fp_glProgramUniformMatrix4fvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix4x2dv", cstr_buf): *const u8;
	glProgramUniformMatrix4x2dv = get_proc_address("glProgramUniformMatrix4x2dv", cstr): *fp_glProgramUniformMatrix4x2dv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix4x2dvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix4x2dvEXT = get_proc_address("glProgramUniformMatrix4x2dvEXT", cstr): *fp_glProgramUniformMatrix4x2dvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix4x2fv", cstr_buf): *const u8;
	glProgramUniformMatrix4x2fv = get_proc_address("glProgramUniformMatrix4x2fv", cstr): *fp_glProgramUniformMatrix4x2fv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix4x2fvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix4x2fvEXT = get_proc_address("glProgramUniformMatrix4x2fvEXT", cstr): *fp_glProgramUniformMatrix4x2fvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix4x3dv", cstr_buf): *const u8;
	glProgramUniformMatrix4x3dv = get_proc_address("glProgramUniformMatrix4x3dv", cstr): *fp_glProgramUniformMatrix4x3dv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix4x3dvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix4x3dvEXT = get_proc_address("glProgramUniformMatrix4x3dvEXT", cstr): *fp_glProgramUniformMatrix4x3dvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix4x3fv", cstr_buf): *const u8;
	glProgramUniformMatrix4x3fv = get_proc_address("glProgramUniformMatrix4x3fv", cstr): *fp_glProgramUniformMatrix4x3fv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix4x3fvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix4x3fvEXT = get_proc_address("glProgramUniformMatrix4x3fvEXT", cstr): *fp_glProgramUniformMatrix4x3fvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformui64NV", cstr_buf): *const u8;
	glProgramUniformui64NV = get_proc_address("glProgramUniformui64NV", cstr): *fp_glProgramUniformui64NV;
	let cstr = strings::to_c_with_buf("glProgramUniformui64vNV", cstr_buf): *const u8;
	glProgramUniformui64vNV = get_proc_address("glProgramUniformui64vNV", cstr): *fp_glProgramUniformui64vNV;
	let cstr = strings::to_c_with_buf("glProgramVertexLimitNV", cstr_buf): *const u8;
	glProgramVertexLimitNV = get_proc_address("glProgramVertexLimitNV", cstr): *fp_glProgramVertexLimitNV;
	let cstr = strings::to_c_with_buf("glProvokingVertex", cstr_buf): *const u8;
	glProvokingVertex = get_proc_address("glProvokingVertex", cstr): *fp_glProvokingVertex;
	let cstr = strings::to_c_with_buf("glProvokingVertexEXT", cstr_buf): *const u8;
	glProvokingVertexEXT = get_proc_address("glProvokingVertexEXT", cstr): *fp_glProvokingVertexEXT;
	let cstr = strings::to_c_with_buf("glPushAttrib", cstr_buf): *const u8;
	glPushAttrib = get_proc_address("glPushAttrib", cstr): *fp_glPushAttrib;
	let cstr = strings::to_c_with_buf("glPushClientAttrib", cstr_buf): *const u8;
	glPushClientAttrib = get_proc_address("glPushClientAttrib", cstr): *fp_glPushClientAttrib;
	let cstr = strings::to_c_with_buf("glPushClientAttribDefaultEXT", cstr_buf): *const u8;
	glPushClientAttribDefaultEXT = get_proc_address("glPushClientAttribDefaultEXT", cstr): *fp_glPushClientAttribDefaultEXT;
	let cstr = strings::to_c_with_buf("glPushDebugGroup", cstr_buf): *const u8;
	glPushDebugGroup = get_proc_address("glPushDebugGroup", cstr): *fp_glPushDebugGroup;
	let cstr = strings::to_c_with_buf("glPushGroupMarkerEXT", cstr_buf): *const u8;
	glPushGroupMarkerEXT = get_proc_address("glPushGroupMarkerEXT", cstr): *fp_glPushGroupMarkerEXT;
	let cstr = strings::to_c_with_buf("glPushMatrix", cstr_buf): *const u8;
	glPushMatrix = get_proc_address("glPushMatrix", cstr): *fp_glPushMatrix;
	let cstr = strings::to_c_with_buf("glPushName", cstr_buf): *const u8;
	glPushName = get_proc_address("glPushName", cstr): *fp_glPushName;
	let cstr = strings::to_c_with_buf("glQueryCounter", cstr_buf): *const u8;
	glQueryCounter = get_proc_address("glQueryCounter", cstr): *fp_glQueryCounter;
	let cstr = strings::to_c_with_buf("glQueryMatrixxOES", cstr_buf): *const u8;
	glQueryMatrixxOES = get_proc_address("glQueryMatrixxOES", cstr): *fp_glQueryMatrixxOES;
	let cstr = strings::to_c_with_buf("glQueryObjectParameteruiAMD", cstr_buf): *const u8;
	glQueryObjectParameteruiAMD = get_proc_address("glQueryObjectParameteruiAMD", cstr): *fp_glQueryObjectParameteruiAMD;
	let cstr = strings::to_c_with_buf("glQueryResourceNV", cstr_buf): *const u8;
	glQueryResourceNV = get_proc_address("glQueryResourceNV", cstr): *fp_glQueryResourceNV;
	let cstr = strings::to_c_with_buf("glQueryResourceTagNV", cstr_buf): *const u8;
	glQueryResourceTagNV = get_proc_address("glQueryResourceTagNV", cstr): *fp_glQueryResourceTagNV;
	let cstr = strings::to_c_with_buf("glRasterPos2d", cstr_buf): *const u8;
	glRasterPos2d = get_proc_address("glRasterPos2d", cstr): *fp_glRasterPos2d;
	let cstr = strings::to_c_with_buf("glRasterPos2dv", cstr_buf): *const u8;
	glRasterPos2dv = get_proc_address("glRasterPos2dv", cstr): *fp_glRasterPos2dv;
	let cstr = strings::to_c_with_buf("glRasterPos2f", cstr_buf): *const u8;
	glRasterPos2f = get_proc_address("glRasterPos2f", cstr): *fp_glRasterPos2f;
	let cstr = strings::to_c_with_buf("glRasterPos2fv", cstr_buf): *const u8;
	glRasterPos2fv = get_proc_address("glRasterPos2fv", cstr): *fp_glRasterPos2fv;
	let cstr = strings::to_c_with_buf("glRasterPos2i", cstr_buf): *const u8;
	glRasterPos2i = get_proc_address("glRasterPos2i", cstr): *fp_glRasterPos2i;
	let cstr = strings::to_c_with_buf("glRasterPos2iv", cstr_buf): *const u8;
	glRasterPos2iv = get_proc_address("glRasterPos2iv", cstr): *fp_glRasterPos2iv;
	let cstr = strings::to_c_with_buf("glRasterPos2s", cstr_buf): *const u8;
	glRasterPos2s = get_proc_address("glRasterPos2s", cstr): *fp_glRasterPos2s;
	let cstr = strings::to_c_with_buf("glRasterPos2sv", cstr_buf): *const u8;
	glRasterPos2sv = get_proc_address("glRasterPos2sv", cstr): *fp_glRasterPos2sv;
	let cstr = strings::to_c_with_buf("glRasterPos2xOES", cstr_buf): *const u8;
	glRasterPos2xOES = get_proc_address("glRasterPos2xOES", cstr): *fp_glRasterPos2xOES;
	let cstr = strings::to_c_with_buf("glRasterPos2xvOES", cstr_buf): *const u8;
	glRasterPos2xvOES = get_proc_address("glRasterPos2xvOES", cstr): *fp_glRasterPos2xvOES;
	let cstr = strings::to_c_with_buf("glRasterPos3d", cstr_buf): *const u8;
	glRasterPos3d = get_proc_address("glRasterPos3d", cstr): *fp_glRasterPos3d;
	let cstr = strings::to_c_with_buf("glRasterPos3dv", cstr_buf): *const u8;
	glRasterPos3dv = get_proc_address("glRasterPos3dv", cstr): *fp_glRasterPos3dv;
	let cstr = strings::to_c_with_buf("glRasterPos3f", cstr_buf): *const u8;
	glRasterPos3f = get_proc_address("glRasterPos3f", cstr): *fp_glRasterPos3f;
	let cstr = strings::to_c_with_buf("glRasterPos3fv", cstr_buf): *const u8;
	glRasterPos3fv = get_proc_address("glRasterPos3fv", cstr): *fp_glRasterPos3fv;
	let cstr = strings::to_c_with_buf("glRasterPos3i", cstr_buf): *const u8;
	glRasterPos3i = get_proc_address("glRasterPos3i", cstr): *fp_glRasterPos3i;
	let cstr = strings::to_c_with_buf("glRasterPos3iv", cstr_buf): *const u8;
	glRasterPos3iv = get_proc_address("glRasterPos3iv", cstr): *fp_glRasterPos3iv;
	let cstr = strings::to_c_with_buf("glRasterPos3s", cstr_buf): *const u8;
	glRasterPos3s = get_proc_address("glRasterPos3s", cstr): *fp_glRasterPos3s;
	let cstr = strings::to_c_with_buf("glRasterPos3sv", cstr_buf): *const u8;
	glRasterPos3sv = get_proc_address("glRasterPos3sv", cstr): *fp_glRasterPos3sv;
	let cstr = strings::to_c_with_buf("glRasterPos3xOES", cstr_buf): *const u8;
	glRasterPos3xOES = get_proc_address("glRasterPos3xOES", cstr): *fp_glRasterPos3xOES;
	let cstr = strings::to_c_with_buf("glRasterPos3xvOES", cstr_buf): *const u8;
	glRasterPos3xvOES = get_proc_address("glRasterPos3xvOES", cstr): *fp_glRasterPos3xvOES;
	let cstr = strings::to_c_with_buf("glRasterPos4d", cstr_buf): *const u8;
	glRasterPos4d = get_proc_address("glRasterPos4d", cstr): *fp_glRasterPos4d;
	let cstr = strings::to_c_with_buf("glRasterPos4dv", cstr_buf): *const u8;
	glRasterPos4dv = get_proc_address("glRasterPos4dv", cstr): *fp_glRasterPos4dv;
	let cstr = strings::to_c_with_buf("glRasterPos4f", cstr_buf): *const u8;
	glRasterPos4f = get_proc_address("glRasterPos4f", cstr): *fp_glRasterPos4f;
	let cstr = strings::to_c_with_buf("glRasterPos4fv", cstr_buf): *const u8;
	glRasterPos4fv = get_proc_address("glRasterPos4fv", cstr): *fp_glRasterPos4fv;
	let cstr = strings::to_c_with_buf("glRasterPos4i", cstr_buf): *const u8;
	glRasterPos4i = get_proc_address("glRasterPos4i", cstr): *fp_glRasterPos4i;
	let cstr = strings::to_c_with_buf("glRasterPos4iv", cstr_buf): *const u8;
	glRasterPos4iv = get_proc_address("glRasterPos4iv", cstr): *fp_glRasterPos4iv;
	let cstr = strings::to_c_with_buf("glRasterPos4s", cstr_buf): *const u8;
	glRasterPos4s = get_proc_address("glRasterPos4s", cstr): *fp_glRasterPos4s;
	let cstr = strings::to_c_with_buf("glRasterPos4sv", cstr_buf): *const u8;
	glRasterPos4sv = get_proc_address("glRasterPos4sv", cstr): *fp_glRasterPos4sv;
	let cstr = strings::to_c_with_buf("glRasterPos4xOES", cstr_buf): *const u8;
	glRasterPos4xOES = get_proc_address("glRasterPos4xOES", cstr): *fp_glRasterPos4xOES;
	let cstr = strings::to_c_with_buf("glRasterPos4xvOES", cstr_buf): *const u8;
	glRasterPos4xvOES = get_proc_address("glRasterPos4xvOES", cstr): *fp_glRasterPos4xvOES;
	let cstr = strings::to_c_with_buf("glRasterSamplesEXT", cstr_buf): *const u8;
	glRasterSamplesEXT = get_proc_address("glRasterSamplesEXT", cstr): *fp_glRasterSamplesEXT;
	let cstr = strings::to_c_with_buf("glReadBuffer", cstr_buf): *const u8;
	glReadBuffer = get_proc_address("glReadBuffer", cstr): *fp_glReadBuffer;
	let cstr = strings::to_c_with_buf("glReadInstrumentsSGIX", cstr_buf): *const u8;
	glReadInstrumentsSGIX = get_proc_address("glReadInstrumentsSGIX", cstr): *fp_glReadInstrumentsSGIX;
	let cstr = strings::to_c_with_buf("glReadPixels", cstr_buf): *const u8;
	glReadPixels = get_proc_address("glReadPixels", cstr): *fp_glReadPixels;
	let cstr = strings::to_c_with_buf("glReadnPixels", cstr_buf): *const u8;
	glReadnPixels = get_proc_address("glReadnPixels", cstr): *fp_glReadnPixels;
	let cstr = strings::to_c_with_buf("glReadnPixelsARB", cstr_buf): *const u8;
	glReadnPixelsARB = get_proc_address("glReadnPixelsARB", cstr): *fp_glReadnPixelsARB;
	let cstr = strings::to_c_with_buf("glRectd", cstr_buf): *const u8;
	glRectd = get_proc_address("glRectd", cstr): *fp_glRectd;
	let cstr = strings::to_c_with_buf("glRectdv", cstr_buf): *const u8;
	glRectdv = get_proc_address("glRectdv", cstr): *fp_glRectdv;
	let cstr = strings::to_c_with_buf("glRectf", cstr_buf): *const u8;
	glRectf = get_proc_address("glRectf", cstr): *fp_glRectf;
	let cstr = strings::to_c_with_buf("glRectfv", cstr_buf): *const u8;
	glRectfv = get_proc_address("glRectfv", cstr): *fp_glRectfv;
	let cstr = strings::to_c_with_buf("glRecti", cstr_buf): *const u8;
	glRecti = get_proc_address("glRecti", cstr): *fp_glRecti;
	let cstr = strings::to_c_with_buf("glRectiv", cstr_buf): *const u8;
	glRectiv = get_proc_address("glRectiv", cstr): *fp_glRectiv;
	let cstr = strings::to_c_with_buf("glRects", cstr_buf): *const u8;
	glRects = get_proc_address("glRects", cstr): *fp_glRects;
	let cstr = strings::to_c_with_buf("glRectsv", cstr_buf): *const u8;
	glRectsv = get_proc_address("glRectsv", cstr): *fp_glRectsv;
	let cstr = strings::to_c_with_buf("glRectxOES", cstr_buf): *const u8;
	glRectxOES = get_proc_address("glRectxOES", cstr): *fp_glRectxOES;
	let cstr = strings::to_c_with_buf("glRectxvOES", cstr_buf): *const u8;
	glRectxvOES = get_proc_address("glRectxvOES", cstr): *fp_glRectxvOES;
	let cstr = strings::to_c_with_buf("glReferencePlaneSGIX", cstr_buf): *const u8;
	glReferencePlaneSGIX = get_proc_address("glReferencePlaneSGIX", cstr): *fp_glReferencePlaneSGIX;
	let cstr = strings::to_c_with_buf("glReleaseKeyedMutexWin32EXT", cstr_buf): *const u8;
	glReleaseKeyedMutexWin32EXT = get_proc_address("glReleaseKeyedMutexWin32EXT", cstr): *fp_glReleaseKeyedMutexWin32EXT;
	let cstr = strings::to_c_with_buf("glReleaseShaderCompiler", cstr_buf): *const u8;
	glReleaseShaderCompiler = get_proc_address("glReleaseShaderCompiler", cstr): *fp_glReleaseShaderCompiler;
	let cstr = strings::to_c_with_buf("glRenderGpuMaskNV", cstr_buf): *const u8;
	glRenderGpuMaskNV = get_proc_address("glRenderGpuMaskNV", cstr): *fp_glRenderGpuMaskNV;
	let cstr = strings::to_c_with_buf("glRenderMode", cstr_buf): *const u8;
	glRenderMode = get_proc_address("glRenderMode", cstr): *fp_glRenderMode;
	let cstr = strings::to_c_with_buf("glRenderbufferStorage", cstr_buf): *const u8;
	glRenderbufferStorage = get_proc_address("glRenderbufferStorage", cstr): *fp_glRenderbufferStorage;
	let cstr = strings::to_c_with_buf("glRenderbufferStorageEXT", cstr_buf): *const u8;
	glRenderbufferStorageEXT = get_proc_address("glRenderbufferStorageEXT", cstr): *fp_glRenderbufferStorageEXT;
	let cstr = strings::to_c_with_buf("glRenderbufferStorageMultisample", cstr_buf): *const u8;
	glRenderbufferStorageMultisample = get_proc_address("glRenderbufferStorageMultisample", cstr): *fp_glRenderbufferStorageMultisample;
	let cstr = strings::to_c_with_buf("glRenderbufferStorageMultisampleAdvancedAMD", cstr_buf): *const u8;
	glRenderbufferStorageMultisampleAdvancedAMD = get_proc_address("glRenderbufferStorageMultisampleAdvancedAMD", cstr): *fp_glRenderbufferStorageMultisampleAdvancedAMD;
	let cstr = strings::to_c_with_buf("glRenderbufferStorageMultisampleCoverageNV", cstr_buf): *const u8;
	glRenderbufferStorageMultisampleCoverageNV = get_proc_address("glRenderbufferStorageMultisampleCoverageNV", cstr): *fp_glRenderbufferStorageMultisampleCoverageNV;
	let cstr = strings::to_c_with_buf("glRenderbufferStorageMultisampleEXT", cstr_buf): *const u8;
	glRenderbufferStorageMultisampleEXT = get_proc_address("glRenderbufferStorageMultisampleEXT", cstr): *fp_glRenderbufferStorageMultisampleEXT;
	let cstr = strings::to_c_with_buf("glReplacementCodePointerSUN", cstr_buf): *const u8;
	glReplacementCodePointerSUN = get_proc_address("glReplacementCodePointerSUN", cstr): *fp_glReplacementCodePointerSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeubSUN", cstr_buf): *const u8;
	glReplacementCodeubSUN = get_proc_address("glReplacementCodeubSUN", cstr): *fp_glReplacementCodeubSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeubvSUN", cstr_buf): *const u8;
	glReplacementCodeubvSUN = get_proc_address("glReplacementCodeubvSUN", cstr): *fp_glReplacementCodeubvSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiColor3fVertex3fSUN", cstr_buf): *const u8;
	glReplacementCodeuiColor3fVertex3fSUN = get_proc_address("glReplacementCodeuiColor3fVertex3fSUN", cstr): *fp_glReplacementCodeuiColor3fVertex3fSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiColor3fVertex3fvSUN", cstr_buf): *const u8;
	glReplacementCodeuiColor3fVertex3fvSUN = get_proc_address("glReplacementCodeuiColor3fVertex3fvSUN", cstr): *fp_glReplacementCodeuiColor3fVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiColor4fNormal3fVertex3fSUN", cstr_buf): *const u8;
	glReplacementCodeuiColor4fNormal3fVertex3fSUN = get_proc_address("glReplacementCodeuiColor4fNormal3fVertex3fSUN", cstr): *fp_glReplacementCodeuiColor4fNormal3fVertex3fSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiColor4fNormal3fVertex3fvSUN", cstr_buf): *const u8;
	glReplacementCodeuiColor4fNormal3fVertex3fvSUN = get_proc_address("glReplacementCodeuiColor4fNormal3fVertex3fvSUN", cstr): *fp_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiColor4ubVertex3fSUN", cstr_buf): *const u8;
	glReplacementCodeuiColor4ubVertex3fSUN = get_proc_address("glReplacementCodeuiColor4ubVertex3fSUN", cstr): *fp_glReplacementCodeuiColor4ubVertex3fSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiColor4ubVertex3fvSUN", cstr_buf): *const u8;
	glReplacementCodeuiColor4ubVertex3fvSUN = get_proc_address("glReplacementCodeuiColor4ubVertex3fvSUN", cstr): *fp_glReplacementCodeuiColor4ubVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiNormal3fVertex3fSUN", cstr_buf): *const u8;
	glReplacementCodeuiNormal3fVertex3fSUN = get_proc_address("glReplacementCodeuiNormal3fVertex3fSUN", cstr): *fp_glReplacementCodeuiNormal3fVertex3fSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiNormal3fVertex3fvSUN", cstr_buf): *const u8;
	glReplacementCodeuiNormal3fVertex3fvSUN = get_proc_address("glReplacementCodeuiNormal3fVertex3fvSUN", cstr): *fp_glReplacementCodeuiNormal3fVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiSUN", cstr_buf): *const u8;
	glReplacementCodeuiSUN = get_proc_address("glReplacementCodeuiSUN", cstr): *fp_glReplacementCodeuiSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN", cstr_buf): *const u8;
	glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = get_proc_address("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN", cstr): *fp_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", cstr_buf): *const u8;
	glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = get_proc_address("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", cstr): *fp_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN", cstr_buf): *const u8;
	glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = get_proc_address("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN", cstr): *fp_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", cstr_buf): *const u8;
	glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = get_proc_address("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", cstr): *fp_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiTexCoord2fVertex3fSUN", cstr_buf): *const u8;
	glReplacementCodeuiTexCoord2fVertex3fSUN = get_proc_address("glReplacementCodeuiTexCoord2fVertex3fSUN", cstr): *fp_glReplacementCodeuiTexCoord2fVertex3fSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiTexCoord2fVertex3fvSUN", cstr_buf): *const u8;
	glReplacementCodeuiTexCoord2fVertex3fvSUN = get_proc_address("glReplacementCodeuiTexCoord2fVertex3fvSUN", cstr): *fp_glReplacementCodeuiTexCoord2fVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiVertex3fSUN", cstr_buf): *const u8;
	glReplacementCodeuiVertex3fSUN = get_proc_address("glReplacementCodeuiVertex3fSUN", cstr): *fp_glReplacementCodeuiVertex3fSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiVertex3fvSUN", cstr_buf): *const u8;
	glReplacementCodeuiVertex3fvSUN = get_proc_address("glReplacementCodeuiVertex3fvSUN", cstr): *fp_glReplacementCodeuiVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuivSUN", cstr_buf): *const u8;
	glReplacementCodeuivSUN = get_proc_address("glReplacementCodeuivSUN", cstr): *fp_glReplacementCodeuivSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeusSUN", cstr_buf): *const u8;
	glReplacementCodeusSUN = get_proc_address("glReplacementCodeusSUN", cstr): *fp_glReplacementCodeusSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeusvSUN", cstr_buf): *const u8;
	glReplacementCodeusvSUN = get_proc_address("glReplacementCodeusvSUN", cstr): *fp_glReplacementCodeusvSUN;
	let cstr = strings::to_c_with_buf("glRequestResidentProgramsNV", cstr_buf): *const u8;
	glRequestResidentProgramsNV = get_proc_address("glRequestResidentProgramsNV", cstr): *fp_glRequestResidentProgramsNV;
	let cstr = strings::to_c_with_buf("glResetHistogramEXT", cstr_buf): *const u8;
	glResetHistogramEXT = get_proc_address("glResetHistogramEXT", cstr): *fp_glResetHistogramEXT;
	let cstr = strings::to_c_with_buf("glResetMemoryObjectParameterNV", cstr_buf): *const u8;
	glResetMemoryObjectParameterNV = get_proc_address("glResetMemoryObjectParameterNV", cstr): *fp_glResetMemoryObjectParameterNV;
	let cstr = strings::to_c_with_buf("glResetMinmaxEXT", cstr_buf): *const u8;
	glResetMinmaxEXT = get_proc_address("glResetMinmaxEXT", cstr): *fp_glResetMinmaxEXT;
	let cstr = strings::to_c_with_buf("glResizeBuffersMESA", cstr_buf): *const u8;
	glResizeBuffersMESA = get_proc_address("glResizeBuffersMESA", cstr): *fp_glResizeBuffersMESA;
	let cstr = strings::to_c_with_buf("glResolveDepthValuesNV", cstr_buf): *const u8;
	glResolveDepthValuesNV = get_proc_address("glResolveDepthValuesNV", cstr): *fp_glResolveDepthValuesNV;
	let cstr = strings::to_c_with_buf("glResumeTransformFeedback", cstr_buf): *const u8;
	glResumeTransformFeedback = get_proc_address("glResumeTransformFeedback", cstr): *fp_glResumeTransformFeedback;
	let cstr = strings::to_c_with_buf("glResumeTransformFeedbackNV", cstr_buf): *const u8;
	glResumeTransformFeedbackNV = get_proc_address("glResumeTransformFeedbackNV", cstr): *fp_glResumeTransformFeedbackNV;
	let cstr = strings::to_c_with_buf("glRotated", cstr_buf): *const u8;
	glRotated = get_proc_address("glRotated", cstr): *fp_glRotated;
	let cstr = strings::to_c_with_buf("glRotatef", cstr_buf): *const u8;
	glRotatef = get_proc_address("glRotatef", cstr): *fp_glRotatef;
	let cstr = strings::to_c_with_buf("glRotatexOES", cstr_buf): *const u8;
	glRotatexOES = get_proc_address("glRotatexOES", cstr): *fp_glRotatexOES;
	let cstr = strings::to_c_with_buf("glSampleCoverage", cstr_buf): *const u8;
	glSampleCoverage = get_proc_address("glSampleCoverage", cstr): *fp_glSampleCoverage;
	let cstr = strings::to_c_with_buf("glSampleCoverageARB", cstr_buf): *const u8;
	glSampleCoverageARB = get_proc_address("glSampleCoverageARB", cstr): *fp_glSampleCoverageARB;
	let cstr = strings::to_c_with_buf("glSampleMapATI", cstr_buf): *const u8;
	glSampleMapATI = get_proc_address("glSampleMapATI", cstr): *fp_glSampleMapATI;
	let cstr = strings::to_c_with_buf("glSampleMaskEXT", cstr_buf): *const u8;
	glSampleMaskEXT = get_proc_address("glSampleMaskEXT", cstr): *fp_glSampleMaskEXT;
	let cstr = strings::to_c_with_buf("glSampleMaskIndexedNV", cstr_buf): *const u8;
	glSampleMaskIndexedNV = get_proc_address("glSampleMaskIndexedNV", cstr): *fp_glSampleMaskIndexedNV;
	let cstr = strings::to_c_with_buf("glSampleMaskSGIS", cstr_buf): *const u8;
	glSampleMaskSGIS = get_proc_address("glSampleMaskSGIS", cstr): *fp_glSampleMaskSGIS;
	let cstr = strings::to_c_with_buf("glSampleMaski", cstr_buf): *const u8;
	glSampleMaski = get_proc_address("glSampleMaski", cstr): *fp_glSampleMaski;
	let cstr = strings::to_c_with_buf("glSamplePatternEXT", cstr_buf): *const u8;
	glSamplePatternEXT = get_proc_address("glSamplePatternEXT", cstr): *fp_glSamplePatternEXT;
	let cstr = strings::to_c_with_buf("glSamplePatternSGIS", cstr_buf): *const u8;
	glSamplePatternSGIS = get_proc_address("glSamplePatternSGIS", cstr): *fp_glSamplePatternSGIS;
	let cstr = strings::to_c_with_buf("glSamplerParameterIiv", cstr_buf): *const u8;
	glSamplerParameterIiv = get_proc_address("glSamplerParameterIiv", cstr): *fp_glSamplerParameterIiv;
	let cstr = strings::to_c_with_buf("glSamplerParameterIuiv", cstr_buf): *const u8;
	glSamplerParameterIuiv = get_proc_address("glSamplerParameterIuiv", cstr): *fp_glSamplerParameterIuiv;
	let cstr = strings::to_c_with_buf("glSamplerParameterf", cstr_buf): *const u8;
	glSamplerParameterf = get_proc_address("glSamplerParameterf", cstr): *fp_glSamplerParameterf;
	let cstr = strings::to_c_with_buf("glSamplerParameterfv", cstr_buf): *const u8;
	glSamplerParameterfv = get_proc_address("glSamplerParameterfv", cstr): *fp_glSamplerParameterfv;
	let cstr = strings::to_c_with_buf("glSamplerParameteri", cstr_buf): *const u8;
	glSamplerParameteri = get_proc_address("glSamplerParameteri", cstr): *fp_glSamplerParameteri;
	let cstr = strings::to_c_with_buf("glSamplerParameteriv", cstr_buf): *const u8;
	glSamplerParameteriv = get_proc_address("glSamplerParameteriv", cstr): *fp_glSamplerParameteriv;
	let cstr = strings::to_c_with_buf("glScaled", cstr_buf): *const u8;
	glScaled = get_proc_address("glScaled", cstr): *fp_glScaled;
	let cstr = strings::to_c_with_buf("glScalef", cstr_buf): *const u8;
	glScalef = get_proc_address("glScalef", cstr): *fp_glScalef;
	let cstr = strings::to_c_with_buf("glScalexOES", cstr_buf): *const u8;
	glScalexOES = get_proc_address("glScalexOES", cstr): *fp_glScalexOES;
	let cstr = strings::to_c_with_buf("glScissor", cstr_buf): *const u8;
	glScissor = get_proc_address("glScissor", cstr): *fp_glScissor;
	let cstr = strings::to_c_with_buf("glScissorArrayv", cstr_buf): *const u8;
	glScissorArrayv = get_proc_address("glScissorArrayv", cstr): *fp_glScissorArrayv;
	let cstr = strings::to_c_with_buf("glScissorExclusiveArrayvNV", cstr_buf): *const u8;
	glScissorExclusiveArrayvNV = get_proc_address("glScissorExclusiveArrayvNV", cstr): *fp_glScissorExclusiveArrayvNV;
	let cstr = strings::to_c_with_buf("glScissorExclusiveNV", cstr_buf): *const u8;
	glScissorExclusiveNV = get_proc_address("glScissorExclusiveNV", cstr): *fp_glScissorExclusiveNV;
	let cstr = strings::to_c_with_buf("glScissorIndexed", cstr_buf): *const u8;
	glScissorIndexed = get_proc_address("glScissorIndexed", cstr): *fp_glScissorIndexed;
	let cstr = strings::to_c_with_buf("glScissorIndexedv", cstr_buf): *const u8;
	glScissorIndexedv = get_proc_address("glScissorIndexedv", cstr): *fp_glScissorIndexedv;
	let cstr = strings::to_c_with_buf("glSecondaryColor3b", cstr_buf): *const u8;
	glSecondaryColor3b = get_proc_address("glSecondaryColor3b", cstr): *fp_glSecondaryColor3b;
	let cstr = strings::to_c_with_buf("glSecondaryColor3bEXT", cstr_buf): *const u8;
	glSecondaryColor3bEXT = get_proc_address("glSecondaryColor3bEXT", cstr): *fp_glSecondaryColor3bEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3bv", cstr_buf): *const u8;
	glSecondaryColor3bv = get_proc_address("glSecondaryColor3bv", cstr): *fp_glSecondaryColor3bv;
	let cstr = strings::to_c_with_buf("glSecondaryColor3bvEXT", cstr_buf): *const u8;
	glSecondaryColor3bvEXT = get_proc_address("glSecondaryColor3bvEXT", cstr): *fp_glSecondaryColor3bvEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3d", cstr_buf): *const u8;
	glSecondaryColor3d = get_proc_address("glSecondaryColor3d", cstr): *fp_glSecondaryColor3d;
	let cstr = strings::to_c_with_buf("glSecondaryColor3dEXT", cstr_buf): *const u8;
	glSecondaryColor3dEXT = get_proc_address("glSecondaryColor3dEXT", cstr): *fp_glSecondaryColor3dEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3dv", cstr_buf): *const u8;
	glSecondaryColor3dv = get_proc_address("glSecondaryColor3dv", cstr): *fp_glSecondaryColor3dv;
	let cstr = strings::to_c_with_buf("glSecondaryColor3dvEXT", cstr_buf): *const u8;
	glSecondaryColor3dvEXT = get_proc_address("glSecondaryColor3dvEXT", cstr): *fp_glSecondaryColor3dvEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3f", cstr_buf): *const u8;
	glSecondaryColor3f = get_proc_address("glSecondaryColor3f", cstr): *fp_glSecondaryColor3f;
	let cstr = strings::to_c_with_buf("glSecondaryColor3fEXT", cstr_buf): *const u8;
	glSecondaryColor3fEXT = get_proc_address("glSecondaryColor3fEXT", cstr): *fp_glSecondaryColor3fEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3fv", cstr_buf): *const u8;
	glSecondaryColor3fv = get_proc_address("glSecondaryColor3fv", cstr): *fp_glSecondaryColor3fv;
	let cstr = strings::to_c_with_buf("glSecondaryColor3fvEXT", cstr_buf): *const u8;
	glSecondaryColor3fvEXT = get_proc_address("glSecondaryColor3fvEXT", cstr): *fp_glSecondaryColor3fvEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3hNV", cstr_buf): *const u8;
	glSecondaryColor3hNV = get_proc_address("glSecondaryColor3hNV", cstr): *fp_glSecondaryColor3hNV;
	let cstr = strings::to_c_with_buf("glSecondaryColor3hvNV", cstr_buf): *const u8;
	glSecondaryColor3hvNV = get_proc_address("glSecondaryColor3hvNV", cstr): *fp_glSecondaryColor3hvNV;
	let cstr = strings::to_c_with_buf("glSecondaryColor3i", cstr_buf): *const u8;
	glSecondaryColor3i = get_proc_address("glSecondaryColor3i", cstr): *fp_glSecondaryColor3i;
	let cstr = strings::to_c_with_buf("glSecondaryColor3iEXT", cstr_buf): *const u8;
	glSecondaryColor3iEXT = get_proc_address("glSecondaryColor3iEXT", cstr): *fp_glSecondaryColor3iEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3iv", cstr_buf): *const u8;
	glSecondaryColor3iv = get_proc_address("glSecondaryColor3iv", cstr): *fp_glSecondaryColor3iv;
	let cstr = strings::to_c_with_buf("glSecondaryColor3ivEXT", cstr_buf): *const u8;
	glSecondaryColor3ivEXT = get_proc_address("glSecondaryColor3ivEXT", cstr): *fp_glSecondaryColor3ivEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3s", cstr_buf): *const u8;
	glSecondaryColor3s = get_proc_address("glSecondaryColor3s", cstr): *fp_glSecondaryColor3s;
	let cstr = strings::to_c_with_buf("glSecondaryColor3sEXT", cstr_buf): *const u8;
	glSecondaryColor3sEXT = get_proc_address("glSecondaryColor3sEXT", cstr): *fp_glSecondaryColor3sEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3sv", cstr_buf): *const u8;
	glSecondaryColor3sv = get_proc_address("glSecondaryColor3sv", cstr): *fp_glSecondaryColor3sv;
	let cstr = strings::to_c_with_buf("glSecondaryColor3svEXT", cstr_buf): *const u8;
	glSecondaryColor3svEXT = get_proc_address("glSecondaryColor3svEXT", cstr): *fp_glSecondaryColor3svEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3ub", cstr_buf): *const u8;
	glSecondaryColor3ub = get_proc_address("glSecondaryColor3ub", cstr): *fp_glSecondaryColor3ub;
	let cstr = strings::to_c_with_buf("glSecondaryColor3ubEXT", cstr_buf): *const u8;
	glSecondaryColor3ubEXT = get_proc_address("glSecondaryColor3ubEXT", cstr): *fp_glSecondaryColor3ubEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3ubv", cstr_buf): *const u8;
	glSecondaryColor3ubv = get_proc_address("glSecondaryColor3ubv", cstr): *fp_glSecondaryColor3ubv;
	let cstr = strings::to_c_with_buf("glSecondaryColor3ubvEXT", cstr_buf): *const u8;
	glSecondaryColor3ubvEXT = get_proc_address("glSecondaryColor3ubvEXT", cstr): *fp_glSecondaryColor3ubvEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3ui", cstr_buf): *const u8;
	glSecondaryColor3ui = get_proc_address("glSecondaryColor3ui", cstr): *fp_glSecondaryColor3ui;
	let cstr = strings::to_c_with_buf("glSecondaryColor3uiEXT", cstr_buf): *const u8;
	glSecondaryColor3uiEXT = get_proc_address("glSecondaryColor3uiEXT", cstr): *fp_glSecondaryColor3uiEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3uiv", cstr_buf): *const u8;
	glSecondaryColor3uiv = get_proc_address("glSecondaryColor3uiv", cstr): *fp_glSecondaryColor3uiv;
	let cstr = strings::to_c_with_buf("glSecondaryColor3uivEXT", cstr_buf): *const u8;
	glSecondaryColor3uivEXT = get_proc_address("glSecondaryColor3uivEXT", cstr): *fp_glSecondaryColor3uivEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3us", cstr_buf): *const u8;
	glSecondaryColor3us = get_proc_address("glSecondaryColor3us", cstr): *fp_glSecondaryColor3us;
	let cstr = strings::to_c_with_buf("glSecondaryColor3usEXT", cstr_buf): *const u8;
	glSecondaryColor3usEXT = get_proc_address("glSecondaryColor3usEXT", cstr): *fp_glSecondaryColor3usEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3usv", cstr_buf): *const u8;
	glSecondaryColor3usv = get_proc_address("glSecondaryColor3usv", cstr): *fp_glSecondaryColor3usv;
	let cstr = strings::to_c_with_buf("glSecondaryColor3usvEXT", cstr_buf): *const u8;
	glSecondaryColor3usvEXT = get_proc_address("glSecondaryColor3usvEXT", cstr): *fp_glSecondaryColor3usvEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColorFormatNV", cstr_buf): *const u8;
	glSecondaryColorFormatNV = get_proc_address("glSecondaryColorFormatNV", cstr): *fp_glSecondaryColorFormatNV;
	let cstr = strings::to_c_with_buf("glSecondaryColorPointer", cstr_buf): *const u8;
	glSecondaryColorPointer = get_proc_address("glSecondaryColorPointer", cstr): *fp_glSecondaryColorPointer;
	let cstr = strings::to_c_with_buf("glSecondaryColorPointerEXT", cstr_buf): *const u8;
	glSecondaryColorPointerEXT = get_proc_address("glSecondaryColorPointerEXT", cstr): *fp_glSecondaryColorPointerEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColorPointerListIBM", cstr_buf): *const u8;
	glSecondaryColorPointerListIBM = get_proc_address("glSecondaryColorPointerListIBM", cstr): *fp_glSecondaryColorPointerListIBM;
	let cstr = strings::to_c_with_buf("glSelectBuffer", cstr_buf): *const u8;
	glSelectBuffer = get_proc_address("glSelectBuffer", cstr): *fp_glSelectBuffer;
	let cstr = strings::to_c_with_buf("glSelectPerfMonitorCountersAMD", cstr_buf): *const u8;
	glSelectPerfMonitorCountersAMD = get_proc_address("glSelectPerfMonitorCountersAMD", cstr): *fp_glSelectPerfMonitorCountersAMD;
	let cstr = strings::to_c_with_buf("glSemaphoreParameterivNV", cstr_buf): *const u8;
	glSemaphoreParameterivNV = get_proc_address("glSemaphoreParameterivNV", cstr): *fp_glSemaphoreParameterivNV;
	let cstr = strings::to_c_with_buf("glSemaphoreParameterui64vEXT", cstr_buf): *const u8;
	glSemaphoreParameterui64vEXT = get_proc_address("glSemaphoreParameterui64vEXT", cstr): *fp_glSemaphoreParameterui64vEXT;
	let cstr = strings::to_c_with_buf("glSeparableFilter2DEXT", cstr_buf): *const u8;
	glSeparableFilter2DEXT = get_proc_address("glSeparableFilter2DEXT", cstr): *fp_glSeparableFilter2DEXT;
	let cstr = strings::to_c_with_buf("glSetFenceAPPLE", cstr_buf): *const u8;
	glSetFenceAPPLE = get_proc_address("glSetFenceAPPLE", cstr): *fp_glSetFenceAPPLE;
	let cstr = strings::to_c_with_buf("glSetFenceNV", cstr_buf): *const u8;
	glSetFenceNV = get_proc_address("glSetFenceNV", cstr): *fp_glSetFenceNV;
	let cstr = strings::to_c_with_buf("glSetFragmentShaderConstantATI", cstr_buf): *const u8;
	glSetFragmentShaderConstantATI = get_proc_address("glSetFragmentShaderConstantATI", cstr): *fp_glSetFragmentShaderConstantATI;
	let cstr = strings::to_c_with_buf("glSetInvariantEXT", cstr_buf): *const u8;
	glSetInvariantEXT = get_proc_address("glSetInvariantEXT", cstr): *fp_glSetInvariantEXT;
	let cstr = strings::to_c_with_buf("glSetLocalConstantEXT", cstr_buf): *const u8;
	glSetLocalConstantEXT = get_proc_address("glSetLocalConstantEXT", cstr): *fp_glSetLocalConstantEXT;
	let cstr = strings::to_c_with_buf("glSetMultisamplefvAMD", cstr_buf): *const u8;
	glSetMultisamplefvAMD = get_proc_address("glSetMultisamplefvAMD", cstr): *fp_glSetMultisamplefvAMD;
	let cstr = strings::to_c_with_buf("glShadeModel", cstr_buf): *const u8;
	glShadeModel = get_proc_address("glShadeModel", cstr): *fp_glShadeModel;
	let cstr = strings::to_c_with_buf("glShaderBinary", cstr_buf): *const u8;
	glShaderBinary = get_proc_address("glShaderBinary", cstr): *fp_glShaderBinary;
	let cstr = strings::to_c_with_buf("glShaderOp1EXT", cstr_buf): *const u8;
	glShaderOp1EXT = get_proc_address("glShaderOp1EXT", cstr): *fp_glShaderOp1EXT;
	let cstr = strings::to_c_with_buf("glShaderOp2EXT", cstr_buf): *const u8;
	glShaderOp2EXT = get_proc_address("glShaderOp2EXT", cstr): *fp_glShaderOp2EXT;
	let cstr = strings::to_c_with_buf("glShaderOp3EXT", cstr_buf): *const u8;
	glShaderOp3EXT = get_proc_address("glShaderOp3EXT", cstr): *fp_glShaderOp3EXT;
	let cstr = strings::to_c_with_buf("glShaderSource", cstr_buf): *const u8;
	glShaderSource = get_proc_address("glShaderSource", cstr): *fp_glShaderSource;
	let cstr = strings::to_c_with_buf("glShaderSourceARB", cstr_buf): *const u8;
	glShaderSourceARB = get_proc_address("glShaderSourceARB", cstr): *fp_glShaderSourceARB;
	let cstr = strings::to_c_with_buf("glShaderStorageBlockBinding", cstr_buf): *const u8;
	glShaderStorageBlockBinding = get_proc_address("glShaderStorageBlockBinding", cstr): *fp_glShaderStorageBlockBinding;
	let cstr = strings::to_c_with_buf("glShadingRateImageBarrierNV", cstr_buf): *const u8;
	glShadingRateImageBarrierNV = get_proc_address("glShadingRateImageBarrierNV", cstr): *fp_glShadingRateImageBarrierNV;
	let cstr = strings::to_c_with_buf("glShadingRateImagePaletteNV", cstr_buf): *const u8;
	glShadingRateImagePaletteNV = get_proc_address("glShadingRateImagePaletteNV", cstr): *fp_glShadingRateImagePaletteNV;
	let cstr = strings::to_c_with_buf("glShadingRateSampleOrderCustomNV", cstr_buf): *const u8;
	glShadingRateSampleOrderCustomNV = get_proc_address("glShadingRateSampleOrderCustomNV", cstr): *fp_glShadingRateSampleOrderCustomNV;
	let cstr = strings::to_c_with_buf("glShadingRateSampleOrderNV", cstr_buf): *const u8;
	glShadingRateSampleOrderNV = get_proc_address("glShadingRateSampleOrderNV", cstr): *fp_glShadingRateSampleOrderNV;
	let cstr = strings::to_c_with_buf("glSharpenTexFuncSGIS", cstr_buf): *const u8;
	glSharpenTexFuncSGIS = get_proc_address("glSharpenTexFuncSGIS", cstr): *fp_glSharpenTexFuncSGIS;
	let cstr = strings::to_c_with_buf("glSignalSemaphoreEXT", cstr_buf): *const u8;
	glSignalSemaphoreEXT = get_proc_address("glSignalSemaphoreEXT", cstr): *fp_glSignalSemaphoreEXT;
	let cstr = strings::to_c_with_buf("glSignalSemaphoreui64NVX", cstr_buf): *const u8;
	glSignalSemaphoreui64NVX = get_proc_address("glSignalSemaphoreui64NVX", cstr): *fp_glSignalSemaphoreui64NVX;
	let cstr = strings::to_c_with_buf("glSignalVkFenceNV", cstr_buf): *const u8;
	glSignalVkFenceNV = get_proc_address("glSignalVkFenceNV", cstr): *fp_glSignalVkFenceNV;
	let cstr = strings::to_c_with_buf("glSignalVkSemaphoreNV", cstr_buf): *const u8;
	glSignalVkSemaphoreNV = get_proc_address("glSignalVkSemaphoreNV", cstr): *fp_glSignalVkSemaphoreNV;
	let cstr = strings::to_c_with_buf("glSpecializeShaderARB", cstr_buf): *const u8;
	glSpecializeShaderARB = get_proc_address("glSpecializeShaderARB", cstr): *fp_glSpecializeShaderARB;
	let cstr = strings::to_c_with_buf("glSpriteParameterfSGIX", cstr_buf): *const u8;
	glSpriteParameterfSGIX = get_proc_address("glSpriteParameterfSGIX", cstr): *fp_glSpriteParameterfSGIX;
	let cstr = strings::to_c_with_buf("glSpriteParameterfvSGIX", cstr_buf): *const u8;
	glSpriteParameterfvSGIX = get_proc_address("glSpriteParameterfvSGIX", cstr): *fp_glSpriteParameterfvSGIX;
	let cstr = strings::to_c_with_buf("glSpriteParameteriSGIX", cstr_buf): *const u8;
	glSpriteParameteriSGIX = get_proc_address("glSpriteParameteriSGIX", cstr): *fp_glSpriteParameteriSGIX;
	let cstr = strings::to_c_with_buf("glSpriteParameterivSGIX", cstr_buf): *const u8;
	glSpriteParameterivSGIX = get_proc_address("glSpriteParameterivSGIX", cstr): *fp_glSpriteParameterivSGIX;
	let cstr = strings::to_c_with_buf("glStartInstrumentsSGIX", cstr_buf): *const u8;
	glStartInstrumentsSGIX = get_proc_address("glStartInstrumentsSGIX", cstr): *fp_glStartInstrumentsSGIX;
	let cstr = strings::to_c_with_buf("glStateCaptureNV", cstr_buf): *const u8;
	glStateCaptureNV = get_proc_address("glStateCaptureNV", cstr): *fp_glStateCaptureNV;
	let cstr = strings::to_c_with_buf("glStencilClearTagEXT", cstr_buf): *const u8;
	glStencilClearTagEXT = get_proc_address("glStencilClearTagEXT", cstr): *fp_glStencilClearTagEXT;
	let cstr = strings::to_c_with_buf("glStencilFillPathInstancedNV", cstr_buf): *const u8;
	glStencilFillPathInstancedNV = get_proc_address("glStencilFillPathInstancedNV", cstr): *fp_glStencilFillPathInstancedNV;
	let cstr = strings::to_c_with_buf("glStencilFillPathNV", cstr_buf): *const u8;
	glStencilFillPathNV = get_proc_address("glStencilFillPathNV", cstr): *fp_glStencilFillPathNV;
	let cstr = strings::to_c_with_buf("glStencilFunc", cstr_buf): *const u8;
	glStencilFunc = get_proc_address("glStencilFunc", cstr): *fp_glStencilFunc;
	let cstr = strings::to_c_with_buf("glStencilFuncSeparate", cstr_buf): *const u8;
	glStencilFuncSeparate = get_proc_address("glStencilFuncSeparate", cstr): *fp_glStencilFuncSeparate;
	let cstr = strings::to_c_with_buf("glStencilFuncSeparateATI", cstr_buf): *const u8;
	glStencilFuncSeparateATI = get_proc_address("glStencilFuncSeparateATI", cstr): *fp_glStencilFuncSeparateATI;
	let cstr = strings::to_c_with_buf("glStencilMask", cstr_buf): *const u8;
	glStencilMask = get_proc_address("glStencilMask", cstr): *fp_glStencilMask;
	let cstr = strings::to_c_with_buf("glStencilMaskSeparate", cstr_buf): *const u8;
	glStencilMaskSeparate = get_proc_address("glStencilMaskSeparate", cstr): *fp_glStencilMaskSeparate;
	let cstr = strings::to_c_with_buf("glStencilOp", cstr_buf): *const u8;
	glStencilOp = get_proc_address("glStencilOp", cstr): *fp_glStencilOp;
	let cstr = strings::to_c_with_buf("glStencilOpSeparate", cstr_buf): *const u8;
	glStencilOpSeparate = get_proc_address("glStencilOpSeparate", cstr): *fp_glStencilOpSeparate;
	let cstr = strings::to_c_with_buf("glStencilOpSeparateATI", cstr_buf): *const u8;
	glStencilOpSeparateATI = get_proc_address("glStencilOpSeparateATI", cstr): *fp_glStencilOpSeparateATI;
	let cstr = strings::to_c_with_buf("glStencilOpValueAMD", cstr_buf): *const u8;
	glStencilOpValueAMD = get_proc_address("glStencilOpValueAMD", cstr): *fp_glStencilOpValueAMD;
	let cstr = strings::to_c_with_buf("glStencilStrokePathInstancedNV", cstr_buf): *const u8;
	glStencilStrokePathInstancedNV = get_proc_address("glStencilStrokePathInstancedNV", cstr): *fp_glStencilStrokePathInstancedNV;
	let cstr = strings::to_c_with_buf("glStencilStrokePathNV", cstr_buf): *const u8;
	glStencilStrokePathNV = get_proc_address("glStencilStrokePathNV", cstr): *fp_glStencilStrokePathNV;
	let cstr = strings::to_c_with_buf("glStencilThenCoverFillPathInstancedNV", cstr_buf): *const u8;
	glStencilThenCoverFillPathInstancedNV = get_proc_address("glStencilThenCoverFillPathInstancedNV", cstr): *fp_glStencilThenCoverFillPathInstancedNV;
	let cstr = strings::to_c_with_buf("glStencilThenCoverFillPathNV", cstr_buf): *const u8;
	glStencilThenCoverFillPathNV = get_proc_address("glStencilThenCoverFillPathNV", cstr): *fp_glStencilThenCoverFillPathNV;
	let cstr = strings::to_c_with_buf("glStencilThenCoverStrokePathInstancedNV", cstr_buf): *const u8;
	glStencilThenCoverStrokePathInstancedNV = get_proc_address("glStencilThenCoverStrokePathInstancedNV", cstr): *fp_glStencilThenCoverStrokePathInstancedNV;
	let cstr = strings::to_c_with_buf("glStencilThenCoverStrokePathNV", cstr_buf): *const u8;
	glStencilThenCoverStrokePathNV = get_proc_address("glStencilThenCoverStrokePathNV", cstr): *fp_glStencilThenCoverStrokePathNV;
	let cstr = strings::to_c_with_buf("glStopInstrumentsSGIX", cstr_buf): *const u8;
	glStopInstrumentsSGIX = get_proc_address("glStopInstrumentsSGIX", cstr): *fp_glStopInstrumentsSGIX;
	let cstr = strings::to_c_with_buf("glStringMarkerGREMEDY", cstr_buf): *const u8;
	glStringMarkerGREMEDY = get_proc_address("glStringMarkerGREMEDY", cstr): *fp_glStringMarkerGREMEDY;
	let cstr = strings::to_c_with_buf("glSubpixelPrecisionBiasNV", cstr_buf): *const u8;
	glSubpixelPrecisionBiasNV = get_proc_address("glSubpixelPrecisionBiasNV", cstr): *fp_glSubpixelPrecisionBiasNV;
	let cstr = strings::to_c_with_buf("glSwizzleEXT", cstr_buf): *const u8;
	glSwizzleEXT = get_proc_address("glSwizzleEXT", cstr): *fp_glSwizzleEXT;
	let cstr = strings::to_c_with_buf("glSyncTextureINTEL", cstr_buf): *const u8;
	glSyncTextureINTEL = get_proc_address("glSyncTextureINTEL", cstr): *fp_glSyncTextureINTEL;
	let cstr = strings::to_c_with_buf("glTagSampleBufferSGIX", cstr_buf): *const u8;
	glTagSampleBufferSGIX = get_proc_address("glTagSampleBufferSGIX", cstr): *fp_glTagSampleBufferSGIX;
	let cstr = strings::to_c_with_buf("glTangent3bEXT", cstr_buf): *const u8;
	glTangent3bEXT = get_proc_address("glTangent3bEXT", cstr): *fp_glTangent3bEXT;
	let cstr = strings::to_c_with_buf("glTangent3bvEXT", cstr_buf): *const u8;
	glTangent3bvEXT = get_proc_address("glTangent3bvEXT", cstr): *fp_glTangent3bvEXT;
	let cstr = strings::to_c_with_buf("glTangent3dEXT", cstr_buf): *const u8;
	glTangent3dEXT = get_proc_address("glTangent3dEXT", cstr): *fp_glTangent3dEXT;
	let cstr = strings::to_c_with_buf("glTangent3dvEXT", cstr_buf): *const u8;
	glTangent3dvEXT = get_proc_address("glTangent3dvEXT", cstr): *fp_glTangent3dvEXT;
	let cstr = strings::to_c_with_buf("glTangent3fEXT", cstr_buf): *const u8;
	glTangent3fEXT = get_proc_address("glTangent3fEXT", cstr): *fp_glTangent3fEXT;
	let cstr = strings::to_c_with_buf("glTangent3fvEXT", cstr_buf): *const u8;
	glTangent3fvEXT = get_proc_address("glTangent3fvEXT", cstr): *fp_glTangent3fvEXT;
	let cstr = strings::to_c_with_buf("glTangent3iEXT", cstr_buf): *const u8;
	glTangent3iEXT = get_proc_address("glTangent3iEXT", cstr): *fp_glTangent3iEXT;
	let cstr = strings::to_c_with_buf("glTangent3ivEXT", cstr_buf): *const u8;
	glTangent3ivEXT = get_proc_address("glTangent3ivEXT", cstr): *fp_glTangent3ivEXT;
	let cstr = strings::to_c_with_buf("glTangent3sEXT", cstr_buf): *const u8;
	glTangent3sEXT = get_proc_address("glTangent3sEXT", cstr): *fp_glTangent3sEXT;
	let cstr = strings::to_c_with_buf("glTangent3svEXT", cstr_buf): *const u8;
	glTangent3svEXT = get_proc_address("glTangent3svEXT", cstr): *fp_glTangent3svEXT;
	let cstr = strings::to_c_with_buf("glTangentPointerEXT", cstr_buf): *const u8;
	glTangentPointerEXT = get_proc_address("glTangentPointerEXT", cstr): *fp_glTangentPointerEXT;
	let cstr = strings::to_c_with_buf("glTbufferMask3DFX", cstr_buf): *const u8;
	glTbufferMask3DFX = get_proc_address("glTbufferMask3DFX", cstr): *fp_glTbufferMask3DFX;
	let cstr = strings::to_c_with_buf("glTessellationFactorAMD", cstr_buf): *const u8;
	glTessellationFactorAMD = get_proc_address("glTessellationFactorAMD", cstr): *fp_glTessellationFactorAMD;
	let cstr = strings::to_c_with_buf("glTessellationModeAMD", cstr_buf): *const u8;
	glTessellationModeAMD = get_proc_address("glTessellationModeAMD", cstr): *fp_glTessellationModeAMD;
	let cstr = strings::to_c_with_buf("glTestFenceAPPLE", cstr_buf): *const u8;
	glTestFenceAPPLE = get_proc_address("glTestFenceAPPLE", cstr): *fp_glTestFenceAPPLE;
	let cstr = strings::to_c_with_buf("glTestFenceNV", cstr_buf): *const u8;
	glTestFenceNV = get_proc_address("glTestFenceNV", cstr): *fp_glTestFenceNV;
	let cstr = strings::to_c_with_buf("glTestObjectAPPLE", cstr_buf): *const u8;
	glTestObjectAPPLE = get_proc_address("glTestObjectAPPLE", cstr): *fp_glTestObjectAPPLE;
	let cstr = strings::to_c_with_buf("glTexAttachMemoryNV", cstr_buf): *const u8;
	glTexAttachMemoryNV = get_proc_address("glTexAttachMemoryNV", cstr): *fp_glTexAttachMemoryNV;
	let cstr = strings::to_c_with_buf("glTexBufferARB", cstr_buf): *const u8;
	glTexBufferARB = get_proc_address("glTexBufferARB", cstr): *fp_glTexBufferARB;
	let cstr = strings::to_c_with_buf("glTexBufferEXT", cstr_buf): *const u8;
	glTexBufferEXT = get_proc_address("glTexBufferEXT", cstr): *fp_glTexBufferEXT;
	let cstr = strings::to_c_with_buf("glTexBufferRange", cstr_buf): *const u8;
	glTexBufferRange = get_proc_address("glTexBufferRange", cstr): *fp_glTexBufferRange;
	let cstr = strings::to_c_with_buf("glTexBumpParameterfvATI", cstr_buf): *const u8;
	glTexBumpParameterfvATI = get_proc_address("glTexBumpParameterfvATI", cstr): *fp_glTexBumpParameterfvATI;
	let cstr = strings::to_c_with_buf("glTexBumpParameterivATI", cstr_buf): *const u8;
	glTexBumpParameterivATI = get_proc_address("glTexBumpParameterivATI", cstr): *fp_glTexBumpParameterivATI;
	let cstr = strings::to_c_with_buf("glTexCoord1bOES", cstr_buf): *const u8;
	glTexCoord1bOES = get_proc_address("glTexCoord1bOES", cstr): *fp_glTexCoord1bOES;
	let cstr = strings::to_c_with_buf("glTexCoord1bvOES", cstr_buf): *const u8;
	glTexCoord1bvOES = get_proc_address("glTexCoord1bvOES", cstr): *fp_glTexCoord1bvOES;
	let cstr = strings::to_c_with_buf("glTexCoord1d", cstr_buf): *const u8;
	glTexCoord1d = get_proc_address("glTexCoord1d", cstr): *fp_glTexCoord1d;
	let cstr = strings::to_c_with_buf("glTexCoord1dv", cstr_buf): *const u8;
	glTexCoord1dv = get_proc_address("glTexCoord1dv", cstr): *fp_glTexCoord1dv;
	let cstr = strings::to_c_with_buf("glTexCoord1f", cstr_buf): *const u8;
	glTexCoord1f = get_proc_address("glTexCoord1f", cstr): *fp_glTexCoord1f;
	let cstr = strings::to_c_with_buf("glTexCoord1fv", cstr_buf): *const u8;
	glTexCoord1fv = get_proc_address("glTexCoord1fv", cstr): *fp_glTexCoord1fv;
	let cstr = strings::to_c_with_buf("glTexCoord1hNV", cstr_buf): *const u8;
	glTexCoord1hNV = get_proc_address("glTexCoord1hNV", cstr): *fp_glTexCoord1hNV;
	let cstr = strings::to_c_with_buf("glTexCoord1hvNV", cstr_buf): *const u8;
	glTexCoord1hvNV = get_proc_address("glTexCoord1hvNV", cstr): *fp_glTexCoord1hvNV;
	let cstr = strings::to_c_with_buf("glTexCoord1i", cstr_buf): *const u8;
	glTexCoord1i = get_proc_address("glTexCoord1i", cstr): *fp_glTexCoord1i;
	let cstr = strings::to_c_with_buf("glTexCoord1iv", cstr_buf): *const u8;
	glTexCoord1iv = get_proc_address("glTexCoord1iv", cstr): *fp_glTexCoord1iv;
	let cstr = strings::to_c_with_buf("glTexCoord1s", cstr_buf): *const u8;
	glTexCoord1s = get_proc_address("glTexCoord1s", cstr): *fp_glTexCoord1s;
	let cstr = strings::to_c_with_buf("glTexCoord1sv", cstr_buf): *const u8;
	glTexCoord1sv = get_proc_address("glTexCoord1sv", cstr): *fp_glTexCoord1sv;
	let cstr = strings::to_c_with_buf("glTexCoord1xOES", cstr_buf): *const u8;
	glTexCoord1xOES = get_proc_address("glTexCoord1xOES", cstr): *fp_glTexCoord1xOES;
	let cstr = strings::to_c_with_buf("glTexCoord1xvOES", cstr_buf): *const u8;
	glTexCoord1xvOES = get_proc_address("glTexCoord1xvOES", cstr): *fp_glTexCoord1xvOES;
	let cstr = strings::to_c_with_buf("glTexCoord2bOES", cstr_buf): *const u8;
	glTexCoord2bOES = get_proc_address("glTexCoord2bOES", cstr): *fp_glTexCoord2bOES;
	let cstr = strings::to_c_with_buf("glTexCoord2bvOES", cstr_buf): *const u8;
	glTexCoord2bvOES = get_proc_address("glTexCoord2bvOES", cstr): *fp_glTexCoord2bvOES;
	let cstr = strings::to_c_with_buf("glTexCoord2d", cstr_buf): *const u8;
	glTexCoord2d = get_proc_address("glTexCoord2d", cstr): *fp_glTexCoord2d;
	let cstr = strings::to_c_with_buf("glTexCoord2dv", cstr_buf): *const u8;
	glTexCoord2dv = get_proc_address("glTexCoord2dv", cstr): *fp_glTexCoord2dv;
	let cstr = strings::to_c_with_buf("glTexCoord2f", cstr_buf): *const u8;
	glTexCoord2f = get_proc_address("glTexCoord2f", cstr): *fp_glTexCoord2f;
	let cstr = strings::to_c_with_buf("glTexCoord2fColor3fVertex3fSUN", cstr_buf): *const u8;
	glTexCoord2fColor3fVertex3fSUN = get_proc_address("glTexCoord2fColor3fVertex3fSUN", cstr): *fp_glTexCoord2fColor3fVertex3fSUN;
	let cstr = strings::to_c_with_buf("glTexCoord2fColor3fVertex3fvSUN", cstr_buf): *const u8;
	glTexCoord2fColor3fVertex3fvSUN = get_proc_address("glTexCoord2fColor3fVertex3fvSUN", cstr): *fp_glTexCoord2fColor3fVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glTexCoord2fColor4fNormal3fVertex3fSUN", cstr_buf): *const u8;
	glTexCoord2fColor4fNormal3fVertex3fSUN = get_proc_address("glTexCoord2fColor4fNormal3fVertex3fSUN", cstr): *fp_glTexCoord2fColor4fNormal3fVertex3fSUN;
	let cstr = strings::to_c_with_buf("glTexCoord2fColor4fNormal3fVertex3fvSUN", cstr_buf): *const u8;
	glTexCoord2fColor4fNormal3fVertex3fvSUN = get_proc_address("glTexCoord2fColor4fNormal3fVertex3fvSUN", cstr): *fp_glTexCoord2fColor4fNormal3fVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glTexCoord2fColor4ubVertex3fSUN", cstr_buf): *const u8;
	glTexCoord2fColor4ubVertex3fSUN = get_proc_address("glTexCoord2fColor4ubVertex3fSUN", cstr): *fp_glTexCoord2fColor4ubVertex3fSUN;
	let cstr = strings::to_c_with_buf("glTexCoord2fColor4ubVertex3fvSUN", cstr_buf): *const u8;
	glTexCoord2fColor4ubVertex3fvSUN = get_proc_address("glTexCoord2fColor4ubVertex3fvSUN", cstr): *fp_glTexCoord2fColor4ubVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glTexCoord2fNormal3fVertex3fSUN", cstr_buf): *const u8;
	glTexCoord2fNormal3fVertex3fSUN = get_proc_address("glTexCoord2fNormal3fVertex3fSUN", cstr): *fp_glTexCoord2fNormal3fVertex3fSUN;
	let cstr = strings::to_c_with_buf("glTexCoord2fNormal3fVertex3fvSUN", cstr_buf): *const u8;
	glTexCoord2fNormal3fVertex3fvSUN = get_proc_address("glTexCoord2fNormal3fVertex3fvSUN", cstr): *fp_glTexCoord2fNormal3fVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glTexCoord2fVertex3fSUN", cstr_buf): *const u8;
	glTexCoord2fVertex3fSUN = get_proc_address("glTexCoord2fVertex3fSUN", cstr): *fp_glTexCoord2fVertex3fSUN;
	let cstr = strings::to_c_with_buf("glTexCoord2fVertex3fvSUN", cstr_buf): *const u8;
	glTexCoord2fVertex3fvSUN = get_proc_address("glTexCoord2fVertex3fvSUN", cstr): *fp_glTexCoord2fVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glTexCoord2fv", cstr_buf): *const u8;
	glTexCoord2fv = get_proc_address("glTexCoord2fv", cstr): *fp_glTexCoord2fv;
	let cstr = strings::to_c_with_buf("glTexCoord2hNV", cstr_buf): *const u8;
	glTexCoord2hNV = get_proc_address("glTexCoord2hNV", cstr): *fp_glTexCoord2hNV;
	let cstr = strings::to_c_with_buf("glTexCoord2hvNV", cstr_buf): *const u8;
	glTexCoord2hvNV = get_proc_address("glTexCoord2hvNV", cstr): *fp_glTexCoord2hvNV;
	let cstr = strings::to_c_with_buf("glTexCoord2i", cstr_buf): *const u8;
	glTexCoord2i = get_proc_address("glTexCoord2i", cstr): *fp_glTexCoord2i;
	let cstr = strings::to_c_with_buf("glTexCoord2iv", cstr_buf): *const u8;
	glTexCoord2iv = get_proc_address("glTexCoord2iv", cstr): *fp_glTexCoord2iv;
	let cstr = strings::to_c_with_buf("glTexCoord2s", cstr_buf): *const u8;
	glTexCoord2s = get_proc_address("glTexCoord2s", cstr): *fp_glTexCoord2s;
	let cstr = strings::to_c_with_buf("glTexCoord2sv", cstr_buf): *const u8;
	glTexCoord2sv = get_proc_address("glTexCoord2sv", cstr): *fp_glTexCoord2sv;
	let cstr = strings::to_c_with_buf("glTexCoord2xOES", cstr_buf): *const u8;
	glTexCoord2xOES = get_proc_address("glTexCoord2xOES", cstr): *fp_glTexCoord2xOES;
	let cstr = strings::to_c_with_buf("glTexCoord2xvOES", cstr_buf): *const u8;
	glTexCoord2xvOES = get_proc_address("glTexCoord2xvOES", cstr): *fp_glTexCoord2xvOES;
	let cstr = strings::to_c_with_buf("glTexCoord3bOES", cstr_buf): *const u8;
	glTexCoord3bOES = get_proc_address("glTexCoord3bOES", cstr): *fp_glTexCoord3bOES;
	let cstr = strings::to_c_with_buf("glTexCoord3bvOES", cstr_buf): *const u8;
	glTexCoord3bvOES = get_proc_address("glTexCoord3bvOES", cstr): *fp_glTexCoord3bvOES;
	let cstr = strings::to_c_with_buf("glTexCoord3d", cstr_buf): *const u8;
	glTexCoord3d = get_proc_address("glTexCoord3d", cstr): *fp_glTexCoord3d;
	let cstr = strings::to_c_with_buf("glTexCoord3dv", cstr_buf): *const u8;
	glTexCoord3dv = get_proc_address("glTexCoord3dv", cstr): *fp_glTexCoord3dv;
	let cstr = strings::to_c_with_buf("glTexCoord3f", cstr_buf): *const u8;
	glTexCoord3f = get_proc_address("glTexCoord3f", cstr): *fp_glTexCoord3f;
	let cstr = strings::to_c_with_buf("glTexCoord3fv", cstr_buf): *const u8;
	glTexCoord3fv = get_proc_address("glTexCoord3fv", cstr): *fp_glTexCoord3fv;
	let cstr = strings::to_c_with_buf("glTexCoord3hNV", cstr_buf): *const u8;
	glTexCoord3hNV = get_proc_address("glTexCoord3hNV", cstr): *fp_glTexCoord3hNV;
	let cstr = strings::to_c_with_buf("glTexCoord3hvNV", cstr_buf): *const u8;
	glTexCoord3hvNV = get_proc_address("glTexCoord3hvNV", cstr): *fp_glTexCoord3hvNV;
	let cstr = strings::to_c_with_buf("glTexCoord3i", cstr_buf): *const u8;
	glTexCoord3i = get_proc_address("glTexCoord3i", cstr): *fp_glTexCoord3i;
	let cstr = strings::to_c_with_buf("glTexCoord3iv", cstr_buf): *const u8;
	glTexCoord3iv = get_proc_address("glTexCoord3iv", cstr): *fp_glTexCoord3iv;
	let cstr = strings::to_c_with_buf("glTexCoord3s", cstr_buf): *const u8;
	glTexCoord3s = get_proc_address("glTexCoord3s", cstr): *fp_glTexCoord3s;
	let cstr = strings::to_c_with_buf("glTexCoord3sv", cstr_buf): *const u8;
	glTexCoord3sv = get_proc_address("glTexCoord3sv", cstr): *fp_glTexCoord3sv;
	let cstr = strings::to_c_with_buf("glTexCoord3xOES", cstr_buf): *const u8;
	glTexCoord3xOES = get_proc_address("glTexCoord3xOES", cstr): *fp_glTexCoord3xOES;
	let cstr = strings::to_c_with_buf("glTexCoord3xvOES", cstr_buf): *const u8;
	glTexCoord3xvOES = get_proc_address("glTexCoord3xvOES", cstr): *fp_glTexCoord3xvOES;
	let cstr = strings::to_c_with_buf("glTexCoord4bOES", cstr_buf): *const u8;
	glTexCoord4bOES = get_proc_address("glTexCoord4bOES", cstr): *fp_glTexCoord4bOES;
	let cstr = strings::to_c_with_buf("glTexCoord4bvOES", cstr_buf): *const u8;
	glTexCoord4bvOES = get_proc_address("glTexCoord4bvOES", cstr): *fp_glTexCoord4bvOES;
	let cstr = strings::to_c_with_buf("glTexCoord4d", cstr_buf): *const u8;
	glTexCoord4d = get_proc_address("glTexCoord4d", cstr): *fp_glTexCoord4d;
	let cstr = strings::to_c_with_buf("glTexCoord4dv", cstr_buf): *const u8;
	glTexCoord4dv = get_proc_address("glTexCoord4dv", cstr): *fp_glTexCoord4dv;
	let cstr = strings::to_c_with_buf("glTexCoord4f", cstr_buf): *const u8;
	glTexCoord4f = get_proc_address("glTexCoord4f", cstr): *fp_glTexCoord4f;
	let cstr = strings::to_c_with_buf("glTexCoord4fColor4fNormal3fVertex4fSUN", cstr_buf): *const u8;
	glTexCoord4fColor4fNormal3fVertex4fSUN = get_proc_address("glTexCoord4fColor4fNormal3fVertex4fSUN", cstr): *fp_glTexCoord4fColor4fNormal3fVertex4fSUN;
	let cstr = strings::to_c_with_buf("glTexCoord4fColor4fNormal3fVertex4fvSUN", cstr_buf): *const u8;
	glTexCoord4fColor4fNormal3fVertex4fvSUN = get_proc_address("glTexCoord4fColor4fNormal3fVertex4fvSUN", cstr): *fp_glTexCoord4fColor4fNormal3fVertex4fvSUN;
	let cstr = strings::to_c_with_buf("glTexCoord4fVertex4fSUN", cstr_buf): *const u8;
	glTexCoord4fVertex4fSUN = get_proc_address("glTexCoord4fVertex4fSUN", cstr): *fp_glTexCoord4fVertex4fSUN;
	let cstr = strings::to_c_with_buf("glTexCoord4fVertex4fvSUN", cstr_buf): *const u8;
	glTexCoord4fVertex4fvSUN = get_proc_address("glTexCoord4fVertex4fvSUN", cstr): *fp_glTexCoord4fVertex4fvSUN;
	let cstr = strings::to_c_with_buf("glTexCoord4fv", cstr_buf): *const u8;
	glTexCoord4fv = get_proc_address("glTexCoord4fv", cstr): *fp_glTexCoord4fv;
	let cstr = strings::to_c_with_buf("glTexCoord4hNV", cstr_buf): *const u8;
	glTexCoord4hNV = get_proc_address("glTexCoord4hNV", cstr): *fp_glTexCoord4hNV;
	let cstr = strings::to_c_with_buf("glTexCoord4hvNV", cstr_buf): *const u8;
	glTexCoord4hvNV = get_proc_address("glTexCoord4hvNV", cstr): *fp_glTexCoord4hvNV;
	let cstr = strings::to_c_with_buf("glTexCoord4i", cstr_buf): *const u8;
	glTexCoord4i = get_proc_address("glTexCoord4i", cstr): *fp_glTexCoord4i;
	let cstr = strings::to_c_with_buf("glTexCoord4iv", cstr_buf): *const u8;
	glTexCoord4iv = get_proc_address("glTexCoord4iv", cstr): *fp_glTexCoord4iv;
	let cstr = strings::to_c_with_buf("glTexCoord4s", cstr_buf): *const u8;
	glTexCoord4s = get_proc_address("glTexCoord4s", cstr): *fp_glTexCoord4s;
	let cstr = strings::to_c_with_buf("glTexCoord4sv", cstr_buf): *const u8;
	glTexCoord4sv = get_proc_address("glTexCoord4sv", cstr): *fp_glTexCoord4sv;
	let cstr = strings::to_c_with_buf("glTexCoord4xOES", cstr_buf): *const u8;
	glTexCoord4xOES = get_proc_address("glTexCoord4xOES", cstr): *fp_glTexCoord4xOES;
	let cstr = strings::to_c_with_buf("glTexCoord4xvOES", cstr_buf): *const u8;
	glTexCoord4xvOES = get_proc_address("glTexCoord4xvOES", cstr): *fp_glTexCoord4xvOES;
	let cstr = strings::to_c_with_buf("glTexCoordFormatNV", cstr_buf): *const u8;
	glTexCoordFormatNV = get_proc_address("glTexCoordFormatNV", cstr): *fp_glTexCoordFormatNV;
	let cstr = strings::to_c_with_buf("glTexCoordPointer", cstr_buf): *const u8;
	glTexCoordPointer = get_proc_address("glTexCoordPointer", cstr): *fp_glTexCoordPointer;
	let cstr = strings::to_c_with_buf("glTexCoordPointerEXT", cstr_buf): *const u8;
	glTexCoordPointerEXT = get_proc_address("glTexCoordPointerEXT", cstr): *fp_glTexCoordPointerEXT;
	let cstr = strings::to_c_with_buf("glTexCoordPointerListIBM", cstr_buf): *const u8;
	glTexCoordPointerListIBM = get_proc_address("glTexCoordPointerListIBM", cstr): *fp_glTexCoordPointerListIBM;
	let cstr = strings::to_c_with_buf("glTexCoordPointervINTEL", cstr_buf): *const u8;
	glTexCoordPointervINTEL = get_proc_address("glTexCoordPointervINTEL", cstr): *fp_glTexCoordPointervINTEL;
	let cstr = strings::to_c_with_buf("glTexEnvf", cstr_buf): *const u8;
	glTexEnvf = get_proc_address("glTexEnvf", cstr): *fp_glTexEnvf;
	let cstr = strings::to_c_with_buf("glTexEnvfv", cstr_buf): *const u8;
	glTexEnvfv = get_proc_address("glTexEnvfv", cstr): *fp_glTexEnvfv;
	let cstr = strings::to_c_with_buf("glTexEnvi", cstr_buf): *const u8;
	glTexEnvi = get_proc_address("glTexEnvi", cstr): *fp_glTexEnvi;
	let cstr = strings::to_c_with_buf("glTexEnviv", cstr_buf): *const u8;
	glTexEnviv = get_proc_address("glTexEnviv", cstr): *fp_glTexEnviv;
	let cstr = strings::to_c_with_buf("glTexEnvxOES", cstr_buf): *const u8;
	glTexEnvxOES = get_proc_address("glTexEnvxOES", cstr): *fp_glTexEnvxOES;
	let cstr = strings::to_c_with_buf("glTexEnvxvOES", cstr_buf): *const u8;
	glTexEnvxvOES = get_proc_address("glTexEnvxvOES", cstr): *fp_glTexEnvxvOES;
	let cstr = strings::to_c_with_buf("glTexFilterFuncSGIS", cstr_buf): *const u8;
	glTexFilterFuncSGIS = get_proc_address("glTexFilterFuncSGIS", cstr): *fp_glTexFilterFuncSGIS;
	let cstr = strings::to_c_with_buf("glTexGend", cstr_buf): *const u8;
	glTexGend = get_proc_address("glTexGend", cstr): *fp_glTexGend;
	let cstr = strings::to_c_with_buf("glTexGendv", cstr_buf): *const u8;
	glTexGendv = get_proc_address("glTexGendv", cstr): *fp_glTexGendv;
	let cstr = strings::to_c_with_buf("glTexGenf", cstr_buf): *const u8;
	glTexGenf = get_proc_address("glTexGenf", cstr): *fp_glTexGenf;
	let cstr = strings::to_c_with_buf("glTexGenfv", cstr_buf): *const u8;
	glTexGenfv = get_proc_address("glTexGenfv", cstr): *fp_glTexGenfv;
	let cstr = strings::to_c_with_buf("glTexGeni", cstr_buf): *const u8;
	glTexGeni = get_proc_address("glTexGeni", cstr): *fp_glTexGeni;
	let cstr = strings::to_c_with_buf("glTexGeniv", cstr_buf): *const u8;
	glTexGeniv = get_proc_address("glTexGeniv", cstr): *fp_glTexGeniv;
	let cstr = strings::to_c_with_buf("glTexGenxOES", cstr_buf): *const u8;
	glTexGenxOES = get_proc_address("glTexGenxOES", cstr): *fp_glTexGenxOES;
	let cstr = strings::to_c_with_buf("glTexGenxvOES", cstr_buf): *const u8;
	glTexGenxvOES = get_proc_address("glTexGenxvOES", cstr): *fp_glTexGenxvOES;
	let cstr = strings::to_c_with_buf("glTexImage1D", cstr_buf): *const u8;
	glTexImage1D = get_proc_address("glTexImage1D", cstr): *fp_glTexImage1D;
	let cstr = strings::to_c_with_buf("glTexImage2D", cstr_buf): *const u8;
	glTexImage2D = get_proc_address("glTexImage2D", cstr): *fp_glTexImage2D;
	let cstr = strings::to_c_with_buf("glTexImage2DMultisample", cstr_buf): *const u8;
	glTexImage2DMultisample = get_proc_address("glTexImage2DMultisample", cstr): *fp_glTexImage2DMultisample;
	let cstr = strings::to_c_with_buf("glTexImage2DMultisampleCoverageNV", cstr_buf): *const u8;
	glTexImage2DMultisampleCoverageNV = get_proc_address("glTexImage2DMultisampleCoverageNV", cstr): *fp_glTexImage2DMultisampleCoverageNV;
	let cstr = strings::to_c_with_buf("glTexImage3D", cstr_buf): *const u8;
	glTexImage3D = get_proc_address("glTexImage3D", cstr): *fp_glTexImage3D;
	let cstr = strings::to_c_with_buf("glTexImage3DEXT", cstr_buf): *const u8;
	glTexImage3DEXT = get_proc_address("glTexImage3DEXT", cstr): *fp_glTexImage3DEXT;
	let cstr = strings::to_c_with_buf("glTexImage3DMultisample", cstr_buf): *const u8;
	glTexImage3DMultisample = get_proc_address("glTexImage3DMultisample", cstr): *fp_glTexImage3DMultisample;
	let cstr = strings::to_c_with_buf("glTexImage3DMultisampleCoverageNV", cstr_buf): *const u8;
	glTexImage3DMultisampleCoverageNV = get_proc_address("glTexImage3DMultisampleCoverageNV", cstr): *fp_glTexImage3DMultisampleCoverageNV;
	let cstr = strings::to_c_with_buf("glTexImage4DSGIS", cstr_buf): *const u8;
	glTexImage4DSGIS = get_proc_address("glTexImage4DSGIS", cstr): *fp_glTexImage4DSGIS;
	let cstr = strings::to_c_with_buf("glTexPageCommitmentARB", cstr_buf): *const u8;
	glTexPageCommitmentARB = get_proc_address("glTexPageCommitmentARB", cstr): *fp_glTexPageCommitmentARB;
	let cstr = strings::to_c_with_buf("glTexPageCommitmentMemNV", cstr_buf): *const u8;
	glTexPageCommitmentMemNV = get_proc_address("glTexPageCommitmentMemNV", cstr): *fp_glTexPageCommitmentMemNV;
	let cstr = strings::to_c_with_buf("glTexParameterIivEXT", cstr_buf): *const u8;
	glTexParameterIivEXT = get_proc_address("glTexParameterIivEXT", cstr): *fp_glTexParameterIivEXT;
	let cstr = strings::to_c_with_buf("glTexParameterIuivEXT", cstr_buf): *const u8;
	glTexParameterIuivEXT = get_proc_address("glTexParameterIuivEXT", cstr): *fp_glTexParameterIuivEXT;
	let cstr = strings::to_c_with_buf("glTexParameterf", cstr_buf): *const u8;
	glTexParameterf = get_proc_address("glTexParameterf", cstr): *fp_glTexParameterf;
	let cstr = strings::to_c_with_buf("glTexParameterfv", cstr_buf): *const u8;
	glTexParameterfv = get_proc_address("glTexParameterfv", cstr): *fp_glTexParameterfv;
	let cstr = strings::to_c_with_buf("glTexParameteri", cstr_buf): *const u8;
	glTexParameteri = get_proc_address("glTexParameteri", cstr): *fp_glTexParameteri;
	let cstr = strings::to_c_with_buf("glTexParameteriv", cstr_buf): *const u8;
	glTexParameteriv = get_proc_address("glTexParameteriv", cstr): *fp_glTexParameteriv;
	let cstr = strings::to_c_with_buf("glTexParameterxOES", cstr_buf): *const u8;
	glTexParameterxOES = get_proc_address("glTexParameterxOES", cstr): *fp_glTexParameterxOES;
	let cstr = strings::to_c_with_buf("glTexParameterxvOES", cstr_buf): *const u8;
	glTexParameterxvOES = get_proc_address("glTexParameterxvOES", cstr): *fp_glTexParameterxvOES;
	let cstr = strings::to_c_with_buf("glTexRenderbufferNV", cstr_buf): *const u8;
	glTexRenderbufferNV = get_proc_address("glTexRenderbufferNV", cstr): *fp_glTexRenderbufferNV;
	let cstr = strings::to_c_with_buf("glTexStorage1D", cstr_buf): *const u8;
	glTexStorage1D = get_proc_address("glTexStorage1D", cstr): *fp_glTexStorage1D;
	let cstr = strings::to_c_with_buf("glTexStorage1DEXT", cstr_buf): *const u8;
	glTexStorage1DEXT = get_proc_address("glTexStorage1DEXT", cstr): *fp_glTexStorage1DEXT;
	let cstr = strings::to_c_with_buf("glTexStorage2D", cstr_buf): *const u8;
	glTexStorage2D = get_proc_address("glTexStorage2D", cstr): *fp_glTexStorage2D;
	let cstr = strings::to_c_with_buf("glTexStorage2DEXT", cstr_buf): *const u8;
	glTexStorage2DEXT = get_proc_address("glTexStorage2DEXT", cstr): *fp_glTexStorage2DEXT;
	let cstr = strings::to_c_with_buf("glTexStorage2DMultisample", cstr_buf): *const u8;
	glTexStorage2DMultisample = get_proc_address("glTexStorage2DMultisample", cstr): *fp_glTexStorage2DMultisample;
	let cstr = strings::to_c_with_buf("glTexStorage3D", cstr_buf): *const u8;
	glTexStorage3D = get_proc_address("glTexStorage3D", cstr): *fp_glTexStorage3D;
	let cstr = strings::to_c_with_buf("glTexStorage3DEXT", cstr_buf): *const u8;
	glTexStorage3DEXT = get_proc_address("glTexStorage3DEXT", cstr): *fp_glTexStorage3DEXT;
	let cstr = strings::to_c_with_buf("glTexStorage3DMultisample", cstr_buf): *const u8;
	glTexStorage3DMultisample = get_proc_address("glTexStorage3DMultisample", cstr): *fp_glTexStorage3DMultisample;
	let cstr = strings::to_c_with_buf("glTexStorageMem1DEXT", cstr_buf): *const u8;
	glTexStorageMem1DEXT = get_proc_address("glTexStorageMem1DEXT", cstr): *fp_glTexStorageMem1DEXT;
	let cstr = strings::to_c_with_buf("glTexStorageMem2DEXT", cstr_buf): *const u8;
	glTexStorageMem2DEXT = get_proc_address("glTexStorageMem2DEXT", cstr): *fp_glTexStorageMem2DEXT;
	let cstr = strings::to_c_with_buf("glTexStorageMem2DMultisampleEXT", cstr_buf): *const u8;
	glTexStorageMem2DMultisampleEXT = get_proc_address("glTexStorageMem2DMultisampleEXT", cstr): *fp_glTexStorageMem2DMultisampleEXT;
	let cstr = strings::to_c_with_buf("glTexStorageMem3DEXT", cstr_buf): *const u8;
	glTexStorageMem3DEXT = get_proc_address("glTexStorageMem3DEXT", cstr): *fp_glTexStorageMem3DEXT;
	let cstr = strings::to_c_with_buf("glTexStorageMem3DMultisampleEXT", cstr_buf): *const u8;
	glTexStorageMem3DMultisampleEXT = get_proc_address("glTexStorageMem3DMultisampleEXT", cstr): *fp_glTexStorageMem3DMultisampleEXT;
	let cstr = strings::to_c_with_buf("glTexStorageSparseAMD", cstr_buf): *const u8;
	glTexStorageSparseAMD = get_proc_address("glTexStorageSparseAMD", cstr): *fp_glTexStorageSparseAMD;
	let cstr = strings::to_c_with_buf("glTexSubImage1D", cstr_buf): *const u8;
	glTexSubImage1D = get_proc_address("glTexSubImage1D", cstr): *fp_glTexSubImage1D;
	let cstr = strings::to_c_with_buf("glTexSubImage1DEXT", cstr_buf): *const u8;
	glTexSubImage1DEXT = get_proc_address("glTexSubImage1DEXT", cstr): *fp_glTexSubImage1DEXT;
	let cstr = strings::to_c_with_buf("glTexSubImage2D", cstr_buf): *const u8;
	glTexSubImage2D = get_proc_address("glTexSubImage2D", cstr): *fp_glTexSubImage2D;
	let cstr = strings::to_c_with_buf("glTexSubImage2DEXT", cstr_buf): *const u8;
	glTexSubImage2DEXT = get_proc_address("glTexSubImage2DEXT", cstr): *fp_glTexSubImage2DEXT;
	let cstr = strings::to_c_with_buf("glTexSubImage3D", cstr_buf): *const u8;
	glTexSubImage3D = get_proc_address("glTexSubImage3D", cstr): *fp_glTexSubImage3D;
	let cstr = strings::to_c_with_buf("glTexSubImage3DEXT", cstr_buf): *const u8;
	glTexSubImage3DEXT = get_proc_address("glTexSubImage3DEXT", cstr): *fp_glTexSubImage3DEXT;
	let cstr = strings::to_c_with_buf("glTexSubImage4DSGIS", cstr_buf): *const u8;
	glTexSubImage4DSGIS = get_proc_address("glTexSubImage4DSGIS", cstr): *fp_glTexSubImage4DSGIS;
	let cstr = strings::to_c_with_buf("glTextureAttachMemoryNV", cstr_buf): *const u8;
	glTextureAttachMemoryNV = get_proc_address("glTextureAttachMemoryNV", cstr): *fp_glTextureAttachMemoryNV;
	let cstr = strings::to_c_with_buf("glTextureBarrier", cstr_buf): *const u8;
	glTextureBarrier = get_proc_address("glTextureBarrier", cstr): *fp_glTextureBarrier;
	let cstr = strings::to_c_with_buf("glTextureBarrierNV", cstr_buf): *const u8;
	glTextureBarrierNV = get_proc_address("glTextureBarrierNV", cstr): *fp_glTextureBarrierNV;
	let cstr = strings::to_c_with_buf("glTextureBuffer", cstr_buf): *const u8;
	glTextureBuffer = get_proc_address("glTextureBuffer", cstr): *fp_glTextureBuffer;
	let cstr = strings::to_c_with_buf("glTextureBufferEXT", cstr_buf): *const u8;
	glTextureBufferEXT = get_proc_address("glTextureBufferEXT", cstr): *fp_glTextureBufferEXT;
	let cstr = strings::to_c_with_buf("glTextureBufferRange", cstr_buf): *const u8;
	glTextureBufferRange = get_proc_address("glTextureBufferRange", cstr): *fp_glTextureBufferRange;
	let cstr = strings::to_c_with_buf("glTextureBufferRangeEXT", cstr_buf): *const u8;
	glTextureBufferRangeEXT = get_proc_address("glTextureBufferRangeEXT", cstr): *fp_glTextureBufferRangeEXT;
	let cstr = strings::to_c_with_buf("glTextureColorMaskSGIS", cstr_buf): *const u8;
	glTextureColorMaskSGIS = get_proc_address("glTextureColorMaskSGIS", cstr): *fp_glTextureColorMaskSGIS;
	let cstr = strings::to_c_with_buf("glTextureImage1DEXT", cstr_buf): *const u8;
	glTextureImage1DEXT = get_proc_address("glTextureImage1DEXT", cstr): *fp_glTextureImage1DEXT;
	let cstr = strings::to_c_with_buf("glTextureImage2DEXT", cstr_buf): *const u8;
	glTextureImage2DEXT = get_proc_address("glTextureImage2DEXT", cstr): *fp_glTextureImage2DEXT;
	let cstr = strings::to_c_with_buf("glTextureImage2DMultisampleCoverageNV", cstr_buf): *const u8;
	glTextureImage2DMultisampleCoverageNV = get_proc_address("glTextureImage2DMultisampleCoverageNV", cstr): *fp_glTextureImage2DMultisampleCoverageNV;
	let cstr = strings::to_c_with_buf("glTextureImage2DMultisampleNV", cstr_buf): *const u8;
	glTextureImage2DMultisampleNV = get_proc_address("glTextureImage2DMultisampleNV", cstr): *fp_glTextureImage2DMultisampleNV;
	let cstr = strings::to_c_with_buf("glTextureImage3DEXT", cstr_buf): *const u8;
	glTextureImage3DEXT = get_proc_address("glTextureImage3DEXT", cstr): *fp_glTextureImage3DEXT;
	let cstr = strings::to_c_with_buf("glTextureImage3DMultisampleCoverageNV", cstr_buf): *const u8;
	glTextureImage3DMultisampleCoverageNV = get_proc_address("glTextureImage3DMultisampleCoverageNV", cstr): *fp_glTextureImage3DMultisampleCoverageNV;
	let cstr = strings::to_c_with_buf("glTextureImage3DMultisampleNV", cstr_buf): *const u8;
	glTextureImage3DMultisampleNV = get_proc_address("glTextureImage3DMultisampleNV", cstr): *fp_glTextureImage3DMultisampleNV;
	let cstr = strings::to_c_with_buf("glTextureLightEXT", cstr_buf): *const u8;
	glTextureLightEXT = get_proc_address("glTextureLightEXT", cstr): *fp_glTextureLightEXT;
	let cstr = strings::to_c_with_buf("glTextureMaterialEXT", cstr_buf): *const u8;
	glTextureMaterialEXT = get_proc_address("glTextureMaterialEXT", cstr): *fp_glTextureMaterialEXT;
	let cstr = strings::to_c_with_buf("glTextureNormalEXT", cstr_buf): *const u8;
	glTextureNormalEXT = get_proc_address("glTextureNormalEXT", cstr): *fp_glTextureNormalEXT;
	let cstr = strings::to_c_with_buf("glTexturePageCommitmentEXT", cstr_buf): *const u8;
	glTexturePageCommitmentEXT = get_proc_address("glTexturePageCommitmentEXT", cstr): *fp_glTexturePageCommitmentEXT;
	let cstr = strings::to_c_with_buf("glTexturePageCommitmentMemNV", cstr_buf): *const u8;
	glTexturePageCommitmentMemNV = get_proc_address("glTexturePageCommitmentMemNV", cstr): *fp_glTexturePageCommitmentMemNV;
	let cstr = strings::to_c_with_buf("glTextureParameterIiv", cstr_buf): *const u8;
	glTextureParameterIiv = get_proc_address("glTextureParameterIiv", cstr): *fp_glTextureParameterIiv;
	let cstr = strings::to_c_with_buf("glTextureParameterIivEXT", cstr_buf): *const u8;
	glTextureParameterIivEXT = get_proc_address("glTextureParameterIivEXT", cstr): *fp_glTextureParameterIivEXT;
	let cstr = strings::to_c_with_buf("glTextureParameterIuiv", cstr_buf): *const u8;
	glTextureParameterIuiv = get_proc_address("glTextureParameterIuiv", cstr): *fp_glTextureParameterIuiv;
	let cstr = strings::to_c_with_buf("glTextureParameterIuivEXT", cstr_buf): *const u8;
	glTextureParameterIuivEXT = get_proc_address("glTextureParameterIuivEXT", cstr): *fp_glTextureParameterIuivEXT;
	let cstr = strings::to_c_with_buf("glTextureParameterf", cstr_buf): *const u8;
	glTextureParameterf = get_proc_address("glTextureParameterf", cstr): *fp_glTextureParameterf;
	let cstr = strings::to_c_with_buf("glTextureParameterfEXT", cstr_buf): *const u8;
	glTextureParameterfEXT = get_proc_address("glTextureParameterfEXT", cstr): *fp_glTextureParameterfEXT;
	let cstr = strings::to_c_with_buf("glTextureParameterfv", cstr_buf): *const u8;
	glTextureParameterfv = get_proc_address("glTextureParameterfv", cstr): *fp_glTextureParameterfv;
	let cstr = strings::to_c_with_buf("glTextureParameterfvEXT", cstr_buf): *const u8;
	glTextureParameterfvEXT = get_proc_address("glTextureParameterfvEXT", cstr): *fp_glTextureParameterfvEXT;
	let cstr = strings::to_c_with_buf("glTextureParameteri", cstr_buf): *const u8;
	glTextureParameteri = get_proc_address("glTextureParameteri", cstr): *fp_glTextureParameteri;
	let cstr = strings::to_c_with_buf("glTextureParameteriEXT", cstr_buf): *const u8;
	glTextureParameteriEXT = get_proc_address("glTextureParameteriEXT", cstr): *fp_glTextureParameteriEXT;
	let cstr = strings::to_c_with_buf("glTextureParameteriv", cstr_buf): *const u8;
	glTextureParameteriv = get_proc_address("glTextureParameteriv", cstr): *fp_glTextureParameteriv;
	let cstr = strings::to_c_with_buf("glTextureParameterivEXT", cstr_buf): *const u8;
	glTextureParameterivEXT = get_proc_address("glTextureParameterivEXT", cstr): *fp_glTextureParameterivEXT;
	let cstr = strings::to_c_with_buf("glTextureRangeAPPLE", cstr_buf): *const u8;
	glTextureRangeAPPLE = get_proc_address("glTextureRangeAPPLE", cstr): *fp_glTextureRangeAPPLE;
	let cstr = strings::to_c_with_buf("glTextureRenderbufferEXT", cstr_buf): *const u8;
	glTextureRenderbufferEXT = get_proc_address("glTextureRenderbufferEXT", cstr): *fp_glTextureRenderbufferEXT;
	let cstr = strings::to_c_with_buf("glTextureStorage1D", cstr_buf): *const u8;
	glTextureStorage1D = get_proc_address("glTextureStorage1D", cstr): *fp_glTextureStorage1D;
	let cstr = strings::to_c_with_buf("glTextureStorage1DEXT", cstr_buf): *const u8;
	glTextureStorage1DEXT = get_proc_address("glTextureStorage1DEXT", cstr): *fp_glTextureStorage1DEXT;
	let cstr = strings::to_c_with_buf("glTextureStorage2D", cstr_buf): *const u8;
	glTextureStorage2D = get_proc_address("glTextureStorage2D", cstr): *fp_glTextureStorage2D;
	let cstr = strings::to_c_with_buf("glTextureStorage2DEXT", cstr_buf): *const u8;
	glTextureStorage2DEXT = get_proc_address("glTextureStorage2DEXT", cstr): *fp_glTextureStorage2DEXT;
	let cstr = strings::to_c_with_buf("glTextureStorage2DMultisample", cstr_buf): *const u8;
	glTextureStorage2DMultisample = get_proc_address("glTextureStorage2DMultisample", cstr): *fp_glTextureStorage2DMultisample;
	let cstr = strings::to_c_with_buf("glTextureStorage2DMultisampleEXT", cstr_buf): *const u8;
	glTextureStorage2DMultisampleEXT = get_proc_address("glTextureStorage2DMultisampleEXT", cstr): *fp_glTextureStorage2DMultisampleEXT;
	let cstr = strings::to_c_with_buf("glTextureStorage3D", cstr_buf): *const u8;
	glTextureStorage3D = get_proc_address("glTextureStorage3D", cstr): *fp_glTextureStorage3D;
	let cstr = strings::to_c_with_buf("glTextureStorage3DEXT", cstr_buf): *const u8;
	glTextureStorage3DEXT = get_proc_address("glTextureStorage3DEXT", cstr): *fp_glTextureStorage3DEXT;
	let cstr = strings::to_c_with_buf("glTextureStorage3DMultisample", cstr_buf): *const u8;
	glTextureStorage3DMultisample = get_proc_address("glTextureStorage3DMultisample", cstr): *fp_glTextureStorage3DMultisample;
	let cstr = strings::to_c_with_buf("glTextureStorage3DMultisampleEXT", cstr_buf): *const u8;
	glTextureStorage3DMultisampleEXT = get_proc_address("glTextureStorage3DMultisampleEXT", cstr): *fp_glTextureStorage3DMultisampleEXT;
	let cstr = strings::to_c_with_buf("glTextureStorageMem1DEXT", cstr_buf): *const u8;
	glTextureStorageMem1DEXT = get_proc_address("glTextureStorageMem1DEXT", cstr): *fp_glTextureStorageMem1DEXT;
	let cstr = strings::to_c_with_buf("glTextureStorageMem2DEXT", cstr_buf): *const u8;
	glTextureStorageMem2DEXT = get_proc_address("glTextureStorageMem2DEXT", cstr): *fp_glTextureStorageMem2DEXT;
	let cstr = strings::to_c_with_buf("glTextureStorageMem2DMultisampleEXT", cstr_buf): *const u8;
	glTextureStorageMem2DMultisampleEXT = get_proc_address("glTextureStorageMem2DMultisampleEXT", cstr): *fp_glTextureStorageMem2DMultisampleEXT;
	let cstr = strings::to_c_with_buf("glTextureStorageMem3DEXT", cstr_buf): *const u8;
	glTextureStorageMem3DEXT = get_proc_address("glTextureStorageMem3DEXT", cstr): *fp_glTextureStorageMem3DEXT;
	let cstr = strings::to_c_with_buf("glTextureStorageMem3DMultisampleEXT", cstr_buf): *const u8;
	glTextureStorageMem3DMultisampleEXT = get_proc_address("glTextureStorageMem3DMultisampleEXT", cstr): *fp_glTextureStorageMem3DMultisampleEXT;
	let cstr = strings::to_c_with_buf("glTextureStorageSparseAMD", cstr_buf): *const u8;
	glTextureStorageSparseAMD = get_proc_address("glTextureStorageSparseAMD", cstr): *fp_glTextureStorageSparseAMD;
	let cstr = strings::to_c_with_buf("glTextureSubImage1D", cstr_buf): *const u8;
	glTextureSubImage1D = get_proc_address("glTextureSubImage1D", cstr): *fp_glTextureSubImage1D;
	let cstr = strings::to_c_with_buf("glTextureSubImage1DEXT", cstr_buf): *const u8;
	glTextureSubImage1DEXT = get_proc_address("glTextureSubImage1DEXT", cstr): *fp_glTextureSubImage1DEXT;
	let cstr = strings::to_c_with_buf("glTextureSubImage2D", cstr_buf): *const u8;
	glTextureSubImage2D = get_proc_address("glTextureSubImage2D", cstr): *fp_glTextureSubImage2D;
	let cstr = strings::to_c_with_buf("glTextureSubImage2DEXT", cstr_buf): *const u8;
	glTextureSubImage2DEXT = get_proc_address("glTextureSubImage2DEXT", cstr): *fp_glTextureSubImage2DEXT;
	let cstr = strings::to_c_with_buf("glTextureSubImage3D", cstr_buf): *const u8;
	glTextureSubImage3D = get_proc_address("glTextureSubImage3D", cstr): *fp_glTextureSubImage3D;
	let cstr = strings::to_c_with_buf("glTextureSubImage3DEXT", cstr_buf): *const u8;
	glTextureSubImage3DEXT = get_proc_address("glTextureSubImage3DEXT", cstr): *fp_glTextureSubImage3DEXT;
	let cstr = strings::to_c_with_buf("glTextureView", cstr_buf): *const u8;
	glTextureView = get_proc_address("glTextureView", cstr): *fp_glTextureView;
	let cstr = strings::to_c_with_buf("glTrackMatrixNV", cstr_buf): *const u8;
	glTrackMatrixNV = get_proc_address("glTrackMatrixNV", cstr): *fp_glTrackMatrixNV;
	let cstr = strings::to_c_with_buf("glTransformFeedbackAttribsNV", cstr_buf): *const u8;
	glTransformFeedbackAttribsNV = get_proc_address("glTransformFeedbackAttribsNV", cstr): *fp_glTransformFeedbackAttribsNV;
	let cstr = strings::to_c_with_buf("glTransformFeedbackBufferBase", cstr_buf): *const u8;
	glTransformFeedbackBufferBase = get_proc_address("glTransformFeedbackBufferBase", cstr): *fp_glTransformFeedbackBufferBase;
	let cstr = strings::to_c_with_buf("glTransformFeedbackBufferRange", cstr_buf): *const u8;
	glTransformFeedbackBufferRange = get_proc_address("glTransformFeedbackBufferRange", cstr): *fp_glTransformFeedbackBufferRange;
	let cstr = strings::to_c_with_buf("glTransformFeedbackStreamAttribsNV", cstr_buf): *const u8;
	glTransformFeedbackStreamAttribsNV = get_proc_address("glTransformFeedbackStreamAttribsNV", cstr): *fp_glTransformFeedbackStreamAttribsNV;
	let cstr = strings::to_c_with_buf("glTransformFeedbackVaryingsEXT", cstr_buf): *const u8;
	glTransformFeedbackVaryingsEXT = get_proc_address("glTransformFeedbackVaryingsEXT", cstr): *fp_glTransformFeedbackVaryingsEXT;
	let cstr = strings::to_c_with_buf("glTransformFeedbackVaryingsNV", cstr_buf): *const u8;
	glTransformFeedbackVaryingsNV = get_proc_address("glTransformFeedbackVaryingsNV", cstr): *fp_glTransformFeedbackVaryingsNV;
	let cstr = strings::to_c_with_buf("glTransformPathNV", cstr_buf): *const u8;
	glTransformPathNV = get_proc_address("glTransformPathNV", cstr): *fp_glTransformPathNV;
	let cstr = strings::to_c_with_buf("glTranslated", cstr_buf): *const u8;
	glTranslated = get_proc_address("glTranslated", cstr): *fp_glTranslated;
	let cstr = strings::to_c_with_buf("glTranslatef", cstr_buf): *const u8;
	glTranslatef = get_proc_address("glTranslatef", cstr): *fp_glTranslatef;
	let cstr = strings::to_c_with_buf("glTranslatexOES", cstr_buf): *const u8;
	glTranslatexOES = get_proc_address("glTranslatexOES", cstr): *fp_glTranslatexOES;
	let cstr = strings::to_c_with_buf("glUniform1d", cstr_buf): *const u8;
	glUniform1d = get_proc_address("glUniform1d", cstr): *fp_glUniform1d;
	let cstr = strings::to_c_with_buf("glUniform1dv", cstr_buf): *const u8;
	glUniform1dv = get_proc_address("glUniform1dv", cstr): *fp_glUniform1dv;
	let cstr = strings::to_c_with_buf("glUniform1f", cstr_buf): *const u8;
	glUniform1f = get_proc_address("glUniform1f", cstr): *fp_glUniform1f;
	let cstr = strings::to_c_with_buf("glUniform1fARB", cstr_buf): *const u8;
	glUniform1fARB = get_proc_address("glUniform1fARB", cstr): *fp_glUniform1fARB;
	let cstr = strings::to_c_with_buf("glUniform1fv", cstr_buf): *const u8;
	glUniform1fv = get_proc_address("glUniform1fv", cstr): *fp_glUniform1fv;
	let cstr = strings::to_c_with_buf("glUniform1fvARB", cstr_buf): *const u8;
	glUniform1fvARB = get_proc_address("glUniform1fvARB", cstr): *fp_glUniform1fvARB;
	let cstr = strings::to_c_with_buf("glUniform1i", cstr_buf): *const u8;
	glUniform1i = get_proc_address("glUniform1i", cstr): *fp_glUniform1i;
	let cstr = strings::to_c_with_buf("glUniform1i64ARB", cstr_buf): *const u8;
	glUniform1i64ARB = get_proc_address("glUniform1i64ARB", cstr): *fp_glUniform1i64ARB;
	let cstr = strings::to_c_with_buf("glUniform1i64NV", cstr_buf): *const u8;
	glUniform1i64NV = get_proc_address("glUniform1i64NV", cstr): *fp_glUniform1i64NV;
	let cstr = strings::to_c_with_buf("glUniform1i64vARB", cstr_buf): *const u8;
	glUniform1i64vARB = get_proc_address("glUniform1i64vARB", cstr): *fp_glUniform1i64vARB;
	let cstr = strings::to_c_with_buf("glUniform1i64vNV", cstr_buf): *const u8;
	glUniform1i64vNV = get_proc_address("glUniform1i64vNV", cstr): *fp_glUniform1i64vNV;
	let cstr = strings::to_c_with_buf("glUniform1iARB", cstr_buf): *const u8;
	glUniform1iARB = get_proc_address("glUniform1iARB", cstr): *fp_glUniform1iARB;
	let cstr = strings::to_c_with_buf("glUniform1iv", cstr_buf): *const u8;
	glUniform1iv = get_proc_address("glUniform1iv", cstr): *fp_glUniform1iv;
	let cstr = strings::to_c_with_buf("glUniform1ivARB", cstr_buf): *const u8;
	glUniform1ivARB = get_proc_address("glUniform1ivARB", cstr): *fp_glUniform1ivARB;
	let cstr = strings::to_c_with_buf("glUniform1ui64ARB", cstr_buf): *const u8;
	glUniform1ui64ARB = get_proc_address("glUniform1ui64ARB", cstr): *fp_glUniform1ui64ARB;
	let cstr = strings::to_c_with_buf("glUniform1ui64NV", cstr_buf): *const u8;
	glUniform1ui64NV = get_proc_address("glUniform1ui64NV", cstr): *fp_glUniform1ui64NV;
	let cstr = strings::to_c_with_buf("glUniform1ui64vARB", cstr_buf): *const u8;
	glUniform1ui64vARB = get_proc_address("glUniform1ui64vARB", cstr): *fp_glUniform1ui64vARB;
	let cstr = strings::to_c_with_buf("glUniform1ui64vNV", cstr_buf): *const u8;
	glUniform1ui64vNV = get_proc_address("glUniform1ui64vNV", cstr): *fp_glUniform1ui64vNV;
	let cstr = strings::to_c_with_buf("glUniform1uiEXT", cstr_buf): *const u8;
	glUniform1uiEXT = get_proc_address("glUniform1uiEXT", cstr): *fp_glUniform1uiEXT;
	let cstr = strings::to_c_with_buf("glUniform1uivEXT", cstr_buf): *const u8;
	glUniform1uivEXT = get_proc_address("glUniform1uivEXT", cstr): *fp_glUniform1uivEXT;
	let cstr = strings::to_c_with_buf("glUniform2d", cstr_buf): *const u8;
	glUniform2d = get_proc_address("glUniform2d", cstr): *fp_glUniform2d;
	let cstr = strings::to_c_with_buf("glUniform2dv", cstr_buf): *const u8;
	glUniform2dv = get_proc_address("glUniform2dv", cstr): *fp_glUniform2dv;
	let cstr = strings::to_c_with_buf("glUniform2f", cstr_buf): *const u8;
	glUniform2f = get_proc_address("glUniform2f", cstr): *fp_glUniform2f;
	let cstr = strings::to_c_with_buf("glUniform2fARB", cstr_buf): *const u8;
	glUniform2fARB = get_proc_address("glUniform2fARB", cstr): *fp_glUniform2fARB;
	let cstr = strings::to_c_with_buf("glUniform2fv", cstr_buf): *const u8;
	glUniform2fv = get_proc_address("glUniform2fv", cstr): *fp_glUniform2fv;
	let cstr = strings::to_c_with_buf("glUniform2fvARB", cstr_buf): *const u8;
	glUniform2fvARB = get_proc_address("glUniform2fvARB", cstr): *fp_glUniform2fvARB;
	let cstr = strings::to_c_with_buf("glUniform2i", cstr_buf): *const u8;
	glUniform2i = get_proc_address("glUniform2i", cstr): *fp_glUniform2i;
	let cstr = strings::to_c_with_buf("glUniform2i64ARB", cstr_buf): *const u8;
	glUniform2i64ARB = get_proc_address("glUniform2i64ARB", cstr): *fp_glUniform2i64ARB;
	let cstr = strings::to_c_with_buf("glUniform2i64NV", cstr_buf): *const u8;
	glUniform2i64NV = get_proc_address("glUniform2i64NV", cstr): *fp_glUniform2i64NV;
	let cstr = strings::to_c_with_buf("glUniform2i64vARB", cstr_buf): *const u8;
	glUniform2i64vARB = get_proc_address("glUniform2i64vARB", cstr): *fp_glUniform2i64vARB;
	let cstr = strings::to_c_with_buf("glUniform2i64vNV", cstr_buf): *const u8;
	glUniform2i64vNV = get_proc_address("glUniform2i64vNV", cstr): *fp_glUniform2i64vNV;
	let cstr = strings::to_c_with_buf("glUniform2iARB", cstr_buf): *const u8;
	glUniform2iARB = get_proc_address("glUniform2iARB", cstr): *fp_glUniform2iARB;
	let cstr = strings::to_c_with_buf("glUniform2iv", cstr_buf): *const u8;
	glUniform2iv = get_proc_address("glUniform2iv", cstr): *fp_glUniform2iv;
	let cstr = strings::to_c_with_buf("glUniform2ivARB", cstr_buf): *const u8;
	glUniform2ivARB = get_proc_address("glUniform2ivARB", cstr): *fp_glUniform2ivARB;
	let cstr = strings::to_c_with_buf("glUniform2ui64ARB", cstr_buf): *const u8;
	glUniform2ui64ARB = get_proc_address("glUniform2ui64ARB", cstr): *fp_glUniform2ui64ARB;
	let cstr = strings::to_c_with_buf("glUniform2ui64NV", cstr_buf): *const u8;
	glUniform2ui64NV = get_proc_address("glUniform2ui64NV", cstr): *fp_glUniform2ui64NV;
	let cstr = strings::to_c_with_buf("glUniform2ui64vARB", cstr_buf): *const u8;
	glUniform2ui64vARB = get_proc_address("glUniform2ui64vARB", cstr): *fp_glUniform2ui64vARB;
	let cstr = strings::to_c_with_buf("glUniform2ui64vNV", cstr_buf): *const u8;
	glUniform2ui64vNV = get_proc_address("glUniform2ui64vNV", cstr): *fp_glUniform2ui64vNV;
	let cstr = strings::to_c_with_buf("glUniform2uiEXT", cstr_buf): *const u8;
	glUniform2uiEXT = get_proc_address("glUniform2uiEXT", cstr): *fp_glUniform2uiEXT;
	let cstr = strings::to_c_with_buf("glUniform2uivEXT", cstr_buf): *const u8;
	glUniform2uivEXT = get_proc_address("glUniform2uivEXT", cstr): *fp_glUniform2uivEXT;
	let cstr = strings::to_c_with_buf("glUniform3d", cstr_buf): *const u8;
	glUniform3d = get_proc_address("glUniform3d", cstr): *fp_glUniform3d;
	let cstr = strings::to_c_with_buf("glUniform3dv", cstr_buf): *const u8;
	glUniform3dv = get_proc_address("glUniform3dv", cstr): *fp_glUniform3dv;
	let cstr = strings::to_c_with_buf("glUniform3f", cstr_buf): *const u8;
	glUniform3f = get_proc_address("glUniform3f", cstr): *fp_glUniform3f;
	let cstr = strings::to_c_with_buf("glUniform3fARB", cstr_buf): *const u8;
	glUniform3fARB = get_proc_address("glUniform3fARB", cstr): *fp_glUniform3fARB;
	let cstr = strings::to_c_with_buf("glUniform3fv", cstr_buf): *const u8;
	glUniform3fv = get_proc_address("glUniform3fv", cstr): *fp_glUniform3fv;
	let cstr = strings::to_c_with_buf("glUniform3fvARB", cstr_buf): *const u8;
	glUniform3fvARB = get_proc_address("glUniform3fvARB", cstr): *fp_glUniform3fvARB;
	let cstr = strings::to_c_with_buf("glUniform3i", cstr_buf): *const u8;
	glUniform3i = get_proc_address("glUniform3i", cstr): *fp_glUniform3i;
	let cstr = strings::to_c_with_buf("glUniform3i64ARB", cstr_buf): *const u8;
	glUniform3i64ARB = get_proc_address("glUniform3i64ARB", cstr): *fp_glUniform3i64ARB;
	let cstr = strings::to_c_with_buf("glUniform3i64NV", cstr_buf): *const u8;
	glUniform3i64NV = get_proc_address("glUniform3i64NV", cstr): *fp_glUniform3i64NV;
	let cstr = strings::to_c_with_buf("glUniform3i64vARB", cstr_buf): *const u8;
	glUniform3i64vARB = get_proc_address("glUniform3i64vARB", cstr): *fp_glUniform3i64vARB;
	let cstr = strings::to_c_with_buf("glUniform3i64vNV", cstr_buf): *const u8;
	glUniform3i64vNV = get_proc_address("glUniform3i64vNV", cstr): *fp_glUniform3i64vNV;
	let cstr = strings::to_c_with_buf("glUniform3iARB", cstr_buf): *const u8;
	glUniform3iARB = get_proc_address("glUniform3iARB", cstr): *fp_glUniform3iARB;
	let cstr = strings::to_c_with_buf("glUniform3iv", cstr_buf): *const u8;
	glUniform3iv = get_proc_address("glUniform3iv", cstr): *fp_glUniform3iv;
	let cstr = strings::to_c_with_buf("glUniform3ivARB", cstr_buf): *const u8;
	glUniform3ivARB = get_proc_address("glUniform3ivARB", cstr): *fp_glUniform3ivARB;
	let cstr = strings::to_c_with_buf("glUniform3ui64ARB", cstr_buf): *const u8;
	glUniform3ui64ARB = get_proc_address("glUniform3ui64ARB", cstr): *fp_glUniform3ui64ARB;
	let cstr = strings::to_c_with_buf("glUniform3ui64NV", cstr_buf): *const u8;
	glUniform3ui64NV = get_proc_address("glUniform3ui64NV", cstr): *fp_glUniform3ui64NV;
	let cstr = strings::to_c_with_buf("glUniform3ui64vARB", cstr_buf): *const u8;
	glUniform3ui64vARB = get_proc_address("glUniform3ui64vARB", cstr): *fp_glUniform3ui64vARB;
	let cstr = strings::to_c_with_buf("glUniform3ui64vNV", cstr_buf): *const u8;
	glUniform3ui64vNV = get_proc_address("glUniform3ui64vNV", cstr): *fp_glUniform3ui64vNV;
	let cstr = strings::to_c_with_buf("glUniform3uiEXT", cstr_buf): *const u8;
	glUniform3uiEXT = get_proc_address("glUniform3uiEXT", cstr): *fp_glUniform3uiEXT;
	let cstr = strings::to_c_with_buf("glUniform3uivEXT", cstr_buf): *const u8;
	glUniform3uivEXT = get_proc_address("glUniform3uivEXT", cstr): *fp_glUniform3uivEXT;
	let cstr = strings::to_c_with_buf("glUniform4d", cstr_buf): *const u8;
	glUniform4d = get_proc_address("glUniform4d", cstr): *fp_glUniform4d;
	let cstr = strings::to_c_with_buf("glUniform4dv", cstr_buf): *const u8;
	glUniform4dv = get_proc_address("glUniform4dv", cstr): *fp_glUniform4dv;
	let cstr = strings::to_c_with_buf("glUniform4f", cstr_buf): *const u8;
	glUniform4f = get_proc_address("glUniform4f", cstr): *fp_glUniform4f;
	let cstr = strings::to_c_with_buf("glUniform4fARB", cstr_buf): *const u8;
	glUniform4fARB = get_proc_address("glUniform4fARB", cstr): *fp_glUniform4fARB;
	let cstr = strings::to_c_with_buf("glUniform4fv", cstr_buf): *const u8;
	glUniform4fv = get_proc_address("glUniform4fv", cstr): *fp_glUniform4fv;
	let cstr = strings::to_c_with_buf("glUniform4fvARB", cstr_buf): *const u8;
	glUniform4fvARB = get_proc_address("glUniform4fvARB", cstr): *fp_glUniform4fvARB;
	let cstr = strings::to_c_with_buf("glUniform4i", cstr_buf): *const u8;
	glUniform4i = get_proc_address("glUniform4i", cstr): *fp_glUniform4i;
	let cstr = strings::to_c_with_buf("glUniform4i64ARB", cstr_buf): *const u8;
	glUniform4i64ARB = get_proc_address("glUniform4i64ARB", cstr): *fp_glUniform4i64ARB;
	let cstr = strings::to_c_with_buf("glUniform4i64NV", cstr_buf): *const u8;
	glUniform4i64NV = get_proc_address("glUniform4i64NV", cstr): *fp_glUniform4i64NV;
	let cstr = strings::to_c_with_buf("glUniform4i64vARB", cstr_buf): *const u8;
	glUniform4i64vARB = get_proc_address("glUniform4i64vARB", cstr): *fp_glUniform4i64vARB;
	let cstr = strings::to_c_with_buf("glUniform4i64vNV", cstr_buf): *const u8;
	glUniform4i64vNV = get_proc_address("glUniform4i64vNV", cstr): *fp_glUniform4i64vNV;
	let cstr = strings::to_c_with_buf("glUniform4iARB", cstr_buf): *const u8;
	glUniform4iARB = get_proc_address("glUniform4iARB", cstr): *fp_glUniform4iARB;
	let cstr = strings::to_c_with_buf("glUniform4iv", cstr_buf): *const u8;
	glUniform4iv = get_proc_address("glUniform4iv", cstr): *fp_glUniform4iv;
	let cstr = strings::to_c_with_buf("glUniform4ivARB", cstr_buf): *const u8;
	glUniform4ivARB = get_proc_address("glUniform4ivARB", cstr): *fp_glUniform4ivARB;
	let cstr = strings::to_c_with_buf("glUniform4ui64ARB", cstr_buf): *const u8;
	glUniform4ui64ARB = get_proc_address("glUniform4ui64ARB", cstr): *fp_glUniform4ui64ARB;
	let cstr = strings::to_c_with_buf("glUniform4ui64NV", cstr_buf): *const u8;
	glUniform4ui64NV = get_proc_address("glUniform4ui64NV", cstr): *fp_glUniform4ui64NV;
	let cstr = strings::to_c_with_buf("glUniform4ui64vARB", cstr_buf): *const u8;
	glUniform4ui64vARB = get_proc_address("glUniform4ui64vARB", cstr): *fp_glUniform4ui64vARB;
	let cstr = strings::to_c_with_buf("glUniform4ui64vNV", cstr_buf): *const u8;
	glUniform4ui64vNV = get_proc_address("glUniform4ui64vNV", cstr): *fp_glUniform4ui64vNV;
	let cstr = strings::to_c_with_buf("glUniform4uiEXT", cstr_buf): *const u8;
	glUniform4uiEXT = get_proc_address("glUniform4uiEXT", cstr): *fp_glUniform4uiEXT;
	let cstr = strings::to_c_with_buf("glUniform4uivEXT", cstr_buf): *const u8;
	glUniform4uivEXT = get_proc_address("glUniform4uivEXT", cstr): *fp_glUniform4uivEXT;
	let cstr = strings::to_c_with_buf("glUniformBlockBinding", cstr_buf): *const u8;
	glUniformBlockBinding = get_proc_address("glUniformBlockBinding", cstr): *fp_glUniformBlockBinding;
	let cstr = strings::to_c_with_buf("glUniformBufferEXT", cstr_buf): *const u8;
	glUniformBufferEXT = get_proc_address("glUniformBufferEXT", cstr): *fp_glUniformBufferEXT;
	let cstr = strings::to_c_with_buf("glUniformHandleui64ARB", cstr_buf): *const u8;
	glUniformHandleui64ARB = get_proc_address("glUniformHandleui64ARB", cstr): *fp_glUniformHandleui64ARB;
	let cstr = strings::to_c_with_buf("glUniformHandleui64NV", cstr_buf): *const u8;
	glUniformHandleui64NV = get_proc_address("glUniformHandleui64NV", cstr): *fp_glUniformHandleui64NV;
	let cstr = strings::to_c_with_buf("glUniformHandleui64vARB", cstr_buf): *const u8;
	glUniformHandleui64vARB = get_proc_address("glUniformHandleui64vARB", cstr): *fp_glUniformHandleui64vARB;
	let cstr = strings::to_c_with_buf("glUniformHandleui64vNV", cstr_buf): *const u8;
	glUniformHandleui64vNV = get_proc_address("glUniformHandleui64vNV", cstr): *fp_glUniformHandleui64vNV;
	let cstr = strings::to_c_with_buf("glUniformMatrix2dv", cstr_buf): *const u8;
	glUniformMatrix2dv = get_proc_address("glUniformMatrix2dv", cstr): *fp_glUniformMatrix2dv;
	let cstr = strings::to_c_with_buf("glUniformMatrix2fv", cstr_buf): *const u8;
	glUniformMatrix2fv = get_proc_address("glUniformMatrix2fv", cstr): *fp_glUniformMatrix2fv;
	let cstr = strings::to_c_with_buf("glUniformMatrix2fvARB", cstr_buf): *const u8;
	glUniformMatrix2fvARB = get_proc_address("glUniformMatrix2fvARB", cstr): *fp_glUniformMatrix2fvARB;
	let cstr = strings::to_c_with_buf("glUniformMatrix2x3dv", cstr_buf): *const u8;
	glUniformMatrix2x3dv = get_proc_address("glUniformMatrix2x3dv", cstr): *fp_glUniformMatrix2x3dv;
	let cstr = strings::to_c_with_buf("glUniformMatrix2x3fv", cstr_buf): *const u8;
	glUniformMatrix2x3fv = get_proc_address("glUniformMatrix2x3fv", cstr): *fp_glUniformMatrix2x3fv;
	let cstr = strings::to_c_with_buf("glUniformMatrix2x4dv", cstr_buf): *const u8;
	glUniformMatrix2x4dv = get_proc_address("glUniformMatrix2x4dv", cstr): *fp_glUniformMatrix2x4dv;
	let cstr = strings::to_c_with_buf("glUniformMatrix2x4fv", cstr_buf): *const u8;
	glUniformMatrix2x4fv = get_proc_address("glUniformMatrix2x4fv", cstr): *fp_glUniformMatrix2x4fv;
	let cstr = strings::to_c_with_buf("glUniformMatrix3dv", cstr_buf): *const u8;
	glUniformMatrix3dv = get_proc_address("glUniformMatrix3dv", cstr): *fp_glUniformMatrix3dv;
	let cstr = strings::to_c_with_buf("glUniformMatrix3fv", cstr_buf): *const u8;
	glUniformMatrix3fv = get_proc_address("glUniformMatrix3fv", cstr): *fp_glUniformMatrix3fv;
	let cstr = strings::to_c_with_buf("glUniformMatrix3fvARB", cstr_buf): *const u8;
	glUniformMatrix3fvARB = get_proc_address("glUniformMatrix3fvARB", cstr): *fp_glUniformMatrix3fvARB;
	let cstr = strings::to_c_with_buf("glUniformMatrix3x2dv", cstr_buf): *const u8;
	glUniformMatrix3x2dv = get_proc_address("glUniformMatrix3x2dv", cstr): *fp_glUniformMatrix3x2dv;
	let cstr = strings::to_c_with_buf("glUniformMatrix3x2fv", cstr_buf): *const u8;
	glUniformMatrix3x2fv = get_proc_address("glUniformMatrix3x2fv", cstr): *fp_glUniformMatrix3x2fv;
	let cstr = strings::to_c_with_buf("glUniformMatrix3x4dv", cstr_buf): *const u8;
	glUniformMatrix3x4dv = get_proc_address("glUniformMatrix3x4dv", cstr): *fp_glUniformMatrix3x4dv;
	let cstr = strings::to_c_with_buf("glUniformMatrix3x4fv", cstr_buf): *const u8;
	glUniformMatrix3x4fv = get_proc_address("glUniformMatrix3x4fv", cstr): *fp_glUniformMatrix3x4fv;
	let cstr = strings::to_c_with_buf("glUniformMatrix4dv", cstr_buf): *const u8;
	glUniformMatrix4dv = get_proc_address("glUniformMatrix4dv", cstr): *fp_glUniformMatrix4dv;
	let cstr = strings::to_c_with_buf("glUniformMatrix4fv", cstr_buf): *const u8;
	glUniformMatrix4fv = get_proc_address("glUniformMatrix4fv", cstr): *fp_glUniformMatrix4fv;
	let cstr = strings::to_c_with_buf("glUniformMatrix4fvARB", cstr_buf): *const u8;
	glUniformMatrix4fvARB = get_proc_address("glUniformMatrix4fvARB", cstr): *fp_glUniformMatrix4fvARB;
	let cstr = strings::to_c_with_buf("glUniformMatrix4x2dv", cstr_buf): *const u8;
	glUniformMatrix4x2dv = get_proc_address("glUniformMatrix4x2dv", cstr): *fp_glUniformMatrix4x2dv;
	let cstr = strings::to_c_with_buf("glUniformMatrix4x2fv", cstr_buf): *const u8;
	glUniformMatrix4x2fv = get_proc_address("glUniformMatrix4x2fv", cstr): *fp_glUniformMatrix4x2fv;
	let cstr = strings::to_c_with_buf("glUniformMatrix4x3dv", cstr_buf): *const u8;
	glUniformMatrix4x3dv = get_proc_address("glUniformMatrix4x3dv", cstr): *fp_glUniformMatrix4x3dv;
	let cstr = strings::to_c_with_buf("glUniformMatrix4x3fv", cstr_buf): *const u8;
	glUniformMatrix4x3fv = get_proc_address("glUniformMatrix4x3fv", cstr): *fp_glUniformMatrix4x3fv;
	let cstr = strings::to_c_with_buf("glUniformSubroutinesuiv", cstr_buf): *const u8;
	glUniformSubroutinesuiv = get_proc_address("glUniformSubroutinesuiv", cstr): *fp_glUniformSubroutinesuiv;
	let cstr = strings::to_c_with_buf("glUniformui64NV", cstr_buf): *const u8;
	glUniformui64NV = get_proc_address("glUniformui64NV", cstr): *fp_glUniformui64NV;
	let cstr = strings::to_c_with_buf("glUniformui64vNV", cstr_buf): *const u8;
	glUniformui64vNV = get_proc_address("glUniformui64vNV", cstr): *fp_glUniformui64vNV;
	let cstr = strings::to_c_with_buf("glUnlockArraysEXT", cstr_buf): *const u8;
	glUnlockArraysEXT = get_proc_address("glUnlockArraysEXT", cstr): *fp_glUnlockArraysEXT;
	let cstr = strings::to_c_with_buf("glUnmapBuffer", cstr_buf): *const u8;
	glUnmapBuffer = get_proc_address("glUnmapBuffer", cstr): *fp_glUnmapBuffer;
	let cstr = strings::to_c_with_buf("glUnmapBufferARB", cstr_buf): *const u8;
	glUnmapBufferARB = get_proc_address("glUnmapBufferARB", cstr): *fp_glUnmapBufferARB;
	let cstr = strings::to_c_with_buf("glUnmapNamedBuffer", cstr_buf): *const u8;
	glUnmapNamedBuffer = get_proc_address("glUnmapNamedBuffer", cstr): *fp_glUnmapNamedBuffer;
	let cstr = strings::to_c_with_buf("glUnmapNamedBufferEXT", cstr_buf): *const u8;
	glUnmapNamedBufferEXT = get_proc_address("glUnmapNamedBufferEXT", cstr): *fp_glUnmapNamedBufferEXT;
	let cstr = strings::to_c_with_buf("glUnmapObjectBufferATI", cstr_buf): *const u8;
	glUnmapObjectBufferATI = get_proc_address("glUnmapObjectBufferATI", cstr): *fp_glUnmapObjectBufferATI;
	let cstr = strings::to_c_with_buf("glUnmapTexture2DINTEL", cstr_buf): *const u8;
	glUnmapTexture2DINTEL = get_proc_address("glUnmapTexture2DINTEL", cstr): *fp_glUnmapTexture2DINTEL;
	let cstr = strings::to_c_with_buf("glUpdateObjectBufferATI", cstr_buf): *const u8;
	glUpdateObjectBufferATI = get_proc_address("glUpdateObjectBufferATI", cstr): *fp_glUpdateObjectBufferATI;
	let cstr = strings::to_c_with_buf("glUploadGpuMaskNVX", cstr_buf): *const u8;
	glUploadGpuMaskNVX = get_proc_address("glUploadGpuMaskNVX", cstr): *fp_glUploadGpuMaskNVX;
	let cstr = strings::to_c_with_buf("glUseProgram", cstr_buf): *const u8;
	glUseProgram = get_proc_address("glUseProgram", cstr): *fp_glUseProgram;
	let cstr = strings::to_c_with_buf("glUseProgramObjectARB", cstr_buf): *const u8;
	glUseProgramObjectARB = get_proc_address("glUseProgramObjectARB", cstr): *fp_glUseProgramObjectARB;
	let cstr = strings::to_c_with_buf("glUseProgramStages", cstr_buf): *const u8;
	glUseProgramStages = get_proc_address("glUseProgramStages", cstr): *fp_glUseProgramStages;
	let cstr = strings::to_c_with_buf("glUseShaderProgramEXT", cstr_buf): *const u8;
	glUseShaderProgramEXT = get_proc_address("glUseShaderProgramEXT", cstr): *fp_glUseShaderProgramEXT;
	let cstr = strings::to_c_with_buf("glVDPAUFiniNV", cstr_buf): *const u8;
	glVDPAUFiniNV = get_proc_address("glVDPAUFiniNV", cstr): *fp_glVDPAUFiniNV;
	let cstr = strings::to_c_with_buf("glVDPAUGetSurfaceivNV", cstr_buf): *const u8;
	glVDPAUGetSurfaceivNV = get_proc_address("glVDPAUGetSurfaceivNV", cstr): *fp_glVDPAUGetSurfaceivNV;
	let cstr = strings::to_c_with_buf("glVDPAUInitNV", cstr_buf): *const u8;
	glVDPAUInitNV = get_proc_address("glVDPAUInitNV", cstr): *fp_glVDPAUInitNV;
	let cstr = strings::to_c_with_buf("glVDPAUIsSurfaceNV", cstr_buf): *const u8;
	glVDPAUIsSurfaceNV = get_proc_address("glVDPAUIsSurfaceNV", cstr): *fp_glVDPAUIsSurfaceNV;
	let cstr = strings::to_c_with_buf("glVDPAUMapSurfacesNV", cstr_buf): *const u8;
	glVDPAUMapSurfacesNV = get_proc_address("glVDPAUMapSurfacesNV", cstr): *fp_glVDPAUMapSurfacesNV;
	let cstr = strings::to_c_with_buf("glVDPAURegisterOutputSurfaceNV", cstr_buf): *const u8;
	glVDPAURegisterOutputSurfaceNV = get_proc_address("glVDPAURegisterOutputSurfaceNV", cstr): *fp_glVDPAURegisterOutputSurfaceNV;
	let cstr = strings::to_c_with_buf("glVDPAURegisterVideoSurfaceNV", cstr_buf): *const u8;
	glVDPAURegisterVideoSurfaceNV = get_proc_address("glVDPAURegisterVideoSurfaceNV", cstr): *fp_glVDPAURegisterVideoSurfaceNV;
	let cstr = strings::to_c_with_buf("glVDPAURegisterVideoSurfaceWithPictureStructureNV", cstr_buf): *const u8;
	glVDPAURegisterVideoSurfaceWithPictureStructureNV = get_proc_address("glVDPAURegisterVideoSurfaceWithPictureStructureNV", cstr): *fp_glVDPAURegisterVideoSurfaceWithPictureStructureNV;
	let cstr = strings::to_c_with_buf("glVDPAUSurfaceAccessNV", cstr_buf): *const u8;
	glVDPAUSurfaceAccessNV = get_proc_address("glVDPAUSurfaceAccessNV", cstr): *fp_glVDPAUSurfaceAccessNV;
	let cstr = strings::to_c_with_buf("glVDPAUUnmapSurfacesNV", cstr_buf): *const u8;
	glVDPAUUnmapSurfacesNV = get_proc_address("glVDPAUUnmapSurfacesNV", cstr): *fp_glVDPAUUnmapSurfacesNV;
	let cstr = strings::to_c_with_buf("glVDPAUUnregisterSurfaceNV", cstr_buf): *const u8;
	glVDPAUUnregisterSurfaceNV = get_proc_address("glVDPAUUnregisterSurfaceNV", cstr): *fp_glVDPAUUnregisterSurfaceNV;
	let cstr = strings::to_c_with_buf("glValidateProgram", cstr_buf): *const u8;
	glValidateProgram = get_proc_address("glValidateProgram", cstr): *fp_glValidateProgram;
	let cstr = strings::to_c_with_buf("glValidateProgramARB", cstr_buf): *const u8;
	glValidateProgramARB = get_proc_address("glValidateProgramARB", cstr): *fp_glValidateProgramARB;
	let cstr = strings::to_c_with_buf("glValidateProgramPipeline", cstr_buf): *const u8;
	glValidateProgramPipeline = get_proc_address("glValidateProgramPipeline", cstr): *fp_glValidateProgramPipeline;
	let cstr = strings::to_c_with_buf("glVariantArrayObjectATI", cstr_buf): *const u8;
	glVariantArrayObjectATI = get_proc_address("glVariantArrayObjectATI", cstr): *fp_glVariantArrayObjectATI;
	let cstr = strings::to_c_with_buf("glVariantPointerEXT", cstr_buf): *const u8;
	glVariantPointerEXT = get_proc_address("glVariantPointerEXT", cstr): *fp_glVariantPointerEXT;
	let cstr = strings::to_c_with_buf("glVariantbvEXT", cstr_buf): *const u8;
	glVariantbvEXT = get_proc_address("glVariantbvEXT", cstr): *fp_glVariantbvEXT;
	let cstr = strings::to_c_with_buf("glVariantdvEXT", cstr_buf): *const u8;
	glVariantdvEXT = get_proc_address("glVariantdvEXT", cstr): *fp_glVariantdvEXT;
	let cstr = strings::to_c_with_buf("glVariantfvEXT", cstr_buf): *const u8;
	glVariantfvEXT = get_proc_address("glVariantfvEXT", cstr): *fp_glVariantfvEXT;
	let cstr = strings::to_c_with_buf("glVariantivEXT", cstr_buf): *const u8;
	glVariantivEXT = get_proc_address("glVariantivEXT", cstr): *fp_glVariantivEXT;
	let cstr = strings::to_c_with_buf("glVariantsvEXT", cstr_buf): *const u8;
	glVariantsvEXT = get_proc_address("glVariantsvEXT", cstr): *fp_glVariantsvEXT;
	let cstr = strings::to_c_with_buf("glVariantubvEXT", cstr_buf): *const u8;
	glVariantubvEXT = get_proc_address("glVariantubvEXT", cstr): *fp_glVariantubvEXT;
	let cstr = strings::to_c_with_buf("glVariantuivEXT", cstr_buf): *const u8;
	glVariantuivEXT = get_proc_address("glVariantuivEXT", cstr): *fp_glVariantuivEXT;
	let cstr = strings::to_c_with_buf("glVariantusvEXT", cstr_buf): *const u8;
	glVariantusvEXT = get_proc_address("glVariantusvEXT", cstr): *fp_glVariantusvEXT;
	let cstr = strings::to_c_with_buf("glVertex2bOES", cstr_buf): *const u8;
	glVertex2bOES = get_proc_address("glVertex2bOES", cstr): *fp_glVertex2bOES;
	let cstr = strings::to_c_with_buf("glVertex2bvOES", cstr_buf): *const u8;
	glVertex2bvOES = get_proc_address("glVertex2bvOES", cstr): *fp_glVertex2bvOES;
	let cstr = strings::to_c_with_buf("glVertex2d", cstr_buf): *const u8;
	glVertex2d = get_proc_address("glVertex2d", cstr): *fp_glVertex2d;
	let cstr = strings::to_c_with_buf("glVertex2dv", cstr_buf): *const u8;
	glVertex2dv = get_proc_address("glVertex2dv", cstr): *fp_glVertex2dv;
	let cstr = strings::to_c_with_buf("glVertex2f", cstr_buf): *const u8;
	glVertex2f = get_proc_address("glVertex2f", cstr): *fp_glVertex2f;
	let cstr = strings::to_c_with_buf("glVertex2fv", cstr_buf): *const u8;
	glVertex2fv = get_proc_address("glVertex2fv", cstr): *fp_glVertex2fv;
	let cstr = strings::to_c_with_buf("glVertex2hNV", cstr_buf): *const u8;
	glVertex2hNV = get_proc_address("glVertex2hNV", cstr): *fp_glVertex2hNV;
	let cstr = strings::to_c_with_buf("glVertex2hvNV", cstr_buf): *const u8;
	glVertex2hvNV = get_proc_address("glVertex2hvNV", cstr): *fp_glVertex2hvNV;
	let cstr = strings::to_c_with_buf("glVertex2i", cstr_buf): *const u8;
	glVertex2i = get_proc_address("glVertex2i", cstr): *fp_glVertex2i;
	let cstr = strings::to_c_with_buf("glVertex2iv", cstr_buf): *const u8;
	glVertex2iv = get_proc_address("glVertex2iv", cstr): *fp_glVertex2iv;
	let cstr = strings::to_c_with_buf("glVertex2s", cstr_buf): *const u8;
	glVertex2s = get_proc_address("glVertex2s", cstr): *fp_glVertex2s;
	let cstr = strings::to_c_with_buf("glVertex2sv", cstr_buf): *const u8;
	glVertex2sv = get_proc_address("glVertex2sv", cstr): *fp_glVertex2sv;
	let cstr = strings::to_c_with_buf("glVertex2xOES", cstr_buf): *const u8;
	glVertex2xOES = get_proc_address("glVertex2xOES", cstr): *fp_glVertex2xOES;
	let cstr = strings::to_c_with_buf("glVertex2xvOES", cstr_buf): *const u8;
	glVertex2xvOES = get_proc_address("glVertex2xvOES", cstr): *fp_glVertex2xvOES;
	let cstr = strings::to_c_with_buf("glVertex3bOES", cstr_buf): *const u8;
	glVertex3bOES = get_proc_address("glVertex3bOES", cstr): *fp_glVertex3bOES;
	let cstr = strings::to_c_with_buf("glVertex3bvOES", cstr_buf): *const u8;
	glVertex3bvOES = get_proc_address("glVertex3bvOES", cstr): *fp_glVertex3bvOES;
	let cstr = strings::to_c_with_buf("glVertex3d", cstr_buf): *const u8;
	glVertex3d = get_proc_address("glVertex3d", cstr): *fp_glVertex3d;
	let cstr = strings::to_c_with_buf("glVertex3dv", cstr_buf): *const u8;
	glVertex3dv = get_proc_address("glVertex3dv", cstr): *fp_glVertex3dv;
	let cstr = strings::to_c_with_buf("glVertex3f", cstr_buf): *const u8;
	glVertex3f = get_proc_address("glVertex3f", cstr): *fp_glVertex3f;
	let cstr = strings::to_c_with_buf("glVertex3fv", cstr_buf): *const u8;
	glVertex3fv = get_proc_address("glVertex3fv", cstr): *fp_glVertex3fv;
	let cstr = strings::to_c_with_buf("glVertex3hNV", cstr_buf): *const u8;
	glVertex3hNV = get_proc_address("glVertex3hNV", cstr): *fp_glVertex3hNV;
	let cstr = strings::to_c_with_buf("glVertex3hvNV", cstr_buf): *const u8;
	glVertex3hvNV = get_proc_address("glVertex3hvNV", cstr): *fp_glVertex3hvNV;
	let cstr = strings::to_c_with_buf("glVertex3i", cstr_buf): *const u8;
	glVertex3i = get_proc_address("glVertex3i", cstr): *fp_glVertex3i;
	let cstr = strings::to_c_with_buf("glVertex3iv", cstr_buf): *const u8;
	glVertex3iv = get_proc_address("glVertex3iv", cstr): *fp_glVertex3iv;
	let cstr = strings::to_c_with_buf("glVertex3s", cstr_buf): *const u8;
	glVertex3s = get_proc_address("glVertex3s", cstr): *fp_glVertex3s;
	let cstr = strings::to_c_with_buf("glVertex3sv", cstr_buf): *const u8;
	glVertex3sv = get_proc_address("glVertex3sv", cstr): *fp_glVertex3sv;
	let cstr = strings::to_c_with_buf("glVertex3xOES", cstr_buf): *const u8;
	glVertex3xOES = get_proc_address("glVertex3xOES", cstr): *fp_glVertex3xOES;
	let cstr = strings::to_c_with_buf("glVertex3xvOES", cstr_buf): *const u8;
	glVertex3xvOES = get_proc_address("glVertex3xvOES", cstr): *fp_glVertex3xvOES;
	let cstr = strings::to_c_with_buf("glVertex4bOES", cstr_buf): *const u8;
	glVertex4bOES = get_proc_address("glVertex4bOES", cstr): *fp_glVertex4bOES;
	let cstr = strings::to_c_with_buf("glVertex4bvOES", cstr_buf): *const u8;
	glVertex4bvOES = get_proc_address("glVertex4bvOES", cstr): *fp_glVertex4bvOES;
	let cstr = strings::to_c_with_buf("glVertex4d", cstr_buf): *const u8;
	glVertex4d = get_proc_address("glVertex4d", cstr): *fp_glVertex4d;
	let cstr = strings::to_c_with_buf("glVertex4dv", cstr_buf): *const u8;
	glVertex4dv = get_proc_address("glVertex4dv", cstr): *fp_glVertex4dv;
	let cstr = strings::to_c_with_buf("glVertex4f", cstr_buf): *const u8;
	glVertex4f = get_proc_address("glVertex4f", cstr): *fp_glVertex4f;
	let cstr = strings::to_c_with_buf("glVertex4fv", cstr_buf): *const u8;
	glVertex4fv = get_proc_address("glVertex4fv", cstr): *fp_glVertex4fv;
	let cstr = strings::to_c_with_buf("glVertex4hNV", cstr_buf): *const u8;
	glVertex4hNV = get_proc_address("glVertex4hNV", cstr): *fp_glVertex4hNV;
	let cstr = strings::to_c_with_buf("glVertex4hvNV", cstr_buf): *const u8;
	glVertex4hvNV = get_proc_address("glVertex4hvNV", cstr): *fp_glVertex4hvNV;
	let cstr = strings::to_c_with_buf("glVertex4i", cstr_buf): *const u8;
	glVertex4i = get_proc_address("glVertex4i", cstr): *fp_glVertex4i;
	let cstr = strings::to_c_with_buf("glVertex4iv", cstr_buf): *const u8;
	glVertex4iv = get_proc_address("glVertex4iv", cstr): *fp_glVertex4iv;
	let cstr = strings::to_c_with_buf("glVertex4s", cstr_buf): *const u8;
	glVertex4s = get_proc_address("glVertex4s", cstr): *fp_glVertex4s;
	let cstr = strings::to_c_with_buf("glVertex4sv", cstr_buf): *const u8;
	glVertex4sv = get_proc_address("glVertex4sv", cstr): *fp_glVertex4sv;
	let cstr = strings::to_c_with_buf("glVertex4xOES", cstr_buf): *const u8;
	glVertex4xOES = get_proc_address("glVertex4xOES", cstr): *fp_glVertex4xOES;
	let cstr = strings::to_c_with_buf("glVertex4xvOES", cstr_buf): *const u8;
	glVertex4xvOES = get_proc_address("glVertex4xvOES", cstr): *fp_glVertex4xvOES;
	let cstr = strings::to_c_with_buf("glVertexArrayAttribBinding", cstr_buf): *const u8;
	glVertexArrayAttribBinding = get_proc_address("glVertexArrayAttribBinding", cstr): *fp_glVertexArrayAttribBinding;
	let cstr = strings::to_c_with_buf("glVertexArrayAttribFormat", cstr_buf): *const u8;
	glVertexArrayAttribFormat = get_proc_address("glVertexArrayAttribFormat", cstr): *fp_glVertexArrayAttribFormat;
	let cstr = strings::to_c_with_buf("glVertexArrayAttribIFormat", cstr_buf): *const u8;
	glVertexArrayAttribIFormat = get_proc_address("glVertexArrayAttribIFormat", cstr): *fp_glVertexArrayAttribIFormat;
	let cstr = strings::to_c_with_buf("glVertexArrayAttribLFormat", cstr_buf): *const u8;
	glVertexArrayAttribLFormat = get_proc_address("glVertexArrayAttribLFormat", cstr): *fp_glVertexArrayAttribLFormat;
	let cstr = strings::to_c_with_buf("glVertexArrayBindVertexBufferEXT", cstr_buf): *const u8;
	glVertexArrayBindVertexBufferEXT = get_proc_address("glVertexArrayBindVertexBufferEXT", cstr): *fp_glVertexArrayBindVertexBufferEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayBindingDivisor", cstr_buf): *const u8;
	glVertexArrayBindingDivisor = get_proc_address("glVertexArrayBindingDivisor", cstr): *fp_glVertexArrayBindingDivisor;
	let cstr = strings::to_c_with_buf("glVertexArrayColorOffsetEXT", cstr_buf): *const u8;
	glVertexArrayColorOffsetEXT = get_proc_address("glVertexArrayColorOffsetEXT", cstr): *fp_glVertexArrayColorOffsetEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayEdgeFlagOffsetEXT", cstr_buf): *const u8;
	glVertexArrayEdgeFlagOffsetEXT = get_proc_address("glVertexArrayEdgeFlagOffsetEXT", cstr): *fp_glVertexArrayEdgeFlagOffsetEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayElementBuffer", cstr_buf): *const u8;
	glVertexArrayElementBuffer = get_proc_address("glVertexArrayElementBuffer", cstr): *fp_glVertexArrayElementBuffer;
	let cstr = strings::to_c_with_buf("glVertexArrayFogCoordOffsetEXT", cstr_buf): *const u8;
	glVertexArrayFogCoordOffsetEXT = get_proc_address("glVertexArrayFogCoordOffsetEXT", cstr): *fp_glVertexArrayFogCoordOffsetEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayIndexOffsetEXT", cstr_buf): *const u8;
	glVertexArrayIndexOffsetEXT = get_proc_address("glVertexArrayIndexOffsetEXT", cstr): *fp_glVertexArrayIndexOffsetEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayMultiTexCoordOffsetEXT", cstr_buf): *const u8;
	glVertexArrayMultiTexCoordOffsetEXT = get_proc_address("glVertexArrayMultiTexCoordOffsetEXT", cstr): *fp_glVertexArrayMultiTexCoordOffsetEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayNormalOffsetEXT", cstr_buf): *const u8;
	glVertexArrayNormalOffsetEXT = get_proc_address("glVertexArrayNormalOffsetEXT", cstr): *fp_glVertexArrayNormalOffsetEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayParameteriAPPLE", cstr_buf): *const u8;
	glVertexArrayParameteriAPPLE = get_proc_address("glVertexArrayParameteriAPPLE", cstr): *fp_glVertexArrayParameteriAPPLE;
	let cstr = strings::to_c_with_buf("glVertexArrayRangeAPPLE", cstr_buf): *const u8;
	glVertexArrayRangeAPPLE = get_proc_address("glVertexArrayRangeAPPLE", cstr): *fp_glVertexArrayRangeAPPLE;
	let cstr = strings::to_c_with_buf("glVertexArrayRangeNV", cstr_buf): *const u8;
	glVertexArrayRangeNV = get_proc_address("glVertexArrayRangeNV", cstr): *fp_glVertexArrayRangeNV;
	let cstr = strings::to_c_with_buf("glVertexArraySecondaryColorOffsetEXT", cstr_buf): *const u8;
	glVertexArraySecondaryColorOffsetEXT = get_proc_address("glVertexArraySecondaryColorOffsetEXT", cstr): *fp_glVertexArraySecondaryColorOffsetEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayTexCoordOffsetEXT", cstr_buf): *const u8;
	glVertexArrayTexCoordOffsetEXT = get_proc_address("glVertexArrayTexCoordOffsetEXT", cstr): *fp_glVertexArrayTexCoordOffsetEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayVertexAttribBindingEXT", cstr_buf): *const u8;
	glVertexArrayVertexAttribBindingEXT = get_proc_address("glVertexArrayVertexAttribBindingEXT", cstr): *fp_glVertexArrayVertexAttribBindingEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayVertexAttribDivisorEXT", cstr_buf): *const u8;
	glVertexArrayVertexAttribDivisorEXT = get_proc_address("glVertexArrayVertexAttribDivisorEXT", cstr): *fp_glVertexArrayVertexAttribDivisorEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayVertexAttribFormatEXT", cstr_buf): *const u8;
	glVertexArrayVertexAttribFormatEXT = get_proc_address("glVertexArrayVertexAttribFormatEXT", cstr): *fp_glVertexArrayVertexAttribFormatEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayVertexAttribIFormatEXT", cstr_buf): *const u8;
	glVertexArrayVertexAttribIFormatEXT = get_proc_address("glVertexArrayVertexAttribIFormatEXT", cstr): *fp_glVertexArrayVertexAttribIFormatEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayVertexAttribIOffsetEXT", cstr_buf): *const u8;
	glVertexArrayVertexAttribIOffsetEXT = get_proc_address("glVertexArrayVertexAttribIOffsetEXT", cstr): *fp_glVertexArrayVertexAttribIOffsetEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayVertexAttribLFormatEXT", cstr_buf): *const u8;
	glVertexArrayVertexAttribLFormatEXT = get_proc_address("glVertexArrayVertexAttribLFormatEXT", cstr): *fp_glVertexArrayVertexAttribLFormatEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayVertexAttribLOffsetEXT", cstr_buf): *const u8;
	glVertexArrayVertexAttribLOffsetEXT = get_proc_address("glVertexArrayVertexAttribLOffsetEXT", cstr): *fp_glVertexArrayVertexAttribLOffsetEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayVertexAttribOffsetEXT", cstr_buf): *const u8;
	glVertexArrayVertexAttribOffsetEXT = get_proc_address("glVertexArrayVertexAttribOffsetEXT", cstr): *fp_glVertexArrayVertexAttribOffsetEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayVertexBindingDivisorEXT", cstr_buf): *const u8;
	glVertexArrayVertexBindingDivisorEXT = get_proc_address("glVertexArrayVertexBindingDivisorEXT", cstr): *fp_glVertexArrayVertexBindingDivisorEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayVertexBuffer", cstr_buf): *const u8;
	glVertexArrayVertexBuffer = get_proc_address("glVertexArrayVertexBuffer", cstr): *fp_glVertexArrayVertexBuffer;
	let cstr = strings::to_c_with_buf("glVertexArrayVertexBuffers", cstr_buf): *const u8;
	glVertexArrayVertexBuffers = get_proc_address("glVertexArrayVertexBuffers", cstr): *fp_glVertexArrayVertexBuffers;
	let cstr = strings::to_c_with_buf("glVertexArrayVertexOffsetEXT", cstr_buf): *const u8;
	glVertexArrayVertexOffsetEXT = get_proc_address("glVertexArrayVertexOffsetEXT", cstr): *fp_glVertexArrayVertexOffsetEXT;
	let cstr = strings::to_c_with_buf("glVertexAttrib1d", cstr_buf): *const u8;
	glVertexAttrib1d = get_proc_address("glVertexAttrib1d", cstr): *fp_glVertexAttrib1d;
	let cstr = strings::to_c_with_buf("glVertexAttrib1dARB", cstr_buf): *const u8;
	glVertexAttrib1dARB = get_proc_address("glVertexAttrib1dARB", cstr): *fp_glVertexAttrib1dARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib1dNV", cstr_buf): *const u8;
	glVertexAttrib1dNV = get_proc_address("glVertexAttrib1dNV", cstr): *fp_glVertexAttrib1dNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib1dv", cstr_buf): *const u8;
	glVertexAttrib1dv = get_proc_address("glVertexAttrib1dv", cstr): *fp_glVertexAttrib1dv;
	let cstr = strings::to_c_with_buf("glVertexAttrib1dvARB", cstr_buf): *const u8;
	glVertexAttrib1dvARB = get_proc_address("glVertexAttrib1dvARB", cstr): *fp_glVertexAttrib1dvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib1dvNV", cstr_buf): *const u8;
	glVertexAttrib1dvNV = get_proc_address("glVertexAttrib1dvNV", cstr): *fp_glVertexAttrib1dvNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib1f", cstr_buf): *const u8;
	glVertexAttrib1f = get_proc_address("glVertexAttrib1f", cstr): *fp_glVertexAttrib1f;
	let cstr = strings::to_c_with_buf("glVertexAttrib1fARB", cstr_buf): *const u8;
	glVertexAttrib1fARB = get_proc_address("glVertexAttrib1fARB", cstr): *fp_glVertexAttrib1fARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib1fNV", cstr_buf): *const u8;
	glVertexAttrib1fNV = get_proc_address("glVertexAttrib1fNV", cstr): *fp_glVertexAttrib1fNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib1fv", cstr_buf): *const u8;
	glVertexAttrib1fv = get_proc_address("glVertexAttrib1fv", cstr): *fp_glVertexAttrib1fv;
	let cstr = strings::to_c_with_buf("glVertexAttrib1fvARB", cstr_buf): *const u8;
	glVertexAttrib1fvARB = get_proc_address("glVertexAttrib1fvARB", cstr): *fp_glVertexAttrib1fvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib1fvNV", cstr_buf): *const u8;
	glVertexAttrib1fvNV = get_proc_address("glVertexAttrib1fvNV", cstr): *fp_glVertexAttrib1fvNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib1hNV", cstr_buf): *const u8;
	glVertexAttrib1hNV = get_proc_address("glVertexAttrib1hNV", cstr): *fp_glVertexAttrib1hNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib1hvNV", cstr_buf): *const u8;
	glVertexAttrib1hvNV = get_proc_address("glVertexAttrib1hvNV", cstr): *fp_glVertexAttrib1hvNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib1s", cstr_buf): *const u8;
	glVertexAttrib1s = get_proc_address("glVertexAttrib1s", cstr): *fp_glVertexAttrib1s;
	let cstr = strings::to_c_with_buf("glVertexAttrib1sARB", cstr_buf): *const u8;
	glVertexAttrib1sARB = get_proc_address("glVertexAttrib1sARB", cstr): *fp_glVertexAttrib1sARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib1sNV", cstr_buf): *const u8;
	glVertexAttrib1sNV = get_proc_address("glVertexAttrib1sNV", cstr): *fp_glVertexAttrib1sNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib1sv", cstr_buf): *const u8;
	glVertexAttrib1sv = get_proc_address("glVertexAttrib1sv", cstr): *fp_glVertexAttrib1sv;
	let cstr = strings::to_c_with_buf("glVertexAttrib1svARB", cstr_buf): *const u8;
	glVertexAttrib1svARB = get_proc_address("glVertexAttrib1svARB", cstr): *fp_glVertexAttrib1svARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib1svNV", cstr_buf): *const u8;
	glVertexAttrib1svNV = get_proc_address("glVertexAttrib1svNV", cstr): *fp_glVertexAttrib1svNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib2d", cstr_buf): *const u8;
	glVertexAttrib2d = get_proc_address("glVertexAttrib2d", cstr): *fp_glVertexAttrib2d;
	let cstr = strings::to_c_with_buf("glVertexAttrib2dARB", cstr_buf): *const u8;
	glVertexAttrib2dARB = get_proc_address("glVertexAttrib2dARB", cstr): *fp_glVertexAttrib2dARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib2dNV", cstr_buf): *const u8;
	glVertexAttrib2dNV = get_proc_address("glVertexAttrib2dNV", cstr): *fp_glVertexAttrib2dNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib2dv", cstr_buf): *const u8;
	glVertexAttrib2dv = get_proc_address("glVertexAttrib2dv", cstr): *fp_glVertexAttrib2dv;
	let cstr = strings::to_c_with_buf("glVertexAttrib2dvARB", cstr_buf): *const u8;
	glVertexAttrib2dvARB = get_proc_address("glVertexAttrib2dvARB", cstr): *fp_glVertexAttrib2dvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib2dvNV", cstr_buf): *const u8;
	glVertexAttrib2dvNV = get_proc_address("glVertexAttrib2dvNV", cstr): *fp_glVertexAttrib2dvNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib2f", cstr_buf): *const u8;
	glVertexAttrib2f = get_proc_address("glVertexAttrib2f", cstr): *fp_glVertexAttrib2f;
	let cstr = strings::to_c_with_buf("glVertexAttrib2fARB", cstr_buf): *const u8;
	glVertexAttrib2fARB = get_proc_address("glVertexAttrib2fARB", cstr): *fp_glVertexAttrib2fARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib2fNV", cstr_buf): *const u8;
	glVertexAttrib2fNV = get_proc_address("glVertexAttrib2fNV", cstr): *fp_glVertexAttrib2fNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib2fv", cstr_buf): *const u8;
	glVertexAttrib2fv = get_proc_address("glVertexAttrib2fv", cstr): *fp_glVertexAttrib2fv;
	let cstr = strings::to_c_with_buf("glVertexAttrib2fvARB", cstr_buf): *const u8;
	glVertexAttrib2fvARB = get_proc_address("glVertexAttrib2fvARB", cstr): *fp_glVertexAttrib2fvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib2fvNV", cstr_buf): *const u8;
	glVertexAttrib2fvNV = get_proc_address("glVertexAttrib2fvNV", cstr): *fp_glVertexAttrib2fvNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib2hNV", cstr_buf): *const u8;
	glVertexAttrib2hNV = get_proc_address("glVertexAttrib2hNV", cstr): *fp_glVertexAttrib2hNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib2hvNV", cstr_buf): *const u8;
	glVertexAttrib2hvNV = get_proc_address("glVertexAttrib2hvNV", cstr): *fp_glVertexAttrib2hvNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib2s", cstr_buf): *const u8;
	glVertexAttrib2s = get_proc_address("glVertexAttrib2s", cstr): *fp_glVertexAttrib2s;
	let cstr = strings::to_c_with_buf("glVertexAttrib2sARB", cstr_buf): *const u8;
	glVertexAttrib2sARB = get_proc_address("glVertexAttrib2sARB", cstr): *fp_glVertexAttrib2sARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib2sNV", cstr_buf): *const u8;
	glVertexAttrib2sNV = get_proc_address("glVertexAttrib2sNV", cstr): *fp_glVertexAttrib2sNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib2sv", cstr_buf): *const u8;
	glVertexAttrib2sv = get_proc_address("glVertexAttrib2sv", cstr): *fp_glVertexAttrib2sv;
	let cstr = strings::to_c_with_buf("glVertexAttrib2svARB", cstr_buf): *const u8;
	glVertexAttrib2svARB = get_proc_address("glVertexAttrib2svARB", cstr): *fp_glVertexAttrib2svARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib2svNV", cstr_buf): *const u8;
	glVertexAttrib2svNV = get_proc_address("glVertexAttrib2svNV", cstr): *fp_glVertexAttrib2svNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib3d", cstr_buf): *const u8;
	glVertexAttrib3d = get_proc_address("glVertexAttrib3d", cstr): *fp_glVertexAttrib3d;
	let cstr = strings::to_c_with_buf("glVertexAttrib3dARB", cstr_buf): *const u8;
	glVertexAttrib3dARB = get_proc_address("glVertexAttrib3dARB", cstr): *fp_glVertexAttrib3dARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib3dNV", cstr_buf): *const u8;
	glVertexAttrib3dNV = get_proc_address("glVertexAttrib3dNV", cstr): *fp_glVertexAttrib3dNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib3dv", cstr_buf): *const u8;
	glVertexAttrib3dv = get_proc_address("glVertexAttrib3dv", cstr): *fp_glVertexAttrib3dv;
	let cstr = strings::to_c_with_buf("glVertexAttrib3dvARB", cstr_buf): *const u8;
	glVertexAttrib3dvARB = get_proc_address("glVertexAttrib3dvARB", cstr): *fp_glVertexAttrib3dvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib3dvNV", cstr_buf): *const u8;
	glVertexAttrib3dvNV = get_proc_address("glVertexAttrib3dvNV", cstr): *fp_glVertexAttrib3dvNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib3f", cstr_buf): *const u8;
	glVertexAttrib3f = get_proc_address("glVertexAttrib3f", cstr): *fp_glVertexAttrib3f;
	let cstr = strings::to_c_with_buf("glVertexAttrib3fARB", cstr_buf): *const u8;
	glVertexAttrib3fARB = get_proc_address("glVertexAttrib3fARB", cstr): *fp_glVertexAttrib3fARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib3fNV", cstr_buf): *const u8;
	glVertexAttrib3fNV = get_proc_address("glVertexAttrib3fNV", cstr): *fp_glVertexAttrib3fNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib3fv", cstr_buf): *const u8;
	glVertexAttrib3fv = get_proc_address("glVertexAttrib3fv", cstr): *fp_glVertexAttrib3fv;
	let cstr = strings::to_c_with_buf("glVertexAttrib3fvARB", cstr_buf): *const u8;
	glVertexAttrib3fvARB = get_proc_address("glVertexAttrib3fvARB", cstr): *fp_glVertexAttrib3fvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib3fvNV", cstr_buf): *const u8;
	glVertexAttrib3fvNV = get_proc_address("glVertexAttrib3fvNV", cstr): *fp_glVertexAttrib3fvNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib3hNV", cstr_buf): *const u8;
	glVertexAttrib3hNV = get_proc_address("glVertexAttrib3hNV", cstr): *fp_glVertexAttrib3hNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib3hvNV", cstr_buf): *const u8;
	glVertexAttrib3hvNV = get_proc_address("glVertexAttrib3hvNV", cstr): *fp_glVertexAttrib3hvNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib3s", cstr_buf): *const u8;
	glVertexAttrib3s = get_proc_address("glVertexAttrib3s", cstr): *fp_glVertexAttrib3s;
	let cstr = strings::to_c_with_buf("glVertexAttrib3sARB", cstr_buf): *const u8;
	glVertexAttrib3sARB = get_proc_address("glVertexAttrib3sARB", cstr): *fp_glVertexAttrib3sARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib3sNV", cstr_buf): *const u8;
	glVertexAttrib3sNV = get_proc_address("glVertexAttrib3sNV", cstr): *fp_glVertexAttrib3sNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib3sv", cstr_buf): *const u8;
	glVertexAttrib3sv = get_proc_address("glVertexAttrib3sv", cstr): *fp_glVertexAttrib3sv;
	let cstr = strings::to_c_with_buf("glVertexAttrib3svARB", cstr_buf): *const u8;
	glVertexAttrib3svARB = get_proc_address("glVertexAttrib3svARB", cstr): *fp_glVertexAttrib3svARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib3svNV", cstr_buf): *const u8;
	glVertexAttrib3svNV = get_proc_address("glVertexAttrib3svNV", cstr): *fp_glVertexAttrib3svNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib4Nbv", cstr_buf): *const u8;
	glVertexAttrib4Nbv = get_proc_address("glVertexAttrib4Nbv", cstr): *fp_glVertexAttrib4Nbv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4NbvARB", cstr_buf): *const u8;
	glVertexAttrib4NbvARB = get_proc_address("glVertexAttrib4NbvARB", cstr): *fp_glVertexAttrib4NbvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4Niv", cstr_buf): *const u8;
	glVertexAttrib4Niv = get_proc_address("glVertexAttrib4Niv", cstr): *fp_glVertexAttrib4Niv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4NivARB", cstr_buf): *const u8;
	glVertexAttrib4NivARB = get_proc_address("glVertexAttrib4NivARB", cstr): *fp_glVertexAttrib4NivARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4Nsv", cstr_buf): *const u8;
	glVertexAttrib4Nsv = get_proc_address("glVertexAttrib4Nsv", cstr): *fp_glVertexAttrib4Nsv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4NsvARB", cstr_buf): *const u8;
	glVertexAttrib4NsvARB = get_proc_address("glVertexAttrib4NsvARB", cstr): *fp_glVertexAttrib4NsvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4Nub", cstr_buf): *const u8;
	glVertexAttrib4Nub = get_proc_address("glVertexAttrib4Nub", cstr): *fp_glVertexAttrib4Nub;
	let cstr = strings::to_c_with_buf("glVertexAttrib4NubARB", cstr_buf): *const u8;
	glVertexAttrib4NubARB = get_proc_address("glVertexAttrib4NubARB", cstr): *fp_glVertexAttrib4NubARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4Nubv", cstr_buf): *const u8;
	glVertexAttrib4Nubv = get_proc_address("glVertexAttrib4Nubv", cstr): *fp_glVertexAttrib4Nubv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4NubvARB", cstr_buf): *const u8;
	glVertexAttrib4NubvARB = get_proc_address("glVertexAttrib4NubvARB", cstr): *fp_glVertexAttrib4NubvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4Nuiv", cstr_buf): *const u8;
	glVertexAttrib4Nuiv = get_proc_address("glVertexAttrib4Nuiv", cstr): *fp_glVertexAttrib4Nuiv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4NuivARB", cstr_buf): *const u8;
	glVertexAttrib4NuivARB = get_proc_address("glVertexAttrib4NuivARB", cstr): *fp_glVertexAttrib4NuivARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4Nusv", cstr_buf): *const u8;
	glVertexAttrib4Nusv = get_proc_address("glVertexAttrib4Nusv", cstr): *fp_glVertexAttrib4Nusv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4NusvARB", cstr_buf): *const u8;
	glVertexAttrib4NusvARB = get_proc_address("glVertexAttrib4NusvARB", cstr): *fp_glVertexAttrib4NusvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4bv", cstr_buf): *const u8;
	glVertexAttrib4bv = get_proc_address("glVertexAttrib4bv", cstr): *fp_glVertexAttrib4bv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4bvARB", cstr_buf): *const u8;
	glVertexAttrib4bvARB = get_proc_address("glVertexAttrib4bvARB", cstr): *fp_glVertexAttrib4bvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4d", cstr_buf): *const u8;
	glVertexAttrib4d = get_proc_address("glVertexAttrib4d", cstr): *fp_glVertexAttrib4d;
	let cstr = strings::to_c_with_buf("glVertexAttrib4dARB", cstr_buf): *const u8;
	glVertexAttrib4dARB = get_proc_address("glVertexAttrib4dARB", cstr): *fp_glVertexAttrib4dARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4dNV", cstr_buf): *const u8;
	glVertexAttrib4dNV = get_proc_address("glVertexAttrib4dNV", cstr): *fp_glVertexAttrib4dNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib4dv", cstr_buf): *const u8;
	glVertexAttrib4dv = get_proc_address("glVertexAttrib4dv", cstr): *fp_glVertexAttrib4dv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4dvARB", cstr_buf): *const u8;
	glVertexAttrib4dvARB = get_proc_address("glVertexAttrib4dvARB", cstr): *fp_glVertexAttrib4dvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4dvNV", cstr_buf): *const u8;
	glVertexAttrib4dvNV = get_proc_address("glVertexAttrib4dvNV", cstr): *fp_glVertexAttrib4dvNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib4f", cstr_buf): *const u8;
	glVertexAttrib4f = get_proc_address("glVertexAttrib4f", cstr): *fp_glVertexAttrib4f;
	let cstr = strings::to_c_with_buf("glVertexAttrib4fARB", cstr_buf): *const u8;
	glVertexAttrib4fARB = get_proc_address("glVertexAttrib4fARB", cstr): *fp_glVertexAttrib4fARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4fNV", cstr_buf): *const u8;
	glVertexAttrib4fNV = get_proc_address("glVertexAttrib4fNV", cstr): *fp_glVertexAttrib4fNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib4fv", cstr_buf): *const u8;
	glVertexAttrib4fv = get_proc_address("glVertexAttrib4fv", cstr): *fp_glVertexAttrib4fv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4fvARB", cstr_buf): *const u8;
	glVertexAttrib4fvARB = get_proc_address("glVertexAttrib4fvARB", cstr): *fp_glVertexAttrib4fvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4fvNV", cstr_buf): *const u8;
	glVertexAttrib4fvNV = get_proc_address("glVertexAttrib4fvNV", cstr): *fp_glVertexAttrib4fvNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib4hNV", cstr_buf): *const u8;
	glVertexAttrib4hNV = get_proc_address("glVertexAttrib4hNV", cstr): *fp_glVertexAttrib4hNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib4hvNV", cstr_buf): *const u8;
	glVertexAttrib4hvNV = get_proc_address("glVertexAttrib4hvNV", cstr): *fp_glVertexAttrib4hvNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib4iv", cstr_buf): *const u8;
	glVertexAttrib4iv = get_proc_address("glVertexAttrib4iv", cstr): *fp_glVertexAttrib4iv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4ivARB", cstr_buf): *const u8;
	glVertexAttrib4ivARB = get_proc_address("glVertexAttrib4ivARB", cstr): *fp_glVertexAttrib4ivARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4s", cstr_buf): *const u8;
	glVertexAttrib4s = get_proc_address("glVertexAttrib4s", cstr): *fp_glVertexAttrib4s;
	let cstr = strings::to_c_with_buf("glVertexAttrib4sARB", cstr_buf): *const u8;
	glVertexAttrib4sARB = get_proc_address("glVertexAttrib4sARB", cstr): *fp_glVertexAttrib4sARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4sNV", cstr_buf): *const u8;
	glVertexAttrib4sNV = get_proc_address("glVertexAttrib4sNV", cstr): *fp_glVertexAttrib4sNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib4sv", cstr_buf): *const u8;
	glVertexAttrib4sv = get_proc_address("glVertexAttrib4sv", cstr): *fp_glVertexAttrib4sv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4svARB", cstr_buf): *const u8;
	glVertexAttrib4svARB = get_proc_address("glVertexAttrib4svARB", cstr): *fp_glVertexAttrib4svARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4svNV", cstr_buf): *const u8;
	glVertexAttrib4svNV = get_proc_address("glVertexAttrib4svNV", cstr): *fp_glVertexAttrib4svNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib4ubNV", cstr_buf): *const u8;
	glVertexAttrib4ubNV = get_proc_address("glVertexAttrib4ubNV", cstr): *fp_glVertexAttrib4ubNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib4ubv", cstr_buf): *const u8;
	glVertexAttrib4ubv = get_proc_address("glVertexAttrib4ubv", cstr): *fp_glVertexAttrib4ubv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4ubvARB", cstr_buf): *const u8;
	glVertexAttrib4ubvARB = get_proc_address("glVertexAttrib4ubvARB", cstr): *fp_glVertexAttrib4ubvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4ubvNV", cstr_buf): *const u8;
	glVertexAttrib4ubvNV = get_proc_address("glVertexAttrib4ubvNV", cstr): *fp_glVertexAttrib4ubvNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib4uiv", cstr_buf): *const u8;
	glVertexAttrib4uiv = get_proc_address("glVertexAttrib4uiv", cstr): *fp_glVertexAttrib4uiv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4uivARB", cstr_buf): *const u8;
	glVertexAttrib4uivARB = get_proc_address("glVertexAttrib4uivARB", cstr): *fp_glVertexAttrib4uivARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4usv", cstr_buf): *const u8;
	glVertexAttrib4usv = get_proc_address("glVertexAttrib4usv", cstr): *fp_glVertexAttrib4usv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4usvARB", cstr_buf): *const u8;
	glVertexAttrib4usvARB = get_proc_address("glVertexAttrib4usvARB", cstr): *fp_glVertexAttrib4usvARB;
	let cstr = strings::to_c_with_buf("glVertexAttribArrayObjectATI", cstr_buf): *const u8;
	glVertexAttribArrayObjectATI = get_proc_address("glVertexAttribArrayObjectATI", cstr): *fp_glVertexAttribArrayObjectATI;
	let cstr = strings::to_c_with_buf("glVertexAttribBinding", cstr_buf): *const u8;
	glVertexAttribBinding = get_proc_address("glVertexAttribBinding", cstr): *fp_glVertexAttribBinding;
	let cstr = strings::to_c_with_buf("glVertexAttribDivisorARB", cstr_buf): *const u8;
	glVertexAttribDivisorARB = get_proc_address("glVertexAttribDivisorARB", cstr): *fp_glVertexAttribDivisorARB;
	let cstr = strings::to_c_with_buf("glVertexAttribFormat", cstr_buf): *const u8;
	glVertexAttribFormat = get_proc_address("glVertexAttribFormat", cstr): *fp_glVertexAttribFormat;
	let cstr = strings::to_c_with_buf("glVertexAttribFormatNV", cstr_buf): *const u8;
	glVertexAttribFormatNV = get_proc_address("glVertexAttribFormatNV", cstr): *fp_glVertexAttribFormatNV;
	let cstr = strings::to_c_with_buf("glVertexAttribI1iEXT", cstr_buf): *const u8;
	glVertexAttribI1iEXT = get_proc_address("glVertexAttribI1iEXT", cstr): *fp_glVertexAttribI1iEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI1ivEXT", cstr_buf): *const u8;
	glVertexAttribI1ivEXT = get_proc_address("glVertexAttribI1ivEXT", cstr): *fp_glVertexAttribI1ivEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI1uiEXT", cstr_buf): *const u8;
	glVertexAttribI1uiEXT = get_proc_address("glVertexAttribI1uiEXT", cstr): *fp_glVertexAttribI1uiEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI1uivEXT", cstr_buf): *const u8;
	glVertexAttribI1uivEXT = get_proc_address("glVertexAttribI1uivEXT", cstr): *fp_glVertexAttribI1uivEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI2iEXT", cstr_buf): *const u8;
	glVertexAttribI2iEXT = get_proc_address("glVertexAttribI2iEXT", cstr): *fp_glVertexAttribI2iEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI2ivEXT", cstr_buf): *const u8;
	glVertexAttribI2ivEXT = get_proc_address("glVertexAttribI2ivEXT", cstr): *fp_glVertexAttribI2ivEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI2uiEXT", cstr_buf): *const u8;
	glVertexAttribI2uiEXT = get_proc_address("glVertexAttribI2uiEXT", cstr): *fp_glVertexAttribI2uiEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI2uivEXT", cstr_buf): *const u8;
	glVertexAttribI2uivEXT = get_proc_address("glVertexAttribI2uivEXT", cstr): *fp_glVertexAttribI2uivEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI3iEXT", cstr_buf): *const u8;
	glVertexAttribI3iEXT = get_proc_address("glVertexAttribI3iEXT", cstr): *fp_glVertexAttribI3iEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI3ivEXT", cstr_buf): *const u8;
	glVertexAttribI3ivEXT = get_proc_address("glVertexAttribI3ivEXT", cstr): *fp_glVertexAttribI3ivEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI3uiEXT", cstr_buf): *const u8;
	glVertexAttribI3uiEXT = get_proc_address("glVertexAttribI3uiEXT", cstr): *fp_glVertexAttribI3uiEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI3uivEXT", cstr_buf): *const u8;
	glVertexAttribI3uivEXT = get_proc_address("glVertexAttribI3uivEXT", cstr): *fp_glVertexAttribI3uivEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI4bvEXT", cstr_buf): *const u8;
	glVertexAttribI4bvEXT = get_proc_address("glVertexAttribI4bvEXT", cstr): *fp_glVertexAttribI4bvEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI4iEXT", cstr_buf): *const u8;
	glVertexAttribI4iEXT = get_proc_address("glVertexAttribI4iEXT", cstr): *fp_glVertexAttribI4iEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI4ivEXT", cstr_buf): *const u8;
	glVertexAttribI4ivEXT = get_proc_address("glVertexAttribI4ivEXT", cstr): *fp_glVertexAttribI4ivEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI4svEXT", cstr_buf): *const u8;
	glVertexAttribI4svEXT = get_proc_address("glVertexAttribI4svEXT", cstr): *fp_glVertexAttribI4svEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI4ubvEXT", cstr_buf): *const u8;
	glVertexAttribI4ubvEXT = get_proc_address("glVertexAttribI4ubvEXT", cstr): *fp_glVertexAttribI4ubvEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI4uiEXT", cstr_buf): *const u8;
	glVertexAttribI4uiEXT = get_proc_address("glVertexAttribI4uiEXT", cstr): *fp_glVertexAttribI4uiEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI4uivEXT", cstr_buf): *const u8;
	glVertexAttribI4uivEXT = get_proc_address("glVertexAttribI4uivEXT", cstr): *fp_glVertexAttribI4uivEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI4usvEXT", cstr_buf): *const u8;
	glVertexAttribI4usvEXT = get_proc_address("glVertexAttribI4usvEXT", cstr): *fp_glVertexAttribI4usvEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribIFormat", cstr_buf): *const u8;
	glVertexAttribIFormat = get_proc_address("glVertexAttribIFormat", cstr): *fp_glVertexAttribIFormat;
	let cstr = strings::to_c_with_buf("glVertexAttribIFormatNV", cstr_buf): *const u8;
	glVertexAttribIFormatNV = get_proc_address("glVertexAttribIFormatNV", cstr): *fp_glVertexAttribIFormatNV;
	let cstr = strings::to_c_with_buf("glVertexAttribIPointerEXT", cstr_buf): *const u8;
	glVertexAttribIPointerEXT = get_proc_address("glVertexAttribIPointerEXT", cstr): *fp_glVertexAttribIPointerEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribL1d", cstr_buf): *const u8;
	glVertexAttribL1d = get_proc_address("glVertexAttribL1d", cstr): *fp_glVertexAttribL1d;
	let cstr = strings::to_c_with_buf("glVertexAttribL1dEXT", cstr_buf): *const u8;
	glVertexAttribL1dEXT = get_proc_address("glVertexAttribL1dEXT", cstr): *fp_glVertexAttribL1dEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribL1dv", cstr_buf): *const u8;
	glVertexAttribL1dv = get_proc_address("glVertexAttribL1dv", cstr): *fp_glVertexAttribL1dv;
	let cstr = strings::to_c_with_buf("glVertexAttribL1dvEXT", cstr_buf): *const u8;
	glVertexAttribL1dvEXT = get_proc_address("glVertexAttribL1dvEXT", cstr): *fp_glVertexAttribL1dvEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribL1i64NV", cstr_buf): *const u8;
	glVertexAttribL1i64NV = get_proc_address("glVertexAttribL1i64NV", cstr): *fp_glVertexAttribL1i64NV;
	let cstr = strings::to_c_with_buf("glVertexAttribL1i64vNV", cstr_buf): *const u8;
	glVertexAttribL1i64vNV = get_proc_address("glVertexAttribL1i64vNV", cstr): *fp_glVertexAttribL1i64vNV;
	let cstr = strings::to_c_with_buf("glVertexAttribL1ui64ARB", cstr_buf): *const u8;
	glVertexAttribL1ui64ARB = get_proc_address("glVertexAttribL1ui64ARB", cstr): *fp_glVertexAttribL1ui64ARB;
	let cstr = strings::to_c_with_buf("glVertexAttribL1ui64NV", cstr_buf): *const u8;
	glVertexAttribL1ui64NV = get_proc_address("glVertexAttribL1ui64NV", cstr): *fp_glVertexAttribL1ui64NV;
	let cstr = strings::to_c_with_buf("glVertexAttribL1ui64vARB", cstr_buf): *const u8;
	glVertexAttribL1ui64vARB = get_proc_address("glVertexAttribL1ui64vARB", cstr): *fp_glVertexAttribL1ui64vARB;
	let cstr = strings::to_c_with_buf("glVertexAttribL1ui64vNV", cstr_buf): *const u8;
	glVertexAttribL1ui64vNV = get_proc_address("glVertexAttribL1ui64vNV", cstr): *fp_glVertexAttribL1ui64vNV;
	let cstr = strings::to_c_with_buf("glVertexAttribL2d", cstr_buf): *const u8;
	glVertexAttribL2d = get_proc_address("glVertexAttribL2d", cstr): *fp_glVertexAttribL2d;
	let cstr = strings::to_c_with_buf("glVertexAttribL2dEXT", cstr_buf): *const u8;
	glVertexAttribL2dEXT = get_proc_address("glVertexAttribL2dEXT", cstr): *fp_glVertexAttribL2dEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribL2dv", cstr_buf): *const u8;
	glVertexAttribL2dv = get_proc_address("glVertexAttribL2dv", cstr): *fp_glVertexAttribL2dv;
	let cstr = strings::to_c_with_buf("glVertexAttribL2dvEXT", cstr_buf): *const u8;
	glVertexAttribL2dvEXT = get_proc_address("glVertexAttribL2dvEXT", cstr): *fp_glVertexAttribL2dvEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribL2i64NV", cstr_buf): *const u8;
	glVertexAttribL2i64NV = get_proc_address("glVertexAttribL2i64NV", cstr): *fp_glVertexAttribL2i64NV;
	let cstr = strings::to_c_with_buf("glVertexAttribL2i64vNV", cstr_buf): *const u8;
	glVertexAttribL2i64vNV = get_proc_address("glVertexAttribL2i64vNV", cstr): *fp_glVertexAttribL2i64vNV;
	let cstr = strings::to_c_with_buf("glVertexAttribL2ui64NV", cstr_buf): *const u8;
	glVertexAttribL2ui64NV = get_proc_address("glVertexAttribL2ui64NV", cstr): *fp_glVertexAttribL2ui64NV;
	let cstr = strings::to_c_with_buf("glVertexAttribL2ui64vNV", cstr_buf): *const u8;
	glVertexAttribL2ui64vNV = get_proc_address("glVertexAttribL2ui64vNV", cstr): *fp_glVertexAttribL2ui64vNV;
	let cstr = strings::to_c_with_buf("glVertexAttribL3d", cstr_buf): *const u8;
	glVertexAttribL3d = get_proc_address("glVertexAttribL3d", cstr): *fp_glVertexAttribL3d;
	let cstr = strings::to_c_with_buf("glVertexAttribL3dEXT", cstr_buf): *const u8;
	glVertexAttribL3dEXT = get_proc_address("glVertexAttribL3dEXT", cstr): *fp_glVertexAttribL3dEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribL3dv", cstr_buf): *const u8;
	glVertexAttribL3dv = get_proc_address("glVertexAttribL3dv", cstr): *fp_glVertexAttribL3dv;
	let cstr = strings::to_c_with_buf("glVertexAttribL3dvEXT", cstr_buf): *const u8;
	glVertexAttribL3dvEXT = get_proc_address("glVertexAttribL3dvEXT", cstr): *fp_glVertexAttribL3dvEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribL3i64NV", cstr_buf): *const u8;
	glVertexAttribL3i64NV = get_proc_address("glVertexAttribL3i64NV", cstr): *fp_glVertexAttribL3i64NV;
	let cstr = strings::to_c_with_buf("glVertexAttribL3i64vNV", cstr_buf): *const u8;
	glVertexAttribL3i64vNV = get_proc_address("glVertexAttribL3i64vNV", cstr): *fp_glVertexAttribL3i64vNV;
	let cstr = strings::to_c_with_buf("glVertexAttribL3ui64NV", cstr_buf): *const u8;
	glVertexAttribL3ui64NV = get_proc_address("glVertexAttribL3ui64NV", cstr): *fp_glVertexAttribL3ui64NV;
	let cstr = strings::to_c_with_buf("glVertexAttribL3ui64vNV", cstr_buf): *const u8;
	glVertexAttribL3ui64vNV = get_proc_address("glVertexAttribL3ui64vNV", cstr): *fp_glVertexAttribL3ui64vNV;
	let cstr = strings::to_c_with_buf("glVertexAttribL4d", cstr_buf): *const u8;
	glVertexAttribL4d = get_proc_address("glVertexAttribL4d", cstr): *fp_glVertexAttribL4d;
	let cstr = strings::to_c_with_buf("glVertexAttribL4dEXT", cstr_buf): *const u8;
	glVertexAttribL4dEXT = get_proc_address("glVertexAttribL4dEXT", cstr): *fp_glVertexAttribL4dEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribL4dv", cstr_buf): *const u8;
	glVertexAttribL4dv = get_proc_address("glVertexAttribL4dv", cstr): *fp_glVertexAttribL4dv;
	let cstr = strings::to_c_with_buf("glVertexAttribL4dvEXT", cstr_buf): *const u8;
	glVertexAttribL4dvEXT = get_proc_address("glVertexAttribL4dvEXT", cstr): *fp_glVertexAttribL4dvEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribL4i64NV", cstr_buf): *const u8;
	glVertexAttribL4i64NV = get_proc_address("glVertexAttribL4i64NV", cstr): *fp_glVertexAttribL4i64NV;
	let cstr = strings::to_c_with_buf("glVertexAttribL4i64vNV", cstr_buf): *const u8;
	glVertexAttribL4i64vNV = get_proc_address("glVertexAttribL4i64vNV", cstr): *fp_glVertexAttribL4i64vNV;
	let cstr = strings::to_c_with_buf("glVertexAttribL4ui64NV", cstr_buf): *const u8;
	glVertexAttribL4ui64NV = get_proc_address("glVertexAttribL4ui64NV", cstr): *fp_glVertexAttribL4ui64NV;
	let cstr = strings::to_c_with_buf("glVertexAttribL4ui64vNV", cstr_buf): *const u8;
	glVertexAttribL4ui64vNV = get_proc_address("glVertexAttribL4ui64vNV", cstr): *fp_glVertexAttribL4ui64vNV;
	let cstr = strings::to_c_with_buf("glVertexAttribLFormat", cstr_buf): *const u8;
	glVertexAttribLFormat = get_proc_address("glVertexAttribLFormat", cstr): *fp_glVertexAttribLFormat;
	let cstr = strings::to_c_with_buf("glVertexAttribLFormatNV", cstr_buf): *const u8;
	glVertexAttribLFormatNV = get_proc_address("glVertexAttribLFormatNV", cstr): *fp_glVertexAttribLFormatNV;
	let cstr = strings::to_c_with_buf("glVertexAttribLPointer", cstr_buf): *const u8;
	glVertexAttribLPointer = get_proc_address("glVertexAttribLPointer", cstr): *fp_glVertexAttribLPointer;
	let cstr = strings::to_c_with_buf("glVertexAttribLPointerEXT", cstr_buf): *const u8;
	glVertexAttribLPointerEXT = get_proc_address("glVertexAttribLPointerEXT", cstr): *fp_glVertexAttribLPointerEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribP1ui", cstr_buf): *const u8;
	glVertexAttribP1ui = get_proc_address("glVertexAttribP1ui", cstr): *fp_glVertexAttribP1ui;
	let cstr = strings::to_c_with_buf("glVertexAttribP1uiv", cstr_buf): *const u8;
	glVertexAttribP1uiv = get_proc_address("glVertexAttribP1uiv", cstr): *fp_glVertexAttribP1uiv;
	let cstr = strings::to_c_with_buf("glVertexAttribP2ui", cstr_buf): *const u8;
	glVertexAttribP2ui = get_proc_address("glVertexAttribP2ui", cstr): *fp_glVertexAttribP2ui;
	let cstr = strings::to_c_with_buf("glVertexAttribP2uiv", cstr_buf): *const u8;
	glVertexAttribP2uiv = get_proc_address("glVertexAttribP2uiv", cstr): *fp_glVertexAttribP2uiv;
	let cstr = strings::to_c_with_buf("glVertexAttribP3ui", cstr_buf): *const u8;
	glVertexAttribP3ui = get_proc_address("glVertexAttribP3ui", cstr): *fp_glVertexAttribP3ui;
	let cstr = strings::to_c_with_buf("glVertexAttribP3uiv", cstr_buf): *const u8;
	glVertexAttribP3uiv = get_proc_address("glVertexAttribP3uiv", cstr): *fp_glVertexAttribP3uiv;
	let cstr = strings::to_c_with_buf("glVertexAttribP4ui", cstr_buf): *const u8;
	glVertexAttribP4ui = get_proc_address("glVertexAttribP4ui", cstr): *fp_glVertexAttribP4ui;
	let cstr = strings::to_c_with_buf("glVertexAttribP4uiv", cstr_buf): *const u8;
	glVertexAttribP4uiv = get_proc_address("glVertexAttribP4uiv", cstr): *fp_glVertexAttribP4uiv;
	let cstr = strings::to_c_with_buf("glVertexAttribParameteriAMD", cstr_buf): *const u8;
	glVertexAttribParameteriAMD = get_proc_address("glVertexAttribParameteriAMD", cstr): *fp_glVertexAttribParameteriAMD;
	let cstr = strings::to_c_with_buf("glVertexAttribPointer", cstr_buf): *const u8;
	glVertexAttribPointer = get_proc_address("glVertexAttribPointer", cstr): *fp_glVertexAttribPointer;
	let cstr = strings::to_c_with_buf("glVertexAttribPointerARB", cstr_buf): *const u8;
	glVertexAttribPointerARB = get_proc_address("glVertexAttribPointerARB", cstr): *fp_glVertexAttribPointerARB;
	let cstr = strings::to_c_with_buf("glVertexAttribPointerNV", cstr_buf): *const u8;
	glVertexAttribPointerNV = get_proc_address("glVertexAttribPointerNV", cstr): *fp_glVertexAttribPointerNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs1dvNV", cstr_buf): *const u8;
	glVertexAttribs1dvNV = get_proc_address("glVertexAttribs1dvNV", cstr): *fp_glVertexAttribs1dvNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs1fvNV", cstr_buf): *const u8;
	glVertexAttribs1fvNV = get_proc_address("glVertexAttribs1fvNV", cstr): *fp_glVertexAttribs1fvNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs1hvNV", cstr_buf): *const u8;
	glVertexAttribs1hvNV = get_proc_address("glVertexAttribs1hvNV", cstr): *fp_glVertexAttribs1hvNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs1svNV", cstr_buf): *const u8;
	glVertexAttribs1svNV = get_proc_address("glVertexAttribs1svNV", cstr): *fp_glVertexAttribs1svNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs2dvNV", cstr_buf): *const u8;
	glVertexAttribs2dvNV = get_proc_address("glVertexAttribs2dvNV", cstr): *fp_glVertexAttribs2dvNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs2fvNV", cstr_buf): *const u8;
	glVertexAttribs2fvNV = get_proc_address("glVertexAttribs2fvNV", cstr): *fp_glVertexAttribs2fvNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs2hvNV", cstr_buf): *const u8;
	glVertexAttribs2hvNV = get_proc_address("glVertexAttribs2hvNV", cstr): *fp_glVertexAttribs2hvNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs2svNV", cstr_buf): *const u8;
	glVertexAttribs2svNV = get_proc_address("glVertexAttribs2svNV", cstr): *fp_glVertexAttribs2svNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs3dvNV", cstr_buf): *const u8;
	glVertexAttribs3dvNV = get_proc_address("glVertexAttribs3dvNV", cstr): *fp_glVertexAttribs3dvNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs3fvNV", cstr_buf): *const u8;
	glVertexAttribs3fvNV = get_proc_address("glVertexAttribs3fvNV", cstr): *fp_glVertexAttribs3fvNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs3hvNV", cstr_buf): *const u8;
	glVertexAttribs3hvNV = get_proc_address("glVertexAttribs3hvNV", cstr): *fp_glVertexAttribs3hvNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs3svNV", cstr_buf): *const u8;
	glVertexAttribs3svNV = get_proc_address("glVertexAttribs3svNV", cstr): *fp_glVertexAttribs3svNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs4dvNV", cstr_buf): *const u8;
	glVertexAttribs4dvNV = get_proc_address("glVertexAttribs4dvNV", cstr): *fp_glVertexAttribs4dvNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs4fvNV", cstr_buf): *const u8;
	glVertexAttribs4fvNV = get_proc_address("glVertexAttribs4fvNV", cstr): *fp_glVertexAttribs4fvNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs4hvNV", cstr_buf): *const u8;
	glVertexAttribs4hvNV = get_proc_address("glVertexAttribs4hvNV", cstr): *fp_glVertexAttribs4hvNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs4svNV", cstr_buf): *const u8;
	glVertexAttribs4svNV = get_proc_address("glVertexAttribs4svNV", cstr): *fp_glVertexAttribs4svNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs4ubvNV", cstr_buf): *const u8;
	glVertexAttribs4ubvNV = get_proc_address("glVertexAttribs4ubvNV", cstr): *fp_glVertexAttribs4ubvNV;
	let cstr = strings::to_c_with_buf("glVertexBindingDivisor", cstr_buf): *const u8;
	glVertexBindingDivisor = get_proc_address("glVertexBindingDivisor", cstr): *fp_glVertexBindingDivisor;
	let cstr = strings::to_c_with_buf("glVertexBlendARB", cstr_buf): *const u8;
	glVertexBlendARB = get_proc_address("glVertexBlendARB", cstr): *fp_glVertexBlendARB;
	let cstr = strings::to_c_with_buf("glVertexBlendEnvfATI", cstr_buf): *const u8;
	glVertexBlendEnvfATI = get_proc_address("glVertexBlendEnvfATI", cstr): *fp_glVertexBlendEnvfATI;
	let cstr = strings::to_c_with_buf("glVertexBlendEnviATI", cstr_buf): *const u8;
	glVertexBlendEnviATI = get_proc_address("glVertexBlendEnviATI", cstr): *fp_glVertexBlendEnviATI;
	let cstr = strings::to_c_with_buf("glVertexFormatNV", cstr_buf): *const u8;
	glVertexFormatNV = get_proc_address("glVertexFormatNV", cstr): *fp_glVertexFormatNV;
	let cstr = strings::to_c_with_buf("glVertexPointer", cstr_buf): *const u8;
	glVertexPointer = get_proc_address("glVertexPointer", cstr): *fp_glVertexPointer;
	let cstr = strings::to_c_with_buf("glVertexPointerEXT", cstr_buf): *const u8;
	glVertexPointerEXT = get_proc_address("glVertexPointerEXT", cstr): *fp_glVertexPointerEXT;
	let cstr = strings::to_c_with_buf("glVertexPointerListIBM", cstr_buf): *const u8;
	glVertexPointerListIBM = get_proc_address("glVertexPointerListIBM", cstr): *fp_glVertexPointerListIBM;
	let cstr = strings::to_c_with_buf("glVertexPointervINTEL", cstr_buf): *const u8;
	glVertexPointervINTEL = get_proc_address("glVertexPointervINTEL", cstr): *fp_glVertexPointervINTEL;
	let cstr = strings::to_c_with_buf("glVertexStream1dATI", cstr_buf): *const u8;
	glVertexStream1dATI = get_proc_address("glVertexStream1dATI", cstr): *fp_glVertexStream1dATI;
	let cstr = strings::to_c_with_buf("glVertexStream1dvATI", cstr_buf): *const u8;
	glVertexStream1dvATI = get_proc_address("glVertexStream1dvATI", cstr): *fp_glVertexStream1dvATI;
	let cstr = strings::to_c_with_buf("glVertexStream1fATI", cstr_buf): *const u8;
	glVertexStream1fATI = get_proc_address("glVertexStream1fATI", cstr): *fp_glVertexStream1fATI;
	let cstr = strings::to_c_with_buf("glVertexStream1fvATI", cstr_buf): *const u8;
	glVertexStream1fvATI = get_proc_address("glVertexStream1fvATI", cstr): *fp_glVertexStream1fvATI;
	let cstr = strings::to_c_with_buf("glVertexStream1iATI", cstr_buf): *const u8;
	glVertexStream1iATI = get_proc_address("glVertexStream1iATI", cstr): *fp_glVertexStream1iATI;
	let cstr = strings::to_c_with_buf("glVertexStream1ivATI", cstr_buf): *const u8;
	glVertexStream1ivATI = get_proc_address("glVertexStream1ivATI", cstr): *fp_glVertexStream1ivATI;
	let cstr = strings::to_c_with_buf("glVertexStream1sATI", cstr_buf): *const u8;
	glVertexStream1sATI = get_proc_address("glVertexStream1sATI", cstr): *fp_glVertexStream1sATI;
	let cstr = strings::to_c_with_buf("glVertexStream1svATI", cstr_buf): *const u8;
	glVertexStream1svATI = get_proc_address("glVertexStream1svATI", cstr): *fp_glVertexStream1svATI;
	let cstr = strings::to_c_with_buf("glVertexStream2dATI", cstr_buf): *const u8;
	glVertexStream2dATI = get_proc_address("glVertexStream2dATI", cstr): *fp_glVertexStream2dATI;
	let cstr = strings::to_c_with_buf("glVertexStream2dvATI", cstr_buf): *const u8;
	glVertexStream2dvATI = get_proc_address("glVertexStream2dvATI", cstr): *fp_glVertexStream2dvATI;
	let cstr = strings::to_c_with_buf("glVertexStream2fATI", cstr_buf): *const u8;
	glVertexStream2fATI = get_proc_address("glVertexStream2fATI", cstr): *fp_glVertexStream2fATI;
	let cstr = strings::to_c_with_buf("glVertexStream2fvATI", cstr_buf): *const u8;
	glVertexStream2fvATI = get_proc_address("glVertexStream2fvATI", cstr): *fp_glVertexStream2fvATI;
	let cstr = strings::to_c_with_buf("glVertexStream2iATI", cstr_buf): *const u8;
	glVertexStream2iATI = get_proc_address("glVertexStream2iATI", cstr): *fp_glVertexStream2iATI;
	let cstr = strings::to_c_with_buf("glVertexStream2ivATI", cstr_buf): *const u8;
	glVertexStream2ivATI = get_proc_address("glVertexStream2ivATI", cstr): *fp_glVertexStream2ivATI;
	let cstr = strings::to_c_with_buf("glVertexStream2sATI", cstr_buf): *const u8;
	glVertexStream2sATI = get_proc_address("glVertexStream2sATI", cstr): *fp_glVertexStream2sATI;
	let cstr = strings::to_c_with_buf("glVertexStream2svATI", cstr_buf): *const u8;
	glVertexStream2svATI = get_proc_address("glVertexStream2svATI", cstr): *fp_glVertexStream2svATI;
	let cstr = strings::to_c_with_buf("glVertexStream3dATI", cstr_buf): *const u8;
	glVertexStream3dATI = get_proc_address("glVertexStream3dATI", cstr): *fp_glVertexStream3dATI;
	let cstr = strings::to_c_with_buf("glVertexStream3dvATI", cstr_buf): *const u8;
	glVertexStream3dvATI = get_proc_address("glVertexStream3dvATI", cstr): *fp_glVertexStream3dvATI;
	let cstr = strings::to_c_with_buf("glVertexStream3fATI", cstr_buf): *const u8;
	glVertexStream3fATI = get_proc_address("glVertexStream3fATI", cstr): *fp_glVertexStream3fATI;
	let cstr = strings::to_c_with_buf("glVertexStream3fvATI", cstr_buf): *const u8;
	glVertexStream3fvATI = get_proc_address("glVertexStream3fvATI", cstr): *fp_glVertexStream3fvATI;
	let cstr = strings::to_c_with_buf("glVertexStream3iATI", cstr_buf): *const u8;
	glVertexStream3iATI = get_proc_address("glVertexStream3iATI", cstr): *fp_glVertexStream3iATI;
	let cstr = strings::to_c_with_buf("glVertexStream3ivATI", cstr_buf): *const u8;
	glVertexStream3ivATI = get_proc_address("glVertexStream3ivATI", cstr): *fp_glVertexStream3ivATI;
	let cstr = strings::to_c_with_buf("glVertexStream3sATI", cstr_buf): *const u8;
	glVertexStream3sATI = get_proc_address("glVertexStream3sATI", cstr): *fp_glVertexStream3sATI;
	let cstr = strings::to_c_with_buf("glVertexStream3svATI", cstr_buf): *const u8;
	glVertexStream3svATI = get_proc_address("glVertexStream3svATI", cstr): *fp_glVertexStream3svATI;
	let cstr = strings::to_c_with_buf("glVertexStream4dATI", cstr_buf): *const u8;
	glVertexStream4dATI = get_proc_address("glVertexStream4dATI", cstr): *fp_glVertexStream4dATI;
	let cstr = strings::to_c_with_buf("glVertexStream4dvATI", cstr_buf): *const u8;
	glVertexStream4dvATI = get_proc_address("glVertexStream4dvATI", cstr): *fp_glVertexStream4dvATI;
	let cstr = strings::to_c_with_buf("glVertexStream4fATI", cstr_buf): *const u8;
	glVertexStream4fATI = get_proc_address("glVertexStream4fATI", cstr): *fp_glVertexStream4fATI;
	let cstr = strings::to_c_with_buf("glVertexStream4fvATI", cstr_buf): *const u8;
	glVertexStream4fvATI = get_proc_address("glVertexStream4fvATI", cstr): *fp_glVertexStream4fvATI;
	let cstr = strings::to_c_with_buf("glVertexStream4iATI", cstr_buf): *const u8;
	glVertexStream4iATI = get_proc_address("glVertexStream4iATI", cstr): *fp_glVertexStream4iATI;
	let cstr = strings::to_c_with_buf("glVertexStream4ivATI", cstr_buf): *const u8;
	glVertexStream4ivATI = get_proc_address("glVertexStream4ivATI", cstr): *fp_glVertexStream4ivATI;
	let cstr = strings::to_c_with_buf("glVertexStream4sATI", cstr_buf): *const u8;
	glVertexStream4sATI = get_proc_address("glVertexStream4sATI", cstr): *fp_glVertexStream4sATI;
	let cstr = strings::to_c_with_buf("glVertexStream4svATI", cstr_buf): *const u8;
	glVertexStream4svATI = get_proc_address("glVertexStream4svATI", cstr): *fp_glVertexStream4svATI;
	let cstr = strings::to_c_with_buf("glVertexWeightPointerEXT", cstr_buf): *const u8;
	glVertexWeightPointerEXT = get_proc_address("glVertexWeightPointerEXT", cstr): *fp_glVertexWeightPointerEXT;
	let cstr = strings::to_c_with_buf("glVertexWeightfEXT", cstr_buf): *const u8;
	glVertexWeightfEXT = get_proc_address("glVertexWeightfEXT", cstr): *fp_glVertexWeightfEXT;
	let cstr = strings::to_c_with_buf("glVertexWeightfvEXT", cstr_buf): *const u8;
	glVertexWeightfvEXT = get_proc_address("glVertexWeightfvEXT", cstr): *fp_glVertexWeightfvEXT;
	let cstr = strings::to_c_with_buf("glVertexWeighthNV", cstr_buf): *const u8;
	glVertexWeighthNV = get_proc_address("glVertexWeighthNV", cstr): *fp_glVertexWeighthNV;
	let cstr = strings::to_c_with_buf("glVertexWeighthvNV", cstr_buf): *const u8;
	glVertexWeighthvNV = get_proc_address("glVertexWeighthvNV", cstr): *fp_glVertexWeighthvNV;
	let cstr = strings::to_c_with_buf("glVideoCaptureNV", cstr_buf): *const u8;
	glVideoCaptureNV = get_proc_address("glVideoCaptureNV", cstr): *fp_glVideoCaptureNV;
	let cstr = strings::to_c_with_buf("glVideoCaptureStreamParameterdvNV", cstr_buf): *const u8;
	glVideoCaptureStreamParameterdvNV = get_proc_address("glVideoCaptureStreamParameterdvNV", cstr): *fp_glVideoCaptureStreamParameterdvNV;
	let cstr = strings::to_c_with_buf("glVideoCaptureStreamParameterfvNV", cstr_buf): *const u8;
	glVideoCaptureStreamParameterfvNV = get_proc_address("glVideoCaptureStreamParameterfvNV", cstr): *fp_glVideoCaptureStreamParameterfvNV;
	let cstr = strings::to_c_with_buf("glVideoCaptureStreamParameterivNV", cstr_buf): *const u8;
	glVideoCaptureStreamParameterivNV = get_proc_address("glVideoCaptureStreamParameterivNV", cstr): *fp_glVideoCaptureStreamParameterivNV;
	let cstr = strings::to_c_with_buf("glViewport", cstr_buf): *const u8;
	glViewport = get_proc_address("glViewport", cstr): *fp_glViewport;
	let cstr = strings::to_c_with_buf("glViewportArrayv", cstr_buf): *const u8;
	glViewportArrayv = get_proc_address("glViewportArrayv", cstr): *fp_glViewportArrayv;
	let cstr = strings::to_c_with_buf("glViewportIndexedf", cstr_buf): *const u8;
	glViewportIndexedf = get_proc_address("glViewportIndexedf", cstr): *fp_glViewportIndexedf;
	let cstr = strings::to_c_with_buf("glViewportIndexedfv", cstr_buf): *const u8;
	glViewportIndexedfv = get_proc_address("glViewportIndexedfv", cstr): *fp_glViewportIndexedfv;
	let cstr = strings::to_c_with_buf("glViewportPositionWScaleNV", cstr_buf): *const u8;
	glViewportPositionWScaleNV = get_proc_address("glViewportPositionWScaleNV", cstr): *fp_glViewportPositionWScaleNV;
	let cstr = strings::to_c_with_buf("glViewportSwizzleNV", cstr_buf): *const u8;
	glViewportSwizzleNV = get_proc_address("glViewportSwizzleNV", cstr): *fp_glViewportSwizzleNV;
	let cstr = strings::to_c_with_buf("glWaitSemaphoreEXT", cstr_buf): *const u8;
	glWaitSemaphoreEXT = get_proc_address("glWaitSemaphoreEXT", cstr): *fp_glWaitSemaphoreEXT;
	let cstr = strings::to_c_with_buf("glWaitSemaphoreui64NVX", cstr_buf): *const u8;
	glWaitSemaphoreui64NVX = get_proc_address("glWaitSemaphoreui64NVX", cstr): *fp_glWaitSemaphoreui64NVX;
	let cstr = strings::to_c_with_buf("glWaitSync", cstr_buf): *const u8;
	glWaitSync = get_proc_address("glWaitSync", cstr): *fp_glWaitSync;
	let cstr = strings::to_c_with_buf("glWaitVkSemaphoreNV", cstr_buf): *const u8;
	glWaitVkSemaphoreNV = get_proc_address("glWaitVkSemaphoreNV", cstr): *fp_glWaitVkSemaphoreNV;
	let cstr = strings::to_c_with_buf("glWeightPathsNV", cstr_buf): *const u8;
	glWeightPathsNV = get_proc_address("glWeightPathsNV", cstr): *fp_glWeightPathsNV;
	let cstr = strings::to_c_with_buf("glWeightPointerARB", cstr_buf): *const u8;
	glWeightPointerARB = get_proc_address("glWeightPointerARB", cstr): *fp_glWeightPointerARB;
	let cstr = strings::to_c_with_buf("glWeightbvARB", cstr_buf): *const u8;
	glWeightbvARB = get_proc_address("glWeightbvARB", cstr): *fp_glWeightbvARB;
	let cstr = strings::to_c_with_buf("glWeightdvARB", cstr_buf): *const u8;
	glWeightdvARB = get_proc_address("glWeightdvARB", cstr): *fp_glWeightdvARB;
	let cstr = strings::to_c_with_buf("glWeightfvARB", cstr_buf): *const u8;
	glWeightfvARB = get_proc_address("glWeightfvARB", cstr): *fp_glWeightfvARB;
	let cstr = strings::to_c_with_buf("glWeightivARB", cstr_buf): *const u8;
	glWeightivARB = get_proc_address("glWeightivARB", cstr): *fp_glWeightivARB;
	let cstr = strings::to_c_with_buf("glWeightsvARB", cstr_buf): *const u8;
	glWeightsvARB = get_proc_address("glWeightsvARB", cstr): *fp_glWeightsvARB;
	let cstr = strings::to_c_with_buf("glWeightubvARB", cstr_buf): *const u8;
	glWeightubvARB = get_proc_address("glWeightubvARB", cstr): *fp_glWeightubvARB;
	let cstr = strings::to_c_with_buf("glWeightuivARB", cstr_buf): *const u8;
	glWeightuivARB = get_proc_address("glWeightuivARB", cstr): *fp_glWeightuivARB;
	let cstr = strings::to_c_with_buf("glWeightusvARB", cstr_buf): *const u8;
	glWeightusvARB = get_proc_address("glWeightusvARB", cstr): *fp_glWeightusvARB;
	let cstr = strings::to_c_with_buf("glWindowPos2d", cstr_buf): *const u8;
	glWindowPos2d = get_proc_address("glWindowPos2d", cstr): *fp_glWindowPos2d;
	let cstr = strings::to_c_with_buf("glWindowPos2dARB", cstr_buf): *const u8;
	glWindowPos2dARB = get_proc_address("glWindowPos2dARB", cstr): *fp_glWindowPos2dARB;
	let cstr = strings::to_c_with_buf("glWindowPos2dMESA", cstr_buf): *const u8;
	glWindowPos2dMESA = get_proc_address("glWindowPos2dMESA", cstr): *fp_glWindowPos2dMESA;
	let cstr = strings::to_c_with_buf("glWindowPos2dv", cstr_buf): *const u8;
	glWindowPos2dv = get_proc_address("glWindowPos2dv", cstr): *fp_glWindowPos2dv;
	let cstr = strings::to_c_with_buf("glWindowPos2dvARB", cstr_buf): *const u8;
	glWindowPos2dvARB = get_proc_address("glWindowPos2dvARB", cstr): *fp_glWindowPos2dvARB;
	let cstr = strings::to_c_with_buf("glWindowPos2dvMESA", cstr_buf): *const u8;
	glWindowPos2dvMESA = get_proc_address("glWindowPos2dvMESA", cstr): *fp_glWindowPos2dvMESA;
	let cstr = strings::to_c_with_buf("glWindowPos2f", cstr_buf): *const u8;
	glWindowPos2f = get_proc_address("glWindowPos2f", cstr): *fp_glWindowPos2f;
	let cstr = strings::to_c_with_buf("glWindowPos2fARB", cstr_buf): *const u8;
	glWindowPos2fARB = get_proc_address("glWindowPos2fARB", cstr): *fp_glWindowPos2fARB;
	let cstr = strings::to_c_with_buf("glWindowPos2fMESA", cstr_buf): *const u8;
	glWindowPos2fMESA = get_proc_address("glWindowPos2fMESA", cstr): *fp_glWindowPos2fMESA;
	let cstr = strings::to_c_with_buf("glWindowPos2fv", cstr_buf): *const u8;
	glWindowPos2fv = get_proc_address("glWindowPos2fv", cstr): *fp_glWindowPos2fv;
	let cstr = strings::to_c_with_buf("glWindowPos2fvARB", cstr_buf): *const u8;
	glWindowPos2fvARB = get_proc_address("glWindowPos2fvARB", cstr): *fp_glWindowPos2fvARB;
	let cstr = strings::to_c_with_buf("glWindowPos2fvMESA", cstr_buf): *const u8;
	glWindowPos2fvMESA = get_proc_address("glWindowPos2fvMESA", cstr): *fp_glWindowPos2fvMESA;
	let cstr = strings::to_c_with_buf("glWindowPos2i", cstr_buf): *const u8;
	glWindowPos2i = get_proc_address("glWindowPos2i", cstr): *fp_glWindowPos2i;
	let cstr = strings::to_c_with_buf("glWindowPos2iARB", cstr_buf): *const u8;
	glWindowPos2iARB = get_proc_address("glWindowPos2iARB", cstr): *fp_glWindowPos2iARB;
	let cstr = strings::to_c_with_buf("glWindowPos2iMESA", cstr_buf): *const u8;
	glWindowPos2iMESA = get_proc_address("glWindowPos2iMESA", cstr): *fp_glWindowPos2iMESA;
	let cstr = strings::to_c_with_buf("glWindowPos2iv", cstr_buf): *const u8;
	glWindowPos2iv = get_proc_address("glWindowPos2iv", cstr): *fp_glWindowPos2iv;
	let cstr = strings::to_c_with_buf("glWindowPos2ivARB", cstr_buf): *const u8;
	glWindowPos2ivARB = get_proc_address("glWindowPos2ivARB", cstr): *fp_glWindowPos2ivARB;
	let cstr = strings::to_c_with_buf("glWindowPos2ivMESA", cstr_buf): *const u8;
	glWindowPos2ivMESA = get_proc_address("glWindowPos2ivMESA", cstr): *fp_glWindowPos2ivMESA;
	let cstr = strings::to_c_with_buf("glWindowPos2s", cstr_buf): *const u8;
	glWindowPos2s = get_proc_address("glWindowPos2s", cstr): *fp_glWindowPos2s;
	let cstr = strings::to_c_with_buf("glWindowPos2sARB", cstr_buf): *const u8;
	glWindowPos2sARB = get_proc_address("glWindowPos2sARB", cstr): *fp_glWindowPos2sARB;
	let cstr = strings::to_c_with_buf("glWindowPos2sMESA", cstr_buf): *const u8;
	glWindowPos2sMESA = get_proc_address("glWindowPos2sMESA", cstr): *fp_glWindowPos2sMESA;
	let cstr = strings::to_c_with_buf("glWindowPos2sv", cstr_buf): *const u8;
	glWindowPos2sv = get_proc_address("glWindowPos2sv", cstr): *fp_glWindowPos2sv;
	let cstr = strings::to_c_with_buf("glWindowPos2svARB", cstr_buf): *const u8;
	glWindowPos2svARB = get_proc_address("glWindowPos2svARB", cstr): *fp_glWindowPos2svARB;
	let cstr = strings::to_c_with_buf("glWindowPos2svMESA", cstr_buf): *const u8;
	glWindowPos2svMESA = get_proc_address("glWindowPos2svMESA", cstr): *fp_glWindowPos2svMESA;
	let cstr = strings::to_c_with_buf("glWindowPos3d", cstr_buf): *const u8;
	glWindowPos3d = get_proc_address("glWindowPos3d", cstr): *fp_glWindowPos3d;
	let cstr = strings::to_c_with_buf("glWindowPos3dARB", cstr_buf): *const u8;
	glWindowPos3dARB = get_proc_address("glWindowPos3dARB", cstr): *fp_glWindowPos3dARB;
	let cstr = strings::to_c_with_buf("glWindowPos3dMESA", cstr_buf): *const u8;
	glWindowPos3dMESA = get_proc_address("glWindowPos3dMESA", cstr): *fp_glWindowPos3dMESA;
	let cstr = strings::to_c_with_buf("glWindowPos3dv", cstr_buf): *const u8;
	glWindowPos3dv = get_proc_address("glWindowPos3dv", cstr): *fp_glWindowPos3dv;
	let cstr = strings::to_c_with_buf("glWindowPos3dvARB", cstr_buf): *const u8;
	glWindowPos3dvARB = get_proc_address("glWindowPos3dvARB", cstr): *fp_glWindowPos3dvARB;
	let cstr = strings::to_c_with_buf("glWindowPos3dvMESA", cstr_buf): *const u8;
	glWindowPos3dvMESA = get_proc_address("glWindowPos3dvMESA", cstr): *fp_glWindowPos3dvMESA;
	let cstr = strings::to_c_with_buf("glWindowPos3f", cstr_buf): *const u8;
	glWindowPos3f = get_proc_address("glWindowPos3f", cstr): *fp_glWindowPos3f;
	let cstr = strings::to_c_with_buf("glWindowPos3fARB", cstr_buf): *const u8;
	glWindowPos3fARB = get_proc_address("glWindowPos3fARB", cstr): *fp_glWindowPos3fARB;
	let cstr = strings::to_c_with_buf("glWindowPos3fMESA", cstr_buf): *const u8;
	glWindowPos3fMESA = get_proc_address("glWindowPos3fMESA", cstr): *fp_glWindowPos3fMESA;
	let cstr = strings::to_c_with_buf("glWindowPos3fv", cstr_buf): *const u8;
	glWindowPos3fv = get_proc_address("glWindowPos3fv", cstr): *fp_glWindowPos3fv;
	let cstr = strings::to_c_with_buf("glWindowPos3fvARB", cstr_buf): *const u8;
	glWindowPos3fvARB = get_proc_address("glWindowPos3fvARB", cstr): *fp_glWindowPos3fvARB;
	let cstr = strings::to_c_with_buf("glWindowPos3fvMESA", cstr_buf): *const u8;
	glWindowPos3fvMESA = get_proc_address("glWindowPos3fvMESA", cstr): *fp_glWindowPos3fvMESA;
	let cstr = strings::to_c_with_buf("glWindowPos3i", cstr_buf): *const u8;
	glWindowPos3i = get_proc_address("glWindowPos3i", cstr): *fp_glWindowPos3i;
	let cstr = strings::to_c_with_buf("glWindowPos3iARB", cstr_buf): *const u8;
	glWindowPos3iARB = get_proc_address("glWindowPos3iARB", cstr): *fp_glWindowPos3iARB;
	let cstr = strings::to_c_with_buf("glWindowPos3iMESA", cstr_buf): *const u8;
	glWindowPos3iMESA = get_proc_address("glWindowPos3iMESA", cstr): *fp_glWindowPos3iMESA;
	let cstr = strings::to_c_with_buf("glWindowPos3iv", cstr_buf): *const u8;
	glWindowPos3iv = get_proc_address("glWindowPos3iv", cstr): *fp_glWindowPos3iv;
	let cstr = strings::to_c_with_buf("glWindowPos3ivARB", cstr_buf): *const u8;
	glWindowPos3ivARB = get_proc_address("glWindowPos3ivARB", cstr): *fp_glWindowPos3ivARB;
	let cstr = strings::to_c_with_buf("glWindowPos3ivMESA", cstr_buf): *const u8;
	glWindowPos3ivMESA = get_proc_address("glWindowPos3ivMESA", cstr): *fp_glWindowPos3ivMESA;
	let cstr = strings::to_c_with_buf("glWindowPos3s", cstr_buf): *const u8;
	glWindowPos3s = get_proc_address("glWindowPos3s", cstr): *fp_glWindowPos3s;
	let cstr = strings::to_c_with_buf("glWindowPos3sARB", cstr_buf): *const u8;
	glWindowPos3sARB = get_proc_address("glWindowPos3sARB", cstr): *fp_glWindowPos3sARB;
	let cstr = strings::to_c_with_buf("glWindowPos3sMESA", cstr_buf): *const u8;
	glWindowPos3sMESA = get_proc_address("glWindowPos3sMESA", cstr): *fp_glWindowPos3sMESA;
	let cstr = strings::to_c_with_buf("glWindowPos3sv", cstr_buf): *const u8;
	glWindowPos3sv = get_proc_address("glWindowPos3sv", cstr): *fp_glWindowPos3sv;
	let cstr = strings::to_c_with_buf("glWindowPos3svARB", cstr_buf): *const u8;
	glWindowPos3svARB = get_proc_address("glWindowPos3svARB", cstr): *fp_glWindowPos3svARB;
	let cstr = strings::to_c_with_buf("glWindowPos3svMESA", cstr_buf): *const u8;
	glWindowPos3svMESA = get_proc_address("glWindowPos3svMESA", cstr): *fp_glWindowPos3svMESA;
	let cstr = strings::to_c_with_buf("glWindowPos4dMESA", cstr_buf): *const u8;
	glWindowPos4dMESA = get_proc_address("glWindowPos4dMESA", cstr): *fp_glWindowPos4dMESA;
	let cstr = strings::to_c_with_buf("glWindowPos4dvMESA", cstr_buf): *const u8;
	glWindowPos4dvMESA = get_proc_address("glWindowPos4dvMESA", cstr): *fp_glWindowPos4dvMESA;
	let cstr = strings::to_c_with_buf("glWindowPos4fMESA", cstr_buf): *const u8;
	glWindowPos4fMESA = get_proc_address("glWindowPos4fMESA", cstr): *fp_glWindowPos4fMESA;
	let cstr = strings::to_c_with_buf("glWindowPos4fvMESA", cstr_buf): *const u8;
	glWindowPos4fvMESA = get_proc_address("glWindowPos4fvMESA", cstr): *fp_glWindowPos4fvMESA;
	let cstr = strings::to_c_with_buf("glWindowPos4iMESA", cstr_buf): *const u8;
	glWindowPos4iMESA = get_proc_address("glWindowPos4iMESA", cstr): *fp_glWindowPos4iMESA;
	let cstr = strings::to_c_with_buf("glWindowPos4ivMESA", cstr_buf): *const u8;
	glWindowPos4ivMESA = get_proc_address("glWindowPos4ivMESA", cstr): *fp_glWindowPos4ivMESA;
	let cstr = strings::to_c_with_buf("glWindowPos4sMESA", cstr_buf): *const u8;
	glWindowPos4sMESA = get_proc_address("glWindowPos4sMESA", cstr): *fp_glWindowPos4sMESA;
	let cstr = strings::to_c_with_buf("glWindowPos4svMESA", cstr_buf): *const u8;
	glWindowPos4svMESA = get_proc_address("glWindowPos4svMESA", cstr): *fp_glWindowPos4svMESA;
	let cstr = strings::to_c_with_buf("glWindowRectanglesEXT", cstr_buf): *const u8;
	glWindowRectanglesEXT = get_proc_address("glWindowRectanglesEXT", cstr): *fp_glWindowRectanglesEXT;
	let cstr = strings::to_c_with_buf("glWriteMaskEXT", cstr_buf): *const u8;
	glWriteMaskEXT = get_proc_address("glWriteMaskEXT", cstr): *fp_glWriteMaskEXT;
};

// Function loading with user loader
export type fp_get_proc_address = fn(procName: *const u8) *void;

export fn load_with_fn(user_get_proc_address: *fp_get_proc_address) void = {
	let cstr_buf = rt::malloc(2048): nullable *[*]u8;
	let cstr_buf = match (cstr_buf) {
	case null =>
		abort("Out of memory");
	case let p: *[*]u8 =>
		yield p;
	};
	defer { free(cstr_buf); };

	let cstr = strings::to_c_with_buf("glAccum", cstr_buf): *const u8;
	glAccum = user_get_proc_address(cstr): *fp_glAccum;
	let cstr = strings::to_c_with_buf("glAccumxOES", cstr_buf): *const u8;
	glAccumxOES = user_get_proc_address(cstr): *fp_glAccumxOES;
	let cstr = strings::to_c_with_buf("glAcquireKeyedMutexWin32EXT", cstr_buf): *const u8;
	glAcquireKeyedMutexWin32EXT = user_get_proc_address(cstr): *fp_glAcquireKeyedMutexWin32EXT;
	let cstr = strings::to_c_with_buf("glActiveProgramEXT", cstr_buf): *const u8;
	glActiveProgramEXT = user_get_proc_address(cstr): *fp_glActiveProgramEXT;
	let cstr = strings::to_c_with_buf("glActiveShaderProgram", cstr_buf): *const u8;
	glActiveShaderProgram = user_get_proc_address(cstr): *fp_glActiveShaderProgram;
	let cstr = strings::to_c_with_buf("glActiveStencilFaceEXT", cstr_buf): *const u8;
	glActiveStencilFaceEXT = user_get_proc_address(cstr): *fp_glActiveStencilFaceEXT;
	let cstr = strings::to_c_with_buf("glActiveTexture", cstr_buf): *const u8;
	glActiveTexture = user_get_proc_address(cstr): *fp_glActiveTexture;
	let cstr = strings::to_c_with_buf("glActiveTextureARB", cstr_buf): *const u8;
	glActiveTextureARB = user_get_proc_address(cstr): *fp_glActiveTextureARB;
	let cstr = strings::to_c_with_buf("glActiveVaryingNV", cstr_buf): *const u8;
	glActiveVaryingNV = user_get_proc_address(cstr): *fp_glActiveVaryingNV;
	let cstr = strings::to_c_with_buf("glAlphaFragmentOp1ATI", cstr_buf): *const u8;
	glAlphaFragmentOp1ATI = user_get_proc_address(cstr): *fp_glAlphaFragmentOp1ATI;
	let cstr = strings::to_c_with_buf("glAlphaFragmentOp2ATI", cstr_buf): *const u8;
	glAlphaFragmentOp2ATI = user_get_proc_address(cstr): *fp_glAlphaFragmentOp2ATI;
	let cstr = strings::to_c_with_buf("glAlphaFragmentOp3ATI", cstr_buf): *const u8;
	glAlphaFragmentOp3ATI = user_get_proc_address(cstr): *fp_glAlphaFragmentOp3ATI;
	let cstr = strings::to_c_with_buf("glAlphaFunc", cstr_buf): *const u8;
	glAlphaFunc = user_get_proc_address(cstr): *fp_glAlphaFunc;
	let cstr = strings::to_c_with_buf("glAlphaFuncxOES", cstr_buf): *const u8;
	glAlphaFuncxOES = user_get_proc_address(cstr): *fp_glAlphaFuncxOES;
	let cstr = strings::to_c_with_buf("glAlphaToCoverageDitherControlNV", cstr_buf): *const u8;
	glAlphaToCoverageDitherControlNV = user_get_proc_address(cstr): *fp_glAlphaToCoverageDitherControlNV;
	let cstr = strings::to_c_with_buf("glApplyFramebufferAttachmentCMAAINTEL", cstr_buf): *const u8;
	glApplyFramebufferAttachmentCMAAINTEL = user_get_proc_address(cstr): *fp_glApplyFramebufferAttachmentCMAAINTEL;
	let cstr = strings::to_c_with_buf("glApplyTextureEXT", cstr_buf): *const u8;
	glApplyTextureEXT = user_get_proc_address(cstr): *fp_glApplyTextureEXT;
	let cstr = strings::to_c_with_buf("glAreProgramsResidentNV", cstr_buf): *const u8;
	glAreProgramsResidentNV = user_get_proc_address(cstr): *fp_glAreProgramsResidentNV;
	let cstr = strings::to_c_with_buf("glAreTexturesResident", cstr_buf): *const u8;
	glAreTexturesResident = user_get_proc_address(cstr): *fp_glAreTexturesResident;
	let cstr = strings::to_c_with_buf("glAreTexturesResidentEXT", cstr_buf): *const u8;
	glAreTexturesResidentEXT = user_get_proc_address(cstr): *fp_glAreTexturesResidentEXT;
	let cstr = strings::to_c_with_buf("glArrayElement", cstr_buf): *const u8;
	glArrayElement = user_get_proc_address(cstr): *fp_glArrayElement;
	let cstr = strings::to_c_with_buf("glArrayElementEXT", cstr_buf): *const u8;
	glArrayElementEXT = user_get_proc_address(cstr): *fp_glArrayElementEXT;
	let cstr = strings::to_c_with_buf("glArrayObjectATI", cstr_buf): *const u8;
	glArrayObjectATI = user_get_proc_address(cstr): *fp_glArrayObjectATI;
	let cstr = strings::to_c_with_buf("glAsyncCopyBufferSubDataNVX", cstr_buf): *const u8;
	glAsyncCopyBufferSubDataNVX = user_get_proc_address(cstr): *fp_glAsyncCopyBufferSubDataNVX;
	let cstr = strings::to_c_with_buf("glAsyncCopyImageSubDataNVX", cstr_buf): *const u8;
	glAsyncCopyImageSubDataNVX = user_get_proc_address(cstr): *fp_glAsyncCopyImageSubDataNVX;
	let cstr = strings::to_c_with_buf("glAsyncMarkerSGIX", cstr_buf): *const u8;
	glAsyncMarkerSGIX = user_get_proc_address(cstr): *fp_glAsyncMarkerSGIX;
	let cstr = strings::to_c_with_buf("glAttachObjectARB", cstr_buf): *const u8;
	glAttachObjectARB = user_get_proc_address(cstr): *fp_glAttachObjectARB;
	let cstr = strings::to_c_with_buf("glAttachShader", cstr_buf): *const u8;
	glAttachShader = user_get_proc_address(cstr): *fp_glAttachShader;
	let cstr = strings::to_c_with_buf("glBegin", cstr_buf): *const u8;
	glBegin = user_get_proc_address(cstr): *fp_glBegin;
	let cstr = strings::to_c_with_buf("glBeginConditionalRenderNV", cstr_buf): *const u8;
	glBeginConditionalRenderNV = user_get_proc_address(cstr): *fp_glBeginConditionalRenderNV;
	let cstr = strings::to_c_with_buf("glBeginConditionalRenderNVX", cstr_buf): *const u8;
	glBeginConditionalRenderNVX = user_get_proc_address(cstr): *fp_glBeginConditionalRenderNVX;
	let cstr = strings::to_c_with_buf("glBeginFragmentShaderATI", cstr_buf): *const u8;
	glBeginFragmentShaderATI = user_get_proc_address(cstr): *fp_glBeginFragmentShaderATI;
	let cstr = strings::to_c_with_buf("glBeginOcclusionQueryNV", cstr_buf): *const u8;
	glBeginOcclusionQueryNV = user_get_proc_address(cstr): *fp_glBeginOcclusionQueryNV;
	let cstr = strings::to_c_with_buf("glBeginPerfMonitorAMD", cstr_buf): *const u8;
	glBeginPerfMonitorAMD = user_get_proc_address(cstr): *fp_glBeginPerfMonitorAMD;
	let cstr = strings::to_c_with_buf("glBeginPerfQueryINTEL", cstr_buf): *const u8;
	glBeginPerfQueryINTEL = user_get_proc_address(cstr): *fp_glBeginPerfQueryINTEL;
	let cstr = strings::to_c_with_buf("glBeginQuery", cstr_buf): *const u8;
	glBeginQuery = user_get_proc_address(cstr): *fp_glBeginQuery;
	let cstr = strings::to_c_with_buf("glBeginQueryARB", cstr_buf): *const u8;
	glBeginQueryARB = user_get_proc_address(cstr): *fp_glBeginQueryARB;
	let cstr = strings::to_c_with_buf("glBeginQueryIndexed", cstr_buf): *const u8;
	glBeginQueryIndexed = user_get_proc_address(cstr): *fp_glBeginQueryIndexed;
	let cstr = strings::to_c_with_buf("glBeginTransformFeedbackEXT", cstr_buf): *const u8;
	glBeginTransformFeedbackEXT = user_get_proc_address(cstr): *fp_glBeginTransformFeedbackEXT;
	let cstr = strings::to_c_with_buf("glBeginTransformFeedbackNV", cstr_buf): *const u8;
	glBeginTransformFeedbackNV = user_get_proc_address(cstr): *fp_glBeginTransformFeedbackNV;
	let cstr = strings::to_c_with_buf("glBeginVertexShaderEXT", cstr_buf): *const u8;
	glBeginVertexShaderEXT = user_get_proc_address(cstr): *fp_glBeginVertexShaderEXT;
	let cstr = strings::to_c_with_buf("glBeginVideoCaptureNV", cstr_buf): *const u8;
	glBeginVideoCaptureNV = user_get_proc_address(cstr): *fp_glBeginVideoCaptureNV;
	let cstr = strings::to_c_with_buf("glBindAttribLocation", cstr_buf): *const u8;
	glBindAttribLocation = user_get_proc_address(cstr): *fp_glBindAttribLocation;
	let cstr = strings::to_c_with_buf("glBindAttribLocationARB", cstr_buf): *const u8;
	glBindAttribLocationARB = user_get_proc_address(cstr): *fp_glBindAttribLocationARB;
	let cstr = strings::to_c_with_buf("glBindBuffer", cstr_buf): *const u8;
	glBindBuffer = user_get_proc_address(cstr): *fp_glBindBuffer;
	let cstr = strings::to_c_with_buf("glBindBufferARB", cstr_buf): *const u8;
	glBindBufferARB = user_get_proc_address(cstr): *fp_glBindBufferARB;
	let cstr = strings::to_c_with_buf("glBindBufferBase", cstr_buf): *const u8;
	glBindBufferBase = user_get_proc_address(cstr): *fp_glBindBufferBase;
	let cstr = strings::to_c_with_buf("glBindBufferBaseEXT", cstr_buf): *const u8;
	glBindBufferBaseEXT = user_get_proc_address(cstr): *fp_glBindBufferBaseEXT;
	let cstr = strings::to_c_with_buf("glBindBufferBaseNV", cstr_buf): *const u8;
	glBindBufferBaseNV = user_get_proc_address(cstr): *fp_glBindBufferBaseNV;
	let cstr = strings::to_c_with_buf("glBindBufferOffsetEXT", cstr_buf): *const u8;
	glBindBufferOffsetEXT = user_get_proc_address(cstr): *fp_glBindBufferOffsetEXT;
	let cstr = strings::to_c_with_buf("glBindBufferOffsetNV", cstr_buf): *const u8;
	glBindBufferOffsetNV = user_get_proc_address(cstr): *fp_glBindBufferOffsetNV;
	let cstr = strings::to_c_with_buf("glBindBufferRange", cstr_buf): *const u8;
	glBindBufferRange = user_get_proc_address(cstr): *fp_glBindBufferRange;
	let cstr = strings::to_c_with_buf("glBindBufferRangeEXT", cstr_buf): *const u8;
	glBindBufferRangeEXT = user_get_proc_address(cstr): *fp_glBindBufferRangeEXT;
	let cstr = strings::to_c_with_buf("glBindBufferRangeNV", cstr_buf): *const u8;
	glBindBufferRangeNV = user_get_proc_address(cstr): *fp_glBindBufferRangeNV;
	let cstr = strings::to_c_with_buf("glBindBuffersBase", cstr_buf): *const u8;
	glBindBuffersBase = user_get_proc_address(cstr): *fp_glBindBuffersBase;
	let cstr = strings::to_c_with_buf("glBindBuffersRange", cstr_buf): *const u8;
	glBindBuffersRange = user_get_proc_address(cstr): *fp_glBindBuffersRange;
	let cstr = strings::to_c_with_buf("glBindFragDataLocationEXT", cstr_buf): *const u8;
	glBindFragDataLocationEXT = user_get_proc_address(cstr): *fp_glBindFragDataLocationEXT;
	let cstr = strings::to_c_with_buf("glBindFragDataLocationIndexed", cstr_buf): *const u8;
	glBindFragDataLocationIndexed = user_get_proc_address(cstr): *fp_glBindFragDataLocationIndexed;
	let cstr = strings::to_c_with_buf("glBindFragmentShaderATI", cstr_buf): *const u8;
	glBindFragmentShaderATI = user_get_proc_address(cstr): *fp_glBindFragmentShaderATI;
	let cstr = strings::to_c_with_buf("glBindFramebuffer", cstr_buf): *const u8;
	glBindFramebuffer = user_get_proc_address(cstr): *fp_glBindFramebuffer;
	let cstr = strings::to_c_with_buf("glBindFramebufferEXT", cstr_buf): *const u8;
	glBindFramebufferEXT = user_get_proc_address(cstr): *fp_glBindFramebufferEXT;
	let cstr = strings::to_c_with_buf("glBindImageTexture", cstr_buf): *const u8;
	glBindImageTexture = user_get_proc_address(cstr): *fp_glBindImageTexture;
	let cstr = strings::to_c_with_buf("glBindImageTextureEXT", cstr_buf): *const u8;
	glBindImageTextureEXT = user_get_proc_address(cstr): *fp_glBindImageTextureEXT;
	let cstr = strings::to_c_with_buf("glBindImageTextures", cstr_buf): *const u8;
	glBindImageTextures = user_get_proc_address(cstr): *fp_glBindImageTextures;
	let cstr = strings::to_c_with_buf("glBindLightParameterEXT", cstr_buf): *const u8;
	glBindLightParameterEXT = user_get_proc_address(cstr): *fp_glBindLightParameterEXT;
	let cstr = strings::to_c_with_buf("glBindMaterialParameterEXT", cstr_buf): *const u8;
	glBindMaterialParameterEXT = user_get_proc_address(cstr): *fp_glBindMaterialParameterEXT;
	let cstr = strings::to_c_with_buf("glBindMultiTextureEXT", cstr_buf): *const u8;
	glBindMultiTextureEXT = user_get_proc_address(cstr): *fp_glBindMultiTextureEXT;
	let cstr = strings::to_c_with_buf("glBindParameterEXT", cstr_buf): *const u8;
	glBindParameterEXT = user_get_proc_address(cstr): *fp_glBindParameterEXT;
	let cstr = strings::to_c_with_buf("glBindProgramARB", cstr_buf): *const u8;
	glBindProgramARB = user_get_proc_address(cstr): *fp_glBindProgramARB;
	let cstr = strings::to_c_with_buf("glBindProgramNV", cstr_buf): *const u8;
	glBindProgramNV = user_get_proc_address(cstr): *fp_glBindProgramNV;
	let cstr = strings::to_c_with_buf("glBindProgramPipeline", cstr_buf): *const u8;
	glBindProgramPipeline = user_get_proc_address(cstr): *fp_glBindProgramPipeline;
	let cstr = strings::to_c_with_buf("glBindRenderbuffer", cstr_buf): *const u8;
	glBindRenderbuffer = user_get_proc_address(cstr): *fp_glBindRenderbuffer;
	let cstr = strings::to_c_with_buf("glBindRenderbufferEXT", cstr_buf): *const u8;
	glBindRenderbufferEXT = user_get_proc_address(cstr): *fp_glBindRenderbufferEXT;
	let cstr = strings::to_c_with_buf("glBindSampler", cstr_buf): *const u8;
	glBindSampler = user_get_proc_address(cstr): *fp_glBindSampler;
	let cstr = strings::to_c_with_buf("glBindSamplers", cstr_buf): *const u8;
	glBindSamplers = user_get_proc_address(cstr): *fp_glBindSamplers;
	let cstr = strings::to_c_with_buf("glBindShadingRateImageNV", cstr_buf): *const u8;
	glBindShadingRateImageNV = user_get_proc_address(cstr): *fp_glBindShadingRateImageNV;
	let cstr = strings::to_c_with_buf("glBindTexGenParameterEXT", cstr_buf): *const u8;
	glBindTexGenParameterEXT = user_get_proc_address(cstr): *fp_glBindTexGenParameterEXT;
	let cstr = strings::to_c_with_buf("glBindTexture", cstr_buf): *const u8;
	glBindTexture = user_get_proc_address(cstr): *fp_glBindTexture;
	let cstr = strings::to_c_with_buf("glBindTextureEXT", cstr_buf): *const u8;
	glBindTextureEXT = user_get_proc_address(cstr): *fp_glBindTextureEXT;
	let cstr = strings::to_c_with_buf("glBindTextureUnit", cstr_buf): *const u8;
	glBindTextureUnit = user_get_proc_address(cstr): *fp_glBindTextureUnit;
	let cstr = strings::to_c_with_buf("glBindTextureUnitParameterEXT", cstr_buf): *const u8;
	glBindTextureUnitParameterEXT = user_get_proc_address(cstr): *fp_glBindTextureUnitParameterEXT;
	let cstr = strings::to_c_with_buf("glBindTextures", cstr_buf): *const u8;
	glBindTextures = user_get_proc_address(cstr): *fp_glBindTextures;
	let cstr = strings::to_c_with_buf("glBindTransformFeedback", cstr_buf): *const u8;
	glBindTransformFeedback = user_get_proc_address(cstr): *fp_glBindTransformFeedback;
	let cstr = strings::to_c_with_buf("glBindTransformFeedbackNV", cstr_buf): *const u8;
	glBindTransformFeedbackNV = user_get_proc_address(cstr): *fp_glBindTransformFeedbackNV;
	let cstr = strings::to_c_with_buf("glBindVertexArray", cstr_buf): *const u8;
	glBindVertexArray = user_get_proc_address(cstr): *fp_glBindVertexArray;
	let cstr = strings::to_c_with_buf("glBindVertexArrayAPPLE", cstr_buf): *const u8;
	glBindVertexArrayAPPLE = user_get_proc_address(cstr): *fp_glBindVertexArrayAPPLE;
	let cstr = strings::to_c_with_buf("glBindVertexBuffer", cstr_buf): *const u8;
	glBindVertexBuffer = user_get_proc_address(cstr): *fp_glBindVertexBuffer;
	let cstr = strings::to_c_with_buf("glBindVertexBuffers", cstr_buf): *const u8;
	glBindVertexBuffers = user_get_proc_address(cstr): *fp_glBindVertexBuffers;
	let cstr = strings::to_c_with_buf("glBindVertexShaderEXT", cstr_buf): *const u8;
	glBindVertexShaderEXT = user_get_proc_address(cstr): *fp_glBindVertexShaderEXT;
	let cstr = strings::to_c_with_buf("glBindVideoCaptureStreamBufferNV", cstr_buf): *const u8;
	glBindVideoCaptureStreamBufferNV = user_get_proc_address(cstr): *fp_glBindVideoCaptureStreamBufferNV;
	let cstr = strings::to_c_with_buf("glBindVideoCaptureStreamTextureNV", cstr_buf): *const u8;
	glBindVideoCaptureStreamTextureNV = user_get_proc_address(cstr): *fp_glBindVideoCaptureStreamTextureNV;
	let cstr = strings::to_c_with_buf("glBinormal3bEXT", cstr_buf): *const u8;
	glBinormal3bEXT = user_get_proc_address(cstr): *fp_glBinormal3bEXT;
	let cstr = strings::to_c_with_buf("glBinormal3bvEXT", cstr_buf): *const u8;
	glBinormal3bvEXT = user_get_proc_address(cstr): *fp_glBinormal3bvEXT;
	let cstr = strings::to_c_with_buf("glBinormal3dEXT", cstr_buf): *const u8;
	glBinormal3dEXT = user_get_proc_address(cstr): *fp_glBinormal3dEXT;
	let cstr = strings::to_c_with_buf("glBinormal3dvEXT", cstr_buf): *const u8;
	glBinormal3dvEXT = user_get_proc_address(cstr): *fp_glBinormal3dvEXT;
	let cstr = strings::to_c_with_buf("glBinormal3fEXT", cstr_buf): *const u8;
	glBinormal3fEXT = user_get_proc_address(cstr): *fp_glBinormal3fEXT;
	let cstr = strings::to_c_with_buf("glBinormal3fvEXT", cstr_buf): *const u8;
	glBinormal3fvEXT = user_get_proc_address(cstr): *fp_glBinormal3fvEXT;
	let cstr = strings::to_c_with_buf("glBinormal3iEXT", cstr_buf): *const u8;
	glBinormal3iEXT = user_get_proc_address(cstr): *fp_glBinormal3iEXT;
	let cstr = strings::to_c_with_buf("glBinormal3ivEXT", cstr_buf): *const u8;
	glBinormal3ivEXT = user_get_proc_address(cstr): *fp_glBinormal3ivEXT;
	let cstr = strings::to_c_with_buf("glBinormal3sEXT", cstr_buf): *const u8;
	glBinormal3sEXT = user_get_proc_address(cstr): *fp_glBinormal3sEXT;
	let cstr = strings::to_c_with_buf("glBinormal3svEXT", cstr_buf): *const u8;
	glBinormal3svEXT = user_get_proc_address(cstr): *fp_glBinormal3svEXT;
	let cstr = strings::to_c_with_buf("glBinormalPointerEXT", cstr_buf): *const u8;
	glBinormalPointerEXT = user_get_proc_address(cstr): *fp_glBinormalPointerEXT;
	let cstr = strings::to_c_with_buf("glBitmap", cstr_buf): *const u8;
	glBitmap = user_get_proc_address(cstr): *fp_glBitmap;
	let cstr = strings::to_c_with_buf("glBitmapxOES", cstr_buf): *const u8;
	glBitmapxOES = user_get_proc_address(cstr): *fp_glBitmapxOES;
	let cstr = strings::to_c_with_buf("glBlendBarrierKHR", cstr_buf): *const u8;
	glBlendBarrierKHR = user_get_proc_address(cstr): *fp_glBlendBarrierKHR;
	let cstr = strings::to_c_with_buf("glBlendBarrierNV", cstr_buf): *const u8;
	glBlendBarrierNV = user_get_proc_address(cstr): *fp_glBlendBarrierNV;
	let cstr = strings::to_c_with_buf("glBlendColor", cstr_buf): *const u8;
	glBlendColor = user_get_proc_address(cstr): *fp_glBlendColor;
	let cstr = strings::to_c_with_buf("glBlendColorEXT", cstr_buf): *const u8;
	glBlendColorEXT = user_get_proc_address(cstr): *fp_glBlendColorEXT;
	let cstr = strings::to_c_with_buf("glBlendColorxOES", cstr_buf): *const u8;
	glBlendColorxOES = user_get_proc_address(cstr): *fp_glBlendColorxOES;
	let cstr = strings::to_c_with_buf("glBlendEquation", cstr_buf): *const u8;
	glBlendEquation = user_get_proc_address(cstr): *fp_glBlendEquation;
	let cstr = strings::to_c_with_buf("glBlendEquationEXT", cstr_buf): *const u8;
	glBlendEquationEXT = user_get_proc_address(cstr): *fp_glBlendEquationEXT;
	let cstr = strings::to_c_with_buf("glBlendEquationIndexedAMD", cstr_buf): *const u8;
	glBlendEquationIndexedAMD = user_get_proc_address(cstr): *fp_glBlendEquationIndexedAMD;
	let cstr = strings::to_c_with_buf("glBlendEquationSeparate", cstr_buf): *const u8;
	glBlendEquationSeparate = user_get_proc_address(cstr): *fp_glBlendEquationSeparate;
	let cstr = strings::to_c_with_buf("glBlendEquationSeparateEXT", cstr_buf): *const u8;
	glBlendEquationSeparateEXT = user_get_proc_address(cstr): *fp_glBlendEquationSeparateEXT;
	let cstr = strings::to_c_with_buf("glBlendEquationSeparateIndexedAMD", cstr_buf): *const u8;
	glBlendEquationSeparateIndexedAMD = user_get_proc_address(cstr): *fp_glBlendEquationSeparateIndexedAMD;
	let cstr = strings::to_c_with_buf("glBlendEquationSeparateiARB", cstr_buf): *const u8;
	glBlendEquationSeparateiARB = user_get_proc_address(cstr): *fp_glBlendEquationSeparateiARB;
	let cstr = strings::to_c_with_buf("glBlendEquationiARB", cstr_buf): *const u8;
	glBlendEquationiARB = user_get_proc_address(cstr): *fp_glBlendEquationiARB;
	let cstr = strings::to_c_with_buf("glBlendFunc", cstr_buf): *const u8;
	glBlendFunc = user_get_proc_address(cstr): *fp_glBlendFunc;
	let cstr = strings::to_c_with_buf("glBlendFuncIndexedAMD", cstr_buf): *const u8;
	glBlendFuncIndexedAMD = user_get_proc_address(cstr): *fp_glBlendFuncIndexedAMD;
	let cstr = strings::to_c_with_buf("glBlendFuncSeparate", cstr_buf): *const u8;
	glBlendFuncSeparate = user_get_proc_address(cstr): *fp_glBlendFuncSeparate;
	let cstr = strings::to_c_with_buf("glBlendFuncSeparateEXT", cstr_buf): *const u8;
	glBlendFuncSeparateEXT = user_get_proc_address(cstr): *fp_glBlendFuncSeparateEXT;
	let cstr = strings::to_c_with_buf("glBlendFuncSeparateINGR", cstr_buf): *const u8;
	glBlendFuncSeparateINGR = user_get_proc_address(cstr): *fp_glBlendFuncSeparateINGR;
	let cstr = strings::to_c_with_buf("glBlendFuncSeparateIndexedAMD", cstr_buf): *const u8;
	glBlendFuncSeparateIndexedAMD = user_get_proc_address(cstr): *fp_glBlendFuncSeparateIndexedAMD;
	let cstr = strings::to_c_with_buf("glBlendFuncSeparateiARB", cstr_buf): *const u8;
	glBlendFuncSeparateiARB = user_get_proc_address(cstr): *fp_glBlendFuncSeparateiARB;
	let cstr = strings::to_c_with_buf("glBlendFunciARB", cstr_buf): *const u8;
	glBlendFunciARB = user_get_proc_address(cstr): *fp_glBlendFunciARB;
	let cstr = strings::to_c_with_buf("glBlendParameteriNV", cstr_buf): *const u8;
	glBlendParameteriNV = user_get_proc_address(cstr): *fp_glBlendParameteriNV;
	let cstr = strings::to_c_with_buf("glBlitFramebuffer", cstr_buf): *const u8;
	glBlitFramebuffer = user_get_proc_address(cstr): *fp_glBlitFramebuffer;
	let cstr = strings::to_c_with_buf("glBlitFramebufferEXT", cstr_buf): *const u8;
	glBlitFramebufferEXT = user_get_proc_address(cstr): *fp_glBlitFramebufferEXT;
	let cstr = strings::to_c_with_buf("glBlitNamedFramebuffer", cstr_buf): *const u8;
	glBlitNamedFramebuffer = user_get_proc_address(cstr): *fp_glBlitNamedFramebuffer;
	let cstr = strings::to_c_with_buf("glBufferAddressRangeNV", cstr_buf): *const u8;
	glBufferAddressRangeNV = user_get_proc_address(cstr): *fp_glBufferAddressRangeNV;
	let cstr = strings::to_c_with_buf("glBufferAttachMemoryNV", cstr_buf): *const u8;
	glBufferAttachMemoryNV = user_get_proc_address(cstr): *fp_glBufferAttachMemoryNV;
	let cstr = strings::to_c_with_buf("glBufferData", cstr_buf): *const u8;
	glBufferData = user_get_proc_address(cstr): *fp_glBufferData;
	let cstr = strings::to_c_with_buf("glBufferDataARB", cstr_buf): *const u8;
	glBufferDataARB = user_get_proc_address(cstr): *fp_glBufferDataARB;
	let cstr = strings::to_c_with_buf("glBufferPageCommitmentARB", cstr_buf): *const u8;
	glBufferPageCommitmentARB = user_get_proc_address(cstr): *fp_glBufferPageCommitmentARB;
	let cstr = strings::to_c_with_buf("glBufferPageCommitmentMemNV", cstr_buf): *const u8;
	glBufferPageCommitmentMemNV = user_get_proc_address(cstr): *fp_glBufferPageCommitmentMemNV;
	let cstr = strings::to_c_with_buf("glBufferParameteriAPPLE", cstr_buf): *const u8;
	glBufferParameteriAPPLE = user_get_proc_address(cstr): *fp_glBufferParameteriAPPLE;
	let cstr = strings::to_c_with_buf("glBufferStorage", cstr_buf): *const u8;
	glBufferStorage = user_get_proc_address(cstr): *fp_glBufferStorage;
	let cstr = strings::to_c_with_buf("glBufferStorageExternalEXT", cstr_buf): *const u8;
	glBufferStorageExternalEXT = user_get_proc_address(cstr): *fp_glBufferStorageExternalEXT;
	let cstr = strings::to_c_with_buf("glBufferStorageMemEXT", cstr_buf): *const u8;
	glBufferStorageMemEXT = user_get_proc_address(cstr): *fp_glBufferStorageMemEXT;
	let cstr = strings::to_c_with_buf("glBufferSubData", cstr_buf): *const u8;
	glBufferSubData = user_get_proc_address(cstr): *fp_glBufferSubData;
	let cstr = strings::to_c_with_buf("glBufferSubDataARB", cstr_buf): *const u8;
	glBufferSubDataARB = user_get_proc_address(cstr): *fp_glBufferSubDataARB;
	let cstr = strings::to_c_with_buf("glCallCommandListNV", cstr_buf): *const u8;
	glCallCommandListNV = user_get_proc_address(cstr): *fp_glCallCommandListNV;
	let cstr = strings::to_c_with_buf("glCallList", cstr_buf): *const u8;
	glCallList = user_get_proc_address(cstr): *fp_glCallList;
	let cstr = strings::to_c_with_buf("glCallLists", cstr_buf): *const u8;
	glCallLists = user_get_proc_address(cstr): *fp_glCallLists;
	let cstr = strings::to_c_with_buf("glCheckFramebufferStatus", cstr_buf): *const u8;
	glCheckFramebufferStatus = user_get_proc_address(cstr): *fp_glCheckFramebufferStatus;
	let cstr = strings::to_c_with_buf("glCheckFramebufferStatusEXT", cstr_buf): *const u8;
	glCheckFramebufferStatusEXT = user_get_proc_address(cstr): *fp_glCheckFramebufferStatusEXT;
	let cstr = strings::to_c_with_buf("glCheckNamedFramebufferStatus", cstr_buf): *const u8;
	glCheckNamedFramebufferStatus = user_get_proc_address(cstr): *fp_glCheckNamedFramebufferStatus;
	let cstr = strings::to_c_with_buf("glCheckNamedFramebufferStatusEXT", cstr_buf): *const u8;
	glCheckNamedFramebufferStatusEXT = user_get_proc_address(cstr): *fp_glCheckNamedFramebufferStatusEXT;
	let cstr = strings::to_c_with_buf("glClampColorARB", cstr_buf): *const u8;
	glClampColorARB = user_get_proc_address(cstr): *fp_glClampColorARB;
	let cstr = strings::to_c_with_buf("glClear", cstr_buf): *const u8;
	glClear = user_get_proc_address(cstr): *fp_glClear;
	let cstr = strings::to_c_with_buf("glClearAccum", cstr_buf): *const u8;
	glClearAccum = user_get_proc_address(cstr): *fp_glClearAccum;
	let cstr = strings::to_c_with_buf("glClearAccumxOES", cstr_buf): *const u8;
	glClearAccumxOES = user_get_proc_address(cstr): *fp_glClearAccumxOES;
	let cstr = strings::to_c_with_buf("glClearBufferData", cstr_buf): *const u8;
	glClearBufferData = user_get_proc_address(cstr): *fp_glClearBufferData;
	let cstr = strings::to_c_with_buf("glClearBufferSubData", cstr_buf): *const u8;
	glClearBufferSubData = user_get_proc_address(cstr): *fp_glClearBufferSubData;
	let cstr = strings::to_c_with_buf("glClearColor", cstr_buf): *const u8;
	glClearColor = user_get_proc_address(cstr): *fp_glClearColor;
	let cstr = strings::to_c_with_buf("glClearColorIiEXT", cstr_buf): *const u8;
	glClearColorIiEXT = user_get_proc_address(cstr): *fp_glClearColorIiEXT;
	let cstr = strings::to_c_with_buf("glClearColorIuiEXT", cstr_buf): *const u8;
	glClearColorIuiEXT = user_get_proc_address(cstr): *fp_glClearColorIuiEXT;
	let cstr = strings::to_c_with_buf("glClearColorxOES", cstr_buf): *const u8;
	glClearColorxOES = user_get_proc_address(cstr): *fp_glClearColorxOES;
	let cstr = strings::to_c_with_buf("glClearDepth", cstr_buf): *const u8;
	glClearDepth = user_get_proc_address(cstr): *fp_glClearDepth;
	let cstr = strings::to_c_with_buf("glClearDepthdNV", cstr_buf): *const u8;
	glClearDepthdNV = user_get_proc_address(cstr): *fp_glClearDepthdNV;
	let cstr = strings::to_c_with_buf("glClearDepthf", cstr_buf): *const u8;
	glClearDepthf = user_get_proc_address(cstr): *fp_glClearDepthf;
	let cstr = strings::to_c_with_buf("glClearDepthfOES", cstr_buf): *const u8;
	glClearDepthfOES = user_get_proc_address(cstr): *fp_glClearDepthfOES;
	let cstr = strings::to_c_with_buf("glClearDepthxOES", cstr_buf): *const u8;
	glClearDepthxOES = user_get_proc_address(cstr): *fp_glClearDepthxOES;
	let cstr = strings::to_c_with_buf("glClearIndex", cstr_buf): *const u8;
	glClearIndex = user_get_proc_address(cstr): *fp_glClearIndex;
	let cstr = strings::to_c_with_buf("glClearNamedBufferData", cstr_buf): *const u8;
	glClearNamedBufferData = user_get_proc_address(cstr): *fp_glClearNamedBufferData;
	let cstr = strings::to_c_with_buf("glClearNamedBufferDataEXT", cstr_buf): *const u8;
	glClearNamedBufferDataEXT = user_get_proc_address(cstr): *fp_glClearNamedBufferDataEXT;
	let cstr = strings::to_c_with_buf("glClearNamedBufferSubData", cstr_buf): *const u8;
	glClearNamedBufferSubData = user_get_proc_address(cstr): *fp_glClearNamedBufferSubData;
	let cstr = strings::to_c_with_buf("glClearNamedBufferSubDataEXT", cstr_buf): *const u8;
	glClearNamedBufferSubDataEXT = user_get_proc_address(cstr): *fp_glClearNamedBufferSubDataEXT;
	let cstr = strings::to_c_with_buf("glClearNamedFramebufferfi", cstr_buf): *const u8;
	glClearNamedFramebufferfi = user_get_proc_address(cstr): *fp_glClearNamedFramebufferfi;
	let cstr = strings::to_c_with_buf("glClearNamedFramebufferfv", cstr_buf): *const u8;
	glClearNamedFramebufferfv = user_get_proc_address(cstr): *fp_glClearNamedFramebufferfv;
	let cstr = strings::to_c_with_buf("glClearNamedFramebufferiv", cstr_buf): *const u8;
	glClearNamedFramebufferiv = user_get_proc_address(cstr): *fp_glClearNamedFramebufferiv;
	let cstr = strings::to_c_with_buf("glClearNamedFramebufferuiv", cstr_buf): *const u8;
	glClearNamedFramebufferuiv = user_get_proc_address(cstr): *fp_glClearNamedFramebufferuiv;
	let cstr = strings::to_c_with_buf("glClearStencil", cstr_buf): *const u8;
	glClearStencil = user_get_proc_address(cstr): *fp_glClearStencil;
	let cstr = strings::to_c_with_buf("glClearTexImage", cstr_buf): *const u8;
	glClearTexImage = user_get_proc_address(cstr): *fp_glClearTexImage;
	let cstr = strings::to_c_with_buf("glClearTexSubImage", cstr_buf): *const u8;
	glClearTexSubImage = user_get_proc_address(cstr): *fp_glClearTexSubImage;
	let cstr = strings::to_c_with_buf("glClientActiveTexture", cstr_buf): *const u8;
	glClientActiveTexture = user_get_proc_address(cstr): *fp_glClientActiveTexture;
	let cstr = strings::to_c_with_buf("glClientActiveTextureARB", cstr_buf): *const u8;
	glClientActiveTextureARB = user_get_proc_address(cstr): *fp_glClientActiveTextureARB;
	let cstr = strings::to_c_with_buf("glClientActiveVertexStreamATI", cstr_buf): *const u8;
	glClientActiveVertexStreamATI = user_get_proc_address(cstr): *fp_glClientActiveVertexStreamATI;
	let cstr = strings::to_c_with_buf("glClientAttribDefaultEXT", cstr_buf): *const u8;
	glClientAttribDefaultEXT = user_get_proc_address(cstr): *fp_glClientAttribDefaultEXT;
	let cstr = strings::to_c_with_buf("glClientWaitSemaphoreui64NVX", cstr_buf): *const u8;
	glClientWaitSemaphoreui64NVX = user_get_proc_address(cstr): *fp_glClientWaitSemaphoreui64NVX;
	let cstr = strings::to_c_with_buf("glClientWaitSync", cstr_buf): *const u8;
	glClientWaitSync = user_get_proc_address(cstr): *fp_glClientWaitSync;
	let cstr = strings::to_c_with_buf("glClipControl", cstr_buf): *const u8;
	glClipControl = user_get_proc_address(cstr): *fp_glClipControl;
	let cstr = strings::to_c_with_buf("glClipPlane", cstr_buf): *const u8;
	glClipPlane = user_get_proc_address(cstr): *fp_glClipPlane;
	let cstr = strings::to_c_with_buf("glClipPlanefOES", cstr_buf): *const u8;
	glClipPlanefOES = user_get_proc_address(cstr): *fp_glClipPlanefOES;
	let cstr = strings::to_c_with_buf("glClipPlanexOES", cstr_buf): *const u8;
	glClipPlanexOES = user_get_proc_address(cstr): *fp_glClipPlanexOES;
	let cstr = strings::to_c_with_buf("glColor3b", cstr_buf): *const u8;
	glColor3b = user_get_proc_address(cstr): *fp_glColor3b;
	let cstr = strings::to_c_with_buf("glColor3bv", cstr_buf): *const u8;
	glColor3bv = user_get_proc_address(cstr): *fp_glColor3bv;
	let cstr = strings::to_c_with_buf("glColor3d", cstr_buf): *const u8;
	glColor3d = user_get_proc_address(cstr): *fp_glColor3d;
	let cstr = strings::to_c_with_buf("glColor3dv", cstr_buf): *const u8;
	glColor3dv = user_get_proc_address(cstr): *fp_glColor3dv;
	let cstr = strings::to_c_with_buf("glColor3f", cstr_buf): *const u8;
	glColor3f = user_get_proc_address(cstr): *fp_glColor3f;
	let cstr = strings::to_c_with_buf("glColor3fVertex3fSUN", cstr_buf): *const u8;
	glColor3fVertex3fSUN = user_get_proc_address(cstr): *fp_glColor3fVertex3fSUN;
	let cstr = strings::to_c_with_buf("glColor3fVertex3fvSUN", cstr_buf): *const u8;
	glColor3fVertex3fvSUN = user_get_proc_address(cstr): *fp_glColor3fVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glColor3fv", cstr_buf): *const u8;
	glColor3fv = user_get_proc_address(cstr): *fp_glColor3fv;
	let cstr = strings::to_c_with_buf("glColor3hNV", cstr_buf): *const u8;
	glColor3hNV = user_get_proc_address(cstr): *fp_glColor3hNV;
	let cstr = strings::to_c_with_buf("glColor3hvNV", cstr_buf): *const u8;
	glColor3hvNV = user_get_proc_address(cstr): *fp_glColor3hvNV;
	let cstr = strings::to_c_with_buf("glColor3i", cstr_buf): *const u8;
	glColor3i = user_get_proc_address(cstr): *fp_glColor3i;
	let cstr = strings::to_c_with_buf("glColor3iv", cstr_buf): *const u8;
	glColor3iv = user_get_proc_address(cstr): *fp_glColor3iv;
	let cstr = strings::to_c_with_buf("glColor3s", cstr_buf): *const u8;
	glColor3s = user_get_proc_address(cstr): *fp_glColor3s;
	let cstr = strings::to_c_with_buf("glColor3sv", cstr_buf): *const u8;
	glColor3sv = user_get_proc_address(cstr): *fp_glColor3sv;
	let cstr = strings::to_c_with_buf("glColor3ub", cstr_buf): *const u8;
	glColor3ub = user_get_proc_address(cstr): *fp_glColor3ub;
	let cstr = strings::to_c_with_buf("glColor3ubv", cstr_buf): *const u8;
	glColor3ubv = user_get_proc_address(cstr): *fp_glColor3ubv;
	let cstr = strings::to_c_with_buf("glColor3ui", cstr_buf): *const u8;
	glColor3ui = user_get_proc_address(cstr): *fp_glColor3ui;
	let cstr = strings::to_c_with_buf("glColor3uiv", cstr_buf): *const u8;
	glColor3uiv = user_get_proc_address(cstr): *fp_glColor3uiv;
	let cstr = strings::to_c_with_buf("glColor3us", cstr_buf): *const u8;
	glColor3us = user_get_proc_address(cstr): *fp_glColor3us;
	let cstr = strings::to_c_with_buf("glColor3usv", cstr_buf): *const u8;
	glColor3usv = user_get_proc_address(cstr): *fp_glColor3usv;
	let cstr = strings::to_c_with_buf("glColor3xOES", cstr_buf): *const u8;
	glColor3xOES = user_get_proc_address(cstr): *fp_glColor3xOES;
	let cstr = strings::to_c_with_buf("glColor3xvOES", cstr_buf): *const u8;
	glColor3xvOES = user_get_proc_address(cstr): *fp_glColor3xvOES;
	let cstr = strings::to_c_with_buf("glColor4b", cstr_buf): *const u8;
	glColor4b = user_get_proc_address(cstr): *fp_glColor4b;
	let cstr = strings::to_c_with_buf("glColor4bv", cstr_buf): *const u8;
	glColor4bv = user_get_proc_address(cstr): *fp_glColor4bv;
	let cstr = strings::to_c_with_buf("glColor4d", cstr_buf): *const u8;
	glColor4d = user_get_proc_address(cstr): *fp_glColor4d;
	let cstr = strings::to_c_with_buf("glColor4dv", cstr_buf): *const u8;
	glColor4dv = user_get_proc_address(cstr): *fp_glColor4dv;
	let cstr = strings::to_c_with_buf("glColor4f", cstr_buf): *const u8;
	glColor4f = user_get_proc_address(cstr): *fp_glColor4f;
	let cstr = strings::to_c_with_buf("glColor4fNormal3fVertex3fSUN", cstr_buf): *const u8;
	glColor4fNormal3fVertex3fSUN = user_get_proc_address(cstr): *fp_glColor4fNormal3fVertex3fSUN;
	let cstr = strings::to_c_with_buf("glColor4fNormal3fVertex3fvSUN", cstr_buf): *const u8;
	glColor4fNormal3fVertex3fvSUN = user_get_proc_address(cstr): *fp_glColor4fNormal3fVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glColor4fv", cstr_buf): *const u8;
	glColor4fv = user_get_proc_address(cstr): *fp_glColor4fv;
	let cstr = strings::to_c_with_buf("glColor4hNV", cstr_buf): *const u8;
	glColor4hNV = user_get_proc_address(cstr): *fp_glColor4hNV;
	let cstr = strings::to_c_with_buf("glColor4hvNV", cstr_buf): *const u8;
	glColor4hvNV = user_get_proc_address(cstr): *fp_glColor4hvNV;
	let cstr = strings::to_c_with_buf("glColor4i", cstr_buf): *const u8;
	glColor4i = user_get_proc_address(cstr): *fp_glColor4i;
	let cstr = strings::to_c_with_buf("glColor4iv", cstr_buf): *const u8;
	glColor4iv = user_get_proc_address(cstr): *fp_glColor4iv;
	let cstr = strings::to_c_with_buf("glColor4s", cstr_buf): *const u8;
	glColor4s = user_get_proc_address(cstr): *fp_glColor4s;
	let cstr = strings::to_c_with_buf("glColor4sv", cstr_buf): *const u8;
	glColor4sv = user_get_proc_address(cstr): *fp_glColor4sv;
	let cstr = strings::to_c_with_buf("glColor4ub", cstr_buf): *const u8;
	glColor4ub = user_get_proc_address(cstr): *fp_glColor4ub;
	let cstr = strings::to_c_with_buf("glColor4ubVertex2fSUN", cstr_buf): *const u8;
	glColor4ubVertex2fSUN = user_get_proc_address(cstr): *fp_glColor4ubVertex2fSUN;
	let cstr = strings::to_c_with_buf("glColor4ubVertex2fvSUN", cstr_buf): *const u8;
	glColor4ubVertex2fvSUN = user_get_proc_address(cstr): *fp_glColor4ubVertex2fvSUN;
	let cstr = strings::to_c_with_buf("glColor4ubVertex3fSUN", cstr_buf): *const u8;
	glColor4ubVertex3fSUN = user_get_proc_address(cstr): *fp_glColor4ubVertex3fSUN;
	let cstr = strings::to_c_with_buf("glColor4ubVertex3fvSUN", cstr_buf): *const u8;
	glColor4ubVertex3fvSUN = user_get_proc_address(cstr): *fp_glColor4ubVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glColor4ubv", cstr_buf): *const u8;
	glColor4ubv = user_get_proc_address(cstr): *fp_glColor4ubv;
	let cstr = strings::to_c_with_buf("glColor4ui", cstr_buf): *const u8;
	glColor4ui = user_get_proc_address(cstr): *fp_glColor4ui;
	let cstr = strings::to_c_with_buf("glColor4uiv", cstr_buf): *const u8;
	glColor4uiv = user_get_proc_address(cstr): *fp_glColor4uiv;
	let cstr = strings::to_c_with_buf("glColor4us", cstr_buf): *const u8;
	glColor4us = user_get_proc_address(cstr): *fp_glColor4us;
	let cstr = strings::to_c_with_buf("glColor4usv", cstr_buf): *const u8;
	glColor4usv = user_get_proc_address(cstr): *fp_glColor4usv;
	let cstr = strings::to_c_with_buf("glColor4xOES", cstr_buf): *const u8;
	glColor4xOES = user_get_proc_address(cstr): *fp_glColor4xOES;
	let cstr = strings::to_c_with_buf("glColor4xvOES", cstr_buf): *const u8;
	glColor4xvOES = user_get_proc_address(cstr): *fp_glColor4xvOES;
	let cstr = strings::to_c_with_buf("glColorFormatNV", cstr_buf): *const u8;
	glColorFormatNV = user_get_proc_address(cstr): *fp_glColorFormatNV;
	let cstr = strings::to_c_with_buf("glColorFragmentOp1ATI", cstr_buf): *const u8;
	glColorFragmentOp1ATI = user_get_proc_address(cstr): *fp_glColorFragmentOp1ATI;
	let cstr = strings::to_c_with_buf("glColorFragmentOp2ATI", cstr_buf): *const u8;
	glColorFragmentOp2ATI = user_get_proc_address(cstr): *fp_glColorFragmentOp2ATI;
	let cstr = strings::to_c_with_buf("glColorFragmentOp3ATI", cstr_buf): *const u8;
	glColorFragmentOp3ATI = user_get_proc_address(cstr): *fp_glColorFragmentOp3ATI;
	let cstr = strings::to_c_with_buf("glColorMask", cstr_buf): *const u8;
	glColorMask = user_get_proc_address(cstr): *fp_glColorMask;
	let cstr = strings::to_c_with_buf("glColorMaskIndexedEXT", cstr_buf): *const u8;
	glColorMaskIndexedEXT = user_get_proc_address(cstr): *fp_glColorMaskIndexedEXT;
	let cstr = strings::to_c_with_buf("glColorMaterial", cstr_buf): *const u8;
	glColorMaterial = user_get_proc_address(cstr): *fp_glColorMaterial;
	let cstr = strings::to_c_with_buf("glColorPointer", cstr_buf): *const u8;
	glColorPointer = user_get_proc_address(cstr): *fp_glColorPointer;
	let cstr = strings::to_c_with_buf("glColorPointerEXT", cstr_buf): *const u8;
	glColorPointerEXT = user_get_proc_address(cstr): *fp_glColorPointerEXT;
	let cstr = strings::to_c_with_buf("glColorPointerListIBM", cstr_buf): *const u8;
	glColorPointerListIBM = user_get_proc_address(cstr): *fp_glColorPointerListIBM;
	let cstr = strings::to_c_with_buf("glColorPointervINTEL", cstr_buf): *const u8;
	glColorPointervINTEL = user_get_proc_address(cstr): *fp_glColorPointervINTEL;
	let cstr = strings::to_c_with_buf("glColorSubTableEXT", cstr_buf): *const u8;
	glColorSubTableEXT = user_get_proc_address(cstr): *fp_glColorSubTableEXT;
	let cstr = strings::to_c_with_buf("glColorTableEXT", cstr_buf): *const u8;
	glColorTableEXT = user_get_proc_address(cstr): *fp_glColorTableEXT;
	let cstr = strings::to_c_with_buf("glColorTableParameterfvSGI", cstr_buf): *const u8;
	glColorTableParameterfvSGI = user_get_proc_address(cstr): *fp_glColorTableParameterfvSGI;
	let cstr = strings::to_c_with_buf("glColorTableParameterivSGI", cstr_buf): *const u8;
	glColorTableParameterivSGI = user_get_proc_address(cstr): *fp_glColorTableParameterivSGI;
	let cstr = strings::to_c_with_buf("glColorTableSGI", cstr_buf): *const u8;
	glColorTableSGI = user_get_proc_address(cstr): *fp_glColorTableSGI;
	let cstr = strings::to_c_with_buf("glCombinerInputNV", cstr_buf): *const u8;
	glCombinerInputNV = user_get_proc_address(cstr): *fp_glCombinerInputNV;
	let cstr = strings::to_c_with_buf("glCombinerOutputNV", cstr_buf): *const u8;
	glCombinerOutputNV = user_get_proc_address(cstr): *fp_glCombinerOutputNV;
	let cstr = strings::to_c_with_buf("glCombinerParameterfNV", cstr_buf): *const u8;
	glCombinerParameterfNV = user_get_proc_address(cstr): *fp_glCombinerParameterfNV;
	let cstr = strings::to_c_with_buf("glCombinerParameterfvNV", cstr_buf): *const u8;
	glCombinerParameterfvNV = user_get_proc_address(cstr): *fp_glCombinerParameterfvNV;
	let cstr = strings::to_c_with_buf("glCombinerParameteriNV", cstr_buf): *const u8;
	glCombinerParameteriNV = user_get_proc_address(cstr): *fp_glCombinerParameteriNV;
	let cstr = strings::to_c_with_buf("glCombinerParameterivNV", cstr_buf): *const u8;
	glCombinerParameterivNV = user_get_proc_address(cstr): *fp_glCombinerParameterivNV;
	let cstr = strings::to_c_with_buf("glCombinerStageParameterfvNV", cstr_buf): *const u8;
	glCombinerStageParameterfvNV = user_get_proc_address(cstr): *fp_glCombinerStageParameterfvNV;
	let cstr = strings::to_c_with_buf("glCommandListSegmentsNV", cstr_buf): *const u8;
	glCommandListSegmentsNV = user_get_proc_address(cstr): *fp_glCommandListSegmentsNV;
	let cstr = strings::to_c_with_buf("glCompileCommandListNV", cstr_buf): *const u8;
	glCompileCommandListNV = user_get_proc_address(cstr): *fp_glCompileCommandListNV;
	let cstr = strings::to_c_with_buf("glCompileShader", cstr_buf): *const u8;
	glCompileShader = user_get_proc_address(cstr): *fp_glCompileShader;
	let cstr = strings::to_c_with_buf("glCompileShaderARB", cstr_buf): *const u8;
	glCompileShaderARB = user_get_proc_address(cstr): *fp_glCompileShaderARB;
	let cstr = strings::to_c_with_buf("glCompileShaderIncludeARB", cstr_buf): *const u8;
	glCompileShaderIncludeARB = user_get_proc_address(cstr): *fp_glCompileShaderIncludeARB;
	let cstr = strings::to_c_with_buf("glCompressedMultiTexImage1DEXT", cstr_buf): *const u8;
	glCompressedMultiTexImage1DEXT = user_get_proc_address(cstr): *fp_glCompressedMultiTexImage1DEXT;
	let cstr = strings::to_c_with_buf("glCompressedMultiTexImage2DEXT", cstr_buf): *const u8;
	glCompressedMultiTexImage2DEXT = user_get_proc_address(cstr): *fp_glCompressedMultiTexImage2DEXT;
	let cstr = strings::to_c_with_buf("glCompressedMultiTexImage3DEXT", cstr_buf): *const u8;
	glCompressedMultiTexImage3DEXT = user_get_proc_address(cstr): *fp_glCompressedMultiTexImage3DEXT;
	let cstr = strings::to_c_with_buf("glCompressedMultiTexSubImage1DEXT", cstr_buf): *const u8;
	glCompressedMultiTexSubImage1DEXT = user_get_proc_address(cstr): *fp_glCompressedMultiTexSubImage1DEXT;
	let cstr = strings::to_c_with_buf("glCompressedMultiTexSubImage2DEXT", cstr_buf): *const u8;
	glCompressedMultiTexSubImage2DEXT = user_get_proc_address(cstr): *fp_glCompressedMultiTexSubImage2DEXT;
	let cstr = strings::to_c_with_buf("glCompressedMultiTexSubImage3DEXT", cstr_buf): *const u8;
	glCompressedMultiTexSubImage3DEXT = user_get_proc_address(cstr): *fp_glCompressedMultiTexSubImage3DEXT;
	let cstr = strings::to_c_with_buf("glCompressedTexImage1D", cstr_buf): *const u8;
	glCompressedTexImage1D = user_get_proc_address(cstr): *fp_glCompressedTexImage1D;
	let cstr = strings::to_c_with_buf("glCompressedTexImage1DARB", cstr_buf): *const u8;
	glCompressedTexImage1DARB = user_get_proc_address(cstr): *fp_glCompressedTexImage1DARB;
	let cstr = strings::to_c_with_buf("glCompressedTexImage2D", cstr_buf): *const u8;
	glCompressedTexImage2D = user_get_proc_address(cstr): *fp_glCompressedTexImage2D;
	let cstr = strings::to_c_with_buf("glCompressedTexImage2DARB", cstr_buf): *const u8;
	glCompressedTexImage2DARB = user_get_proc_address(cstr): *fp_glCompressedTexImage2DARB;
	let cstr = strings::to_c_with_buf("glCompressedTexImage3D", cstr_buf): *const u8;
	glCompressedTexImage3D = user_get_proc_address(cstr): *fp_glCompressedTexImage3D;
	let cstr = strings::to_c_with_buf("glCompressedTexImage3DARB", cstr_buf): *const u8;
	glCompressedTexImage3DARB = user_get_proc_address(cstr): *fp_glCompressedTexImage3DARB;
	let cstr = strings::to_c_with_buf("glCompressedTexSubImage1D", cstr_buf): *const u8;
	glCompressedTexSubImage1D = user_get_proc_address(cstr): *fp_glCompressedTexSubImage1D;
	let cstr = strings::to_c_with_buf("glCompressedTexSubImage1DARB", cstr_buf): *const u8;
	glCompressedTexSubImage1DARB = user_get_proc_address(cstr): *fp_glCompressedTexSubImage1DARB;
	let cstr = strings::to_c_with_buf("glCompressedTexSubImage2D", cstr_buf): *const u8;
	glCompressedTexSubImage2D = user_get_proc_address(cstr): *fp_glCompressedTexSubImage2D;
	let cstr = strings::to_c_with_buf("glCompressedTexSubImage2DARB", cstr_buf): *const u8;
	glCompressedTexSubImage2DARB = user_get_proc_address(cstr): *fp_glCompressedTexSubImage2DARB;
	let cstr = strings::to_c_with_buf("glCompressedTexSubImage3D", cstr_buf): *const u8;
	glCompressedTexSubImage3D = user_get_proc_address(cstr): *fp_glCompressedTexSubImage3D;
	let cstr = strings::to_c_with_buf("glCompressedTexSubImage3DARB", cstr_buf): *const u8;
	glCompressedTexSubImage3DARB = user_get_proc_address(cstr): *fp_glCompressedTexSubImage3DARB;
	let cstr = strings::to_c_with_buf("glCompressedTextureImage1DEXT", cstr_buf): *const u8;
	glCompressedTextureImage1DEXT = user_get_proc_address(cstr): *fp_glCompressedTextureImage1DEXT;
	let cstr = strings::to_c_with_buf("glCompressedTextureImage2DEXT", cstr_buf): *const u8;
	glCompressedTextureImage2DEXT = user_get_proc_address(cstr): *fp_glCompressedTextureImage2DEXT;
	let cstr = strings::to_c_with_buf("glCompressedTextureImage3DEXT", cstr_buf): *const u8;
	glCompressedTextureImage3DEXT = user_get_proc_address(cstr): *fp_glCompressedTextureImage3DEXT;
	let cstr = strings::to_c_with_buf("glCompressedTextureSubImage1D", cstr_buf): *const u8;
	glCompressedTextureSubImage1D = user_get_proc_address(cstr): *fp_glCompressedTextureSubImage1D;
	let cstr = strings::to_c_with_buf("glCompressedTextureSubImage1DEXT", cstr_buf): *const u8;
	glCompressedTextureSubImage1DEXT = user_get_proc_address(cstr): *fp_glCompressedTextureSubImage1DEXT;
	let cstr = strings::to_c_with_buf("glCompressedTextureSubImage2D", cstr_buf): *const u8;
	glCompressedTextureSubImage2D = user_get_proc_address(cstr): *fp_glCompressedTextureSubImage2D;
	let cstr = strings::to_c_with_buf("glCompressedTextureSubImage2DEXT", cstr_buf): *const u8;
	glCompressedTextureSubImage2DEXT = user_get_proc_address(cstr): *fp_glCompressedTextureSubImage2DEXT;
	let cstr = strings::to_c_with_buf("glCompressedTextureSubImage3D", cstr_buf): *const u8;
	glCompressedTextureSubImage3D = user_get_proc_address(cstr): *fp_glCompressedTextureSubImage3D;
	let cstr = strings::to_c_with_buf("glCompressedTextureSubImage3DEXT", cstr_buf): *const u8;
	glCompressedTextureSubImage3DEXT = user_get_proc_address(cstr): *fp_glCompressedTextureSubImage3DEXT;
	let cstr = strings::to_c_with_buf("glConservativeRasterParameterfNV", cstr_buf): *const u8;
	glConservativeRasterParameterfNV = user_get_proc_address(cstr): *fp_glConservativeRasterParameterfNV;
	let cstr = strings::to_c_with_buf("glConservativeRasterParameteriNV", cstr_buf): *const u8;
	glConservativeRasterParameteriNV = user_get_proc_address(cstr): *fp_glConservativeRasterParameteriNV;
	let cstr = strings::to_c_with_buf("glConvolutionFilter1DEXT", cstr_buf): *const u8;
	glConvolutionFilter1DEXT = user_get_proc_address(cstr): *fp_glConvolutionFilter1DEXT;
	let cstr = strings::to_c_with_buf("glConvolutionFilter2DEXT", cstr_buf): *const u8;
	glConvolutionFilter2DEXT = user_get_proc_address(cstr): *fp_glConvolutionFilter2DEXT;
	let cstr = strings::to_c_with_buf("glConvolutionParameterfEXT", cstr_buf): *const u8;
	glConvolutionParameterfEXT = user_get_proc_address(cstr): *fp_glConvolutionParameterfEXT;
	let cstr = strings::to_c_with_buf("glConvolutionParameterfvEXT", cstr_buf): *const u8;
	glConvolutionParameterfvEXT = user_get_proc_address(cstr): *fp_glConvolutionParameterfvEXT;
	let cstr = strings::to_c_with_buf("glConvolutionParameteriEXT", cstr_buf): *const u8;
	glConvolutionParameteriEXT = user_get_proc_address(cstr): *fp_glConvolutionParameteriEXT;
	let cstr = strings::to_c_with_buf("glConvolutionParameterivEXT", cstr_buf): *const u8;
	glConvolutionParameterivEXT = user_get_proc_address(cstr): *fp_glConvolutionParameterivEXT;
	let cstr = strings::to_c_with_buf("glConvolutionParameterxOES", cstr_buf): *const u8;
	glConvolutionParameterxOES = user_get_proc_address(cstr): *fp_glConvolutionParameterxOES;
	let cstr = strings::to_c_with_buf("glConvolutionParameterxvOES", cstr_buf): *const u8;
	glConvolutionParameterxvOES = user_get_proc_address(cstr): *fp_glConvolutionParameterxvOES;
	let cstr = strings::to_c_with_buf("glCopyBufferSubData", cstr_buf): *const u8;
	glCopyBufferSubData = user_get_proc_address(cstr): *fp_glCopyBufferSubData;
	let cstr = strings::to_c_with_buf("glCopyColorSubTableEXT", cstr_buf): *const u8;
	glCopyColorSubTableEXT = user_get_proc_address(cstr): *fp_glCopyColorSubTableEXT;
	let cstr = strings::to_c_with_buf("glCopyColorTableSGI", cstr_buf): *const u8;
	glCopyColorTableSGI = user_get_proc_address(cstr): *fp_glCopyColorTableSGI;
	let cstr = strings::to_c_with_buf("glCopyConvolutionFilter1DEXT", cstr_buf): *const u8;
	glCopyConvolutionFilter1DEXT = user_get_proc_address(cstr): *fp_glCopyConvolutionFilter1DEXT;
	let cstr = strings::to_c_with_buf("glCopyConvolutionFilter2DEXT", cstr_buf): *const u8;
	glCopyConvolutionFilter2DEXT = user_get_proc_address(cstr): *fp_glCopyConvolutionFilter2DEXT;
	let cstr = strings::to_c_with_buf("glCopyImageSubData", cstr_buf): *const u8;
	glCopyImageSubData = user_get_proc_address(cstr): *fp_glCopyImageSubData;
	let cstr = strings::to_c_with_buf("glCopyImageSubDataNV", cstr_buf): *const u8;
	glCopyImageSubDataNV = user_get_proc_address(cstr): *fp_glCopyImageSubDataNV;
	let cstr = strings::to_c_with_buf("glCopyMultiTexImage1DEXT", cstr_buf): *const u8;
	glCopyMultiTexImage1DEXT = user_get_proc_address(cstr): *fp_glCopyMultiTexImage1DEXT;
	let cstr = strings::to_c_with_buf("glCopyMultiTexImage2DEXT", cstr_buf): *const u8;
	glCopyMultiTexImage2DEXT = user_get_proc_address(cstr): *fp_glCopyMultiTexImage2DEXT;
	let cstr = strings::to_c_with_buf("glCopyMultiTexSubImage1DEXT", cstr_buf): *const u8;
	glCopyMultiTexSubImage1DEXT = user_get_proc_address(cstr): *fp_glCopyMultiTexSubImage1DEXT;
	let cstr = strings::to_c_with_buf("glCopyMultiTexSubImage2DEXT", cstr_buf): *const u8;
	glCopyMultiTexSubImage2DEXT = user_get_proc_address(cstr): *fp_glCopyMultiTexSubImage2DEXT;
	let cstr = strings::to_c_with_buf("glCopyMultiTexSubImage3DEXT", cstr_buf): *const u8;
	glCopyMultiTexSubImage3DEXT = user_get_proc_address(cstr): *fp_glCopyMultiTexSubImage3DEXT;
	let cstr = strings::to_c_with_buf("glCopyNamedBufferSubData", cstr_buf): *const u8;
	glCopyNamedBufferSubData = user_get_proc_address(cstr): *fp_glCopyNamedBufferSubData;
	let cstr = strings::to_c_with_buf("glCopyPathNV", cstr_buf): *const u8;
	glCopyPathNV = user_get_proc_address(cstr): *fp_glCopyPathNV;
	let cstr = strings::to_c_with_buf("glCopyPixels", cstr_buf): *const u8;
	glCopyPixels = user_get_proc_address(cstr): *fp_glCopyPixels;
	let cstr = strings::to_c_with_buf("glCopyTexImage1D", cstr_buf): *const u8;
	glCopyTexImage1D = user_get_proc_address(cstr): *fp_glCopyTexImage1D;
	let cstr = strings::to_c_with_buf("glCopyTexImage1DEXT", cstr_buf): *const u8;
	glCopyTexImage1DEXT = user_get_proc_address(cstr): *fp_glCopyTexImage1DEXT;
	let cstr = strings::to_c_with_buf("glCopyTexImage2D", cstr_buf): *const u8;
	glCopyTexImage2D = user_get_proc_address(cstr): *fp_glCopyTexImage2D;
	let cstr = strings::to_c_with_buf("glCopyTexImage2DEXT", cstr_buf): *const u8;
	glCopyTexImage2DEXT = user_get_proc_address(cstr): *fp_glCopyTexImage2DEXT;
	let cstr = strings::to_c_with_buf("glCopyTexSubImage1D", cstr_buf): *const u8;
	glCopyTexSubImage1D = user_get_proc_address(cstr): *fp_glCopyTexSubImage1D;
	let cstr = strings::to_c_with_buf("glCopyTexSubImage1DEXT", cstr_buf): *const u8;
	glCopyTexSubImage1DEXT = user_get_proc_address(cstr): *fp_glCopyTexSubImage1DEXT;
	let cstr = strings::to_c_with_buf("glCopyTexSubImage2D", cstr_buf): *const u8;
	glCopyTexSubImage2D = user_get_proc_address(cstr): *fp_glCopyTexSubImage2D;
	let cstr = strings::to_c_with_buf("glCopyTexSubImage2DEXT", cstr_buf): *const u8;
	glCopyTexSubImage2DEXT = user_get_proc_address(cstr): *fp_glCopyTexSubImage2DEXT;
	let cstr = strings::to_c_with_buf("glCopyTexSubImage3D", cstr_buf): *const u8;
	glCopyTexSubImage3D = user_get_proc_address(cstr): *fp_glCopyTexSubImage3D;
	let cstr = strings::to_c_with_buf("glCopyTexSubImage3DEXT", cstr_buf): *const u8;
	glCopyTexSubImage3DEXT = user_get_proc_address(cstr): *fp_glCopyTexSubImage3DEXT;
	let cstr = strings::to_c_with_buf("glCopyTextureImage1DEXT", cstr_buf): *const u8;
	glCopyTextureImage1DEXT = user_get_proc_address(cstr): *fp_glCopyTextureImage1DEXT;
	let cstr = strings::to_c_with_buf("glCopyTextureImage2DEXT", cstr_buf): *const u8;
	glCopyTextureImage2DEXT = user_get_proc_address(cstr): *fp_glCopyTextureImage2DEXT;
	let cstr = strings::to_c_with_buf("glCopyTextureSubImage1D", cstr_buf): *const u8;
	glCopyTextureSubImage1D = user_get_proc_address(cstr): *fp_glCopyTextureSubImage1D;
	let cstr = strings::to_c_with_buf("glCopyTextureSubImage1DEXT", cstr_buf): *const u8;
	glCopyTextureSubImage1DEXT = user_get_proc_address(cstr): *fp_glCopyTextureSubImage1DEXT;
	let cstr = strings::to_c_with_buf("glCopyTextureSubImage2D", cstr_buf): *const u8;
	glCopyTextureSubImage2D = user_get_proc_address(cstr): *fp_glCopyTextureSubImage2D;
	let cstr = strings::to_c_with_buf("glCopyTextureSubImage2DEXT", cstr_buf): *const u8;
	glCopyTextureSubImage2DEXT = user_get_proc_address(cstr): *fp_glCopyTextureSubImage2DEXT;
	let cstr = strings::to_c_with_buf("glCopyTextureSubImage3D", cstr_buf): *const u8;
	glCopyTextureSubImage3D = user_get_proc_address(cstr): *fp_glCopyTextureSubImage3D;
	let cstr = strings::to_c_with_buf("glCopyTextureSubImage3DEXT", cstr_buf): *const u8;
	glCopyTextureSubImage3DEXT = user_get_proc_address(cstr): *fp_glCopyTextureSubImage3DEXT;
	let cstr = strings::to_c_with_buf("glCoverFillPathInstancedNV", cstr_buf): *const u8;
	glCoverFillPathInstancedNV = user_get_proc_address(cstr): *fp_glCoverFillPathInstancedNV;
	let cstr = strings::to_c_with_buf("glCoverFillPathNV", cstr_buf): *const u8;
	glCoverFillPathNV = user_get_proc_address(cstr): *fp_glCoverFillPathNV;
	let cstr = strings::to_c_with_buf("glCoverStrokePathInstancedNV", cstr_buf): *const u8;
	glCoverStrokePathInstancedNV = user_get_proc_address(cstr): *fp_glCoverStrokePathInstancedNV;
	let cstr = strings::to_c_with_buf("glCoverStrokePathNV", cstr_buf): *const u8;
	glCoverStrokePathNV = user_get_proc_address(cstr): *fp_glCoverStrokePathNV;
	let cstr = strings::to_c_with_buf("glCoverageModulationNV", cstr_buf): *const u8;
	glCoverageModulationNV = user_get_proc_address(cstr): *fp_glCoverageModulationNV;
	let cstr = strings::to_c_with_buf("glCoverageModulationTableNV", cstr_buf): *const u8;
	glCoverageModulationTableNV = user_get_proc_address(cstr): *fp_glCoverageModulationTableNV;
	let cstr = strings::to_c_with_buf("glCreateBuffers", cstr_buf): *const u8;
	glCreateBuffers = user_get_proc_address(cstr): *fp_glCreateBuffers;
	let cstr = strings::to_c_with_buf("glCreateCommandListsNV", cstr_buf): *const u8;
	glCreateCommandListsNV = user_get_proc_address(cstr): *fp_glCreateCommandListsNV;
	let cstr = strings::to_c_with_buf("glCreateFramebuffers", cstr_buf): *const u8;
	glCreateFramebuffers = user_get_proc_address(cstr): *fp_glCreateFramebuffers;
	let cstr = strings::to_c_with_buf("glCreateMemoryObjectsEXT", cstr_buf): *const u8;
	glCreateMemoryObjectsEXT = user_get_proc_address(cstr): *fp_glCreateMemoryObjectsEXT;
	let cstr = strings::to_c_with_buf("glCreatePerfQueryINTEL", cstr_buf): *const u8;
	glCreatePerfQueryINTEL = user_get_proc_address(cstr): *fp_glCreatePerfQueryINTEL;
	let cstr = strings::to_c_with_buf("glCreateProgram", cstr_buf): *const u8;
	glCreateProgram = user_get_proc_address(cstr): *fp_glCreateProgram;
	let cstr = strings::to_c_with_buf("glCreateProgramObjectARB", cstr_buf): *const u8;
	glCreateProgramObjectARB = user_get_proc_address(cstr): *fp_glCreateProgramObjectARB;
	let cstr = strings::to_c_with_buf("glCreateProgramPipelines", cstr_buf): *const u8;
	glCreateProgramPipelines = user_get_proc_address(cstr): *fp_glCreateProgramPipelines;
	let cstr = strings::to_c_with_buf("glCreateProgressFenceNVX", cstr_buf): *const u8;
	glCreateProgressFenceNVX = user_get_proc_address(cstr): *fp_glCreateProgressFenceNVX;
	let cstr = strings::to_c_with_buf("glCreateQueries", cstr_buf): *const u8;
	glCreateQueries = user_get_proc_address(cstr): *fp_glCreateQueries;
	let cstr = strings::to_c_with_buf("glCreateRenderbuffers", cstr_buf): *const u8;
	glCreateRenderbuffers = user_get_proc_address(cstr): *fp_glCreateRenderbuffers;
	let cstr = strings::to_c_with_buf("glCreateSamplers", cstr_buf): *const u8;
	glCreateSamplers = user_get_proc_address(cstr): *fp_glCreateSamplers;
	let cstr = strings::to_c_with_buf("glCreateSemaphoresNV", cstr_buf): *const u8;
	glCreateSemaphoresNV = user_get_proc_address(cstr): *fp_glCreateSemaphoresNV;
	let cstr = strings::to_c_with_buf("glCreateShader", cstr_buf): *const u8;
	glCreateShader = user_get_proc_address(cstr): *fp_glCreateShader;
	let cstr = strings::to_c_with_buf("glCreateShaderObjectARB", cstr_buf): *const u8;
	glCreateShaderObjectARB = user_get_proc_address(cstr): *fp_glCreateShaderObjectARB;
	let cstr = strings::to_c_with_buf("glCreateShaderProgramEXT", cstr_buf): *const u8;
	glCreateShaderProgramEXT = user_get_proc_address(cstr): *fp_glCreateShaderProgramEXT;
	let cstr = strings::to_c_with_buf("glCreateShaderProgramv", cstr_buf): *const u8;
	glCreateShaderProgramv = user_get_proc_address(cstr): *fp_glCreateShaderProgramv;
	let cstr = strings::to_c_with_buf("glCreateStatesNV", cstr_buf): *const u8;
	glCreateStatesNV = user_get_proc_address(cstr): *fp_glCreateStatesNV;
	let cstr = strings::to_c_with_buf("glCreateSyncFromCLeventARB", cstr_buf): *const u8;
	glCreateSyncFromCLeventARB = user_get_proc_address(cstr): *fp_glCreateSyncFromCLeventARB;
	let cstr = strings::to_c_with_buf("glCreateTextures", cstr_buf): *const u8;
	glCreateTextures = user_get_proc_address(cstr): *fp_glCreateTextures;
	let cstr = strings::to_c_with_buf("glCreateTransformFeedbacks", cstr_buf): *const u8;
	glCreateTransformFeedbacks = user_get_proc_address(cstr): *fp_glCreateTransformFeedbacks;
	let cstr = strings::to_c_with_buf("glCreateVertexArrays", cstr_buf): *const u8;
	glCreateVertexArrays = user_get_proc_address(cstr): *fp_glCreateVertexArrays;
	let cstr = strings::to_c_with_buf("glCullFace", cstr_buf): *const u8;
	glCullFace = user_get_proc_address(cstr): *fp_glCullFace;
	let cstr = strings::to_c_with_buf("glCullParameterdvEXT", cstr_buf): *const u8;
	glCullParameterdvEXT = user_get_proc_address(cstr): *fp_glCullParameterdvEXT;
	let cstr = strings::to_c_with_buf("glCullParameterfvEXT", cstr_buf): *const u8;
	glCullParameterfvEXT = user_get_proc_address(cstr): *fp_glCullParameterfvEXT;
	let cstr = strings::to_c_with_buf("glCurrentPaletteMatrixARB", cstr_buf): *const u8;
	glCurrentPaletteMatrixARB = user_get_proc_address(cstr): *fp_glCurrentPaletteMatrixARB;
	let cstr = strings::to_c_with_buf("glDebugMessageCallback", cstr_buf): *const u8;
	glDebugMessageCallback = user_get_proc_address(cstr): *fp_glDebugMessageCallback;
	let cstr = strings::to_c_with_buf("glDebugMessageCallbackAMD", cstr_buf): *const u8;
	glDebugMessageCallbackAMD = user_get_proc_address(cstr): *fp_glDebugMessageCallbackAMD;
	let cstr = strings::to_c_with_buf("glDebugMessageCallbackARB", cstr_buf): *const u8;
	glDebugMessageCallbackARB = user_get_proc_address(cstr): *fp_glDebugMessageCallbackARB;
	let cstr = strings::to_c_with_buf("glDebugMessageControl", cstr_buf): *const u8;
	glDebugMessageControl = user_get_proc_address(cstr): *fp_glDebugMessageControl;
	let cstr = strings::to_c_with_buf("glDebugMessageControlARB", cstr_buf): *const u8;
	glDebugMessageControlARB = user_get_proc_address(cstr): *fp_glDebugMessageControlARB;
	let cstr = strings::to_c_with_buf("glDebugMessageEnableAMD", cstr_buf): *const u8;
	glDebugMessageEnableAMD = user_get_proc_address(cstr): *fp_glDebugMessageEnableAMD;
	let cstr = strings::to_c_with_buf("glDebugMessageInsert", cstr_buf): *const u8;
	glDebugMessageInsert = user_get_proc_address(cstr): *fp_glDebugMessageInsert;
	let cstr = strings::to_c_with_buf("glDebugMessageInsertAMD", cstr_buf): *const u8;
	glDebugMessageInsertAMD = user_get_proc_address(cstr): *fp_glDebugMessageInsertAMD;
	let cstr = strings::to_c_with_buf("glDebugMessageInsertARB", cstr_buf): *const u8;
	glDebugMessageInsertARB = user_get_proc_address(cstr): *fp_glDebugMessageInsertARB;
	let cstr = strings::to_c_with_buf("glDeformSGIX", cstr_buf): *const u8;
	glDeformSGIX = user_get_proc_address(cstr): *fp_glDeformSGIX;
	let cstr = strings::to_c_with_buf("glDeformationMap3dSGIX", cstr_buf): *const u8;
	glDeformationMap3dSGIX = user_get_proc_address(cstr): *fp_glDeformationMap3dSGIX;
	let cstr = strings::to_c_with_buf("glDeformationMap3fSGIX", cstr_buf): *const u8;
	glDeformationMap3fSGIX = user_get_proc_address(cstr): *fp_glDeformationMap3fSGIX;
	let cstr = strings::to_c_with_buf("glDeleteAsyncMarkersSGIX", cstr_buf): *const u8;
	glDeleteAsyncMarkersSGIX = user_get_proc_address(cstr): *fp_glDeleteAsyncMarkersSGIX;
	let cstr = strings::to_c_with_buf("glDeleteBuffers", cstr_buf): *const u8;
	glDeleteBuffers = user_get_proc_address(cstr): *fp_glDeleteBuffers;
	let cstr = strings::to_c_with_buf("glDeleteBuffersARB", cstr_buf): *const u8;
	glDeleteBuffersARB = user_get_proc_address(cstr): *fp_glDeleteBuffersARB;
	let cstr = strings::to_c_with_buf("glDeleteCommandListsNV", cstr_buf): *const u8;
	glDeleteCommandListsNV = user_get_proc_address(cstr): *fp_glDeleteCommandListsNV;
	let cstr = strings::to_c_with_buf("glDeleteFencesAPPLE", cstr_buf): *const u8;
	glDeleteFencesAPPLE = user_get_proc_address(cstr): *fp_glDeleteFencesAPPLE;
	let cstr = strings::to_c_with_buf("glDeleteFencesNV", cstr_buf): *const u8;
	glDeleteFencesNV = user_get_proc_address(cstr): *fp_glDeleteFencesNV;
	let cstr = strings::to_c_with_buf("glDeleteFragmentShaderATI", cstr_buf): *const u8;
	glDeleteFragmentShaderATI = user_get_proc_address(cstr): *fp_glDeleteFragmentShaderATI;
	let cstr = strings::to_c_with_buf("glDeleteFramebuffers", cstr_buf): *const u8;
	glDeleteFramebuffers = user_get_proc_address(cstr): *fp_glDeleteFramebuffers;
	let cstr = strings::to_c_with_buf("glDeleteFramebuffersEXT", cstr_buf): *const u8;
	glDeleteFramebuffersEXT = user_get_proc_address(cstr): *fp_glDeleteFramebuffersEXT;
	let cstr = strings::to_c_with_buf("glDeleteLists", cstr_buf): *const u8;
	glDeleteLists = user_get_proc_address(cstr): *fp_glDeleteLists;
	let cstr = strings::to_c_with_buf("glDeleteMemoryObjectsEXT", cstr_buf): *const u8;
	glDeleteMemoryObjectsEXT = user_get_proc_address(cstr): *fp_glDeleteMemoryObjectsEXT;
	let cstr = strings::to_c_with_buf("glDeleteNamedStringARB", cstr_buf): *const u8;
	glDeleteNamedStringARB = user_get_proc_address(cstr): *fp_glDeleteNamedStringARB;
	let cstr = strings::to_c_with_buf("glDeleteNamesAMD", cstr_buf): *const u8;
	glDeleteNamesAMD = user_get_proc_address(cstr): *fp_glDeleteNamesAMD;
	let cstr = strings::to_c_with_buf("glDeleteObjectARB", cstr_buf): *const u8;
	glDeleteObjectARB = user_get_proc_address(cstr): *fp_glDeleteObjectARB;
	let cstr = strings::to_c_with_buf("glDeleteOcclusionQueriesNV", cstr_buf): *const u8;
	glDeleteOcclusionQueriesNV = user_get_proc_address(cstr): *fp_glDeleteOcclusionQueriesNV;
	let cstr = strings::to_c_with_buf("glDeletePathsNV", cstr_buf): *const u8;
	glDeletePathsNV = user_get_proc_address(cstr): *fp_glDeletePathsNV;
	let cstr = strings::to_c_with_buf("glDeletePerfMonitorsAMD", cstr_buf): *const u8;
	glDeletePerfMonitorsAMD = user_get_proc_address(cstr): *fp_glDeletePerfMonitorsAMD;
	let cstr = strings::to_c_with_buf("glDeletePerfQueryINTEL", cstr_buf): *const u8;
	glDeletePerfQueryINTEL = user_get_proc_address(cstr): *fp_glDeletePerfQueryINTEL;
	let cstr = strings::to_c_with_buf("glDeleteProgram", cstr_buf): *const u8;
	glDeleteProgram = user_get_proc_address(cstr): *fp_glDeleteProgram;
	let cstr = strings::to_c_with_buf("glDeleteProgramPipelines", cstr_buf): *const u8;
	glDeleteProgramPipelines = user_get_proc_address(cstr): *fp_glDeleteProgramPipelines;
	let cstr = strings::to_c_with_buf("glDeleteProgramsARB", cstr_buf): *const u8;
	glDeleteProgramsARB = user_get_proc_address(cstr): *fp_glDeleteProgramsARB;
	let cstr = strings::to_c_with_buf("glDeleteProgramsNV", cstr_buf): *const u8;
	glDeleteProgramsNV = user_get_proc_address(cstr): *fp_glDeleteProgramsNV;
	let cstr = strings::to_c_with_buf("glDeleteQueries", cstr_buf): *const u8;
	glDeleteQueries = user_get_proc_address(cstr): *fp_glDeleteQueries;
	let cstr = strings::to_c_with_buf("glDeleteQueriesARB", cstr_buf): *const u8;
	glDeleteQueriesARB = user_get_proc_address(cstr): *fp_glDeleteQueriesARB;
	let cstr = strings::to_c_with_buf("glDeleteQueryResourceTagNV", cstr_buf): *const u8;
	glDeleteQueryResourceTagNV = user_get_proc_address(cstr): *fp_glDeleteQueryResourceTagNV;
	let cstr = strings::to_c_with_buf("glDeleteRenderbuffers", cstr_buf): *const u8;
	glDeleteRenderbuffers = user_get_proc_address(cstr): *fp_glDeleteRenderbuffers;
	let cstr = strings::to_c_with_buf("glDeleteRenderbuffersEXT", cstr_buf): *const u8;
	glDeleteRenderbuffersEXT = user_get_proc_address(cstr): *fp_glDeleteRenderbuffersEXT;
	let cstr = strings::to_c_with_buf("glDeleteSamplers", cstr_buf): *const u8;
	glDeleteSamplers = user_get_proc_address(cstr): *fp_glDeleteSamplers;
	let cstr = strings::to_c_with_buf("glDeleteSemaphoresEXT", cstr_buf): *const u8;
	glDeleteSemaphoresEXT = user_get_proc_address(cstr): *fp_glDeleteSemaphoresEXT;
	let cstr = strings::to_c_with_buf("glDeleteShader", cstr_buf): *const u8;
	glDeleteShader = user_get_proc_address(cstr): *fp_glDeleteShader;
	let cstr = strings::to_c_with_buf("glDeleteStatesNV", cstr_buf): *const u8;
	glDeleteStatesNV = user_get_proc_address(cstr): *fp_glDeleteStatesNV;
	let cstr = strings::to_c_with_buf("glDeleteSync", cstr_buf): *const u8;
	glDeleteSync = user_get_proc_address(cstr): *fp_glDeleteSync;
	let cstr = strings::to_c_with_buf("glDeleteTextures", cstr_buf): *const u8;
	glDeleteTextures = user_get_proc_address(cstr): *fp_glDeleteTextures;
	let cstr = strings::to_c_with_buf("glDeleteTexturesEXT", cstr_buf): *const u8;
	glDeleteTexturesEXT = user_get_proc_address(cstr): *fp_glDeleteTexturesEXT;
	let cstr = strings::to_c_with_buf("glDeleteTransformFeedbacks", cstr_buf): *const u8;
	glDeleteTransformFeedbacks = user_get_proc_address(cstr): *fp_glDeleteTransformFeedbacks;
	let cstr = strings::to_c_with_buf("glDeleteTransformFeedbacksNV", cstr_buf): *const u8;
	glDeleteTransformFeedbacksNV = user_get_proc_address(cstr): *fp_glDeleteTransformFeedbacksNV;
	let cstr = strings::to_c_with_buf("glDeleteVertexArrays", cstr_buf): *const u8;
	glDeleteVertexArrays = user_get_proc_address(cstr): *fp_glDeleteVertexArrays;
	let cstr = strings::to_c_with_buf("glDeleteVertexArraysAPPLE", cstr_buf): *const u8;
	glDeleteVertexArraysAPPLE = user_get_proc_address(cstr): *fp_glDeleteVertexArraysAPPLE;
	let cstr = strings::to_c_with_buf("glDeleteVertexShaderEXT", cstr_buf): *const u8;
	glDeleteVertexShaderEXT = user_get_proc_address(cstr): *fp_glDeleteVertexShaderEXT;
	let cstr = strings::to_c_with_buf("glDepthBoundsEXT", cstr_buf): *const u8;
	glDepthBoundsEXT = user_get_proc_address(cstr): *fp_glDepthBoundsEXT;
	let cstr = strings::to_c_with_buf("glDepthBoundsdNV", cstr_buf): *const u8;
	glDepthBoundsdNV = user_get_proc_address(cstr): *fp_glDepthBoundsdNV;
	let cstr = strings::to_c_with_buf("glDepthFunc", cstr_buf): *const u8;
	glDepthFunc = user_get_proc_address(cstr): *fp_glDepthFunc;
	let cstr = strings::to_c_with_buf("glDepthMask", cstr_buf): *const u8;
	glDepthMask = user_get_proc_address(cstr): *fp_glDepthMask;
	let cstr = strings::to_c_with_buf("glDepthRange", cstr_buf): *const u8;
	glDepthRange = user_get_proc_address(cstr): *fp_glDepthRange;
	let cstr = strings::to_c_with_buf("glDepthRangeArraydvNV", cstr_buf): *const u8;
	glDepthRangeArraydvNV = user_get_proc_address(cstr): *fp_glDepthRangeArraydvNV;
	let cstr = strings::to_c_with_buf("glDepthRangeArrayv", cstr_buf): *const u8;
	glDepthRangeArrayv = user_get_proc_address(cstr): *fp_glDepthRangeArrayv;
	let cstr = strings::to_c_with_buf("glDepthRangeIndexed", cstr_buf): *const u8;
	glDepthRangeIndexed = user_get_proc_address(cstr): *fp_glDepthRangeIndexed;
	let cstr = strings::to_c_with_buf("glDepthRangeIndexeddNV", cstr_buf): *const u8;
	glDepthRangeIndexeddNV = user_get_proc_address(cstr): *fp_glDepthRangeIndexeddNV;
	let cstr = strings::to_c_with_buf("glDepthRangedNV", cstr_buf): *const u8;
	glDepthRangedNV = user_get_proc_address(cstr): *fp_glDepthRangedNV;
	let cstr = strings::to_c_with_buf("glDepthRangef", cstr_buf): *const u8;
	glDepthRangef = user_get_proc_address(cstr): *fp_glDepthRangef;
	let cstr = strings::to_c_with_buf("glDepthRangefOES", cstr_buf): *const u8;
	glDepthRangefOES = user_get_proc_address(cstr): *fp_glDepthRangefOES;
	let cstr = strings::to_c_with_buf("glDepthRangexOES", cstr_buf): *const u8;
	glDepthRangexOES = user_get_proc_address(cstr): *fp_glDepthRangexOES;
	let cstr = strings::to_c_with_buf("glDetachObjectARB", cstr_buf): *const u8;
	glDetachObjectARB = user_get_proc_address(cstr): *fp_glDetachObjectARB;
	let cstr = strings::to_c_with_buf("glDetachShader", cstr_buf): *const u8;
	glDetachShader = user_get_proc_address(cstr): *fp_glDetachShader;
	let cstr = strings::to_c_with_buf("glDetailTexFuncSGIS", cstr_buf): *const u8;
	glDetailTexFuncSGIS = user_get_proc_address(cstr): *fp_glDetailTexFuncSGIS;
	let cstr = strings::to_c_with_buf("glDisable", cstr_buf): *const u8;
	glDisable = user_get_proc_address(cstr): *fp_glDisable;
	let cstr = strings::to_c_with_buf("glDisableClientState", cstr_buf): *const u8;
	glDisableClientState = user_get_proc_address(cstr): *fp_glDisableClientState;
	let cstr = strings::to_c_with_buf("glDisableClientStateIndexedEXT", cstr_buf): *const u8;
	glDisableClientStateIndexedEXT = user_get_proc_address(cstr): *fp_glDisableClientStateIndexedEXT;
	let cstr = strings::to_c_with_buf("glDisableClientStateiEXT", cstr_buf): *const u8;
	glDisableClientStateiEXT = user_get_proc_address(cstr): *fp_glDisableClientStateiEXT;
	let cstr = strings::to_c_with_buf("glDisableIndexedEXT", cstr_buf): *const u8;
	glDisableIndexedEXT = user_get_proc_address(cstr): *fp_glDisableIndexedEXT;
	let cstr = strings::to_c_with_buf("glDisableVariantClientStateEXT", cstr_buf): *const u8;
	glDisableVariantClientStateEXT = user_get_proc_address(cstr): *fp_glDisableVariantClientStateEXT;
	let cstr = strings::to_c_with_buf("glDisableVertexArrayAttrib", cstr_buf): *const u8;
	glDisableVertexArrayAttrib = user_get_proc_address(cstr): *fp_glDisableVertexArrayAttrib;
	let cstr = strings::to_c_with_buf("glDisableVertexArrayAttribEXT", cstr_buf): *const u8;
	glDisableVertexArrayAttribEXT = user_get_proc_address(cstr): *fp_glDisableVertexArrayAttribEXT;
	let cstr = strings::to_c_with_buf("glDisableVertexArrayEXT", cstr_buf): *const u8;
	glDisableVertexArrayEXT = user_get_proc_address(cstr): *fp_glDisableVertexArrayEXT;
	let cstr = strings::to_c_with_buf("glDisableVertexAttribAPPLE", cstr_buf): *const u8;
	glDisableVertexAttribAPPLE = user_get_proc_address(cstr): *fp_glDisableVertexAttribAPPLE;
	let cstr = strings::to_c_with_buf("glDisableVertexAttribArray", cstr_buf): *const u8;
	glDisableVertexAttribArray = user_get_proc_address(cstr): *fp_glDisableVertexAttribArray;
	let cstr = strings::to_c_with_buf("glDisableVertexAttribArrayARB", cstr_buf): *const u8;
	glDisableVertexAttribArrayARB = user_get_proc_address(cstr): *fp_glDisableVertexAttribArrayARB;
	let cstr = strings::to_c_with_buf("glDispatchCompute", cstr_buf): *const u8;
	glDispatchCompute = user_get_proc_address(cstr): *fp_glDispatchCompute;
	let cstr = strings::to_c_with_buf("glDispatchComputeGroupSizeARB", cstr_buf): *const u8;
	glDispatchComputeGroupSizeARB = user_get_proc_address(cstr): *fp_glDispatchComputeGroupSizeARB;
	let cstr = strings::to_c_with_buf("glDispatchComputeIndirect", cstr_buf): *const u8;
	glDispatchComputeIndirect = user_get_proc_address(cstr): *fp_glDispatchComputeIndirect;
	let cstr = strings::to_c_with_buf("glDrawArrays", cstr_buf): *const u8;
	glDrawArrays = user_get_proc_address(cstr): *fp_glDrawArrays;
	let cstr = strings::to_c_with_buf("glDrawArraysEXT", cstr_buf): *const u8;
	glDrawArraysEXT = user_get_proc_address(cstr): *fp_glDrawArraysEXT;
	let cstr = strings::to_c_with_buf("glDrawArraysIndirect", cstr_buf): *const u8;
	glDrawArraysIndirect = user_get_proc_address(cstr): *fp_glDrawArraysIndirect;
	let cstr = strings::to_c_with_buf("glDrawArraysInstancedARB", cstr_buf): *const u8;
	glDrawArraysInstancedARB = user_get_proc_address(cstr): *fp_glDrawArraysInstancedARB;
	let cstr = strings::to_c_with_buf("glDrawArraysInstancedBaseInstance", cstr_buf): *const u8;
	glDrawArraysInstancedBaseInstance = user_get_proc_address(cstr): *fp_glDrawArraysInstancedBaseInstance;
	let cstr = strings::to_c_with_buf("glDrawArraysInstancedEXT", cstr_buf): *const u8;
	glDrawArraysInstancedEXT = user_get_proc_address(cstr): *fp_glDrawArraysInstancedEXT;
	let cstr = strings::to_c_with_buf("glDrawBuffer", cstr_buf): *const u8;
	glDrawBuffer = user_get_proc_address(cstr): *fp_glDrawBuffer;
	let cstr = strings::to_c_with_buf("glDrawBuffers", cstr_buf): *const u8;
	glDrawBuffers = user_get_proc_address(cstr): *fp_glDrawBuffers;
	let cstr = strings::to_c_with_buf("glDrawBuffersARB", cstr_buf): *const u8;
	glDrawBuffersARB = user_get_proc_address(cstr): *fp_glDrawBuffersARB;
	let cstr = strings::to_c_with_buf("glDrawBuffersATI", cstr_buf): *const u8;
	glDrawBuffersATI = user_get_proc_address(cstr): *fp_glDrawBuffersATI;
	let cstr = strings::to_c_with_buf("glDrawCommandsAddressNV", cstr_buf): *const u8;
	glDrawCommandsAddressNV = user_get_proc_address(cstr): *fp_glDrawCommandsAddressNV;
	let cstr = strings::to_c_with_buf("glDrawCommandsNV", cstr_buf): *const u8;
	glDrawCommandsNV = user_get_proc_address(cstr): *fp_glDrawCommandsNV;
	let cstr = strings::to_c_with_buf("glDrawCommandsStatesAddressNV", cstr_buf): *const u8;
	glDrawCommandsStatesAddressNV = user_get_proc_address(cstr): *fp_glDrawCommandsStatesAddressNV;
	let cstr = strings::to_c_with_buf("glDrawCommandsStatesNV", cstr_buf): *const u8;
	glDrawCommandsStatesNV = user_get_proc_address(cstr): *fp_glDrawCommandsStatesNV;
	let cstr = strings::to_c_with_buf("glDrawElementArrayAPPLE", cstr_buf): *const u8;
	glDrawElementArrayAPPLE = user_get_proc_address(cstr): *fp_glDrawElementArrayAPPLE;
	let cstr = strings::to_c_with_buf("glDrawElementArrayATI", cstr_buf): *const u8;
	glDrawElementArrayATI = user_get_proc_address(cstr): *fp_glDrawElementArrayATI;
	let cstr = strings::to_c_with_buf("glDrawElements", cstr_buf): *const u8;
	glDrawElements = user_get_proc_address(cstr): *fp_glDrawElements;
	let cstr = strings::to_c_with_buf("glDrawElementsBaseVertex", cstr_buf): *const u8;
	glDrawElementsBaseVertex = user_get_proc_address(cstr): *fp_glDrawElementsBaseVertex;
	let cstr = strings::to_c_with_buf("glDrawElementsIndirect", cstr_buf): *const u8;
	glDrawElementsIndirect = user_get_proc_address(cstr): *fp_glDrawElementsIndirect;
	let cstr = strings::to_c_with_buf("glDrawElementsInstancedARB", cstr_buf): *const u8;
	glDrawElementsInstancedARB = user_get_proc_address(cstr): *fp_glDrawElementsInstancedARB;
	let cstr = strings::to_c_with_buf("glDrawElementsInstancedBaseInstance", cstr_buf): *const u8;
	glDrawElementsInstancedBaseInstance = user_get_proc_address(cstr): *fp_glDrawElementsInstancedBaseInstance;
	let cstr = strings::to_c_with_buf("glDrawElementsInstancedBaseVertex", cstr_buf): *const u8;
	glDrawElementsInstancedBaseVertex = user_get_proc_address(cstr): *fp_glDrawElementsInstancedBaseVertex;
	let cstr = strings::to_c_with_buf("glDrawElementsInstancedBaseVertexBaseInstance", cstr_buf): *const u8;
	glDrawElementsInstancedBaseVertexBaseInstance = user_get_proc_address(cstr): *fp_glDrawElementsInstancedBaseVertexBaseInstance;
	let cstr = strings::to_c_with_buf("glDrawElementsInstancedEXT", cstr_buf): *const u8;
	glDrawElementsInstancedEXT = user_get_proc_address(cstr): *fp_glDrawElementsInstancedEXT;
	let cstr = strings::to_c_with_buf("glDrawMeshArraysSUN", cstr_buf): *const u8;
	glDrawMeshArraysSUN = user_get_proc_address(cstr): *fp_glDrawMeshArraysSUN;
	let cstr = strings::to_c_with_buf("glDrawMeshTasksIndirectNV", cstr_buf): *const u8;
	glDrawMeshTasksIndirectNV = user_get_proc_address(cstr): *fp_glDrawMeshTasksIndirectNV;
	let cstr = strings::to_c_with_buf("glDrawMeshTasksNV", cstr_buf): *const u8;
	glDrawMeshTasksNV = user_get_proc_address(cstr): *fp_glDrawMeshTasksNV;
	let cstr = strings::to_c_with_buf("glDrawPixels", cstr_buf): *const u8;
	glDrawPixels = user_get_proc_address(cstr): *fp_glDrawPixels;
	let cstr = strings::to_c_with_buf("glDrawRangeElementArrayAPPLE", cstr_buf): *const u8;
	glDrawRangeElementArrayAPPLE = user_get_proc_address(cstr): *fp_glDrawRangeElementArrayAPPLE;
	let cstr = strings::to_c_with_buf("glDrawRangeElementArrayATI", cstr_buf): *const u8;
	glDrawRangeElementArrayATI = user_get_proc_address(cstr): *fp_glDrawRangeElementArrayATI;
	let cstr = strings::to_c_with_buf("glDrawRangeElements", cstr_buf): *const u8;
	glDrawRangeElements = user_get_proc_address(cstr): *fp_glDrawRangeElements;
	let cstr = strings::to_c_with_buf("glDrawRangeElementsBaseVertex", cstr_buf): *const u8;
	glDrawRangeElementsBaseVertex = user_get_proc_address(cstr): *fp_glDrawRangeElementsBaseVertex;
	let cstr = strings::to_c_with_buf("glDrawRangeElementsEXT", cstr_buf): *const u8;
	glDrawRangeElementsEXT = user_get_proc_address(cstr): *fp_glDrawRangeElementsEXT;
	let cstr = strings::to_c_with_buf("glDrawTextureNV", cstr_buf): *const u8;
	glDrawTextureNV = user_get_proc_address(cstr): *fp_glDrawTextureNV;
	let cstr = strings::to_c_with_buf("glDrawTransformFeedback", cstr_buf): *const u8;
	glDrawTransformFeedback = user_get_proc_address(cstr): *fp_glDrawTransformFeedback;
	let cstr = strings::to_c_with_buf("glDrawTransformFeedbackInstanced", cstr_buf): *const u8;
	glDrawTransformFeedbackInstanced = user_get_proc_address(cstr): *fp_glDrawTransformFeedbackInstanced;
	let cstr = strings::to_c_with_buf("glDrawTransformFeedbackNV", cstr_buf): *const u8;
	glDrawTransformFeedbackNV = user_get_proc_address(cstr): *fp_glDrawTransformFeedbackNV;
	let cstr = strings::to_c_with_buf("glDrawTransformFeedbackStream", cstr_buf): *const u8;
	glDrawTransformFeedbackStream = user_get_proc_address(cstr): *fp_glDrawTransformFeedbackStream;
	let cstr = strings::to_c_with_buf("glDrawTransformFeedbackStreamInstanced", cstr_buf): *const u8;
	glDrawTransformFeedbackStreamInstanced = user_get_proc_address(cstr): *fp_glDrawTransformFeedbackStreamInstanced;
	let cstr = strings::to_c_with_buf("glDrawVkImageNV", cstr_buf): *const u8;
	glDrawVkImageNV = user_get_proc_address(cstr): *fp_glDrawVkImageNV;
	let cstr = strings::to_c_with_buf("glEGLImageTargetTexStorageEXT", cstr_buf): *const u8;
	glEGLImageTargetTexStorageEXT = user_get_proc_address(cstr): *fp_glEGLImageTargetTexStorageEXT;
	let cstr = strings::to_c_with_buf("glEGLImageTargetTextureStorageEXT", cstr_buf): *const u8;
	glEGLImageTargetTextureStorageEXT = user_get_proc_address(cstr): *fp_glEGLImageTargetTextureStorageEXT;
	let cstr = strings::to_c_with_buf("glEdgeFlag", cstr_buf): *const u8;
	glEdgeFlag = user_get_proc_address(cstr): *fp_glEdgeFlag;
	let cstr = strings::to_c_with_buf("glEdgeFlagFormatNV", cstr_buf): *const u8;
	glEdgeFlagFormatNV = user_get_proc_address(cstr): *fp_glEdgeFlagFormatNV;
	let cstr = strings::to_c_with_buf("glEdgeFlagPointer", cstr_buf): *const u8;
	glEdgeFlagPointer = user_get_proc_address(cstr): *fp_glEdgeFlagPointer;
	let cstr = strings::to_c_with_buf("glEdgeFlagPointerEXT", cstr_buf): *const u8;
	glEdgeFlagPointerEXT = user_get_proc_address(cstr): *fp_glEdgeFlagPointerEXT;
	let cstr = strings::to_c_with_buf("glEdgeFlagPointerListIBM", cstr_buf): *const u8;
	glEdgeFlagPointerListIBM = user_get_proc_address(cstr): *fp_glEdgeFlagPointerListIBM;
	let cstr = strings::to_c_with_buf("glEdgeFlagv", cstr_buf): *const u8;
	glEdgeFlagv = user_get_proc_address(cstr): *fp_glEdgeFlagv;
	let cstr = strings::to_c_with_buf("glElementPointerAPPLE", cstr_buf): *const u8;
	glElementPointerAPPLE = user_get_proc_address(cstr): *fp_glElementPointerAPPLE;
	let cstr = strings::to_c_with_buf("glElementPointerATI", cstr_buf): *const u8;
	glElementPointerATI = user_get_proc_address(cstr): *fp_glElementPointerATI;
	let cstr = strings::to_c_with_buf("glEnable", cstr_buf): *const u8;
	glEnable = user_get_proc_address(cstr): *fp_glEnable;
	let cstr = strings::to_c_with_buf("glEnableClientState", cstr_buf): *const u8;
	glEnableClientState = user_get_proc_address(cstr): *fp_glEnableClientState;
	let cstr = strings::to_c_with_buf("glEnableClientStateIndexedEXT", cstr_buf): *const u8;
	glEnableClientStateIndexedEXT = user_get_proc_address(cstr): *fp_glEnableClientStateIndexedEXT;
	let cstr = strings::to_c_with_buf("glEnableClientStateiEXT", cstr_buf): *const u8;
	glEnableClientStateiEXT = user_get_proc_address(cstr): *fp_glEnableClientStateiEXT;
	let cstr = strings::to_c_with_buf("glEnableIndexedEXT", cstr_buf): *const u8;
	glEnableIndexedEXT = user_get_proc_address(cstr): *fp_glEnableIndexedEXT;
	let cstr = strings::to_c_with_buf("glEnableVariantClientStateEXT", cstr_buf): *const u8;
	glEnableVariantClientStateEXT = user_get_proc_address(cstr): *fp_glEnableVariantClientStateEXT;
	let cstr = strings::to_c_with_buf("glEnableVertexArrayAttrib", cstr_buf): *const u8;
	glEnableVertexArrayAttrib = user_get_proc_address(cstr): *fp_glEnableVertexArrayAttrib;
	let cstr = strings::to_c_with_buf("glEnableVertexArrayAttribEXT", cstr_buf): *const u8;
	glEnableVertexArrayAttribEXT = user_get_proc_address(cstr): *fp_glEnableVertexArrayAttribEXT;
	let cstr = strings::to_c_with_buf("glEnableVertexArrayEXT", cstr_buf): *const u8;
	glEnableVertexArrayEXT = user_get_proc_address(cstr): *fp_glEnableVertexArrayEXT;
	let cstr = strings::to_c_with_buf("glEnableVertexAttribAPPLE", cstr_buf): *const u8;
	glEnableVertexAttribAPPLE = user_get_proc_address(cstr): *fp_glEnableVertexAttribAPPLE;
	let cstr = strings::to_c_with_buf("glEnableVertexAttribArray", cstr_buf): *const u8;
	glEnableVertexAttribArray = user_get_proc_address(cstr): *fp_glEnableVertexAttribArray;
	let cstr = strings::to_c_with_buf("glEnableVertexAttribArrayARB", cstr_buf): *const u8;
	glEnableVertexAttribArrayARB = user_get_proc_address(cstr): *fp_glEnableVertexAttribArrayARB;
	let cstr = strings::to_c_with_buf("glEnd", cstr_buf): *const u8;
	glEnd = user_get_proc_address(cstr): *fp_glEnd;
	let cstr = strings::to_c_with_buf("glEndConditionalRenderNV", cstr_buf): *const u8;
	glEndConditionalRenderNV = user_get_proc_address(cstr): *fp_glEndConditionalRenderNV;
	let cstr = strings::to_c_with_buf("glEndConditionalRenderNVX", cstr_buf): *const u8;
	glEndConditionalRenderNVX = user_get_proc_address(cstr): *fp_glEndConditionalRenderNVX;
	let cstr = strings::to_c_with_buf("glEndFragmentShaderATI", cstr_buf): *const u8;
	glEndFragmentShaderATI = user_get_proc_address(cstr): *fp_glEndFragmentShaderATI;
	let cstr = strings::to_c_with_buf("glEndList", cstr_buf): *const u8;
	glEndList = user_get_proc_address(cstr): *fp_glEndList;
	let cstr = strings::to_c_with_buf("glEndOcclusionQueryNV", cstr_buf): *const u8;
	glEndOcclusionQueryNV = user_get_proc_address(cstr): *fp_glEndOcclusionQueryNV;
	let cstr = strings::to_c_with_buf("glEndPerfMonitorAMD", cstr_buf): *const u8;
	glEndPerfMonitorAMD = user_get_proc_address(cstr): *fp_glEndPerfMonitorAMD;
	let cstr = strings::to_c_with_buf("glEndPerfQueryINTEL", cstr_buf): *const u8;
	glEndPerfQueryINTEL = user_get_proc_address(cstr): *fp_glEndPerfQueryINTEL;
	let cstr = strings::to_c_with_buf("glEndQuery", cstr_buf): *const u8;
	glEndQuery = user_get_proc_address(cstr): *fp_glEndQuery;
	let cstr = strings::to_c_with_buf("glEndQueryARB", cstr_buf): *const u8;
	glEndQueryARB = user_get_proc_address(cstr): *fp_glEndQueryARB;
	let cstr = strings::to_c_with_buf("glEndQueryIndexed", cstr_buf): *const u8;
	glEndQueryIndexed = user_get_proc_address(cstr): *fp_glEndQueryIndexed;
	let cstr = strings::to_c_with_buf("glEndTransformFeedbackEXT", cstr_buf): *const u8;
	glEndTransformFeedbackEXT = user_get_proc_address(cstr): *fp_glEndTransformFeedbackEXT;
	let cstr = strings::to_c_with_buf("glEndTransformFeedbackNV", cstr_buf): *const u8;
	glEndTransformFeedbackNV = user_get_proc_address(cstr): *fp_glEndTransformFeedbackNV;
	let cstr = strings::to_c_with_buf("glEndVertexShaderEXT", cstr_buf): *const u8;
	glEndVertexShaderEXT = user_get_proc_address(cstr): *fp_glEndVertexShaderEXT;
	let cstr = strings::to_c_with_buf("glEndVideoCaptureNV", cstr_buf): *const u8;
	glEndVideoCaptureNV = user_get_proc_address(cstr): *fp_glEndVideoCaptureNV;
	let cstr = strings::to_c_with_buf("glEvalCoord1d", cstr_buf): *const u8;
	glEvalCoord1d = user_get_proc_address(cstr): *fp_glEvalCoord1d;
	let cstr = strings::to_c_with_buf("glEvalCoord1dv", cstr_buf): *const u8;
	glEvalCoord1dv = user_get_proc_address(cstr): *fp_glEvalCoord1dv;
	let cstr = strings::to_c_with_buf("glEvalCoord1f", cstr_buf): *const u8;
	glEvalCoord1f = user_get_proc_address(cstr): *fp_glEvalCoord1f;
	let cstr = strings::to_c_with_buf("glEvalCoord1fv", cstr_buf): *const u8;
	glEvalCoord1fv = user_get_proc_address(cstr): *fp_glEvalCoord1fv;
	let cstr = strings::to_c_with_buf("glEvalCoord1xOES", cstr_buf): *const u8;
	glEvalCoord1xOES = user_get_proc_address(cstr): *fp_glEvalCoord1xOES;
	let cstr = strings::to_c_with_buf("glEvalCoord1xvOES", cstr_buf): *const u8;
	glEvalCoord1xvOES = user_get_proc_address(cstr): *fp_glEvalCoord1xvOES;
	let cstr = strings::to_c_with_buf("glEvalCoord2d", cstr_buf): *const u8;
	glEvalCoord2d = user_get_proc_address(cstr): *fp_glEvalCoord2d;
	let cstr = strings::to_c_with_buf("glEvalCoord2dv", cstr_buf): *const u8;
	glEvalCoord2dv = user_get_proc_address(cstr): *fp_glEvalCoord2dv;
	let cstr = strings::to_c_with_buf("glEvalCoord2f", cstr_buf): *const u8;
	glEvalCoord2f = user_get_proc_address(cstr): *fp_glEvalCoord2f;
	let cstr = strings::to_c_with_buf("glEvalCoord2fv", cstr_buf): *const u8;
	glEvalCoord2fv = user_get_proc_address(cstr): *fp_glEvalCoord2fv;
	let cstr = strings::to_c_with_buf("glEvalCoord2xOES", cstr_buf): *const u8;
	glEvalCoord2xOES = user_get_proc_address(cstr): *fp_glEvalCoord2xOES;
	let cstr = strings::to_c_with_buf("glEvalCoord2xvOES", cstr_buf): *const u8;
	glEvalCoord2xvOES = user_get_proc_address(cstr): *fp_glEvalCoord2xvOES;
	let cstr = strings::to_c_with_buf("glEvalMapsNV", cstr_buf): *const u8;
	glEvalMapsNV = user_get_proc_address(cstr): *fp_glEvalMapsNV;
	let cstr = strings::to_c_with_buf("glEvalMesh1", cstr_buf): *const u8;
	glEvalMesh1 = user_get_proc_address(cstr): *fp_glEvalMesh1;
	let cstr = strings::to_c_with_buf("glEvalMesh2", cstr_buf): *const u8;
	glEvalMesh2 = user_get_proc_address(cstr): *fp_glEvalMesh2;
	let cstr = strings::to_c_with_buf("glEvalPoint1", cstr_buf): *const u8;
	glEvalPoint1 = user_get_proc_address(cstr): *fp_glEvalPoint1;
	let cstr = strings::to_c_with_buf("glEvalPoint2", cstr_buf): *const u8;
	glEvalPoint2 = user_get_proc_address(cstr): *fp_glEvalPoint2;
	let cstr = strings::to_c_with_buf("glEvaluateDepthValuesARB", cstr_buf): *const u8;
	glEvaluateDepthValuesARB = user_get_proc_address(cstr): *fp_glEvaluateDepthValuesARB;
	let cstr = strings::to_c_with_buf("glExecuteProgramNV", cstr_buf): *const u8;
	glExecuteProgramNV = user_get_proc_address(cstr): *fp_glExecuteProgramNV;
	let cstr = strings::to_c_with_buf("glExtractComponentEXT", cstr_buf): *const u8;
	glExtractComponentEXT = user_get_proc_address(cstr): *fp_glExtractComponentEXT;
	let cstr = strings::to_c_with_buf("glFeedbackBuffer", cstr_buf): *const u8;
	glFeedbackBuffer = user_get_proc_address(cstr): *fp_glFeedbackBuffer;
	let cstr = strings::to_c_with_buf("glFeedbackBufferxOES", cstr_buf): *const u8;
	glFeedbackBufferxOES = user_get_proc_address(cstr): *fp_glFeedbackBufferxOES;
	let cstr = strings::to_c_with_buf("glFenceSync", cstr_buf): *const u8;
	glFenceSync = user_get_proc_address(cstr): *fp_glFenceSync;
	let cstr = strings::to_c_with_buf("glFinalCombinerInputNV", cstr_buf): *const u8;
	glFinalCombinerInputNV = user_get_proc_address(cstr): *fp_glFinalCombinerInputNV;
	let cstr = strings::to_c_with_buf("glFinish", cstr_buf): *const u8;
	glFinish = user_get_proc_address(cstr): *fp_glFinish;
	let cstr = strings::to_c_with_buf("glFinishAsyncSGIX", cstr_buf): *const u8;
	glFinishAsyncSGIX = user_get_proc_address(cstr): *fp_glFinishAsyncSGIX;
	let cstr = strings::to_c_with_buf("glFinishFenceAPPLE", cstr_buf): *const u8;
	glFinishFenceAPPLE = user_get_proc_address(cstr): *fp_glFinishFenceAPPLE;
	let cstr = strings::to_c_with_buf("glFinishFenceNV", cstr_buf): *const u8;
	glFinishFenceNV = user_get_proc_address(cstr): *fp_glFinishFenceNV;
	let cstr = strings::to_c_with_buf("glFinishObjectAPPLE", cstr_buf): *const u8;
	glFinishObjectAPPLE = user_get_proc_address(cstr): *fp_glFinishObjectAPPLE;
	let cstr = strings::to_c_with_buf("glFinishTextureSUNX", cstr_buf): *const u8;
	glFinishTextureSUNX = user_get_proc_address(cstr): *fp_glFinishTextureSUNX;
	let cstr = strings::to_c_with_buf("glFlush", cstr_buf): *const u8;
	glFlush = user_get_proc_address(cstr): *fp_glFlush;
	let cstr = strings::to_c_with_buf("glFlushMappedBufferRange", cstr_buf): *const u8;
	glFlushMappedBufferRange = user_get_proc_address(cstr): *fp_glFlushMappedBufferRange;
	let cstr = strings::to_c_with_buf("glFlushMappedBufferRangeAPPLE", cstr_buf): *const u8;
	glFlushMappedBufferRangeAPPLE = user_get_proc_address(cstr): *fp_glFlushMappedBufferRangeAPPLE;
	let cstr = strings::to_c_with_buf("glFlushMappedNamedBufferRange", cstr_buf): *const u8;
	glFlushMappedNamedBufferRange = user_get_proc_address(cstr): *fp_glFlushMappedNamedBufferRange;
	let cstr = strings::to_c_with_buf("glFlushMappedNamedBufferRangeEXT", cstr_buf): *const u8;
	glFlushMappedNamedBufferRangeEXT = user_get_proc_address(cstr): *fp_glFlushMappedNamedBufferRangeEXT;
	let cstr = strings::to_c_with_buf("glFlushPixelDataRangeNV", cstr_buf): *const u8;
	glFlushPixelDataRangeNV = user_get_proc_address(cstr): *fp_glFlushPixelDataRangeNV;
	let cstr = strings::to_c_with_buf("glFlushRasterSGIX", cstr_buf): *const u8;
	glFlushRasterSGIX = user_get_proc_address(cstr): *fp_glFlushRasterSGIX;
	let cstr = strings::to_c_with_buf("glFlushStaticDataIBM", cstr_buf): *const u8;
	glFlushStaticDataIBM = user_get_proc_address(cstr): *fp_glFlushStaticDataIBM;
	let cstr = strings::to_c_with_buf("glFlushVertexArrayRangeAPPLE", cstr_buf): *const u8;
	glFlushVertexArrayRangeAPPLE = user_get_proc_address(cstr): *fp_glFlushVertexArrayRangeAPPLE;
	let cstr = strings::to_c_with_buf("glFlushVertexArrayRangeNV", cstr_buf): *const u8;
	glFlushVertexArrayRangeNV = user_get_proc_address(cstr): *fp_glFlushVertexArrayRangeNV;
	let cstr = strings::to_c_with_buf("glFogCoordFormatNV", cstr_buf): *const u8;
	glFogCoordFormatNV = user_get_proc_address(cstr): *fp_glFogCoordFormatNV;
	let cstr = strings::to_c_with_buf("glFogCoordPointer", cstr_buf): *const u8;
	glFogCoordPointer = user_get_proc_address(cstr): *fp_glFogCoordPointer;
	let cstr = strings::to_c_with_buf("glFogCoordPointerEXT", cstr_buf): *const u8;
	glFogCoordPointerEXT = user_get_proc_address(cstr): *fp_glFogCoordPointerEXT;
	let cstr = strings::to_c_with_buf("glFogCoordPointerListIBM", cstr_buf): *const u8;
	glFogCoordPointerListIBM = user_get_proc_address(cstr): *fp_glFogCoordPointerListIBM;
	let cstr = strings::to_c_with_buf("glFogCoordd", cstr_buf): *const u8;
	glFogCoordd = user_get_proc_address(cstr): *fp_glFogCoordd;
	let cstr = strings::to_c_with_buf("glFogCoorddEXT", cstr_buf): *const u8;
	glFogCoorddEXT = user_get_proc_address(cstr): *fp_glFogCoorddEXT;
	let cstr = strings::to_c_with_buf("glFogCoorddv", cstr_buf): *const u8;
	glFogCoorddv = user_get_proc_address(cstr): *fp_glFogCoorddv;
	let cstr = strings::to_c_with_buf("glFogCoorddvEXT", cstr_buf): *const u8;
	glFogCoorddvEXT = user_get_proc_address(cstr): *fp_glFogCoorddvEXT;
	let cstr = strings::to_c_with_buf("glFogCoordf", cstr_buf): *const u8;
	glFogCoordf = user_get_proc_address(cstr): *fp_glFogCoordf;
	let cstr = strings::to_c_with_buf("glFogCoordfEXT", cstr_buf): *const u8;
	glFogCoordfEXT = user_get_proc_address(cstr): *fp_glFogCoordfEXT;
	let cstr = strings::to_c_with_buf("glFogCoordfv", cstr_buf): *const u8;
	glFogCoordfv = user_get_proc_address(cstr): *fp_glFogCoordfv;
	let cstr = strings::to_c_with_buf("glFogCoordfvEXT", cstr_buf): *const u8;
	glFogCoordfvEXT = user_get_proc_address(cstr): *fp_glFogCoordfvEXT;
	let cstr = strings::to_c_with_buf("glFogCoordhNV", cstr_buf): *const u8;
	glFogCoordhNV = user_get_proc_address(cstr): *fp_glFogCoordhNV;
	let cstr = strings::to_c_with_buf("glFogCoordhvNV", cstr_buf): *const u8;
	glFogCoordhvNV = user_get_proc_address(cstr): *fp_glFogCoordhvNV;
	let cstr = strings::to_c_with_buf("glFogFuncSGIS", cstr_buf): *const u8;
	glFogFuncSGIS = user_get_proc_address(cstr): *fp_glFogFuncSGIS;
	let cstr = strings::to_c_with_buf("glFogf", cstr_buf): *const u8;
	glFogf = user_get_proc_address(cstr): *fp_glFogf;
	let cstr = strings::to_c_with_buf("glFogfv", cstr_buf): *const u8;
	glFogfv = user_get_proc_address(cstr): *fp_glFogfv;
	let cstr = strings::to_c_with_buf("glFogi", cstr_buf): *const u8;
	glFogi = user_get_proc_address(cstr): *fp_glFogi;
	let cstr = strings::to_c_with_buf("glFogiv", cstr_buf): *const u8;
	glFogiv = user_get_proc_address(cstr): *fp_glFogiv;
	let cstr = strings::to_c_with_buf("glFogxOES", cstr_buf): *const u8;
	glFogxOES = user_get_proc_address(cstr): *fp_glFogxOES;
	let cstr = strings::to_c_with_buf("glFogxvOES", cstr_buf): *const u8;
	glFogxvOES = user_get_proc_address(cstr): *fp_glFogxvOES;
	let cstr = strings::to_c_with_buf("glFragmentColorMaterialSGIX", cstr_buf): *const u8;
	glFragmentColorMaterialSGIX = user_get_proc_address(cstr): *fp_glFragmentColorMaterialSGIX;
	let cstr = strings::to_c_with_buf("glFragmentCoverageColorNV", cstr_buf): *const u8;
	glFragmentCoverageColorNV = user_get_proc_address(cstr): *fp_glFragmentCoverageColorNV;
	let cstr = strings::to_c_with_buf("glFragmentLightModelfSGIX", cstr_buf): *const u8;
	glFragmentLightModelfSGIX = user_get_proc_address(cstr): *fp_glFragmentLightModelfSGIX;
	let cstr = strings::to_c_with_buf("glFragmentLightModelfvSGIX", cstr_buf): *const u8;
	glFragmentLightModelfvSGIX = user_get_proc_address(cstr): *fp_glFragmentLightModelfvSGIX;
	let cstr = strings::to_c_with_buf("glFragmentLightModeliSGIX", cstr_buf): *const u8;
	glFragmentLightModeliSGIX = user_get_proc_address(cstr): *fp_glFragmentLightModeliSGIX;
	let cstr = strings::to_c_with_buf("glFragmentLightModelivSGIX", cstr_buf): *const u8;
	glFragmentLightModelivSGIX = user_get_proc_address(cstr): *fp_glFragmentLightModelivSGIX;
	let cstr = strings::to_c_with_buf("glFragmentLightfSGIX", cstr_buf): *const u8;
	glFragmentLightfSGIX = user_get_proc_address(cstr): *fp_glFragmentLightfSGIX;
	let cstr = strings::to_c_with_buf("glFragmentLightfvSGIX", cstr_buf): *const u8;
	glFragmentLightfvSGIX = user_get_proc_address(cstr): *fp_glFragmentLightfvSGIX;
	let cstr = strings::to_c_with_buf("glFragmentLightiSGIX", cstr_buf): *const u8;
	glFragmentLightiSGIX = user_get_proc_address(cstr): *fp_glFragmentLightiSGIX;
	let cstr = strings::to_c_with_buf("glFragmentLightivSGIX", cstr_buf): *const u8;
	glFragmentLightivSGIX = user_get_proc_address(cstr): *fp_glFragmentLightivSGIX;
	let cstr = strings::to_c_with_buf("glFragmentMaterialfSGIX", cstr_buf): *const u8;
	glFragmentMaterialfSGIX = user_get_proc_address(cstr): *fp_glFragmentMaterialfSGIX;
	let cstr = strings::to_c_with_buf("glFragmentMaterialfvSGIX", cstr_buf): *const u8;
	glFragmentMaterialfvSGIX = user_get_proc_address(cstr): *fp_glFragmentMaterialfvSGIX;
	let cstr = strings::to_c_with_buf("glFragmentMaterialiSGIX", cstr_buf): *const u8;
	glFragmentMaterialiSGIX = user_get_proc_address(cstr): *fp_glFragmentMaterialiSGIX;
	let cstr = strings::to_c_with_buf("glFragmentMaterialivSGIX", cstr_buf): *const u8;
	glFragmentMaterialivSGIX = user_get_proc_address(cstr): *fp_glFragmentMaterialivSGIX;
	let cstr = strings::to_c_with_buf("glFrameTerminatorGREMEDY", cstr_buf): *const u8;
	glFrameTerminatorGREMEDY = user_get_proc_address(cstr): *fp_glFrameTerminatorGREMEDY;
	let cstr = strings::to_c_with_buf("glFrameZoomSGIX", cstr_buf): *const u8;
	glFrameZoomSGIX = user_get_proc_address(cstr): *fp_glFrameZoomSGIX;
	let cstr = strings::to_c_with_buf("glFramebufferDrawBufferEXT", cstr_buf): *const u8;
	glFramebufferDrawBufferEXT = user_get_proc_address(cstr): *fp_glFramebufferDrawBufferEXT;
	let cstr = strings::to_c_with_buf("glFramebufferDrawBuffersEXT", cstr_buf): *const u8;
	glFramebufferDrawBuffersEXT = user_get_proc_address(cstr): *fp_glFramebufferDrawBuffersEXT;
	let cstr = strings::to_c_with_buf("glFramebufferFetchBarrierEXT", cstr_buf): *const u8;
	glFramebufferFetchBarrierEXT = user_get_proc_address(cstr): *fp_glFramebufferFetchBarrierEXT;
	let cstr = strings::to_c_with_buf("glFramebufferParameteri", cstr_buf): *const u8;
	glFramebufferParameteri = user_get_proc_address(cstr): *fp_glFramebufferParameteri;
	let cstr = strings::to_c_with_buf("glFramebufferParameteriMESA", cstr_buf): *const u8;
	glFramebufferParameteriMESA = user_get_proc_address(cstr): *fp_glFramebufferParameteriMESA;
	let cstr = strings::to_c_with_buf("glFramebufferReadBufferEXT", cstr_buf): *const u8;
	glFramebufferReadBufferEXT = user_get_proc_address(cstr): *fp_glFramebufferReadBufferEXT;
	let cstr = strings::to_c_with_buf("glFramebufferRenderbuffer", cstr_buf): *const u8;
	glFramebufferRenderbuffer = user_get_proc_address(cstr): *fp_glFramebufferRenderbuffer;
	let cstr = strings::to_c_with_buf("glFramebufferRenderbufferEXT", cstr_buf): *const u8;
	glFramebufferRenderbufferEXT = user_get_proc_address(cstr): *fp_glFramebufferRenderbufferEXT;
	let cstr = strings::to_c_with_buf("glFramebufferSampleLocationsfvARB", cstr_buf): *const u8;
	glFramebufferSampleLocationsfvARB = user_get_proc_address(cstr): *fp_glFramebufferSampleLocationsfvARB;
	let cstr = strings::to_c_with_buf("glFramebufferSampleLocationsfvNV", cstr_buf): *const u8;
	glFramebufferSampleLocationsfvNV = user_get_proc_address(cstr): *fp_glFramebufferSampleLocationsfvNV;
	let cstr = strings::to_c_with_buf("glFramebufferSamplePositionsfvAMD", cstr_buf): *const u8;
	glFramebufferSamplePositionsfvAMD = user_get_proc_address(cstr): *fp_glFramebufferSamplePositionsfvAMD;
	let cstr = strings::to_c_with_buf("glFramebufferTexture1D", cstr_buf): *const u8;
	glFramebufferTexture1D = user_get_proc_address(cstr): *fp_glFramebufferTexture1D;
	let cstr = strings::to_c_with_buf("glFramebufferTexture1DEXT", cstr_buf): *const u8;
	glFramebufferTexture1DEXT = user_get_proc_address(cstr): *fp_glFramebufferTexture1DEXT;
	let cstr = strings::to_c_with_buf("glFramebufferTexture2D", cstr_buf): *const u8;
	glFramebufferTexture2D = user_get_proc_address(cstr): *fp_glFramebufferTexture2D;
	let cstr = strings::to_c_with_buf("glFramebufferTexture2DEXT", cstr_buf): *const u8;
	glFramebufferTexture2DEXT = user_get_proc_address(cstr): *fp_glFramebufferTexture2DEXT;
	let cstr = strings::to_c_with_buf("glFramebufferTexture3D", cstr_buf): *const u8;
	glFramebufferTexture3D = user_get_proc_address(cstr): *fp_glFramebufferTexture3D;
	let cstr = strings::to_c_with_buf("glFramebufferTexture3DEXT", cstr_buf): *const u8;
	glFramebufferTexture3DEXT = user_get_proc_address(cstr): *fp_glFramebufferTexture3DEXT;
	let cstr = strings::to_c_with_buf("glFramebufferTextureARB", cstr_buf): *const u8;
	glFramebufferTextureARB = user_get_proc_address(cstr): *fp_glFramebufferTextureARB;
	let cstr = strings::to_c_with_buf("glFramebufferTextureEXT", cstr_buf): *const u8;
	glFramebufferTextureEXT = user_get_proc_address(cstr): *fp_glFramebufferTextureEXT;
	let cstr = strings::to_c_with_buf("glFramebufferTextureFaceARB", cstr_buf): *const u8;
	glFramebufferTextureFaceARB = user_get_proc_address(cstr): *fp_glFramebufferTextureFaceARB;
	let cstr = strings::to_c_with_buf("glFramebufferTextureFaceEXT", cstr_buf): *const u8;
	glFramebufferTextureFaceEXT = user_get_proc_address(cstr): *fp_glFramebufferTextureFaceEXT;
	let cstr = strings::to_c_with_buf("glFramebufferTextureLayer", cstr_buf): *const u8;
	glFramebufferTextureLayer = user_get_proc_address(cstr): *fp_glFramebufferTextureLayer;
	let cstr = strings::to_c_with_buf("glFramebufferTextureLayerARB", cstr_buf): *const u8;
	glFramebufferTextureLayerARB = user_get_proc_address(cstr): *fp_glFramebufferTextureLayerARB;
	let cstr = strings::to_c_with_buf("glFramebufferTextureLayerEXT", cstr_buf): *const u8;
	glFramebufferTextureLayerEXT = user_get_proc_address(cstr): *fp_glFramebufferTextureLayerEXT;
	let cstr = strings::to_c_with_buf("glFramebufferTextureMultiviewOVR", cstr_buf): *const u8;
	glFramebufferTextureMultiviewOVR = user_get_proc_address(cstr): *fp_glFramebufferTextureMultiviewOVR;
	let cstr = strings::to_c_with_buf("glFreeObjectBufferATI", cstr_buf): *const u8;
	glFreeObjectBufferATI = user_get_proc_address(cstr): *fp_glFreeObjectBufferATI;
	let cstr = strings::to_c_with_buf("glFrontFace", cstr_buf): *const u8;
	glFrontFace = user_get_proc_address(cstr): *fp_glFrontFace;
	let cstr = strings::to_c_with_buf("glFrustum", cstr_buf): *const u8;
	glFrustum = user_get_proc_address(cstr): *fp_glFrustum;
	let cstr = strings::to_c_with_buf("glFrustumfOES", cstr_buf): *const u8;
	glFrustumfOES = user_get_proc_address(cstr): *fp_glFrustumfOES;
	let cstr = strings::to_c_with_buf("glFrustumxOES", cstr_buf): *const u8;
	glFrustumxOES = user_get_proc_address(cstr): *fp_glFrustumxOES;
	let cstr = strings::to_c_with_buf("glGenAsyncMarkersSGIX", cstr_buf): *const u8;
	glGenAsyncMarkersSGIX = user_get_proc_address(cstr): *fp_glGenAsyncMarkersSGIX;
	let cstr = strings::to_c_with_buf("glGenBuffers", cstr_buf): *const u8;
	glGenBuffers = user_get_proc_address(cstr): *fp_glGenBuffers;
	let cstr = strings::to_c_with_buf("glGenBuffersARB", cstr_buf): *const u8;
	glGenBuffersARB = user_get_proc_address(cstr): *fp_glGenBuffersARB;
	let cstr = strings::to_c_with_buf("glGenFencesAPPLE", cstr_buf): *const u8;
	glGenFencesAPPLE = user_get_proc_address(cstr): *fp_glGenFencesAPPLE;
	let cstr = strings::to_c_with_buf("glGenFencesNV", cstr_buf): *const u8;
	glGenFencesNV = user_get_proc_address(cstr): *fp_glGenFencesNV;
	let cstr = strings::to_c_with_buf("glGenFragmentShadersATI", cstr_buf): *const u8;
	glGenFragmentShadersATI = user_get_proc_address(cstr): *fp_glGenFragmentShadersATI;
	let cstr = strings::to_c_with_buf("glGenFramebuffers", cstr_buf): *const u8;
	glGenFramebuffers = user_get_proc_address(cstr): *fp_glGenFramebuffers;
	let cstr = strings::to_c_with_buf("glGenFramebuffersEXT", cstr_buf): *const u8;
	glGenFramebuffersEXT = user_get_proc_address(cstr): *fp_glGenFramebuffersEXT;
	let cstr = strings::to_c_with_buf("glGenLists", cstr_buf): *const u8;
	glGenLists = user_get_proc_address(cstr): *fp_glGenLists;
	let cstr = strings::to_c_with_buf("glGenNamesAMD", cstr_buf): *const u8;
	glGenNamesAMD = user_get_proc_address(cstr): *fp_glGenNamesAMD;
	let cstr = strings::to_c_with_buf("glGenOcclusionQueriesNV", cstr_buf): *const u8;
	glGenOcclusionQueriesNV = user_get_proc_address(cstr): *fp_glGenOcclusionQueriesNV;
	let cstr = strings::to_c_with_buf("glGenPathsNV", cstr_buf): *const u8;
	glGenPathsNV = user_get_proc_address(cstr): *fp_glGenPathsNV;
	let cstr = strings::to_c_with_buf("glGenPerfMonitorsAMD", cstr_buf): *const u8;
	glGenPerfMonitorsAMD = user_get_proc_address(cstr): *fp_glGenPerfMonitorsAMD;
	let cstr = strings::to_c_with_buf("glGenProgramPipelines", cstr_buf): *const u8;
	glGenProgramPipelines = user_get_proc_address(cstr): *fp_glGenProgramPipelines;
	let cstr = strings::to_c_with_buf("glGenProgramsARB", cstr_buf): *const u8;
	glGenProgramsARB = user_get_proc_address(cstr): *fp_glGenProgramsARB;
	let cstr = strings::to_c_with_buf("glGenProgramsNV", cstr_buf): *const u8;
	glGenProgramsNV = user_get_proc_address(cstr): *fp_glGenProgramsNV;
	let cstr = strings::to_c_with_buf("glGenQueries", cstr_buf): *const u8;
	glGenQueries = user_get_proc_address(cstr): *fp_glGenQueries;
	let cstr = strings::to_c_with_buf("glGenQueriesARB", cstr_buf): *const u8;
	glGenQueriesARB = user_get_proc_address(cstr): *fp_glGenQueriesARB;
	let cstr = strings::to_c_with_buf("glGenQueryResourceTagNV", cstr_buf): *const u8;
	glGenQueryResourceTagNV = user_get_proc_address(cstr): *fp_glGenQueryResourceTagNV;
	let cstr = strings::to_c_with_buf("glGenRenderbuffers", cstr_buf): *const u8;
	glGenRenderbuffers = user_get_proc_address(cstr): *fp_glGenRenderbuffers;
	let cstr = strings::to_c_with_buf("glGenRenderbuffersEXT", cstr_buf): *const u8;
	glGenRenderbuffersEXT = user_get_proc_address(cstr): *fp_glGenRenderbuffersEXT;
	let cstr = strings::to_c_with_buf("glGenSamplers", cstr_buf): *const u8;
	glGenSamplers = user_get_proc_address(cstr): *fp_glGenSamplers;
	let cstr = strings::to_c_with_buf("glGenSemaphoresEXT", cstr_buf): *const u8;
	glGenSemaphoresEXT = user_get_proc_address(cstr): *fp_glGenSemaphoresEXT;
	let cstr = strings::to_c_with_buf("glGenSymbolsEXT", cstr_buf): *const u8;
	glGenSymbolsEXT = user_get_proc_address(cstr): *fp_glGenSymbolsEXT;
	let cstr = strings::to_c_with_buf("glGenTextures", cstr_buf): *const u8;
	glGenTextures = user_get_proc_address(cstr): *fp_glGenTextures;
	let cstr = strings::to_c_with_buf("glGenTexturesEXT", cstr_buf): *const u8;
	glGenTexturesEXT = user_get_proc_address(cstr): *fp_glGenTexturesEXT;
	let cstr = strings::to_c_with_buf("glGenTransformFeedbacks", cstr_buf): *const u8;
	glGenTransformFeedbacks = user_get_proc_address(cstr): *fp_glGenTransformFeedbacks;
	let cstr = strings::to_c_with_buf("glGenTransformFeedbacksNV", cstr_buf): *const u8;
	glGenTransformFeedbacksNV = user_get_proc_address(cstr): *fp_glGenTransformFeedbacksNV;
	let cstr = strings::to_c_with_buf("glGenVertexArrays", cstr_buf): *const u8;
	glGenVertexArrays = user_get_proc_address(cstr): *fp_glGenVertexArrays;
	let cstr = strings::to_c_with_buf("glGenVertexArraysAPPLE", cstr_buf): *const u8;
	glGenVertexArraysAPPLE = user_get_proc_address(cstr): *fp_glGenVertexArraysAPPLE;
	let cstr = strings::to_c_with_buf("glGenVertexShadersEXT", cstr_buf): *const u8;
	glGenVertexShadersEXT = user_get_proc_address(cstr): *fp_glGenVertexShadersEXT;
	let cstr = strings::to_c_with_buf("glGenerateMipmap", cstr_buf): *const u8;
	glGenerateMipmap = user_get_proc_address(cstr): *fp_glGenerateMipmap;
	let cstr = strings::to_c_with_buf("glGenerateMipmapEXT", cstr_buf): *const u8;
	glGenerateMipmapEXT = user_get_proc_address(cstr): *fp_glGenerateMipmapEXT;
	let cstr = strings::to_c_with_buf("glGenerateMultiTexMipmapEXT", cstr_buf): *const u8;
	glGenerateMultiTexMipmapEXT = user_get_proc_address(cstr): *fp_glGenerateMultiTexMipmapEXT;
	let cstr = strings::to_c_with_buf("glGenerateTextureMipmap", cstr_buf): *const u8;
	glGenerateTextureMipmap = user_get_proc_address(cstr): *fp_glGenerateTextureMipmap;
	let cstr = strings::to_c_with_buf("glGenerateTextureMipmapEXT", cstr_buf): *const u8;
	glGenerateTextureMipmapEXT = user_get_proc_address(cstr): *fp_glGenerateTextureMipmapEXT;
	let cstr = strings::to_c_with_buf("glGetActiveAtomicCounterBufferiv", cstr_buf): *const u8;
	glGetActiveAtomicCounterBufferiv = user_get_proc_address(cstr): *fp_glGetActiveAtomicCounterBufferiv;
	let cstr = strings::to_c_with_buf("glGetActiveAttrib", cstr_buf): *const u8;
	glGetActiveAttrib = user_get_proc_address(cstr): *fp_glGetActiveAttrib;
	let cstr = strings::to_c_with_buf("glGetActiveAttribARB", cstr_buf): *const u8;
	glGetActiveAttribARB = user_get_proc_address(cstr): *fp_glGetActiveAttribARB;
	let cstr = strings::to_c_with_buf("glGetActiveSubroutineName", cstr_buf): *const u8;
	glGetActiveSubroutineName = user_get_proc_address(cstr): *fp_glGetActiveSubroutineName;
	let cstr = strings::to_c_with_buf("glGetActiveSubroutineUniformName", cstr_buf): *const u8;
	glGetActiveSubroutineUniformName = user_get_proc_address(cstr): *fp_glGetActiveSubroutineUniformName;
	let cstr = strings::to_c_with_buf("glGetActiveSubroutineUniformiv", cstr_buf): *const u8;
	glGetActiveSubroutineUniformiv = user_get_proc_address(cstr): *fp_glGetActiveSubroutineUniformiv;
	let cstr = strings::to_c_with_buf("glGetActiveUniform", cstr_buf): *const u8;
	glGetActiveUniform = user_get_proc_address(cstr): *fp_glGetActiveUniform;
	let cstr = strings::to_c_with_buf("glGetActiveUniformARB", cstr_buf): *const u8;
	glGetActiveUniformARB = user_get_proc_address(cstr): *fp_glGetActiveUniformARB;
	let cstr = strings::to_c_with_buf("glGetActiveUniformBlockName", cstr_buf): *const u8;
	glGetActiveUniformBlockName = user_get_proc_address(cstr): *fp_glGetActiveUniformBlockName;
	let cstr = strings::to_c_with_buf("glGetActiveUniformBlockiv", cstr_buf): *const u8;
	glGetActiveUniformBlockiv = user_get_proc_address(cstr): *fp_glGetActiveUniformBlockiv;
	let cstr = strings::to_c_with_buf("glGetActiveUniformName", cstr_buf): *const u8;
	glGetActiveUniformName = user_get_proc_address(cstr): *fp_glGetActiveUniformName;
	let cstr = strings::to_c_with_buf("glGetActiveUniformsiv", cstr_buf): *const u8;
	glGetActiveUniformsiv = user_get_proc_address(cstr): *fp_glGetActiveUniformsiv;
	let cstr = strings::to_c_with_buf("glGetActiveVaryingNV", cstr_buf): *const u8;
	glGetActiveVaryingNV = user_get_proc_address(cstr): *fp_glGetActiveVaryingNV;
	let cstr = strings::to_c_with_buf("glGetArrayObjectfvATI", cstr_buf): *const u8;
	glGetArrayObjectfvATI = user_get_proc_address(cstr): *fp_glGetArrayObjectfvATI;
	let cstr = strings::to_c_with_buf("glGetArrayObjectivATI", cstr_buf): *const u8;
	glGetArrayObjectivATI = user_get_proc_address(cstr): *fp_glGetArrayObjectivATI;
	let cstr = strings::to_c_with_buf("glGetAttachedObjectsARB", cstr_buf): *const u8;
	glGetAttachedObjectsARB = user_get_proc_address(cstr): *fp_glGetAttachedObjectsARB;
	let cstr = strings::to_c_with_buf("glGetAttachedShaders", cstr_buf): *const u8;
	glGetAttachedShaders = user_get_proc_address(cstr): *fp_glGetAttachedShaders;
	let cstr = strings::to_c_with_buf("glGetAttribLocation", cstr_buf): *const u8;
	glGetAttribLocation = user_get_proc_address(cstr): *fp_glGetAttribLocation;
	let cstr = strings::to_c_with_buf("glGetAttribLocationARB", cstr_buf): *const u8;
	glGetAttribLocationARB = user_get_proc_address(cstr): *fp_glGetAttribLocationARB;
	let cstr = strings::to_c_with_buf("glGetBooleanIndexedvEXT", cstr_buf): *const u8;
	glGetBooleanIndexedvEXT = user_get_proc_address(cstr): *fp_glGetBooleanIndexedvEXT;
	let cstr = strings::to_c_with_buf("glGetBooleanv", cstr_buf): *const u8;
	glGetBooleanv = user_get_proc_address(cstr): *fp_glGetBooleanv;
	let cstr = strings::to_c_with_buf("glGetBufferParameteriv", cstr_buf): *const u8;
	glGetBufferParameteriv = user_get_proc_address(cstr): *fp_glGetBufferParameteriv;
	let cstr = strings::to_c_with_buf("glGetBufferParameterivARB", cstr_buf): *const u8;
	glGetBufferParameterivARB = user_get_proc_address(cstr): *fp_glGetBufferParameterivARB;
	let cstr = strings::to_c_with_buf("glGetBufferParameterui64vNV", cstr_buf): *const u8;
	glGetBufferParameterui64vNV = user_get_proc_address(cstr): *fp_glGetBufferParameterui64vNV;
	let cstr = strings::to_c_with_buf("glGetBufferPointerv", cstr_buf): *const u8;
	glGetBufferPointerv = user_get_proc_address(cstr): *fp_glGetBufferPointerv;
	let cstr = strings::to_c_with_buf("glGetBufferPointervARB", cstr_buf): *const u8;
	glGetBufferPointervARB = user_get_proc_address(cstr): *fp_glGetBufferPointervARB;
	let cstr = strings::to_c_with_buf("glGetBufferSubData", cstr_buf): *const u8;
	glGetBufferSubData = user_get_proc_address(cstr): *fp_glGetBufferSubData;
	let cstr = strings::to_c_with_buf("glGetBufferSubDataARB", cstr_buf): *const u8;
	glGetBufferSubDataARB = user_get_proc_address(cstr): *fp_glGetBufferSubDataARB;
	let cstr = strings::to_c_with_buf("glGetClipPlane", cstr_buf): *const u8;
	glGetClipPlane = user_get_proc_address(cstr): *fp_glGetClipPlane;
	let cstr = strings::to_c_with_buf("glGetClipPlanefOES", cstr_buf): *const u8;
	glGetClipPlanefOES = user_get_proc_address(cstr): *fp_glGetClipPlanefOES;
	let cstr = strings::to_c_with_buf("glGetClipPlanexOES", cstr_buf): *const u8;
	glGetClipPlanexOES = user_get_proc_address(cstr): *fp_glGetClipPlanexOES;
	let cstr = strings::to_c_with_buf("glGetColorTableEXT", cstr_buf): *const u8;
	glGetColorTableEXT = user_get_proc_address(cstr): *fp_glGetColorTableEXT;
	let cstr = strings::to_c_with_buf("glGetColorTableParameterfvEXT", cstr_buf): *const u8;
	glGetColorTableParameterfvEXT = user_get_proc_address(cstr): *fp_glGetColorTableParameterfvEXT;
	let cstr = strings::to_c_with_buf("glGetColorTableParameterfvSGI", cstr_buf): *const u8;
	glGetColorTableParameterfvSGI = user_get_proc_address(cstr): *fp_glGetColorTableParameterfvSGI;
	let cstr = strings::to_c_with_buf("glGetColorTableParameterivEXT", cstr_buf): *const u8;
	glGetColorTableParameterivEXT = user_get_proc_address(cstr): *fp_glGetColorTableParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetColorTableParameterivSGI", cstr_buf): *const u8;
	glGetColorTableParameterivSGI = user_get_proc_address(cstr): *fp_glGetColorTableParameterivSGI;
	let cstr = strings::to_c_with_buf("glGetColorTableSGI", cstr_buf): *const u8;
	glGetColorTableSGI = user_get_proc_address(cstr): *fp_glGetColorTableSGI;
	let cstr = strings::to_c_with_buf("glGetCombinerInputParameterfvNV", cstr_buf): *const u8;
	glGetCombinerInputParameterfvNV = user_get_proc_address(cstr): *fp_glGetCombinerInputParameterfvNV;
	let cstr = strings::to_c_with_buf("glGetCombinerInputParameterivNV", cstr_buf): *const u8;
	glGetCombinerInputParameterivNV = user_get_proc_address(cstr): *fp_glGetCombinerInputParameterivNV;
	let cstr = strings::to_c_with_buf("glGetCombinerOutputParameterfvNV", cstr_buf): *const u8;
	glGetCombinerOutputParameterfvNV = user_get_proc_address(cstr): *fp_glGetCombinerOutputParameterfvNV;
	let cstr = strings::to_c_with_buf("glGetCombinerOutputParameterivNV", cstr_buf): *const u8;
	glGetCombinerOutputParameterivNV = user_get_proc_address(cstr): *fp_glGetCombinerOutputParameterivNV;
	let cstr = strings::to_c_with_buf("glGetCombinerStageParameterfvNV", cstr_buf): *const u8;
	glGetCombinerStageParameterfvNV = user_get_proc_address(cstr): *fp_glGetCombinerStageParameterfvNV;
	let cstr = strings::to_c_with_buf("glGetCommandHeaderNV", cstr_buf): *const u8;
	glGetCommandHeaderNV = user_get_proc_address(cstr): *fp_glGetCommandHeaderNV;
	let cstr = strings::to_c_with_buf("glGetCompressedMultiTexImageEXT", cstr_buf): *const u8;
	glGetCompressedMultiTexImageEXT = user_get_proc_address(cstr): *fp_glGetCompressedMultiTexImageEXT;
	let cstr = strings::to_c_with_buf("glGetCompressedTexImage", cstr_buf): *const u8;
	glGetCompressedTexImage = user_get_proc_address(cstr): *fp_glGetCompressedTexImage;
	let cstr = strings::to_c_with_buf("glGetCompressedTexImageARB", cstr_buf): *const u8;
	glGetCompressedTexImageARB = user_get_proc_address(cstr): *fp_glGetCompressedTexImageARB;
	let cstr = strings::to_c_with_buf("glGetCompressedTextureImage", cstr_buf): *const u8;
	glGetCompressedTextureImage = user_get_proc_address(cstr): *fp_glGetCompressedTextureImage;
	let cstr = strings::to_c_with_buf("glGetCompressedTextureImageEXT", cstr_buf): *const u8;
	glGetCompressedTextureImageEXT = user_get_proc_address(cstr): *fp_glGetCompressedTextureImageEXT;
	let cstr = strings::to_c_with_buf("glGetCompressedTextureSubImage", cstr_buf): *const u8;
	glGetCompressedTextureSubImage = user_get_proc_address(cstr): *fp_glGetCompressedTextureSubImage;
	let cstr = strings::to_c_with_buf("glGetConvolutionFilterEXT", cstr_buf): *const u8;
	glGetConvolutionFilterEXT = user_get_proc_address(cstr): *fp_glGetConvolutionFilterEXT;
	let cstr = strings::to_c_with_buf("glGetConvolutionParameterfvEXT", cstr_buf): *const u8;
	glGetConvolutionParameterfvEXT = user_get_proc_address(cstr): *fp_glGetConvolutionParameterfvEXT;
	let cstr = strings::to_c_with_buf("glGetConvolutionParameterivEXT", cstr_buf): *const u8;
	glGetConvolutionParameterivEXT = user_get_proc_address(cstr): *fp_glGetConvolutionParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetConvolutionParameterxvOES", cstr_buf): *const u8;
	glGetConvolutionParameterxvOES = user_get_proc_address(cstr): *fp_glGetConvolutionParameterxvOES;
	let cstr = strings::to_c_with_buf("glGetCoverageModulationTableNV", cstr_buf): *const u8;
	glGetCoverageModulationTableNV = user_get_proc_address(cstr): *fp_glGetCoverageModulationTableNV;
	let cstr = strings::to_c_with_buf("glGetDebugMessageLog", cstr_buf): *const u8;
	glGetDebugMessageLog = user_get_proc_address(cstr): *fp_glGetDebugMessageLog;
	let cstr = strings::to_c_with_buf("glGetDebugMessageLogAMD", cstr_buf): *const u8;
	glGetDebugMessageLogAMD = user_get_proc_address(cstr): *fp_glGetDebugMessageLogAMD;
	let cstr = strings::to_c_with_buf("glGetDebugMessageLogARB", cstr_buf): *const u8;
	glGetDebugMessageLogARB = user_get_proc_address(cstr): *fp_glGetDebugMessageLogARB;
	let cstr = strings::to_c_with_buf("glGetDetailTexFuncSGIS", cstr_buf): *const u8;
	glGetDetailTexFuncSGIS = user_get_proc_address(cstr): *fp_glGetDetailTexFuncSGIS;
	let cstr = strings::to_c_with_buf("glGetDoubleIndexedvEXT", cstr_buf): *const u8;
	glGetDoubleIndexedvEXT = user_get_proc_address(cstr): *fp_glGetDoubleIndexedvEXT;
	let cstr = strings::to_c_with_buf("glGetDoublei_v", cstr_buf): *const u8;
	glGetDoublei_v = user_get_proc_address(cstr): *fp_glGetDoublei_v;
	let cstr = strings::to_c_with_buf("glGetDoublei_vEXT", cstr_buf): *const u8;
	glGetDoublei_vEXT = user_get_proc_address(cstr): *fp_glGetDoublei_vEXT;
	let cstr = strings::to_c_with_buf("glGetDoublev", cstr_buf): *const u8;
	glGetDoublev = user_get_proc_address(cstr): *fp_glGetDoublev;
	let cstr = strings::to_c_with_buf("glGetError", cstr_buf): *const u8;
	glGetError = user_get_proc_address(cstr): *fp_glGetError;
	let cstr = strings::to_c_with_buf("glGetFenceivNV", cstr_buf): *const u8;
	glGetFenceivNV = user_get_proc_address(cstr): *fp_glGetFenceivNV;
	let cstr = strings::to_c_with_buf("glGetFinalCombinerInputParameterfvNV", cstr_buf): *const u8;
	glGetFinalCombinerInputParameterfvNV = user_get_proc_address(cstr): *fp_glGetFinalCombinerInputParameterfvNV;
	let cstr = strings::to_c_with_buf("glGetFinalCombinerInputParameterivNV", cstr_buf): *const u8;
	glGetFinalCombinerInputParameterivNV = user_get_proc_address(cstr): *fp_glGetFinalCombinerInputParameterivNV;
	let cstr = strings::to_c_with_buf("glGetFirstPerfQueryIdINTEL", cstr_buf): *const u8;
	glGetFirstPerfQueryIdINTEL = user_get_proc_address(cstr): *fp_glGetFirstPerfQueryIdINTEL;
	let cstr = strings::to_c_with_buf("glGetFixedvOES", cstr_buf): *const u8;
	glGetFixedvOES = user_get_proc_address(cstr): *fp_glGetFixedvOES;
	let cstr = strings::to_c_with_buf("glGetFloatIndexedvEXT", cstr_buf): *const u8;
	glGetFloatIndexedvEXT = user_get_proc_address(cstr): *fp_glGetFloatIndexedvEXT;
	let cstr = strings::to_c_with_buf("glGetFloati_v", cstr_buf): *const u8;
	glGetFloati_v = user_get_proc_address(cstr): *fp_glGetFloati_v;
	let cstr = strings::to_c_with_buf("glGetFloati_vEXT", cstr_buf): *const u8;
	glGetFloati_vEXT = user_get_proc_address(cstr): *fp_glGetFloati_vEXT;
	let cstr = strings::to_c_with_buf("glGetFloatv", cstr_buf): *const u8;
	glGetFloatv = user_get_proc_address(cstr): *fp_glGetFloatv;
	let cstr = strings::to_c_with_buf("glGetFogFuncSGIS", cstr_buf): *const u8;
	glGetFogFuncSGIS = user_get_proc_address(cstr): *fp_glGetFogFuncSGIS;
	let cstr = strings::to_c_with_buf("glGetFragDataIndex", cstr_buf): *const u8;
	glGetFragDataIndex = user_get_proc_address(cstr): *fp_glGetFragDataIndex;
	let cstr = strings::to_c_with_buf("glGetFragDataLocationEXT", cstr_buf): *const u8;
	glGetFragDataLocationEXT = user_get_proc_address(cstr): *fp_glGetFragDataLocationEXT;
	let cstr = strings::to_c_with_buf("glGetFragmentLightfvSGIX", cstr_buf): *const u8;
	glGetFragmentLightfvSGIX = user_get_proc_address(cstr): *fp_glGetFragmentLightfvSGIX;
	let cstr = strings::to_c_with_buf("glGetFragmentLightivSGIX", cstr_buf): *const u8;
	glGetFragmentLightivSGIX = user_get_proc_address(cstr): *fp_glGetFragmentLightivSGIX;
	let cstr = strings::to_c_with_buf("glGetFragmentMaterialfvSGIX", cstr_buf): *const u8;
	glGetFragmentMaterialfvSGIX = user_get_proc_address(cstr): *fp_glGetFragmentMaterialfvSGIX;
	let cstr = strings::to_c_with_buf("glGetFragmentMaterialivSGIX", cstr_buf): *const u8;
	glGetFragmentMaterialivSGIX = user_get_proc_address(cstr): *fp_glGetFragmentMaterialivSGIX;
	let cstr = strings::to_c_with_buf("glGetFramebufferAttachmentParameteriv", cstr_buf): *const u8;
	glGetFramebufferAttachmentParameteriv = user_get_proc_address(cstr): *fp_glGetFramebufferAttachmentParameteriv;
	let cstr = strings::to_c_with_buf("glGetFramebufferAttachmentParameterivEXT", cstr_buf): *const u8;
	glGetFramebufferAttachmentParameterivEXT = user_get_proc_address(cstr): *fp_glGetFramebufferAttachmentParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetFramebufferParameterfvAMD", cstr_buf): *const u8;
	glGetFramebufferParameterfvAMD = user_get_proc_address(cstr): *fp_glGetFramebufferParameterfvAMD;
	let cstr = strings::to_c_with_buf("glGetFramebufferParameteriv", cstr_buf): *const u8;
	glGetFramebufferParameteriv = user_get_proc_address(cstr): *fp_glGetFramebufferParameteriv;
	let cstr = strings::to_c_with_buf("glGetFramebufferParameterivEXT", cstr_buf): *const u8;
	glGetFramebufferParameterivEXT = user_get_proc_address(cstr): *fp_glGetFramebufferParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetFramebufferParameterivMESA", cstr_buf): *const u8;
	glGetFramebufferParameterivMESA = user_get_proc_address(cstr): *fp_glGetFramebufferParameterivMESA;
	let cstr = strings::to_c_with_buf("glGetGraphicsResetStatus", cstr_buf): *const u8;
	glGetGraphicsResetStatus = user_get_proc_address(cstr): *fp_glGetGraphicsResetStatus;
	let cstr = strings::to_c_with_buf("glGetGraphicsResetStatusARB", cstr_buf): *const u8;
	glGetGraphicsResetStatusARB = user_get_proc_address(cstr): *fp_glGetGraphicsResetStatusARB;
	let cstr = strings::to_c_with_buf("glGetHandleARB", cstr_buf): *const u8;
	glGetHandleARB = user_get_proc_address(cstr): *fp_glGetHandleARB;
	let cstr = strings::to_c_with_buf("glGetHistogramEXT", cstr_buf): *const u8;
	glGetHistogramEXT = user_get_proc_address(cstr): *fp_glGetHistogramEXT;
	let cstr = strings::to_c_with_buf("glGetHistogramParameterfvEXT", cstr_buf): *const u8;
	glGetHistogramParameterfvEXT = user_get_proc_address(cstr): *fp_glGetHistogramParameterfvEXT;
	let cstr = strings::to_c_with_buf("glGetHistogramParameterivEXT", cstr_buf): *const u8;
	glGetHistogramParameterivEXT = user_get_proc_address(cstr): *fp_glGetHistogramParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetHistogramParameterxvOES", cstr_buf): *const u8;
	glGetHistogramParameterxvOES = user_get_proc_address(cstr): *fp_glGetHistogramParameterxvOES;
	let cstr = strings::to_c_with_buf("glGetImageHandleARB", cstr_buf): *const u8;
	glGetImageHandleARB = user_get_proc_address(cstr): *fp_glGetImageHandleARB;
	let cstr = strings::to_c_with_buf("glGetImageHandleNV", cstr_buf): *const u8;
	glGetImageHandleNV = user_get_proc_address(cstr): *fp_glGetImageHandleNV;
	let cstr = strings::to_c_with_buf("glGetImageTransformParameterfvHP", cstr_buf): *const u8;
	glGetImageTransformParameterfvHP = user_get_proc_address(cstr): *fp_glGetImageTransformParameterfvHP;
	let cstr = strings::to_c_with_buf("glGetImageTransformParameterivHP", cstr_buf): *const u8;
	glGetImageTransformParameterivHP = user_get_proc_address(cstr): *fp_glGetImageTransformParameterivHP;
	let cstr = strings::to_c_with_buf("glGetInfoLogARB", cstr_buf): *const u8;
	glGetInfoLogARB = user_get_proc_address(cstr): *fp_glGetInfoLogARB;
	let cstr = strings::to_c_with_buf("glGetInstrumentsSGIX", cstr_buf): *const u8;
	glGetInstrumentsSGIX = user_get_proc_address(cstr): *fp_glGetInstrumentsSGIX;
	let cstr = strings::to_c_with_buf("glGetInteger64v", cstr_buf): *const u8;
	glGetInteger64v = user_get_proc_address(cstr): *fp_glGetInteger64v;
	let cstr = strings::to_c_with_buf("glGetIntegerIndexedvEXT", cstr_buf): *const u8;
	glGetIntegerIndexedvEXT = user_get_proc_address(cstr): *fp_glGetIntegerIndexedvEXT;
	let cstr = strings::to_c_with_buf("glGetIntegeri_v", cstr_buf): *const u8;
	glGetIntegeri_v = user_get_proc_address(cstr): *fp_glGetIntegeri_v;
	let cstr = strings::to_c_with_buf("glGetIntegerui64i_vNV", cstr_buf): *const u8;
	glGetIntegerui64i_vNV = user_get_proc_address(cstr): *fp_glGetIntegerui64i_vNV;
	let cstr = strings::to_c_with_buf("glGetIntegerui64vNV", cstr_buf): *const u8;
	glGetIntegerui64vNV = user_get_proc_address(cstr): *fp_glGetIntegerui64vNV;
	let cstr = strings::to_c_with_buf("glGetIntegerv", cstr_buf): *const u8;
	glGetIntegerv = user_get_proc_address(cstr): *fp_glGetIntegerv;
	let cstr = strings::to_c_with_buf("glGetInternalformatSampleivNV", cstr_buf): *const u8;
	glGetInternalformatSampleivNV = user_get_proc_address(cstr): *fp_glGetInternalformatSampleivNV;
	let cstr = strings::to_c_with_buf("glGetInternalformati64v", cstr_buf): *const u8;
	glGetInternalformati64v = user_get_proc_address(cstr): *fp_glGetInternalformati64v;
	let cstr = strings::to_c_with_buf("glGetInternalformativ", cstr_buf): *const u8;
	glGetInternalformativ = user_get_proc_address(cstr): *fp_glGetInternalformativ;
	let cstr = strings::to_c_with_buf("glGetInvariantBooleanvEXT", cstr_buf): *const u8;
	glGetInvariantBooleanvEXT = user_get_proc_address(cstr): *fp_glGetInvariantBooleanvEXT;
	let cstr = strings::to_c_with_buf("glGetInvariantFloatvEXT", cstr_buf): *const u8;
	glGetInvariantFloatvEXT = user_get_proc_address(cstr): *fp_glGetInvariantFloatvEXT;
	let cstr = strings::to_c_with_buf("glGetInvariantIntegervEXT", cstr_buf): *const u8;
	glGetInvariantIntegervEXT = user_get_proc_address(cstr): *fp_glGetInvariantIntegervEXT;
	let cstr = strings::to_c_with_buf("glGetLightfv", cstr_buf): *const u8;
	glGetLightfv = user_get_proc_address(cstr): *fp_glGetLightfv;
	let cstr = strings::to_c_with_buf("glGetLightiv", cstr_buf): *const u8;
	glGetLightiv = user_get_proc_address(cstr): *fp_glGetLightiv;
	let cstr = strings::to_c_with_buf("glGetLightxOES", cstr_buf): *const u8;
	glGetLightxOES = user_get_proc_address(cstr): *fp_glGetLightxOES;
	let cstr = strings::to_c_with_buf("glGetListParameterfvSGIX", cstr_buf): *const u8;
	glGetListParameterfvSGIX = user_get_proc_address(cstr): *fp_glGetListParameterfvSGIX;
	let cstr = strings::to_c_with_buf("glGetListParameterivSGIX", cstr_buf): *const u8;
	glGetListParameterivSGIX = user_get_proc_address(cstr): *fp_glGetListParameterivSGIX;
	let cstr = strings::to_c_with_buf("glGetLocalConstantBooleanvEXT", cstr_buf): *const u8;
	glGetLocalConstantBooleanvEXT = user_get_proc_address(cstr): *fp_glGetLocalConstantBooleanvEXT;
	let cstr = strings::to_c_with_buf("glGetLocalConstantFloatvEXT", cstr_buf): *const u8;
	glGetLocalConstantFloatvEXT = user_get_proc_address(cstr): *fp_glGetLocalConstantFloatvEXT;
	let cstr = strings::to_c_with_buf("glGetLocalConstantIntegervEXT", cstr_buf): *const u8;
	glGetLocalConstantIntegervEXT = user_get_proc_address(cstr): *fp_glGetLocalConstantIntegervEXT;
	let cstr = strings::to_c_with_buf("glGetMapAttribParameterfvNV", cstr_buf): *const u8;
	glGetMapAttribParameterfvNV = user_get_proc_address(cstr): *fp_glGetMapAttribParameterfvNV;
	let cstr = strings::to_c_with_buf("glGetMapAttribParameterivNV", cstr_buf): *const u8;
	glGetMapAttribParameterivNV = user_get_proc_address(cstr): *fp_glGetMapAttribParameterivNV;
	let cstr = strings::to_c_with_buf("glGetMapControlPointsNV", cstr_buf): *const u8;
	glGetMapControlPointsNV = user_get_proc_address(cstr): *fp_glGetMapControlPointsNV;
	let cstr = strings::to_c_with_buf("glGetMapParameterfvNV", cstr_buf): *const u8;
	glGetMapParameterfvNV = user_get_proc_address(cstr): *fp_glGetMapParameterfvNV;
	let cstr = strings::to_c_with_buf("glGetMapParameterivNV", cstr_buf): *const u8;
	glGetMapParameterivNV = user_get_proc_address(cstr): *fp_glGetMapParameterivNV;
	let cstr = strings::to_c_with_buf("glGetMapdv", cstr_buf): *const u8;
	glGetMapdv = user_get_proc_address(cstr): *fp_glGetMapdv;
	let cstr = strings::to_c_with_buf("glGetMapfv", cstr_buf): *const u8;
	glGetMapfv = user_get_proc_address(cstr): *fp_glGetMapfv;
	let cstr = strings::to_c_with_buf("glGetMapiv", cstr_buf): *const u8;
	glGetMapiv = user_get_proc_address(cstr): *fp_glGetMapiv;
	let cstr = strings::to_c_with_buf("glGetMapxvOES", cstr_buf): *const u8;
	glGetMapxvOES = user_get_proc_address(cstr): *fp_glGetMapxvOES;
	let cstr = strings::to_c_with_buf("glGetMaterialfv", cstr_buf): *const u8;
	glGetMaterialfv = user_get_proc_address(cstr): *fp_glGetMaterialfv;
	let cstr = strings::to_c_with_buf("glGetMaterialiv", cstr_buf): *const u8;
	glGetMaterialiv = user_get_proc_address(cstr): *fp_glGetMaterialiv;
	let cstr = strings::to_c_with_buf("glGetMaterialxOES", cstr_buf): *const u8;
	glGetMaterialxOES = user_get_proc_address(cstr): *fp_glGetMaterialxOES;
	let cstr = strings::to_c_with_buf("glGetMemoryObjectDetachedResourcesuivNV", cstr_buf): *const u8;
	glGetMemoryObjectDetachedResourcesuivNV = user_get_proc_address(cstr): *fp_glGetMemoryObjectDetachedResourcesuivNV;
	let cstr = strings::to_c_with_buf("glGetMemoryObjectParameterivEXT", cstr_buf): *const u8;
	glGetMemoryObjectParameterivEXT = user_get_proc_address(cstr): *fp_glGetMemoryObjectParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetMinmaxEXT", cstr_buf): *const u8;
	glGetMinmaxEXT = user_get_proc_address(cstr): *fp_glGetMinmaxEXT;
	let cstr = strings::to_c_with_buf("glGetMinmaxParameterfvEXT", cstr_buf): *const u8;
	glGetMinmaxParameterfvEXT = user_get_proc_address(cstr): *fp_glGetMinmaxParameterfvEXT;
	let cstr = strings::to_c_with_buf("glGetMinmaxParameterivEXT", cstr_buf): *const u8;
	glGetMinmaxParameterivEXT = user_get_proc_address(cstr): *fp_glGetMinmaxParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetMultiTexEnvfvEXT", cstr_buf): *const u8;
	glGetMultiTexEnvfvEXT = user_get_proc_address(cstr): *fp_glGetMultiTexEnvfvEXT;
	let cstr = strings::to_c_with_buf("glGetMultiTexEnvivEXT", cstr_buf): *const u8;
	glGetMultiTexEnvivEXT = user_get_proc_address(cstr): *fp_glGetMultiTexEnvivEXT;
	let cstr = strings::to_c_with_buf("glGetMultiTexGendvEXT", cstr_buf): *const u8;
	glGetMultiTexGendvEXT = user_get_proc_address(cstr): *fp_glGetMultiTexGendvEXT;
	let cstr = strings::to_c_with_buf("glGetMultiTexGenfvEXT", cstr_buf): *const u8;
	glGetMultiTexGenfvEXT = user_get_proc_address(cstr): *fp_glGetMultiTexGenfvEXT;
	let cstr = strings::to_c_with_buf("glGetMultiTexGenivEXT", cstr_buf): *const u8;
	glGetMultiTexGenivEXT = user_get_proc_address(cstr): *fp_glGetMultiTexGenivEXT;
	let cstr = strings::to_c_with_buf("glGetMultiTexImageEXT", cstr_buf): *const u8;
	glGetMultiTexImageEXT = user_get_proc_address(cstr): *fp_glGetMultiTexImageEXT;
	let cstr = strings::to_c_with_buf("glGetMultiTexLevelParameterfvEXT", cstr_buf): *const u8;
	glGetMultiTexLevelParameterfvEXT = user_get_proc_address(cstr): *fp_glGetMultiTexLevelParameterfvEXT;
	let cstr = strings::to_c_with_buf("glGetMultiTexLevelParameterivEXT", cstr_buf): *const u8;
	glGetMultiTexLevelParameterivEXT = user_get_proc_address(cstr): *fp_glGetMultiTexLevelParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetMultiTexParameterIivEXT", cstr_buf): *const u8;
	glGetMultiTexParameterIivEXT = user_get_proc_address(cstr): *fp_glGetMultiTexParameterIivEXT;
	let cstr = strings::to_c_with_buf("glGetMultiTexParameterIuivEXT", cstr_buf): *const u8;
	glGetMultiTexParameterIuivEXT = user_get_proc_address(cstr): *fp_glGetMultiTexParameterIuivEXT;
	let cstr = strings::to_c_with_buf("glGetMultiTexParameterfvEXT", cstr_buf): *const u8;
	glGetMultiTexParameterfvEXT = user_get_proc_address(cstr): *fp_glGetMultiTexParameterfvEXT;
	let cstr = strings::to_c_with_buf("glGetMultiTexParameterivEXT", cstr_buf): *const u8;
	glGetMultiTexParameterivEXT = user_get_proc_address(cstr): *fp_glGetMultiTexParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetMultisamplefv", cstr_buf): *const u8;
	glGetMultisamplefv = user_get_proc_address(cstr): *fp_glGetMultisamplefv;
	let cstr = strings::to_c_with_buf("glGetMultisamplefvNV", cstr_buf): *const u8;
	glGetMultisamplefvNV = user_get_proc_address(cstr): *fp_glGetMultisamplefvNV;
	let cstr = strings::to_c_with_buf("glGetNamedBufferParameteri64v", cstr_buf): *const u8;
	glGetNamedBufferParameteri64v = user_get_proc_address(cstr): *fp_glGetNamedBufferParameteri64v;
	let cstr = strings::to_c_with_buf("glGetNamedBufferParameteriv", cstr_buf): *const u8;
	glGetNamedBufferParameteriv = user_get_proc_address(cstr): *fp_glGetNamedBufferParameteriv;
	let cstr = strings::to_c_with_buf("glGetNamedBufferParameterivEXT", cstr_buf): *const u8;
	glGetNamedBufferParameterivEXT = user_get_proc_address(cstr): *fp_glGetNamedBufferParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetNamedBufferParameterui64vNV", cstr_buf): *const u8;
	glGetNamedBufferParameterui64vNV = user_get_proc_address(cstr): *fp_glGetNamedBufferParameterui64vNV;
	let cstr = strings::to_c_with_buf("glGetNamedBufferPointerv", cstr_buf): *const u8;
	glGetNamedBufferPointerv = user_get_proc_address(cstr): *fp_glGetNamedBufferPointerv;
	let cstr = strings::to_c_with_buf("glGetNamedBufferPointervEXT", cstr_buf): *const u8;
	glGetNamedBufferPointervEXT = user_get_proc_address(cstr): *fp_glGetNamedBufferPointervEXT;
	let cstr = strings::to_c_with_buf("glGetNamedBufferSubData", cstr_buf): *const u8;
	glGetNamedBufferSubData = user_get_proc_address(cstr): *fp_glGetNamedBufferSubData;
	let cstr = strings::to_c_with_buf("glGetNamedBufferSubDataEXT", cstr_buf): *const u8;
	glGetNamedBufferSubDataEXT = user_get_proc_address(cstr): *fp_glGetNamedBufferSubDataEXT;
	let cstr = strings::to_c_with_buf("glGetNamedFramebufferAttachmentParameteriv", cstr_buf): *const u8;
	glGetNamedFramebufferAttachmentParameteriv = user_get_proc_address(cstr): *fp_glGetNamedFramebufferAttachmentParameteriv;
	let cstr = strings::to_c_with_buf("glGetNamedFramebufferAttachmentParameterivEXT", cstr_buf): *const u8;
	glGetNamedFramebufferAttachmentParameterivEXT = user_get_proc_address(cstr): *fp_glGetNamedFramebufferAttachmentParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetNamedFramebufferParameterfvAMD", cstr_buf): *const u8;
	glGetNamedFramebufferParameterfvAMD = user_get_proc_address(cstr): *fp_glGetNamedFramebufferParameterfvAMD;
	let cstr = strings::to_c_with_buf("glGetNamedFramebufferParameteriv", cstr_buf): *const u8;
	glGetNamedFramebufferParameteriv = user_get_proc_address(cstr): *fp_glGetNamedFramebufferParameteriv;
	let cstr = strings::to_c_with_buf("glGetNamedFramebufferParameterivEXT", cstr_buf): *const u8;
	glGetNamedFramebufferParameterivEXT = user_get_proc_address(cstr): *fp_glGetNamedFramebufferParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetNamedProgramLocalParameterIivEXT", cstr_buf): *const u8;
	glGetNamedProgramLocalParameterIivEXT = user_get_proc_address(cstr): *fp_glGetNamedProgramLocalParameterIivEXT;
	let cstr = strings::to_c_with_buf("glGetNamedProgramLocalParameterIuivEXT", cstr_buf): *const u8;
	glGetNamedProgramLocalParameterIuivEXT = user_get_proc_address(cstr): *fp_glGetNamedProgramLocalParameterIuivEXT;
	let cstr = strings::to_c_with_buf("glGetNamedProgramLocalParameterdvEXT", cstr_buf): *const u8;
	glGetNamedProgramLocalParameterdvEXT = user_get_proc_address(cstr): *fp_glGetNamedProgramLocalParameterdvEXT;
	let cstr = strings::to_c_with_buf("glGetNamedProgramLocalParameterfvEXT", cstr_buf): *const u8;
	glGetNamedProgramLocalParameterfvEXT = user_get_proc_address(cstr): *fp_glGetNamedProgramLocalParameterfvEXT;
	let cstr = strings::to_c_with_buf("glGetNamedProgramStringEXT", cstr_buf): *const u8;
	glGetNamedProgramStringEXT = user_get_proc_address(cstr): *fp_glGetNamedProgramStringEXT;
	let cstr = strings::to_c_with_buf("glGetNamedProgramivEXT", cstr_buf): *const u8;
	glGetNamedProgramivEXT = user_get_proc_address(cstr): *fp_glGetNamedProgramivEXT;
	let cstr = strings::to_c_with_buf("glGetNamedRenderbufferParameteriv", cstr_buf): *const u8;
	glGetNamedRenderbufferParameteriv = user_get_proc_address(cstr): *fp_glGetNamedRenderbufferParameteriv;
	let cstr = strings::to_c_with_buf("glGetNamedRenderbufferParameterivEXT", cstr_buf): *const u8;
	glGetNamedRenderbufferParameterivEXT = user_get_proc_address(cstr): *fp_glGetNamedRenderbufferParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetNamedStringARB", cstr_buf): *const u8;
	glGetNamedStringARB = user_get_proc_address(cstr): *fp_glGetNamedStringARB;
	let cstr = strings::to_c_with_buf("glGetNamedStringivARB", cstr_buf): *const u8;
	glGetNamedStringivARB = user_get_proc_address(cstr): *fp_glGetNamedStringivARB;
	let cstr = strings::to_c_with_buf("glGetNextPerfQueryIdINTEL", cstr_buf): *const u8;
	glGetNextPerfQueryIdINTEL = user_get_proc_address(cstr): *fp_glGetNextPerfQueryIdINTEL;
	let cstr = strings::to_c_with_buf("glGetObjectBufferfvATI", cstr_buf): *const u8;
	glGetObjectBufferfvATI = user_get_proc_address(cstr): *fp_glGetObjectBufferfvATI;
	let cstr = strings::to_c_with_buf("glGetObjectBufferivATI", cstr_buf): *const u8;
	glGetObjectBufferivATI = user_get_proc_address(cstr): *fp_glGetObjectBufferivATI;
	let cstr = strings::to_c_with_buf("glGetObjectLabel", cstr_buf): *const u8;
	glGetObjectLabel = user_get_proc_address(cstr): *fp_glGetObjectLabel;
	let cstr = strings::to_c_with_buf("glGetObjectLabelEXT", cstr_buf): *const u8;
	glGetObjectLabelEXT = user_get_proc_address(cstr): *fp_glGetObjectLabelEXT;
	let cstr = strings::to_c_with_buf("glGetObjectParameterfvARB", cstr_buf): *const u8;
	glGetObjectParameterfvARB = user_get_proc_address(cstr): *fp_glGetObjectParameterfvARB;
	let cstr = strings::to_c_with_buf("glGetObjectParameterivAPPLE", cstr_buf): *const u8;
	glGetObjectParameterivAPPLE = user_get_proc_address(cstr): *fp_glGetObjectParameterivAPPLE;
	let cstr = strings::to_c_with_buf("glGetObjectParameterivARB", cstr_buf): *const u8;
	glGetObjectParameterivARB = user_get_proc_address(cstr): *fp_glGetObjectParameterivARB;
	let cstr = strings::to_c_with_buf("glGetObjectPtrLabel", cstr_buf): *const u8;
	glGetObjectPtrLabel = user_get_proc_address(cstr): *fp_glGetObjectPtrLabel;
	let cstr = strings::to_c_with_buf("glGetOcclusionQueryivNV", cstr_buf): *const u8;
	glGetOcclusionQueryivNV = user_get_proc_address(cstr): *fp_glGetOcclusionQueryivNV;
	let cstr = strings::to_c_with_buf("glGetOcclusionQueryuivNV", cstr_buf): *const u8;
	glGetOcclusionQueryuivNV = user_get_proc_address(cstr): *fp_glGetOcclusionQueryuivNV;
	let cstr = strings::to_c_with_buf("glGetPathCommandsNV", cstr_buf): *const u8;
	glGetPathCommandsNV = user_get_proc_address(cstr): *fp_glGetPathCommandsNV;
	let cstr = strings::to_c_with_buf("glGetPathCoordsNV", cstr_buf): *const u8;
	glGetPathCoordsNV = user_get_proc_address(cstr): *fp_glGetPathCoordsNV;
	let cstr = strings::to_c_with_buf("glGetPathDashArrayNV", cstr_buf): *const u8;
	glGetPathDashArrayNV = user_get_proc_address(cstr): *fp_glGetPathDashArrayNV;
	let cstr = strings::to_c_with_buf("glGetPathLengthNV", cstr_buf): *const u8;
	glGetPathLengthNV = user_get_proc_address(cstr): *fp_glGetPathLengthNV;
	let cstr = strings::to_c_with_buf("glGetPathMetricRangeNV", cstr_buf): *const u8;
	glGetPathMetricRangeNV = user_get_proc_address(cstr): *fp_glGetPathMetricRangeNV;
	let cstr = strings::to_c_with_buf("glGetPathMetricsNV", cstr_buf): *const u8;
	glGetPathMetricsNV = user_get_proc_address(cstr): *fp_glGetPathMetricsNV;
	let cstr = strings::to_c_with_buf("glGetPathParameterfvNV", cstr_buf): *const u8;
	glGetPathParameterfvNV = user_get_proc_address(cstr): *fp_glGetPathParameterfvNV;
	let cstr = strings::to_c_with_buf("glGetPathParameterivNV", cstr_buf): *const u8;
	glGetPathParameterivNV = user_get_proc_address(cstr): *fp_glGetPathParameterivNV;
	let cstr = strings::to_c_with_buf("glGetPathSpacingNV", cstr_buf): *const u8;
	glGetPathSpacingNV = user_get_proc_address(cstr): *fp_glGetPathSpacingNV;
	let cstr = strings::to_c_with_buf("glGetPerfCounterInfoINTEL", cstr_buf): *const u8;
	glGetPerfCounterInfoINTEL = user_get_proc_address(cstr): *fp_glGetPerfCounterInfoINTEL;
	let cstr = strings::to_c_with_buf("glGetPerfMonitorCounterDataAMD", cstr_buf): *const u8;
	glGetPerfMonitorCounterDataAMD = user_get_proc_address(cstr): *fp_glGetPerfMonitorCounterDataAMD;
	let cstr = strings::to_c_with_buf("glGetPerfMonitorCounterInfoAMD", cstr_buf): *const u8;
	glGetPerfMonitorCounterInfoAMD = user_get_proc_address(cstr): *fp_glGetPerfMonitorCounterInfoAMD;
	let cstr = strings::to_c_with_buf("glGetPerfMonitorCounterStringAMD", cstr_buf): *const u8;
	glGetPerfMonitorCounterStringAMD = user_get_proc_address(cstr): *fp_glGetPerfMonitorCounterStringAMD;
	let cstr = strings::to_c_with_buf("glGetPerfMonitorCountersAMD", cstr_buf): *const u8;
	glGetPerfMonitorCountersAMD = user_get_proc_address(cstr): *fp_glGetPerfMonitorCountersAMD;
	let cstr = strings::to_c_with_buf("glGetPerfMonitorGroupStringAMD", cstr_buf): *const u8;
	glGetPerfMonitorGroupStringAMD = user_get_proc_address(cstr): *fp_glGetPerfMonitorGroupStringAMD;
	let cstr = strings::to_c_with_buf("glGetPerfMonitorGroupsAMD", cstr_buf): *const u8;
	glGetPerfMonitorGroupsAMD = user_get_proc_address(cstr): *fp_glGetPerfMonitorGroupsAMD;
	let cstr = strings::to_c_with_buf("glGetPerfQueryDataINTEL", cstr_buf): *const u8;
	glGetPerfQueryDataINTEL = user_get_proc_address(cstr): *fp_glGetPerfQueryDataINTEL;
	let cstr = strings::to_c_with_buf("glGetPerfQueryIdByNameINTEL", cstr_buf): *const u8;
	glGetPerfQueryIdByNameINTEL = user_get_proc_address(cstr): *fp_glGetPerfQueryIdByNameINTEL;
	let cstr = strings::to_c_with_buf("glGetPerfQueryInfoINTEL", cstr_buf): *const u8;
	glGetPerfQueryInfoINTEL = user_get_proc_address(cstr): *fp_glGetPerfQueryInfoINTEL;
	let cstr = strings::to_c_with_buf("glGetPixelMapfv", cstr_buf): *const u8;
	glGetPixelMapfv = user_get_proc_address(cstr): *fp_glGetPixelMapfv;
	let cstr = strings::to_c_with_buf("glGetPixelMapuiv", cstr_buf): *const u8;
	glGetPixelMapuiv = user_get_proc_address(cstr): *fp_glGetPixelMapuiv;
	let cstr = strings::to_c_with_buf("glGetPixelMapusv", cstr_buf): *const u8;
	glGetPixelMapusv = user_get_proc_address(cstr): *fp_glGetPixelMapusv;
	let cstr = strings::to_c_with_buf("glGetPixelMapxv", cstr_buf): *const u8;
	glGetPixelMapxv = user_get_proc_address(cstr): *fp_glGetPixelMapxv;
	let cstr = strings::to_c_with_buf("glGetPixelTexGenParameterfvSGIS", cstr_buf): *const u8;
	glGetPixelTexGenParameterfvSGIS = user_get_proc_address(cstr): *fp_glGetPixelTexGenParameterfvSGIS;
	let cstr = strings::to_c_with_buf("glGetPixelTexGenParameterivSGIS", cstr_buf): *const u8;
	glGetPixelTexGenParameterivSGIS = user_get_proc_address(cstr): *fp_glGetPixelTexGenParameterivSGIS;
	let cstr = strings::to_c_with_buf("glGetPixelTransformParameterfvEXT", cstr_buf): *const u8;
	glGetPixelTransformParameterfvEXT = user_get_proc_address(cstr): *fp_glGetPixelTransformParameterfvEXT;
	let cstr = strings::to_c_with_buf("glGetPixelTransformParameterivEXT", cstr_buf): *const u8;
	glGetPixelTransformParameterivEXT = user_get_proc_address(cstr): *fp_glGetPixelTransformParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetPointerIndexedvEXT", cstr_buf): *const u8;
	glGetPointerIndexedvEXT = user_get_proc_address(cstr): *fp_glGetPointerIndexedvEXT;
	let cstr = strings::to_c_with_buf("glGetPointeri_vEXT", cstr_buf): *const u8;
	glGetPointeri_vEXT = user_get_proc_address(cstr): *fp_glGetPointeri_vEXT;
	let cstr = strings::to_c_with_buf("glGetPointerv", cstr_buf): *const u8;
	glGetPointerv = user_get_proc_address(cstr): *fp_glGetPointerv;
	let cstr = strings::to_c_with_buf("glGetPointervEXT", cstr_buf): *const u8;
	glGetPointervEXT = user_get_proc_address(cstr): *fp_glGetPointervEXT;
	let cstr = strings::to_c_with_buf("glGetPolygonStipple", cstr_buf): *const u8;
	glGetPolygonStipple = user_get_proc_address(cstr): *fp_glGetPolygonStipple;
	let cstr = strings::to_c_with_buf("glGetProgramBinary", cstr_buf): *const u8;
	glGetProgramBinary = user_get_proc_address(cstr): *fp_glGetProgramBinary;
	let cstr = strings::to_c_with_buf("glGetProgramEnvParameterIivNV", cstr_buf): *const u8;
	glGetProgramEnvParameterIivNV = user_get_proc_address(cstr): *fp_glGetProgramEnvParameterIivNV;
	let cstr = strings::to_c_with_buf("glGetProgramEnvParameterIuivNV", cstr_buf): *const u8;
	glGetProgramEnvParameterIuivNV = user_get_proc_address(cstr): *fp_glGetProgramEnvParameterIuivNV;
	let cstr = strings::to_c_with_buf("glGetProgramEnvParameterdvARB", cstr_buf): *const u8;
	glGetProgramEnvParameterdvARB = user_get_proc_address(cstr): *fp_glGetProgramEnvParameterdvARB;
	let cstr = strings::to_c_with_buf("glGetProgramEnvParameterfvARB", cstr_buf): *const u8;
	glGetProgramEnvParameterfvARB = user_get_proc_address(cstr): *fp_glGetProgramEnvParameterfvARB;
	let cstr = strings::to_c_with_buf("glGetProgramInfoLog", cstr_buf): *const u8;
	glGetProgramInfoLog = user_get_proc_address(cstr): *fp_glGetProgramInfoLog;
	let cstr = strings::to_c_with_buf("glGetProgramInterfaceiv", cstr_buf): *const u8;
	glGetProgramInterfaceiv = user_get_proc_address(cstr): *fp_glGetProgramInterfaceiv;
	let cstr = strings::to_c_with_buf("glGetProgramLocalParameterIivNV", cstr_buf): *const u8;
	glGetProgramLocalParameterIivNV = user_get_proc_address(cstr): *fp_glGetProgramLocalParameterIivNV;
	let cstr = strings::to_c_with_buf("glGetProgramLocalParameterIuivNV", cstr_buf): *const u8;
	glGetProgramLocalParameterIuivNV = user_get_proc_address(cstr): *fp_glGetProgramLocalParameterIuivNV;
	let cstr = strings::to_c_with_buf("glGetProgramLocalParameterdvARB", cstr_buf): *const u8;
	glGetProgramLocalParameterdvARB = user_get_proc_address(cstr): *fp_glGetProgramLocalParameterdvARB;
	let cstr = strings::to_c_with_buf("glGetProgramLocalParameterfvARB", cstr_buf): *const u8;
	glGetProgramLocalParameterfvARB = user_get_proc_address(cstr): *fp_glGetProgramLocalParameterfvARB;
	let cstr = strings::to_c_with_buf("glGetProgramNamedParameterdvNV", cstr_buf): *const u8;
	glGetProgramNamedParameterdvNV = user_get_proc_address(cstr): *fp_glGetProgramNamedParameterdvNV;
	let cstr = strings::to_c_with_buf("glGetProgramNamedParameterfvNV", cstr_buf): *const u8;
	glGetProgramNamedParameterfvNV = user_get_proc_address(cstr): *fp_glGetProgramNamedParameterfvNV;
	let cstr = strings::to_c_with_buf("glGetProgramParameterdvNV", cstr_buf): *const u8;
	glGetProgramParameterdvNV = user_get_proc_address(cstr): *fp_glGetProgramParameterdvNV;
	let cstr = strings::to_c_with_buf("glGetProgramParameterfvNV", cstr_buf): *const u8;
	glGetProgramParameterfvNV = user_get_proc_address(cstr): *fp_glGetProgramParameterfvNV;
	let cstr = strings::to_c_with_buf("glGetProgramPipelineInfoLog", cstr_buf): *const u8;
	glGetProgramPipelineInfoLog = user_get_proc_address(cstr): *fp_glGetProgramPipelineInfoLog;
	let cstr = strings::to_c_with_buf("glGetProgramPipelineiv", cstr_buf): *const u8;
	glGetProgramPipelineiv = user_get_proc_address(cstr): *fp_glGetProgramPipelineiv;
	let cstr = strings::to_c_with_buf("glGetProgramResourceIndex", cstr_buf): *const u8;
	glGetProgramResourceIndex = user_get_proc_address(cstr): *fp_glGetProgramResourceIndex;
	let cstr = strings::to_c_with_buf("glGetProgramResourceLocation", cstr_buf): *const u8;
	glGetProgramResourceLocation = user_get_proc_address(cstr): *fp_glGetProgramResourceLocation;
	let cstr = strings::to_c_with_buf("glGetProgramResourceLocationIndex", cstr_buf): *const u8;
	glGetProgramResourceLocationIndex = user_get_proc_address(cstr): *fp_glGetProgramResourceLocationIndex;
	let cstr = strings::to_c_with_buf("glGetProgramResourceName", cstr_buf): *const u8;
	glGetProgramResourceName = user_get_proc_address(cstr): *fp_glGetProgramResourceName;
	let cstr = strings::to_c_with_buf("glGetProgramResourcefvNV", cstr_buf): *const u8;
	glGetProgramResourcefvNV = user_get_proc_address(cstr): *fp_glGetProgramResourcefvNV;
	let cstr = strings::to_c_with_buf("glGetProgramResourceiv", cstr_buf): *const u8;
	glGetProgramResourceiv = user_get_proc_address(cstr): *fp_glGetProgramResourceiv;
	let cstr = strings::to_c_with_buf("glGetProgramStageiv", cstr_buf): *const u8;
	glGetProgramStageiv = user_get_proc_address(cstr): *fp_glGetProgramStageiv;
	let cstr = strings::to_c_with_buf("glGetProgramStringARB", cstr_buf): *const u8;
	glGetProgramStringARB = user_get_proc_address(cstr): *fp_glGetProgramStringARB;
	let cstr = strings::to_c_with_buf("glGetProgramStringNV", cstr_buf): *const u8;
	glGetProgramStringNV = user_get_proc_address(cstr): *fp_glGetProgramStringNV;
	let cstr = strings::to_c_with_buf("glGetProgramSubroutineParameteruivNV", cstr_buf): *const u8;
	glGetProgramSubroutineParameteruivNV = user_get_proc_address(cstr): *fp_glGetProgramSubroutineParameteruivNV;
	let cstr = strings::to_c_with_buf("glGetProgramiv", cstr_buf): *const u8;
	glGetProgramiv = user_get_proc_address(cstr): *fp_glGetProgramiv;
	let cstr = strings::to_c_with_buf("glGetProgramivARB", cstr_buf): *const u8;
	glGetProgramivARB = user_get_proc_address(cstr): *fp_glGetProgramivARB;
	let cstr = strings::to_c_with_buf("glGetProgramivNV", cstr_buf): *const u8;
	glGetProgramivNV = user_get_proc_address(cstr): *fp_glGetProgramivNV;
	let cstr = strings::to_c_with_buf("glGetQueryBufferObjecti64v", cstr_buf): *const u8;
	glGetQueryBufferObjecti64v = user_get_proc_address(cstr): *fp_glGetQueryBufferObjecti64v;
	let cstr = strings::to_c_with_buf("glGetQueryBufferObjectiv", cstr_buf): *const u8;
	glGetQueryBufferObjectiv = user_get_proc_address(cstr): *fp_glGetQueryBufferObjectiv;
	let cstr = strings::to_c_with_buf("glGetQueryBufferObjectui64v", cstr_buf): *const u8;
	glGetQueryBufferObjectui64v = user_get_proc_address(cstr): *fp_glGetQueryBufferObjectui64v;
	let cstr = strings::to_c_with_buf("glGetQueryBufferObjectuiv", cstr_buf): *const u8;
	glGetQueryBufferObjectuiv = user_get_proc_address(cstr): *fp_glGetQueryBufferObjectuiv;
	let cstr = strings::to_c_with_buf("glGetQueryIndexediv", cstr_buf): *const u8;
	glGetQueryIndexediv = user_get_proc_address(cstr): *fp_glGetQueryIndexediv;
	let cstr = strings::to_c_with_buf("glGetQueryObjecti64v", cstr_buf): *const u8;
	glGetQueryObjecti64v = user_get_proc_address(cstr): *fp_glGetQueryObjecti64v;
	let cstr = strings::to_c_with_buf("glGetQueryObjecti64vEXT", cstr_buf): *const u8;
	glGetQueryObjecti64vEXT = user_get_proc_address(cstr): *fp_glGetQueryObjecti64vEXT;
	let cstr = strings::to_c_with_buf("glGetQueryObjectiv", cstr_buf): *const u8;
	glGetQueryObjectiv = user_get_proc_address(cstr): *fp_glGetQueryObjectiv;
	let cstr = strings::to_c_with_buf("glGetQueryObjectivARB", cstr_buf): *const u8;
	glGetQueryObjectivARB = user_get_proc_address(cstr): *fp_glGetQueryObjectivARB;
	let cstr = strings::to_c_with_buf("glGetQueryObjectui64v", cstr_buf): *const u8;
	glGetQueryObjectui64v = user_get_proc_address(cstr): *fp_glGetQueryObjectui64v;
	let cstr = strings::to_c_with_buf("glGetQueryObjectui64vEXT", cstr_buf): *const u8;
	glGetQueryObjectui64vEXT = user_get_proc_address(cstr): *fp_glGetQueryObjectui64vEXT;
	let cstr = strings::to_c_with_buf("glGetQueryObjectuiv", cstr_buf): *const u8;
	glGetQueryObjectuiv = user_get_proc_address(cstr): *fp_glGetQueryObjectuiv;
	let cstr = strings::to_c_with_buf("glGetQueryObjectuivARB", cstr_buf): *const u8;
	glGetQueryObjectuivARB = user_get_proc_address(cstr): *fp_glGetQueryObjectuivARB;
	let cstr = strings::to_c_with_buf("glGetQueryiv", cstr_buf): *const u8;
	glGetQueryiv = user_get_proc_address(cstr): *fp_glGetQueryiv;
	let cstr = strings::to_c_with_buf("glGetQueryivARB", cstr_buf): *const u8;
	glGetQueryivARB = user_get_proc_address(cstr): *fp_glGetQueryivARB;
	let cstr = strings::to_c_with_buf("glGetRenderbufferParameteriv", cstr_buf): *const u8;
	glGetRenderbufferParameteriv = user_get_proc_address(cstr): *fp_glGetRenderbufferParameteriv;
	let cstr = strings::to_c_with_buf("glGetRenderbufferParameterivEXT", cstr_buf): *const u8;
	glGetRenderbufferParameterivEXT = user_get_proc_address(cstr): *fp_glGetRenderbufferParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetSamplerParameterIiv", cstr_buf): *const u8;
	glGetSamplerParameterIiv = user_get_proc_address(cstr): *fp_glGetSamplerParameterIiv;
	let cstr = strings::to_c_with_buf("glGetSamplerParameterIuiv", cstr_buf): *const u8;
	glGetSamplerParameterIuiv = user_get_proc_address(cstr): *fp_glGetSamplerParameterIuiv;
	let cstr = strings::to_c_with_buf("glGetSamplerParameterfv", cstr_buf): *const u8;
	glGetSamplerParameterfv = user_get_proc_address(cstr): *fp_glGetSamplerParameterfv;
	let cstr = strings::to_c_with_buf("glGetSamplerParameteriv", cstr_buf): *const u8;
	glGetSamplerParameteriv = user_get_proc_address(cstr): *fp_glGetSamplerParameteriv;
	let cstr = strings::to_c_with_buf("glGetSemaphoreParameterivNV", cstr_buf): *const u8;
	glGetSemaphoreParameterivNV = user_get_proc_address(cstr): *fp_glGetSemaphoreParameterivNV;
	let cstr = strings::to_c_with_buf("glGetSemaphoreParameterui64vEXT", cstr_buf): *const u8;
	glGetSemaphoreParameterui64vEXT = user_get_proc_address(cstr): *fp_glGetSemaphoreParameterui64vEXT;
	let cstr = strings::to_c_with_buf("glGetSeparableFilterEXT", cstr_buf): *const u8;
	glGetSeparableFilterEXT = user_get_proc_address(cstr): *fp_glGetSeparableFilterEXT;
	let cstr = strings::to_c_with_buf("glGetShaderInfoLog", cstr_buf): *const u8;
	glGetShaderInfoLog = user_get_proc_address(cstr): *fp_glGetShaderInfoLog;
	let cstr = strings::to_c_with_buf("glGetShaderPrecisionFormat", cstr_buf): *const u8;
	glGetShaderPrecisionFormat = user_get_proc_address(cstr): *fp_glGetShaderPrecisionFormat;
	let cstr = strings::to_c_with_buf("glGetShaderSource", cstr_buf): *const u8;
	glGetShaderSource = user_get_proc_address(cstr): *fp_glGetShaderSource;
	let cstr = strings::to_c_with_buf("glGetShaderSourceARB", cstr_buf): *const u8;
	glGetShaderSourceARB = user_get_proc_address(cstr): *fp_glGetShaderSourceARB;
	let cstr = strings::to_c_with_buf("glGetShaderiv", cstr_buf): *const u8;
	glGetShaderiv = user_get_proc_address(cstr): *fp_glGetShaderiv;
	let cstr = strings::to_c_with_buf("glGetShadingRateImagePaletteNV", cstr_buf): *const u8;
	glGetShadingRateImagePaletteNV = user_get_proc_address(cstr): *fp_glGetShadingRateImagePaletteNV;
	let cstr = strings::to_c_with_buf("glGetShadingRateSampleLocationivNV", cstr_buf): *const u8;
	glGetShadingRateSampleLocationivNV = user_get_proc_address(cstr): *fp_glGetShadingRateSampleLocationivNV;
	let cstr = strings::to_c_with_buf("glGetSharpenTexFuncSGIS", cstr_buf): *const u8;
	glGetSharpenTexFuncSGIS = user_get_proc_address(cstr): *fp_glGetSharpenTexFuncSGIS;
	let cstr = strings::to_c_with_buf("glGetStageIndexNV", cstr_buf): *const u8;
	glGetStageIndexNV = user_get_proc_address(cstr): *fp_glGetStageIndexNV;
	let cstr = strings::to_c_with_buf("glGetString", cstr_buf): *const u8;
	glGetString = user_get_proc_address(cstr): *fp_glGetString;
	let cstr = strings::to_c_with_buf("glGetSubroutineIndex", cstr_buf): *const u8;
	glGetSubroutineIndex = user_get_proc_address(cstr): *fp_glGetSubroutineIndex;
	let cstr = strings::to_c_with_buf("glGetSubroutineUniformLocation", cstr_buf): *const u8;
	glGetSubroutineUniformLocation = user_get_proc_address(cstr): *fp_glGetSubroutineUniformLocation;
	let cstr = strings::to_c_with_buf("glGetSynciv", cstr_buf): *const u8;
	glGetSynciv = user_get_proc_address(cstr): *fp_glGetSynciv;
	let cstr = strings::to_c_with_buf("glGetTexBumpParameterfvATI", cstr_buf): *const u8;
	glGetTexBumpParameterfvATI = user_get_proc_address(cstr): *fp_glGetTexBumpParameterfvATI;
	let cstr = strings::to_c_with_buf("glGetTexBumpParameterivATI", cstr_buf): *const u8;
	glGetTexBumpParameterivATI = user_get_proc_address(cstr): *fp_glGetTexBumpParameterivATI;
	let cstr = strings::to_c_with_buf("glGetTexEnvfv", cstr_buf): *const u8;
	glGetTexEnvfv = user_get_proc_address(cstr): *fp_glGetTexEnvfv;
	let cstr = strings::to_c_with_buf("glGetTexEnviv", cstr_buf): *const u8;
	glGetTexEnviv = user_get_proc_address(cstr): *fp_glGetTexEnviv;
	let cstr = strings::to_c_with_buf("glGetTexEnvxvOES", cstr_buf): *const u8;
	glGetTexEnvxvOES = user_get_proc_address(cstr): *fp_glGetTexEnvxvOES;
	let cstr = strings::to_c_with_buf("glGetTexFilterFuncSGIS", cstr_buf): *const u8;
	glGetTexFilterFuncSGIS = user_get_proc_address(cstr): *fp_glGetTexFilterFuncSGIS;
	let cstr = strings::to_c_with_buf("glGetTexGendv", cstr_buf): *const u8;
	glGetTexGendv = user_get_proc_address(cstr): *fp_glGetTexGendv;
	let cstr = strings::to_c_with_buf("glGetTexGenfv", cstr_buf): *const u8;
	glGetTexGenfv = user_get_proc_address(cstr): *fp_glGetTexGenfv;
	let cstr = strings::to_c_with_buf("glGetTexGeniv", cstr_buf): *const u8;
	glGetTexGeniv = user_get_proc_address(cstr): *fp_glGetTexGeniv;
	let cstr = strings::to_c_with_buf("glGetTexGenxvOES", cstr_buf): *const u8;
	glGetTexGenxvOES = user_get_proc_address(cstr): *fp_glGetTexGenxvOES;
	let cstr = strings::to_c_with_buf("glGetTexImage", cstr_buf): *const u8;
	glGetTexImage = user_get_proc_address(cstr): *fp_glGetTexImage;
	let cstr = strings::to_c_with_buf("glGetTexLevelParameterfv", cstr_buf): *const u8;
	glGetTexLevelParameterfv = user_get_proc_address(cstr): *fp_glGetTexLevelParameterfv;
	let cstr = strings::to_c_with_buf("glGetTexLevelParameteriv", cstr_buf): *const u8;
	glGetTexLevelParameteriv = user_get_proc_address(cstr): *fp_glGetTexLevelParameteriv;
	let cstr = strings::to_c_with_buf("glGetTexLevelParameterxvOES", cstr_buf): *const u8;
	glGetTexLevelParameterxvOES = user_get_proc_address(cstr): *fp_glGetTexLevelParameterxvOES;
	let cstr = strings::to_c_with_buf("glGetTexParameterIivEXT", cstr_buf): *const u8;
	glGetTexParameterIivEXT = user_get_proc_address(cstr): *fp_glGetTexParameterIivEXT;
	let cstr = strings::to_c_with_buf("glGetTexParameterIuivEXT", cstr_buf): *const u8;
	glGetTexParameterIuivEXT = user_get_proc_address(cstr): *fp_glGetTexParameterIuivEXT;
	let cstr = strings::to_c_with_buf("glGetTexParameterPointervAPPLE", cstr_buf): *const u8;
	glGetTexParameterPointervAPPLE = user_get_proc_address(cstr): *fp_glGetTexParameterPointervAPPLE;
	let cstr = strings::to_c_with_buf("glGetTexParameterfv", cstr_buf): *const u8;
	glGetTexParameterfv = user_get_proc_address(cstr): *fp_glGetTexParameterfv;
	let cstr = strings::to_c_with_buf("glGetTexParameteriv", cstr_buf): *const u8;
	glGetTexParameteriv = user_get_proc_address(cstr): *fp_glGetTexParameteriv;
	let cstr = strings::to_c_with_buf("glGetTexParameterxvOES", cstr_buf): *const u8;
	glGetTexParameterxvOES = user_get_proc_address(cstr): *fp_glGetTexParameterxvOES;
	let cstr = strings::to_c_with_buf("glGetTextureHandleARB", cstr_buf): *const u8;
	glGetTextureHandleARB = user_get_proc_address(cstr): *fp_glGetTextureHandleARB;
	let cstr = strings::to_c_with_buf("glGetTextureHandleNV", cstr_buf): *const u8;
	glGetTextureHandleNV = user_get_proc_address(cstr): *fp_glGetTextureHandleNV;
	let cstr = strings::to_c_with_buf("glGetTextureImage", cstr_buf): *const u8;
	glGetTextureImage = user_get_proc_address(cstr): *fp_glGetTextureImage;
	let cstr = strings::to_c_with_buf("glGetTextureImageEXT", cstr_buf): *const u8;
	glGetTextureImageEXT = user_get_proc_address(cstr): *fp_glGetTextureImageEXT;
	let cstr = strings::to_c_with_buf("glGetTextureLevelParameterfv", cstr_buf): *const u8;
	glGetTextureLevelParameterfv = user_get_proc_address(cstr): *fp_glGetTextureLevelParameterfv;
	let cstr = strings::to_c_with_buf("glGetTextureLevelParameterfvEXT", cstr_buf): *const u8;
	glGetTextureLevelParameterfvEXT = user_get_proc_address(cstr): *fp_glGetTextureLevelParameterfvEXT;
	let cstr = strings::to_c_with_buf("glGetTextureLevelParameteriv", cstr_buf): *const u8;
	glGetTextureLevelParameteriv = user_get_proc_address(cstr): *fp_glGetTextureLevelParameteriv;
	let cstr = strings::to_c_with_buf("glGetTextureLevelParameterivEXT", cstr_buf): *const u8;
	glGetTextureLevelParameterivEXT = user_get_proc_address(cstr): *fp_glGetTextureLevelParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetTextureParameterIiv", cstr_buf): *const u8;
	glGetTextureParameterIiv = user_get_proc_address(cstr): *fp_glGetTextureParameterIiv;
	let cstr = strings::to_c_with_buf("glGetTextureParameterIivEXT", cstr_buf): *const u8;
	glGetTextureParameterIivEXT = user_get_proc_address(cstr): *fp_glGetTextureParameterIivEXT;
	let cstr = strings::to_c_with_buf("glGetTextureParameterIuiv", cstr_buf): *const u8;
	glGetTextureParameterIuiv = user_get_proc_address(cstr): *fp_glGetTextureParameterIuiv;
	let cstr = strings::to_c_with_buf("glGetTextureParameterIuivEXT", cstr_buf): *const u8;
	glGetTextureParameterIuivEXT = user_get_proc_address(cstr): *fp_glGetTextureParameterIuivEXT;
	let cstr = strings::to_c_with_buf("glGetTextureParameterfv", cstr_buf): *const u8;
	glGetTextureParameterfv = user_get_proc_address(cstr): *fp_glGetTextureParameterfv;
	let cstr = strings::to_c_with_buf("glGetTextureParameterfvEXT", cstr_buf): *const u8;
	glGetTextureParameterfvEXT = user_get_proc_address(cstr): *fp_glGetTextureParameterfvEXT;
	let cstr = strings::to_c_with_buf("glGetTextureParameteriv", cstr_buf): *const u8;
	glGetTextureParameteriv = user_get_proc_address(cstr): *fp_glGetTextureParameteriv;
	let cstr = strings::to_c_with_buf("glGetTextureParameterivEXT", cstr_buf): *const u8;
	glGetTextureParameterivEXT = user_get_proc_address(cstr): *fp_glGetTextureParameterivEXT;
	let cstr = strings::to_c_with_buf("glGetTextureSamplerHandleARB", cstr_buf): *const u8;
	glGetTextureSamplerHandleARB = user_get_proc_address(cstr): *fp_glGetTextureSamplerHandleARB;
	let cstr = strings::to_c_with_buf("glGetTextureSamplerHandleNV", cstr_buf): *const u8;
	glGetTextureSamplerHandleNV = user_get_proc_address(cstr): *fp_glGetTextureSamplerHandleNV;
	let cstr = strings::to_c_with_buf("glGetTextureSubImage", cstr_buf): *const u8;
	glGetTextureSubImage = user_get_proc_address(cstr): *fp_glGetTextureSubImage;
	let cstr = strings::to_c_with_buf("glGetTrackMatrixivNV", cstr_buf): *const u8;
	glGetTrackMatrixivNV = user_get_proc_address(cstr): *fp_glGetTrackMatrixivNV;
	let cstr = strings::to_c_with_buf("glGetTransformFeedbackVaryingEXT", cstr_buf): *const u8;
	glGetTransformFeedbackVaryingEXT = user_get_proc_address(cstr): *fp_glGetTransformFeedbackVaryingEXT;
	let cstr = strings::to_c_with_buf("glGetTransformFeedbackVaryingNV", cstr_buf): *const u8;
	glGetTransformFeedbackVaryingNV = user_get_proc_address(cstr): *fp_glGetTransformFeedbackVaryingNV;
	let cstr = strings::to_c_with_buf("glGetTransformFeedbacki64_v", cstr_buf): *const u8;
	glGetTransformFeedbacki64_v = user_get_proc_address(cstr): *fp_glGetTransformFeedbacki64_v;
	let cstr = strings::to_c_with_buf("glGetTransformFeedbacki_v", cstr_buf): *const u8;
	glGetTransformFeedbacki_v = user_get_proc_address(cstr): *fp_glGetTransformFeedbacki_v;
	let cstr = strings::to_c_with_buf("glGetTransformFeedbackiv", cstr_buf): *const u8;
	glGetTransformFeedbackiv = user_get_proc_address(cstr): *fp_glGetTransformFeedbackiv;
	let cstr = strings::to_c_with_buf("glGetUniformBlockIndex", cstr_buf): *const u8;
	glGetUniformBlockIndex = user_get_proc_address(cstr): *fp_glGetUniformBlockIndex;
	let cstr = strings::to_c_with_buf("glGetUniformBufferSizeEXT", cstr_buf): *const u8;
	glGetUniformBufferSizeEXT = user_get_proc_address(cstr): *fp_glGetUniformBufferSizeEXT;
	let cstr = strings::to_c_with_buf("glGetUniformIndices", cstr_buf): *const u8;
	glGetUniformIndices = user_get_proc_address(cstr): *fp_glGetUniformIndices;
	let cstr = strings::to_c_with_buf("glGetUniformLocation", cstr_buf): *const u8;
	glGetUniformLocation = user_get_proc_address(cstr): *fp_glGetUniformLocation;
	let cstr = strings::to_c_with_buf("glGetUniformLocationARB", cstr_buf): *const u8;
	glGetUniformLocationARB = user_get_proc_address(cstr): *fp_glGetUniformLocationARB;
	let cstr = strings::to_c_with_buf("glGetUniformOffsetEXT", cstr_buf): *const u8;
	glGetUniformOffsetEXT = user_get_proc_address(cstr): *fp_glGetUniformOffsetEXT;
	let cstr = strings::to_c_with_buf("glGetUniformSubroutineuiv", cstr_buf): *const u8;
	glGetUniformSubroutineuiv = user_get_proc_address(cstr): *fp_glGetUniformSubroutineuiv;
	let cstr = strings::to_c_with_buf("glGetUniformdv", cstr_buf): *const u8;
	glGetUniformdv = user_get_proc_address(cstr): *fp_glGetUniformdv;
	let cstr = strings::to_c_with_buf("glGetUniformfv", cstr_buf): *const u8;
	glGetUniformfv = user_get_proc_address(cstr): *fp_glGetUniformfv;
	let cstr = strings::to_c_with_buf("glGetUniformfvARB", cstr_buf): *const u8;
	glGetUniformfvARB = user_get_proc_address(cstr): *fp_glGetUniformfvARB;
	let cstr = strings::to_c_with_buf("glGetUniformi64vARB", cstr_buf): *const u8;
	glGetUniformi64vARB = user_get_proc_address(cstr): *fp_glGetUniformi64vARB;
	let cstr = strings::to_c_with_buf("glGetUniformi64vNV", cstr_buf): *const u8;
	glGetUniformi64vNV = user_get_proc_address(cstr): *fp_glGetUniformi64vNV;
	let cstr = strings::to_c_with_buf("glGetUniformiv", cstr_buf): *const u8;
	glGetUniformiv = user_get_proc_address(cstr): *fp_glGetUniformiv;
	let cstr = strings::to_c_with_buf("glGetUniformivARB", cstr_buf): *const u8;
	glGetUniformivARB = user_get_proc_address(cstr): *fp_glGetUniformivARB;
	let cstr = strings::to_c_with_buf("glGetUniformui64vARB", cstr_buf): *const u8;
	glGetUniformui64vARB = user_get_proc_address(cstr): *fp_glGetUniformui64vARB;
	let cstr = strings::to_c_with_buf("glGetUniformui64vNV", cstr_buf): *const u8;
	glGetUniformui64vNV = user_get_proc_address(cstr): *fp_glGetUniformui64vNV;
	let cstr = strings::to_c_with_buf("glGetUniformuivEXT", cstr_buf): *const u8;
	glGetUniformuivEXT = user_get_proc_address(cstr): *fp_glGetUniformuivEXT;
	let cstr = strings::to_c_with_buf("glGetUnsignedBytei_vEXT", cstr_buf): *const u8;
	glGetUnsignedBytei_vEXT = user_get_proc_address(cstr): *fp_glGetUnsignedBytei_vEXT;
	let cstr = strings::to_c_with_buf("glGetUnsignedBytevEXT", cstr_buf): *const u8;
	glGetUnsignedBytevEXT = user_get_proc_address(cstr): *fp_glGetUnsignedBytevEXT;
	let cstr = strings::to_c_with_buf("glGetVariantArrayObjectfvATI", cstr_buf): *const u8;
	glGetVariantArrayObjectfvATI = user_get_proc_address(cstr): *fp_glGetVariantArrayObjectfvATI;
	let cstr = strings::to_c_with_buf("glGetVariantArrayObjectivATI", cstr_buf): *const u8;
	glGetVariantArrayObjectivATI = user_get_proc_address(cstr): *fp_glGetVariantArrayObjectivATI;
	let cstr = strings::to_c_with_buf("glGetVariantBooleanvEXT", cstr_buf): *const u8;
	glGetVariantBooleanvEXT = user_get_proc_address(cstr): *fp_glGetVariantBooleanvEXT;
	let cstr = strings::to_c_with_buf("glGetVariantFloatvEXT", cstr_buf): *const u8;
	glGetVariantFloatvEXT = user_get_proc_address(cstr): *fp_glGetVariantFloatvEXT;
	let cstr = strings::to_c_with_buf("glGetVariantIntegervEXT", cstr_buf): *const u8;
	glGetVariantIntegervEXT = user_get_proc_address(cstr): *fp_glGetVariantIntegervEXT;
	let cstr = strings::to_c_with_buf("glGetVariantPointervEXT", cstr_buf): *const u8;
	glGetVariantPointervEXT = user_get_proc_address(cstr): *fp_glGetVariantPointervEXT;
	let cstr = strings::to_c_with_buf("glGetVaryingLocationNV", cstr_buf): *const u8;
	glGetVaryingLocationNV = user_get_proc_address(cstr): *fp_glGetVaryingLocationNV;
	let cstr = strings::to_c_with_buf("glGetVertexArrayIndexed64iv", cstr_buf): *const u8;
	glGetVertexArrayIndexed64iv = user_get_proc_address(cstr): *fp_glGetVertexArrayIndexed64iv;
	let cstr = strings::to_c_with_buf("glGetVertexArrayIndexediv", cstr_buf): *const u8;
	glGetVertexArrayIndexediv = user_get_proc_address(cstr): *fp_glGetVertexArrayIndexediv;
	let cstr = strings::to_c_with_buf("glGetVertexArrayIntegeri_vEXT", cstr_buf): *const u8;
	glGetVertexArrayIntegeri_vEXT = user_get_proc_address(cstr): *fp_glGetVertexArrayIntegeri_vEXT;
	let cstr = strings::to_c_with_buf("glGetVertexArrayIntegervEXT", cstr_buf): *const u8;
	glGetVertexArrayIntegervEXT = user_get_proc_address(cstr): *fp_glGetVertexArrayIntegervEXT;
	let cstr = strings::to_c_with_buf("glGetVertexArrayPointeri_vEXT", cstr_buf): *const u8;
	glGetVertexArrayPointeri_vEXT = user_get_proc_address(cstr): *fp_glGetVertexArrayPointeri_vEXT;
	let cstr = strings::to_c_with_buf("glGetVertexArrayPointervEXT", cstr_buf): *const u8;
	glGetVertexArrayPointervEXT = user_get_proc_address(cstr): *fp_glGetVertexArrayPointervEXT;
	let cstr = strings::to_c_with_buf("glGetVertexArrayiv", cstr_buf): *const u8;
	glGetVertexArrayiv = user_get_proc_address(cstr): *fp_glGetVertexArrayiv;
	let cstr = strings::to_c_with_buf("glGetVertexAttribArrayObjectfvATI", cstr_buf): *const u8;
	glGetVertexAttribArrayObjectfvATI = user_get_proc_address(cstr): *fp_glGetVertexAttribArrayObjectfvATI;
	let cstr = strings::to_c_with_buf("glGetVertexAttribArrayObjectivATI", cstr_buf): *const u8;
	glGetVertexAttribArrayObjectivATI = user_get_proc_address(cstr): *fp_glGetVertexAttribArrayObjectivATI;
	let cstr = strings::to_c_with_buf("glGetVertexAttribIivEXT", cstr_buf): *const u8;
	glGetVertexAttribIivEXT = user_get_proc_address(cstr): *fp_glGetVertexAttribIivEXT;
	let cstr = strings::to_c_with_buf("glGetVertexAttribIuivEXT", cstr_buf): *const u8;
	glGetVertexAttribIuivEXT = user_get_proc_address(cstr): *fp_glGetVertexAttribIuivEXT;
	let cstr = strings::to_c_with_buf("glGetVertexAttribLdv", cstr_buf): *const u8;
	glGetVertexAttribLdv = user_get_proc_address(cstr): *fp_glGetVertexAttribLdv;
	let cstr = strings::to_c_with_buf("glGetVertexAttribLdvEXT", cstr_buf): *const u8;
	glGetVertexAttribLdvEXT = user_get_proc_address(cstr): *fp_glGetVertexAttribLdvEXT;
	let cstr = strings::to_c_with_buf("glGetVertexAttribLi64vNV", cstr_buf): *const u8;
	glGetVertexAttribLi64vNV = user_get_proc_address(cstr): *fp_glGetVertexAttribLi64vNV;
	let cstr = strings::to_c_with_buf("glGetVertexAttribLui64vARB", cstr_buf): *const u8;
	glGetVertexAttribLui64vARB = user_get_proc_address(cstr): *fp_glGetVertexAttribLui64vARB;
	let cstr = strings::to_c_with_buf("glGetVertexAttribLui64vNV", cstr_buf): *const u8;
	glGetVertexAttribLui64vNV = user_get_proc_address(cstr): *fp_glGetVertexAttribLui64vNV;
	let cstr = strings::to_c_with_buf("glGetVertexAttribPointerv", cstr_buf): *const u8;
	glGetVertexAttribPointerv = user_get_proc_address(cstr): *fp_glGetVertexAttribPointerv;
	let cstr = strings::to_c_with_buf("glGetVertexAttribPointervARB", cstr_buf): *const u8;
	glGetVertexAttribPointervARB = user_get_proc_address(cstr): *fp_glGetVertexAttribPointervARB;
	let cstr = strings::to_c_with_buf("glGetVertexAttribPointervNV", cstr_buf): *const u8;
	glGetVertexAttribPointervNV = user_get_proc_address(cstr): *fp_glGetVertexAttribPointervNV;
	let cstr = strings::to_c_with_buf("glGetVertexAttribdv", cstr_buf): *const u8;
	glGetVertexAttribdv = user_get_proc_address(cstr): *fp_glGetVertexAttribdv;
	let cstr = strings::to_c_with_buf("glGetVertexAttribdvARB", cstr_buf): *const u8;
	glGetVertexAttribdvARB = user_get_proc_address(cstr): *fp_glGetVertexAttribdvARB;
	let cstr = strings::to_c_with_buf("glGetVertexAttribdvNV", cstr_buf): *const u8;
	glGetVertexAttribdvNV = user_get_proc_address(cstr): *fp_glGetVertexAttribdvNV;
	let cstr = strings::to_c_with_buf("glGetVertexAttribfv", cstr_buf): *const u8;
	glGetVertexAttribfv = user_get_proc_address(cstr): *fp_glGetVertexAttribfv;
	let cstr = strings::to_c_with_buf("glGetVertexAttribfvARB", cstr_buf): *const u8;
	glGetVertexAttribfvARB = user_get_proc_address(cstr): *fp_glGetVertexAttribfvARB;
	let cstr = strings::to_c_with_buf("glGetVertexAttribfvNV", cstr_buf): *const u8;
	glGetVertexAttribfvNV = user_get_proc_address(cstr): *fp_glGetVertexAttribfvNV;
	let cstr = strings::to_c_with_buf("glGetVertexAttribiv", cstr_buf): *const u8;
	glGetVertexAttribiv = user_get_proc_address(cstr): *fp_glGetVertexAttribiv;
	let cstr = strings::to_c_with_buf("glGetVertexAttribivARB", cstr_buf): *const u8;
	glGetVertexAttribivARB = user_get_proc_address(cstr): *fp_glGetVertexAttribivARB;
	let cstr = strings::to_c_with_buf("glGetVertexAttribivNV", cstr_buf): *const u8;
	glGetVertexAttribivNV = user_get_proc_address(cstr): *fp_glGetVertexAttribivNV;
	let cstr = strings::to_c_with_buf("glGetVideoCaptureStreamdvNV", cstr_buf): *const u8;
	glGetVideoCaptureStreamdvNV = user_get_proc_address(cstr): *fp_glGetVideoCaptureStreamdvNV;
	let cstr = strings::to_c_with_buf("glGetVideoCaptureStreamfvNV", cstr_buf): *const u8;
	glGetVideoCaptureStreamfvNV = user_get_proc_address(cstr): *fp_glGetVideoCaptureStreamfvNV;
	let cstr = strings::to_c_with_buf("glGetVideoCaptureStreamivNV", cstr_buf): *const u8;
	glGetVideoCaptureStreamivNV = user_get_proc_address(cstr): *fp_glGetVideoCaptureStreamivNV;
	let cstr = strings::to_c_with_buf("glGetVideoCaptureivNV", cstr_buf): *const u8;
	glGetVideoCaptureivNV = user_get_proc_address(cstr): *fp_glGetVideoCaptureivNV;
	let cstr = strings::to_c_with_buf("glGetVideoi64vNV", cstr_buf): *const u8;
	glGetVideoi64vNV = user_get_proc_address(cstr): *fp_glGetVideoi64vNV;
	let cstr = strings::to_c_with_buf("glGetVideoivNV", cstr_buf): *const u8;
	glGetVideoivNV = user_get_proc_address(cstr): *fp_glGetVideoivNV;
	let cstr = strings::to_c_with_buf("glGetVideoui64vNV", cstr_buf): *const u8;
	glGetVideoui64vNV = user_get_proc_address(cstr): *fp_glGetVideoui64vNV;
	let cstr = strings::to_c_with_buf("glGetVideouivNV", cstr_buf): *const u8;
	glGetVideouivNV = user_get_proc_address(cstr): *fp_glGetVideouivNV;
	let cstr = strings::to_c_with_buf("glGetVkProcAddrNV", cstr_buf): *const u8;
	glGetVkProcAddrNV = user_get_proc_address(cstr): *fp_glGetVkProcAddrNV;
	let cstr = strings::to_c_with_buf("glGetnCompressedTexImageARB", cstr_buf): *const u8;
	glGetnCompressedTexImageARB = user_get_proc_address(cstr): *fp_glGetnCompressedTexImageARB;
	let cstr = strings::to_c_with_buf("glGetnTexImageARB", cstr_buf): *const u8;
	glGetnTexImageARB = user_get_proc_address(cstr): *fp_glGetnTexImageARB;
	let cstr = strings::to_c_with_buf("glGetnUniformdvARB", cstr_buf): *const u8;
	glGetnUniformdvARB = user_get_proc_address(cstr): *fp_glGetnUniformdvARB;
	let cstr = strings::to_c_with_buf("glGetnUniformfv", cstr_buf): *const u8;
	glGetnUniformfv = user_get_proc_address(cstr): *fp_glGetnUniformfv;
	let cstr = strings::to_c_with_buf("glGetnUniformfvARB", cstr_buf): *const u8;
	glGetnUniformfvARB = user_get_proc_address(cstr): *fp_glGetnUniformfvARB;
	let cstr = strings::to_c_with_buf("glGetnUniformi64vARB", cstr_buf): *const u8;
	glGetnUniformi64vARB = user_get_proc_address(cstr): *fp_glGetnUniformi64vARB;
	let cstr = strings::to_c_with_buf("glGetnUniformiv", cstr_buf): *const u8;
	glGetnUniformiv = user_get_proc_address(cstr): *fp_glGetnUniformiv;
	let cstr = strings::to_c_with_buf("glGetnUniformivARB", cstr_buf): *const u8;
	glGetnUniformivARB = user_get_proc_address(cstr): *fp_glGetnUniformivARB;
	let cstr = strings::to_c_with_buf("glGetnUniformui64vARB", cstr_buf): *const u8;
	glGetnUniformui64vARB = user_get_proc_address(cstr): *fp_glGetnUniformui64vARB;
	let cstr = strings::to_c_with_buf("glGetnUniformuiv", cstr_buf): *const u8;
	glGetnUniformuiv = user_get_proc_address(cstr): *fp_glGetnUniformuiv;
	let cstr = strings::to_c_with_buf("glGetnUniformuivARB", cstr_buf): *const u8;
	glGetnUniformuivARB = user_get_proc_address(cstr): *fp_glGetnUniformuivARB;
	let cstr = strings::to_c_with_buf("glGlobalAlphaFactorbSUN", cstr_buf): *const u8;
	glGlobalAlphaFactorbSUN = user_get_proc_address(cstr): *fp_glGlobalAlphaFactorbSUN;
	let cstr = strings::to_c_with_buf("glGlobalAlphaFactordSUN", cstr_buf): *const u8;
	glGlobalAlphaFactordSUN = user_get_proc_address(cstr): *fp_glGlobalAlphaFactordSUN;
	let cstr = strings::to_c_with_buf("glGlobalAlphaFactorfSUN", cstr_buf): *const u8;
	glGlobalAlphaFactorfSUN = user_get_proc_address(cstr): *fp_glGlobalAlphaFactorfSUN;
	let cstr = strings::to_c_with_buf("glGlobalAlphaFactoriSUN", cstr_buf): *const u8;
	glGlobalAlphaFactoriSUN = user_get_proc_address(cstr): *fp_glGlobalAlphaFactoriSUN;
	let cstr = strings::to_c_with_buf("glGlobalAlphaFactorsSUN", cstr_buf): *const u8;
	glGlobalAlphaFactorsSUN = user_get_proc_address(cstr): *fp_glGlobalAlphaFactorsSUN;
	let cstr = strings::to_c_with_buf("glGlobalAlphaFactorubSUN", cstr_buf): *const u8;
	glGlobalAlphaFactorubSUN = user_get_proc_address(cstr): *fp_glGlobalAlphaFactorubSUN;
	let cstr = strings::to_c_with_buf("glGlobalAlphaFactoruiSUN", cstr_buf): *const u8;
	glGlobalAlphaFactoruiSUN = user_get_proc_address(cstr): *fp_glGlobalAlphaFactoruiSUN;
	let cstr = strings::to_c_with_buf("glGlobalAlphaFactorusSUN", cstr_buf): *const u8;
	glGlobalAlphaFactorusSUN = user_get_proc_address(cstr): *fp_glGlobalAlphaFactorusSUN;
	let cstr = strings::to_c_with_buf("glHint", cstr_buf): *const u8;
	glHint = user_get_proc_address(cstr): *fp_glHint;
	let cstr = strings::to_c_with_buf("glHintPGI", cstr_buf): *const u8;
	glHintPGI = user_get_proc_address(cstr): *fp_glHintPGI;
	let cstr = strings::to_c_with_buf("glHistogramEXT", cstr_buf): *const u8;
	glHistogramEXT = user_get_proc_address(cstr): *fp_glHistogramEXT;
	let cstr = strings::to_c_with_buf("glIglooInterfaceSGIX", cstr_buf): *const u8;
	glIglooInterfaceSGIX = user_get_proc_address(cstr): *fp_glIglooInterfaceSGIX;
	let cstr = strings::to_c_with_buf("glImageTransformParameterfHP", cstr_buf): *const u8;
	glImageTransformParameterfHP = user_get_proc_address(cstr): *fp_glImageTransformParameterfHP;
	let cstr = strings::to_c_with_buf("glImageTransformParameterfvHP", cstr_buf): *const u8;
	glImageTransformParameterfvHP = user_get_proc_address(cstr): *fp_glImageTransformParameterfvHP;
	let cstr = strings::to_c_with_buf("glImageTransformParameteriHP", cstr_buf): *const u8;
	glImageTransformParameteriHP = user_get_proc_address(cstr): *fp_glImageTransformParameteriHP;
	let cstr = strings::to_c_with_buf("glImageTransformParameterivHP", cstr_buf): *const u8;
	glImageTransformParameterivHP = user_get_proc_address(cstr): *fp_glImageTransformParameterivHP;
	let cstr = strings::to_c_with_buf("glImportMemoryFdEXT", cstr_buf): *const u8;
	glImportMemoryFdEXT = user_get_proc_address(cstr): *fp_glImportMemoryFdEXT;
	let cstr = strings::to_c_with_buf("glImportMemoryWin32HandleEXT", cstr_buf): *const u8;
	glImportMemoryWin32HandleEXT = user_get_proc_address(cstr): *fp_glImportMemoryWin32HandleEXT;
	let cstr = strings::to_c_with_buf("glImportMemoryWin32NameEXT", cstr_buf): *const u8;
	glImportMemoryWin32NameEXT = user_get_proc_address(cstr): *fp_glImportMemoryWin32NameEXT;
	let cstr = strings::to_c_with_buf("glImportSemaphoreFdEXT", cstr_buf): *const u8;
	glImportSemaphoreFdEXT = user_get_proc_address(cstr): *fp_glImportSemaphoreFdEXT;
	let cstr = strings::to_c_with_buf("glImportSemaphoreWin32HandleEXT", cstr_buf): *const u8;
	glImportSemaphoreWin32HandleEXT = user_get_proc_address(cstr): *fp_glImportSemaphoreWin32HandleEXT;
	let cstr = strings::to_c_with_buf("glImportSemaphoreWin32NameEXT", cstr_buf): *const u8;
	glImportSemaphoreWin32NameEXT = user_get_proc_address(cstr): *fp_glImportSemaphoreWin32NameEXT;
	let cstr = strings::to_c_with_buf("glImportSyncEXT", cstr_buf): *const u8;
	glImportSyncEXT = user_get_proc_address(cstr): *fp_glImportSyncEXT;
	let cstr = strings::to_c_with_buf("glIndexFormatNV", cstr_buf): *const u8;
	glIndexFormatNV = user_get_proc_address(cstr): *fp_glIndexFormatNV;
	let cstr = strings::to_c_with_buf("glIndexFuncEXT", cstr_buf): *const u8;
	glIndexFuncEXT = user_get_proc_address(cstr): *fp_glIndexFuncEXT;
	let cstr = strings::to_c_with_buf("glIndexMask", cstr_buf): *const u8;
	glIndexMask = user_get_proc_address(cstr): *fp_glIndexMask;
	let cstr = strings::to_c_with_buf("glIndexMaterialEXT", cstr_buf): *const u8;
	glIndexMaterialEXT = user_get_proc_address(cstr): *fp_glIndexMaterialEXT;
	let cstr = strings::to_c_with_buf("glIndexPointer", cstr_buf): *const u8;
	glIndexPointer = user_get_proc_address(cstr): *fp_glIndexPointer;
	let cstr = strings::to_c_with_buf("glIndexPointerEXT", cstr_buf): *const u8;
	glIndexPointerEXT = user_get_proc_address(cstr): *fp_glIndexPointerEXT;
	let cstr = strings::to_c_with_buf("glIndexPointerListIBM", cstr_buf): *const u8;
	glIndexPointerListIBM = user_get_proc_address(cstr): *fp_glIndexPointerListIBM;
	let cstr = strings::to_c_with_buf("glIndexd", cstr_buf): *const u8;
	glIndexd = user_get_proc_address(cstr): *fp_glIndexd;
	let cstr = strings::to_c_with_buf("glIndexdv", cstr_buf): *const u8;
	glIndexdv = user_get_proc_address(cstr): *fp_glIndexdv;
	let cstr = strings::to_c_with_buf("glIndexf", cstr_buf): *const u8;
	glIndexf = user_get_proc_address(cstr): *fp_glIndexf;
	let cstr = strings::to_c_with_buf("glIndexfv", cstr_buf): *const u8;
	glIndexfv = user_get_proc_address(cstr): *fp_glIndexfv;
	let cstr = strings::to_c_with_buf("glIndexi", cstr_buf): *const u8;
	glIndexi = user_get_proc_address(cstr): *fp_glIndexi;
	let cstr = strings::to_c_with_buf("glIndexiv", cstr_buf): *const u8;
	glIndexiv = user_get_proc_address(cstr): *fp_glIndexiv;
	let cstr = strings::to_c_with_buf("glIndexs", cstr_buf): *const u8;
	glIndexs = user_get_proc_address(cstr): *fp_glIndexs;
	let cstr = strings::to_c_with_buf("glIndexsv", cstr_buf): *const u8;
	glIndexsv = user_get_proc_address(cstr): *fp_glIndexsv;
	let cstr = strings::to_c_with_buf("glIndexub", cstr_buf): *const u8;
	glIndexub = user_get_proc_address(cstr): *fp_glIndexub;
	let cstr = strings::to_c_with_buf("glIndexubv", cstr_buf): *const u8;
	glIndexubv = user_get_proc_address(cstr): *fp_glIndexubv;
	let cstr = strings::to_c_with_buf("glIndexxOES", cstr_buf): *const u8;
	glIndexxOES = user_get_proc_address(cstr): *fp_glIndexxOES;
	let cstr = strings::to_c_with_buf("glIndexxvOES", cstr_buf): *const u8;
	glIndexxvOES = user_get_proc_address(cstr): *fp_glIndexxvOES;
	let cstr = strings::to_c_with_buf("glInitNames", cstr_buf): *const u8;
	glInitNames = user_get_proc_address(cstr): *fp_glInitNames;
	let cstr = strings::to_c_with_buf("glInsertComponentEXT", cstr_buf): *const u8;
	glInsertComponentEXT = user_get_proc_address(cstr): *fp_glInsertComponentEXT;
	let cstr = strings::to_c_with_buf("glInsertEventMarkerEXT", cstr_buf): *const u8;
	glInsertEventMarkerEXT = user_get_proc_address(cstr): *fp_glInsertEventMarkerEXT;
	let cstr = strings::to_c_with_buf("glInstrumentsBufferSGIX", cstr_buf): *const u8;
	glInstrumentsBufferSGIX = user_get_proc_address(cstr): *fp_glInstrumentsBufferSGIX;
	let cstr = strings::to_c_with_buf("glInterleavedArrays", cstr_buf): *const u8;
	glInterleavedArrays = user_get_proc_address(cstr): *fp_glInterleavedArrays;
	let cstr = strings::to_c_with_buf("glInterpolatePathsNV", cstr_buf): *const u8;
	glInterpolatePathsNV = user_get_proc_address(cstr): *fp_glInterpolatePathsNV;
	let cstr = strings::to_c_with_buf("glInvalidateBufferData", cstr_buf): *const u8;
	glInvalidateBufferData = user_get_proc_address(cstr): *fp_glInvalidateBufferData;
	let cstr = strings::to_c_with_buf("glInvalidateBufferSubData", cstr_buf): *const u8;
	glInvalidateBufferSubData = user_get_proc_address(cstr): *fp_glInvalidateBufferSubData;
	let cstr = strings::to_c_with_buf("glInvalidateFramebuffer", cstr_buf): *const u8;
	glInvalidateFramebuffer = user_get_proc_address(cstr): *fp_glInvalidateFramebuffer;
	let cstr = strings::to_c_with_buf("glInvalidateNamedFramebufferData", cstr_buf): *const u8;
	glInvalidateNamedFramebufferData = user_get_proc_address(cstr): *fp_glInvalidateNamedFramebufferData;
	let cstr = strings::to_c_with_buf("glInvalidateNamedFramebufferSubData", cstr_buf): *const u8;
	glInvalidateNamedFramebufferSubData = user_get_proc_address(cstr): *fp_glInvalidateNamedFramebufferSubData;
	let cstr = strings::to_c_with_buf("glInvalidateSubFramebuffer", cstr_buf): *const u8;
	glInvalidateSubFramebuffer = user_get_proc_address(cstr): *fp_glInvalidateSubFramebuffer;
	let cstr = strings::to_c_with_buf("glInvalidateTexImage", cstr_buf): *const u8;
	glInvalidateTexImage = user_get_proc_address(cstr): *fp_glInvalidateTexImage;
	let cstr = strings::to_c_with_buf("glInvalidateTexSubImage", cstr_buf): *const u8;
	glInvalidateTexSubImage = user_get_proc_address(cstr): *fp_glInvalidateTexSubImage;
	let cstr = strings::to_c_with_buf("glIsAsyncMarkerSGIX", cstr_buf): *const u8;
	glIsAsyncMarkerSGIX = user_get_proc_address(cstr): *fp_glIsAsyncMarkerSGIX;
	let cstr = strings::to_c_with_buf("glIsBuffer", cstr_buf): *const u8;
	glIsBuffer = user_get_proc_address(cstr): *fp_glIsBuffer;
	let cstr = strings::to_c_with_buf("glIsBufferARB", cstr_buf): *const u8;
	glIsBufferARB = user_get_proc_address(cstr): *fp_glIsBufferARB;
	let cstr = strings::to_c_with_buf("glIsBufferResidentNV", cstr_buf): *const u8;
	glIsBufferResidentNV = user_get_proc_address(cstr): *fp_glIsBufferResidentNV;
	let cstr = strings::to_c_with_buf("glIsCommandListNV", cstr_buf): *const u8;
	glIsCommandListNV = user_get_proc_address(cstr): *fp_glIsCommandListNV;
	let cstr = strings::to_c_with_buf("glIsEnabled", cstr_buf): *const u8;
	glIsEnabled = user_get_proc_address(cstr): *fp_glIsEnabled;
	let cstr = strings::to_c_with_buf("glIsEnabledIndexedEXT", cstr_buf): *const u8;
	glIsEnabledIndexedEXT = user_get_proc_address(cstr): *fp_glIsEnabledIndexedEXT;
	let cstr = strings::to_c_with_buf("glIsFenceAPPLE", cstr_buf): *const u8;
	glIsFenceAPPLE = user_get_proc_address(cstr): *fp_glIsFenceAPPLE;
	let cstr = strings::to_c_with_buf("glIsFenceNV", cstr_buf): *const u8;
	glIsFenceNV = user_get_proc_address(cstr): *fp_glIsFenceNV;
	let cstr = strings::to_c_with_buf("glIsFramebuffer", cstr_buf): *const u8;
	glIsFramebuffer = user_get_proc_address(cstr): *fp_glIsFramebuffer;
	let cstr = strings::to_c_with_buf("glIsFramebufferEXT", cstr_buf): *const u8;
	glIsFramebufferEXT = user_get_proc_address(cstr): *fp_glIsFramebufferEXT;
	let cstr = strings::to_c_with_buf("glIsImageHandleResidentARB", cstr_buf): *const u8;
	glIsImageHandleResidentARB = user_get_proc_address(cstr): *fp_glIsImageHandleResidentARB;
	let cstr = strings::to_c_with_buf("glIsImageHandleResidentNV", cstr_buf): *const u8;
	glIsImageHandleResidentNV = user_get_proc_address(cstr): *fp_glIsImageHandleResidentNV;
	let cstr = strings::to_c_with_buf("glIsList", cstr_buf): *const u8;
	glIsList = user_get_proc_address(cstr): *fp_glIsList;
	let cstr = strings::to_c_with_buf("glIsMemoryObjectEXT", cstr_buf): *const u8;
	glIsMemoryObjectEXT = user_get_proc_address(cstr): *fp_glIsMemoryObjectEXT;
	let cstr = strings::to_c_with_buf("glIsNameAMD", cstr_buf): *const u8;
	glIsNameAMD = user_get_proc_address(cstr): *fp_glIsNameAMD;
	let cstr = strings::to_c_with_buf("glIsNamedBufferResidentNV", cstr_buf): *const u8;
	glIsNamedBufferResidentNV = user_get_proc_address(cstr): *fp_glIsNamedBufferResidentNV;
	let cstr = strings::to_c_with_buf("glIsNamedStringARB", cstr_buf): *const u8;
	glIsNamedStringARB = user_get_proc_address(cstr): *fp_glIsNamedStringARB;
	let cstr = strings::to_c_with_buf("glIsObjectBufferATI", cstr_buf): *const u8;
	glIsObjectBufferATI = user_get_proc_address(cstr): *fp_glIsObjectBufferATI;
	let cstr = strings::to_c_with_buf("glIsOcclusionQueryNV", cstr_buf): *const u8;
	glIsOcclusionQueryNV = user_get_proc_address(cstr): *fp_glIsOcclusionQueryNV;
	let cstr = strings::to_c_with_buf("glIsPathNV", cstr_buf): *const u8;
	glIsPathNV = user_get_proc_address(cstr): *fp_glIsPathNV;
	let cstr = strings::to_c_with_buf("glIsPointInFillPathNV", cstr_buf): *const u8;
	glIsPointInFillPathNV = user_get_proc_address(cstr): *fp_glIsPointInFillPathNV;
	let cstr = strings::to_c_with_buf("glIsPointInStrokePathNV", cstr_buf): *const u8;
	glIsPointInStrokePathNV = user_get_proc_address(cstr): *fp_glIsPointInStrokePathNV;
	let cstr = strings::to_c_with_buf("glIsProgram", cstr_buf): *const u8;
	glIsProgram = user_get_proc_address(cstr): *fp_glIsProgram;
	let cstr = strings::to_c_with_buf("glIsProgramARB", cstr_buf): *const u8;
	glIsProgramARB = user_get_proc_address(cstr): *fp_glIsProgramARB;
	let cstr = strings::to_c_with_buf("glIsProgramNV", cstr_buf): *const u8;
	glIsProgramNV = user_get_proc_address(cstr): *fp_glIsProgramNV;
	let cstr = strings::to_c_with_buf("glIsProgramPipeline", cstr_buf): *const u8;
	glIsProgramPipeline = user_get_proc_address(cstr): *fp_glIsProgramPipeline;
	let cstr = strings::to_c_with_buf("glIsQuery", cstr_buf): *const u8;
	glIsQuery = user_get_proc_address(cstr): *fp_glIsQuery;
	let cstr = strings::to_c_with_buf("glIsQueryARB", cstr_buf): *const u8;
	glIsQueryARB = user_get_proc_address(cstr): *fp_glIsQueryARB;
	let cstr = strings::to_c_with_buf("glIsRenderbuffer", cstr_buf): *const u8;
	glIsRenderbuffer = user_get_proc_address(cstr): *fp_glIsRenderbuffer;
	let cstr = strings::to_c_with_buf("glIsRenderbufferEXT", cstr_buf): *const u8;
	glIsRenderbufferEXT = user_get_proc_address(cstr): *fp_glIsRenderbufferEXT;
	let cstr = strings::to_c_with_buf("glIsSampler", cstr_buf): *const u8;
	glIsSampler = user_get_proc_address(cstr): *fp_glIsSampler;
	let cstr = strings::to_c_with_buf("glIsSemaphoreEXT", cstr_buf): *const u8;
	glIsSemaphoreEXT = user_get_proc_address(cstr): *fp_glIsSemaphoreEXT;
	let cstr = strings::to_c_with_buf("glIsShader", cstr_buf): *const u8;
	glIsShader = user_get_proc_address(cstr): *fp_glIsShader;
	let cstr = strings::to_c_with_buf("glIsStateNV", cstr_buf): *const u8;
	glIsStateNV = user_get_proc_address(cstr): *fp_glIsStateNV;
	let cstr = strings::to_c_with_buf("glIsSync", cstr_buf): *const u8;
	glIsSync = user_get_proc_address(cstr): *fp_glIsSync;
	let cstr = strings::to_c_with_buf("glIsTexture", cstr_buf): *const u8;
	glIsTexture = user_get_proc_address(cstr): *fp_glIsTexture;
	let cstr = strings::to_c_with_buf("glIsTextureEXT", cstr_buf): *const u8;
	glIsTextureEXT = user_get_proc_address(cstr): *fp_glIsTextureEXT;
	let cstr = strings::to_c_with_buf("glIsTextureHandleResidentARB", cstr_buf): *const u8;
	glIsTextureHandleResidentARB = user_get_proc_address(cstr): *fp_glIsTextureHandleResidentARB;
	let cstr = strings::to_c_with_buf("glIsTextureHandleResidentNV", cstr_buf): *const u8;
	glIsTextureHandleResidentNV = user_get_proc_address(cstr): *fp_glIsTextureHandleResidentNV;
	let cstr = strings::to_c_with_buf("glIsTransformFeedback", cstr_buf): *const u8;
	glIsTransformFeedback = user_get_proc_address(cstr): *fp_glIsTransformFeedback;
	let cstr = strings::to_c_with_buf("glIsTransformFeedbackNV", cstr_buf): *const u8;
	glIsTransformFeedbackNV = user_get_proc_address(cstr): *fp_glIsTransformFeedbackNV;
	let cstr = strings::to_c_with_buf("glIsVariantEnabledEXT", cstr_buf): *const u8;
	glIsVariantEnabledEXT = user_get_proc_address(cstr): *fp_glIsVariantEnabledEXT;
	let cstr = strings::to_c_with_buf("glIsVertexArray", cstr_buf): *const u8;
	glIsVertexArray = user_get_proc_address(cstr): *fp_glIsVertexArray;
	let cstr = strings::to_c_with_buf("glIsVertexArrayAPPLE", cstr_buf): *const u8;
	glIsVertexArrayAPPLE = user_get_proc_address(cstr): *fp_glIsVertexArrayAPPLE;
	let cstr = strings::to_c_with_buf("glIsVertexAttribEnabledAPPLE", cstr_buf): *const u8;
	glIsVertexAttribEnabledAPPLE = user_get_proc_address(cstr): *fp_glIsVertexAttribEnabledAPPLE;
	let cstr = strings::to_c_with_buf("glLGPUCopyImageSubDataNVX", cstr_buf): *const u8;
	glLGPUCopyImageSubDataNVX = user_get_proc_address(cstr): *fp_glLGPUCopyImageSubDataNVX;
	let cstr = strings::to_c_with_buf("glLGPUInterlockNVX", cstr_buf): *const u8;
	glLGPUInterlockNVX = user_get_proc_address(cstr): *fp_glLGPUInterlockNVX;
	let cstr = strings::to_c_with_buf("glLGPUNamedBufferSubDataNVX", cstr_buf): *const u8;
	glLGPUNamedBufferSubDataNVX = user_get_proc_address(cstr): *fp_glLGPUNamedBufferSubDataNVX;
	let cstr = strings::to_c_with_buf("glLabelObjectEXT", cstr_buf): *const u8;
	glLabelObjectEXT = user_get_proc_address(cstr): *fp_glLabelObjectEXT;
	let cstr = strings::to_c_with_buf("glLightEnviSGIX", cstr_buf): *const u8;
	glLightEnviSGIX = user_get_proc_address(cstr): *fp_glLightEnviSGIX;
	let cstr = strings::to_c_with_buf("glLightModelf", cstr_buf): *const u8;
	glLightModelf = user_get_proc_address(cstr): *fp_glLightModelf;
	let cstr = strings::to_c_with_buf("glLightModelfv", cstr_buf): *const u8;
	glLightModelfv = user_get_proc_address(cstr): *fp_glLightModelfv;
	let cstr = strings::to_c_with_buf("glLightModeli", cstr_buf): *const u8;
	glLightModeli = user_get_proc_address(cstr): *fp_glLightModeli;
	let cstr = strings::to_c_with_buf("glLightModeliv", cstr_buf): *const u8;
	glLightModeliv = user_get_proc_address(cstr): *fp_glLightModeliv;
	let cstr = strings::to_c_with_buf("glLightModelxOES", cstr_buf): *const u8;
	glLightModelxOES = user_get_proc_address(cstr): *fp_glLightModelxOES;
	let cstr = strings::to_c_with_buf("glLightModelxvOES", cstr_buf): *const u8;
	glLightModelxvOES = user_get_proc_address(cstr): *fp_glLightModelxvOES;
	let cstr = strings::to_c_with_buf("glLightf", cstr_buf): *const u8;
	glLightf = user_get_proc_address(cstr): *fp_glLightf;
	let cstr = strings::to_c_with_buf("glLightfv", cstr_buf): *const u8;
	glLightfv = user_get_proc_address(cstr): *fp_glLightfv;
	let cstr = strings::to_c_with_buf("glLighti", cstr_buf): *const u8;
	glLighti = user_get_proc_address(cstr): *fp_glLighti;
	let cstr = strings::to_c_with_buf("glLightiv", cstr_buf): *const u8;
	glLightiv = user_get_proc_address(cstr): *fp_glLightiv;
	let cstr = strings::to_c_with_buf("glLightxOES", cstr_buf): *const u8;
	glLightxOES = user_get_proc_address(cstr): *fp_glLightxOES;
	let cstr = strings::to_c_with_buf("glLightxvOES", cstr_buf): *const u8;
	glLightxvOES = user_get_proc_address(cstr): *fp_glLightxvOES;
	let cstr = strings::to_c_with_buf("glLineStipple", cstr_buf): *const u8;
	glLineStipple = user_get_proc_address(cstr): *fp_glLineStipple;
	let cstr = strings::to_c_with_buf("glLineWidth", cstr_buf): *const u8;
	glLineWidth = user_get_proc_address(cstr): *fp_glLineWidth;
	let cstr = strings::to_c_with_buf("glLineWidthxOES", cstr_buf): *const u8;
	glLineWidthxOES = user_get_proc_address(cstr): *fp_glLineWidthxOES;
	let cstr = strings::to_c_with_buf("glLinkProgram", cstr_buf): *const u8;
	glLinkProgram = user_get_proc_address(cstr): *fp_glLinkProgram;
	let cstr = strings::to_c_with_buf("glLinkProgramARB", cstr_buf): *const u8;
	glLinkProgramARB = user_get_proc_address(cstr): *fp_glLinkProgramARB;
	let cstr = strings::to_c_with_buf("glListBase", cstr_buf): *const u8;
	glListBase = user_get_proc_address(cstr): *fp_glListBase;
	let cstr = strings::to_c_with_buf("glListDrawCommandsStatesClientNV", cstr_buf): *const u8;
	glListDrawCommandsStatesClientNV = user_get_proc_address(cstr): *fp_glListDrawCommandsStatesClientNV;
	let cstr = strings::to_c_with_buf("glListParameterfSGIX", cstr_buf): *const u8;
	glListParameterfSGIX = user_get_proc_address(cstr): *fp_glListParameterfSGIX;
	let cstr = strings::to_c_with_buf("glListParameterfvSGIX", cstr_buf): *const u8;
	glListParameterfvSGIX = user_get_proc_address(cstr): *fp_glListParameterfvSGIX;
	let cstr = strings::to_c_with_buf("glListParameteriSGIX", cstr_buf): *const u8;
	glListParameteriSGIX = user_get_proc_address(cstr): *fp_glListParameteriSGIX;
	let cstr = strings::to_c_with_buf("glListParameterivSGIX", cstr_buf): *const u8;
	glListParameterivSGIX = user_get_proc_address(cstr): *fp_glListParameterivSGIX;
	let cstr = strings::to_c_with_buf("glLoadIdentity", cstr_buf): *const u8;
	glLoadIdentity = user_get_proc_address(cstr): *fp_glLoadIdentity;
	let cstr = strings::to_c_with_buf("glLoadIdentityDeformationMapSGIX", cstr_buf): *const u8;
	glLoadIdentityDeformationMapSGIX = user_get_proc_address(cstr): *fp_glLoadIdentityDeformationMapSGIX;
	let cstr = strings::to_c_with_buf("glLoadMatrixd", cstr_buf): *const u8;
	glLoadMatrixd = user_get_proc_address(cstr): *fp_glLoadMatrixd;
	let cstr = strings::to_c_with_buf("glLoadMatrixf", cstr_buf): *const u8;
	glLoadMatrixf = user_get_proc_address(cstr): *fp_glLoadMatrixf;
	let cstr = strings::to_c_with_buf("glLoadMatrixxOES", cstr_buf): *const u8;
	glLoadMatrixxOES = user_get_proc_address(cstr): *fp_glLoadMatrixxOES;
	let cstr = strings::to_c_with_buf("glLoadName", cstr_buf): *const u8;
	glLoadName = user_get_proc_address(cstr): *fp_glLoadName;
	let cstr = strings::to_c_with_buf("glLoadProgramNV", cstr_buf): *const u8;
	glLoadProgramNV = user_get_proc_address(cstr): *fp_glLoadProgramNV;
	let cstr = strings::to_c_with_buf("glLoadTransposeMatrixd", cstr_buf): *const u8;
	glLoadTransposeMatrixd = user_get_proc_address(cstr): *fp_glLoadTransposeMatrixd;
	let cstr = strings::to_c_with_buf("glLoadTransposeMatrixdARB", cstr_buf): *const u8;
	glLoadTransposeMatrixdARB = user_get_proc_address(cstr): *fp_glLoadTransposeMatrixdARB;
	let cstr = strings::to_c_with_buf("glLoadTransposeMatrixf", cstr_buf): *const u8;
	glLoadTransposeMatrixf = user_get_proc_address(cstr): *fp_glLoadTransposeMatrixf;
	let cstr = strings::to_c_with_buf("glLoadTransposeMatrixfARB", cstr_buf): *const u8;
	glLoadTransposeMatrixfARB = user_get_proc_address(cstr): *fp_glLoadTransposeMatrixfARB;
	let cstr = strings::to_c_with_buf("glLoadTransposeMatrixxOES", cstr_buf): *const u8;
	glLoadTransposeMatrixxOES = user_get_proc_address(cstr): *fp_glLoadTransposeMatrixxOES;
	let cstr = strings::to_c_with_buf("glLockArraysEXT", cstr_buf): *const u8;
	glLockArraysEXT = user_get_proc_address(cstr): *fp_glLockArraysEXT;
	let cstr = strings::to_c_with_buf("glLogicOp", cstr_buf): *const u8;
	glLogicOp = user_get_proc_address(cstr): *fp_glLogicOp;
	let cstr = strings::to_c_with_buf("glMakeBufferNonResidentNV", cstr_buf): *const u8;
	glMakeBufferNonResidentNV = user_get_proc_address(cstr): *fp_glMakeBufferNonResidentNV;
	let cstr = strings::to_c_with_buf("glMakeBufferResidentNV", cstr_buf): *const u8;
	glMakeBufferResidentNV = user_get_proc_address(cstr): *fp_glMakeBufferResidentNV;
	let cstr = strings::to_c_with_buf("glMakeImageHandleNonResidentARB", cstr_buf): *const u8;
	glMakeImageHandleNonResidentARB = user_get_proc_address(cstr): *fp_glMakeImageHandleNonResidentARB;
	let cstr = strings::to_c_with_buf("glMakeImageHandleNonResidentNV", cstr_buf): *const u8;
	glMakeImageHandleNonResidentNV = user_get_proc_address(cstr): *fp_glMakeImageHandleNonResidentNV;
	let cstr = strings::to_c_with_buf("glMakeImageHandleResidentARB", cstr_buf): *const u8;
	glMakeImageHandleResidentARB = user_get_proc_address(cstr): *fp_glMakeImageHandleResidentARB;
	let cstr = strings::to_c_with_buf("glMakeImageHandleResidentNV", cstr_buf): *const u8;
	glMakeImageHandleResidentNV = user_get_proc_address(cstr): *fp_glMakeImageHandleResidentNV;
	let cstr = strings::to_c_with_buf("glMakeNamedBufferNonResidentNV", cstr_buf): *const u8;
	glMakeNamedBufferNonResidentNV = user_get_proc_address(cstr): *fp_glMakeNamedBufferNonResidentNV;
	let cstr = strings::to_c_with_buf("glMakeNamedBufferResidentNV", cstr_buf): *const u8;
	glMakeNamedBufferResidentNV = user_get_proc_address(cstr): *fp_glMakeNamedBufferResidentNV;
	let cstr = strings::to_c_with_buf("glMakeTextureHandleNonResidentARB", cstr_buf): *const u8;
	glMakeTextureHandleNonResidentARB = user_get_proc_address(cstr): *fp_glMakeTextureHandleNonResidentARB;
	let cstr = strings::to_c_with_buf("glMakeTextureHandleNonResidentNV", cstr_buf): *const u8;
	glMakeTextureHandleNonResidentNV = user_get_proc_address(cstr): *fp_glMakeTextureHandleNonResidentNV;
	let cstr = strings::to_c_with_buf("glMakeTextureHandleResidentARB", cstr_buf): *const u8;
	glMakeTextureHandleResidentARB = user_get_proc_address(cstr): *fp_glMakeTextureHandleResidentARB;
	let cstr = strings::to_c_with_buf("glMakeTextureHandleResidentNV", cstr_buf): *const u8;
	glMakeTextureHandleResidentNV = user_get_proc_address(cstr): *fp_glMakeTextureHandleResidentNV;
	let cstr = strings::to_c_with_buf("glMap1d", cstr_buf): *const u8;
	glMap1d = user_get_proc_address(cstr): *fp_glMap1d;
	let cstr = strings::to_c_with_buf("glMap1f", cstr_buf): *const u8;
	glMap1f = user_get_proc_address(cstr): *fp_glMap1f;
	let cstr = strings::to_c_with_buf("glMap1xOES", cstr_buf): *const u8;
	glMap1xOES = user_get_proc_address(cstr): *fp_glMap1xOES;
	let cstr = strings::to_c_with_buf("glMap2d", cstr_buf): *const u8;
	glMap2d = user_get_proc_address(cstr): *fp_glMap2d;
	let cstr = strings::to_c_with_buf("glMap2f", cstr_buf): *const u8;
	glMap2f = user_get_proc_address(cstr): *fp_glMap2f;
	let cstr = strings::to_c_with_buf("glMap2xOES", cstr_buf): *const u8;
	glMap2xOES = user_get_proc_address(cstr): *fp_glMap2xOES;
	let cstr = strings::to_c_with_buf("glMapBuffer", cstr_buf): *const u8;
	glMapBuffer = user_get_proc_address(cstr): *fp_glMapBuffer;
	let cstr = strings::to_c_with_buf("glMapBufferARB", cstr_buf): *const u8;
	glMapBufferARB = user_get_proc_address(cstr): *fp_glMapBufferARB;
	let cstr = strings::to_c_with_buf("glMapBufferRange", cstr_buf): *const u8;
	glMapBufferRange = user_get_proc_address(cstr): *fp_glMapBufferRange;
	let cstr = strings::to_c_with_buf("glMapControlPointsNV", cstr_buf): *const u8;
	glMapControlPointsNV = user_get_proc_address(cstr): *fp_glMapControlPointsNV;
	let cstr = strings::to_c_with_buf("glMapGrid1d", cstr_buf): *const u8;
	glMapGrid1d = user_get_proc_address(cstr): *fp_glMapGrid1d;
	let cstr = strings::to_c_with_buf("glMapGrid1f", cstr_buf): *const u8;
	glMapGrid1f = user_get_proc_address(cstr): *fp_glMapGrid1f;
	let cstr = strings::to_c_with_buf("glMapGrid1xOES", cstr_buf): *const u8;
	glMapGrid1xOES = user_get_proc_address(cstr): *fp_glMapGrid1xOES;
	let cstr = strings::to_c_with_buf("glMapGrid2d", cstr_buf): *const u8;
	glMapGrid2d = user_get_proc_address(cstr): *fp_glMapGrid2d;
	let cstr = strings::to_c_with_buf("glMapGrid2f", cstr_buf): *const u8;
	glMapGrid2f = user_get_proc_address(cstr): *fp_glMapGrid2f;
	let cstr = strings::to_c_with_buf("glMapGrid2xOES", cstr_buf): *const u8;
	glMapGrid2xOES = user_get_proc_address(cstr): *fp_glMapGrid2xOES;
	let cstr = strings::to_c_with_buf("glMapNamedBuffer", cstr_buf): *const u8;
	glMapNamedBuffer = user_get_proc_address(cstr): *fp_glMapNamedBuffer;
	let cstr = strings::to_c_with_buf("glMapNamedBufferEXT", cstr_buf): *const u8;
	glMapNamedBufferEXT = user_get_proc_address(cstr): *fp_glMapNamedBufferEXT;
	let cstr = strings::to_c_with_buf("glMapNamedBufferRange", cstr_buf): *const u8;
	glMapNamedBufferRange = user_get_proc_address(cstr): *fp_glMapNamedBufferRange;
	let cstr = strings::to_c_with_buf("glMapNamedBufferRangeEXT", cstr_buf): *const u8;
	glMapNamedBufferRangeEXT = user_get_proc_address(cstr): *fp_glMapNamedBufferRangeEXT;
	let cstr = strings::to_c_with_buf("glMapObjectBufferATI", cstr_buf): *const u8;
	glMapObjectBufferATI = user_get_proc_address(cstr): *fp_glMapObjectBufferATI;
	let cstr = strings::to_c_with_buf("glMapParameterfvNV", cstr_buf): *const u8;
	glMapParameterfvNV = user_get_proc_address(cstr): *fp_glMapParameterfvNV;
	let cstr = strings::to_c_with_buf("glMapParameterivNV", cstr_buf): *const u8;
	glMapParameterivNV = user_get_proc_address(cstr): *fp_glMapParameterivNV;
	let cstr = strings::to_c_with_buf("glMapTexture2DINTEL", cstr_buf): *const u8;
	glMapTexture2DINTEL = user_get_proc_address(cstr): *fp_glMapTexture2DINTEL;
	let cstr = strings::to_c_with_buf("glMapVertexAttrib1dAPPLE", cstr_buf): *const u8;
	glMapVertexAttrib1dAPPLE = user_get_proc_address(cstr): *fp_glMapVertexAttrib1dAPPLE;
	let cstr = strings::to_c_with_buf("glMapVertexAttrib1fAPPLE", cstr_buf): *const u8;
	glMapVertexAttrib1fAPPLE = user_get_proc_address(cstr): *fp_glMapVertexAttrib1fAPPLE;
	let cstr = strings::to_c_with_buf("glMapVertexAttrib2dAPPLE", cstr_buf): *const u8;
	glMapVertexAttrib2dAPPLE = user_get_proc_address(cstr): *fp_glMapVertexAttrib2dAPPLE;
	let cstr = strings::to_c_with_buf("glMapVertexAttrib2fAPPLE", cstr_buf): *const u8;
	glMapVertexAttrib2fAPPLE = user_get_proc_address(cstr): *fp_glMapVertexAttrib2fAPPLE;
	let cstr = strings::to_c_with_buf("glMaterialf", cstr_buf): *const u8;
	glMaterialf = user_get_proc_address(cstr): *fp_glMaterialf;
	let cstr = strings::to_c_with_buf("glMaterialfv", cstr_buf): *const u8;
	glMaterialfv = user_get_proc_address(cstr): *fp_glMaterialfv;
	let cstr = strings::to_c_with_buf("glMateriali", cstr_buf): *const u8;
	glMateriali = user_get_proc_address(cstr): *fp_glMateriali;
	let cstr = strings::to_c_with_buf("glMaterialiv", cstr_buf): *const u8;
	glMaterialiv = user_get_proc_address(cstr): *fp_glMaterialiv;
	let cstr = strings::to_c_with_buf("glMaterialxOES", cstr_buf): *const u8;
	glMaterialxOES = user_get_proc_address(cstr): *fp_glMaterialxOES;
	let cstr = strings::to_c_with_buf("glMaterialxvOES", cstr_buf): *const u8;
	glMaterialxvOES = user_get_proc_address(cstr): *fp_glMaterialxvOES;
	let cstr = strings::to_c_with_buf("glMatrixFrustumEXT", cstr_buf): *const u8;
	glMatrixFrustumEXT = user_get_proc_address(cstr): *fp_glMatrixFrustumEXT;
	let cstr = strings::to_c_with_buf("glMatrixIndexPointerARB", cstr_buf): *const u8;
	glMatrixIndexPointerARB = user_get_proc_address(cstr): *fp_glMatrixIndexPointerARB;
	let cstr = strings::to_c_with_buf("glMatrixIndexubvARB", cstr_buf): *const u8;
	glMatrixIndexubvARB = user_get_proc_address(cstr): *fp_glMatrixIndexubvARB;
	let cstr = strings::to_c_with_buf("glMatrixIndexuivARB", cstr_buf): *const u8;
	glMatrixIndexuivARB = user_get_proc_address(cstr): *fp_glMatrixIndexuivARB;
	let cstr = strings::to_c_with_buf("glMatrixIndexusvARB", cstr_buf): *const u8;
	glMatrixIndexusvARB = user_get_proc_address(cstr): *fp_glMatrixIndexusvARB;
	let cstr = strings::to_c_with_buf("glMatrixLoad3x2fNV", cstr_buf): *const u8;
	glMatrixLoad3x2fNV = user_get_proc_address(cstr): *fp_glMatrixLoad3x2fNV;
	let cstr = strings::to_c_with_buf("glMatrixLoad3x3fNV", cstr_buf): *const u8;
	glMatrixLoad3x3fNV = user_get_proc_address(cstr): *fp_glMatrixLoad3x3fNV;
	let cstr = strings::to_c_with_buf("glMatrixLoadIdentityEXT", cstr_buf): *const u8;
	glMatrixLoadIdentityEXT = user_get_proc_address(cstr): *fp_glMatrixLoadIdentityEXT;
	let cstr = strings::to_c_with_buf("glMatrixLoadTranspose3x3fNV", cstr_buf): *const u8;
	glMatrixLoadTranspose3x3fNV = user_get_proc_address(cstr): *fp_glMatrixLoadTranspose3x3fNV;
	let cstr = strings::to_c_with_buf("glMatrixLoadTransposedEXT", cstr_buf): *const u8;
	glMatrixLoadTransposedEXT = user_get_proc_address(cstr): *fp_glMatrixLoadTransposedEXT;
	let cstr = strings::to_c_with_buf("glMatrixLoadTransposefEXT", cstr_buf): *const u8;
	glMatrixLoadTransposefEXT = user_get_proc_address(cstr): *fp_glMatrixLoadTransposefEXT;
	let cstr = strings::to_c_with_buf("glMatrixLoaddEXT", cstr_buf): *const u8;
	glMatrixLoaddEXT = user_get_proc_address(cstr): *fp_glMatrixLoaddEXT;
	let cstr = strings::to_c_with_buf("glMatrixLoadfEXT", cstr_buf): *const u8;
	glMatrixLoadfEXT = user_get_proc_address(cstr): *fp_glMatrixLoadfEXT;
	let cstr = strings::to_c_with_buf("glMatrixMode", cstr_buf): *const u8;
	glMatrixMode = user_get_proc_address(cstr): *fp_glMatrixMode;
	let cstr = strings::to_c_with_buf("glMatrixMult3x2fNV", cstr_buf): *const u8;
	glMatrixMult3x2fNV = user_get_proc_address(cstr): *fp_glMatrixMult3x2fNV;
	let cstr = strings::to_c_with_buf("glMatrixMult3x3fNV", cstr_buf): *const u8;
	glMatrixMult3x3fNV = user_get_proc_address(cstr): *fp_glMatrixMult3x3fNV;
	let cstr = strings::to_c_with_buf("glMatrixMultTranspose3x3fNV", cstr_buf): *const u8;
	glMatrixMultTranspose3x3fNV = user_get_proc_address(cstr): *fp_glMatrixMultTranspose3x3fNV;
	let cstr = strings::to_c_with_buf("glMatrixMultTransposedEXT", cstr_buf): *const u8;
	glMatrixMultTransposedEXT = user_get_proc_address(cstr): *fp_glMatrixMultTransposedEXT;
	let cstr = strings::to_c_with_buf("glMatrixMultTransposefEXT", cstr_buf): *const u8;
	glMatrixMultTransposefEXT = user_get_proc_address(cstr): *fp_glMatrixMultTransposefEXT;
	let cstr = strings::to_c_with_buf("glMatrixMultdEXT", cstr_buf): *const u8;
	glMatrixMultdEXT = user_get_proc_address(cstr): *fp_glMatrixMultdEXT;
	let cstr = strings::to_c_with_buf("glMatrixMultfEXT", cstr_buf): *const u8;
	glMatrixMultfEXT = user_get_proc_address(cstr): *fp_glMatrixMultfEXT;
	let cstr = strings::to_c_with_buf("glMatrixOrthoEXT", cstr_buf): *const u8;
	glMatrixOrthoEXT = user_get_proc_address(cstr): *fp_glMatrixOrthoEXT;
	let cstr = strings::to_c_with_buf("glMatrixPopEXT", cstr_buf): *const u8;
	glMatrixPopEXT = user_get_proc_address(cstr): *fp_glMatrixPopEXT;
	let cstr = strings::to_c_with_buf("glMatrixPushEXT", cstr_buf): *const u8;
	glMatrixPushEXT = user_get_proc_address(cstr): *fp_glMatrixPushEXT;
	let cstr = strings::to_c_with_buf("glMatrixRotatedEXT", cstr_buf): *const u8;
	glMatrixRotatedEXT = user_get_proc_address(cstr): *fp_glMatrixRotatedEXT;
	let cstr = strings::to_c_with_buf("glMatrixRotatefEXT", cstr_buf): *const u8;
	glMatrixRotatefEXT = user_get_proc_address(cstr): *fp_glMatrixRotatefEXT;
	let cstr = strings::to_c_with_buf("glMatrixScaledEXT", cstr_buf): *const u8;
	glMatrixScaledEXT = user_get_proc_address(cstr): *fp_glMatrixScaledEXT;
	let cstr = strings::to_c_with_buf("glMatrixScalefEXT", cstr_buf): *const u8;
	glMatrixScalefEXT = user_get_proc_address(cstr): *fp_glMatrixScalefEXT;
	let cstr = strings::to_c_with_buf("glMatrixTranslatedEXT", cstr_buf): *const u8;
	glMatrixTranslatedEXT = user_get_proc_address(cstr): *fp_glMatrixTranslatedEXT;
	let cstr = strings::to_c_with_buf("glMatrixTranslatefEXT", cstr_buf): *const u8;
	glMatrixTranslatefEXT = user_get_proc_address(cstr): *fp_glMatrixTranslatefEXT;
	let cstr = strings::to_c_with_buf("glMaxShaderCompilerThreadsARB", cstr_buf): *const u8;
	glMaxShaderCompilerThreadsARB = user_get_proc_address(cstr): *fp_glMaxShaderCompilerThreadsARB;
	let cstr = strings::to_c_with_buf("glMaxShaderCompilerThreadsKHR", cstr_buf): *const u8;
	glMaxShaderCompilerThreadsKHR = user_get_proc_address(cstr): *fp_glMaxShaderCompilerThreadsKHR;
	let cstr = strings::to_c_with_buf("glMemoryBarrier", cstr_buf): *const u8;
	glMemoryBarrier = user_get_proc_address(cstr): *fp_glMemoryBarrier;
	let cstr = strings::to_c_with_buf("glMemoryBarrierByRegion", cstr_buf): *const u8;
	glMemoryBarrierByRegion = user_get_proc_address(cstr): *fp_glMemoryBarrierByRegion;
	let cstr = strings::to_c_with_buf("glMemoryBarrierEXT", cstr_buf): *const u8;
	glMemoryBarrierEXT = user_get_proc_address(cstr): *fp_glMemoryBarrierEXT;
	let cstr = strings::to_c_with_buf("glMemoryObjectParameterivEXT", cstr_buf): *const u8;
	glMemoryObjectParameterivEXT = user_get_proc_address(cstr): *fp_glMemoryObjectParameterivEXT;
	let cstr = strings::to_c_with_buf("glMinSampleShadingARB", cstr_buf): *const u8;
	glMinSampleShadingARB = user_get_proc_address(cstr): *fp_glMinSampleShadingARB;
	let cstr = strings::to_c_with_buf("glMinmaxEXT", cstr_buf): *const u8;
	glMinmaxEXT = user_get_proc_address(cstr): *fp_glMinmaxEXT;
	let cstr = strings::to_c_with_buf("glMultMatrixd", cstr_buf): *const u8;
	glMultMatrixd = user_get_proc_address(cstr): *fp_glMultMatrixd;
	let cstr = strings::to_c_with_buf("glMultMatrixf", cstr_buf): *const u8;
	glMultMatrixf = user_get_proc_address(cstr): *fp_glMultMatrixf;
	let cstr = strings::to_c_with_buf("glMultMatrixxOES", cstr_buf): *const u8;
	glMultMatrixxOES = user_get_proc_address(cstr): *fp_glMultMatrixxOES;
	let cstr = strings::to_c_with_buf("glMultTransposeMatrixd", cstr_buf): *const u8;
	glMultTransposeMatrixd = user_get_proc_address(cstr): *fp_glMultTransposeMatrixd;
	let cstr = strings::to_c_with_buf("glMultTransposeMatrixdARB", cstr_buf): *const u8;
	glMultTransposeMatrixdARB = user_get_proc_address(cstr): *fp_glMultTransposeMatrixdARB;
	let cstr = strings::to_c_with_buf("glMultTransposeMatrixf", cstr_buf): *const u8;
	glMultTransposeMatrixf = user_get_proc_address(cstr): *fp_glMultTransposeMatrixf;
	let cstr = strings::to_c_with_buf("glMultTransposeMatrixfARB", cstr_buf): *const u8;
	glMultTransposeMatrixfARB = user_get_proc_address(cstr): *fp_glMultTransposeMatrixfARB;
	let cstr = strings::to_c_with_buf("glMultTransposeMatrixxOES", cstr_buf): *const u8;
	glMultTransposeMatrixxOES = user_get_proc_address(cstr): *fp_glMultTransposeMatrixxOES;
	let cstr = strings::to_c_with_buf("glMultiDrawArrays", cstr_buf): *const u8;
	glMultiDrawArrays = user_get_proc_address(cstr): *fp_glMultiDrawArrays;
	let cstr = strings::to_c_with_buf("glMultiDrawArraysEXT", cstr_buf): *const u8;
	glMultiDrawArraysEXT = user_get_proc_address(cstr): *fp_glMultiDrawArraysEXT;
	let cstr = strings::to_c_with_buf("glMultiDrawArraysIndirect", cstr_buf): *const u8;
	glMultiDrawArraysIndirect = user_get_proc_address(cstr): *fp_glMultiDrawArraysIndirect;
	let cstr = strings::to_c_with_buf("glMultiDrawArraysIndirectAMD", cstr_buf): *const u8;
	glMultiDrawArraysIndirectAMD = user_get_proc_address(cstr): *fp_glMultiDrawArraysIndirectAMD;
	let cstr = strings::to_c_with_buf("glMultiDrawArraysIndirectBindlessCountNV", cstr_buf): *const u8;
	glMultiDrawArraysIndirectBindlessCountNV = user_get_proc_address(cstr): *fp_glMultiDrawArraysIndirectBindlessCountNV;
	let cstr = strings::to_c_with_buf("glMultiDrawArraysIndirectBindlessNV", cstr_buf): *const u8;
	glMultiDrawArraysIndirectBindlessNV = user_get_proc_address(cstr): *fp_glMultiDrawArraysIndirectBindlessNV;
	let cstr = strings::to_c_with_buf("glMultiDrawArraysIndirectCountARB", cstr_buf): *const u8;
	glMultiDrawArraysIndirectCountARB = user_get_proc_address(cstr): *fp_glMultiDrawArraysIndirectCountARB;
	let cstr = strings::to_c_with_buf("glMultiDrawElementArrayAPPLE", cstr_buf): *const u8;
	glMultiDrawElementArrayAPPLE = user_get_proc_address(cstr): *fp_glMultiDrawElementArrayAPPLE;
	let cstr = strings::to_c_with_buf("glMultiDrawElements", cstr_buf): *const u8;
	glMultiDrawElements = user_get_proc_address(cstr): *fp_glMultiDrawElements;
	let cstr = strings::to_c_with_buf("glMultiDrawElementsBaseVertex", cstr_buf): *const u8;
	glMultiDrawElementsBaseVertex = user_get_proc_address(cstr): *fp_glMultiDrawElementsBaseVertex;
	let cstr = strings::to_c_with_buf("glMultiDrawElementsEXT", cstr_buf): *const u8;
	glMultiDrawElementsEXT = user_get_proc_address(cstr): *fp_glMultiDrawElementsEXT;
	let cstr = strings::to_c_with_buf("glMultiDrawElementsIndirect", cstr_buf): *const u8;
	glMultiDrawElementsIndirect = user_get_proc_address(cstr): *fp_glMultiDrawElementsIndirect;
	let cstr = strings::to_c_with_buf("glMultiDrawElementsIndirectAMD", cstr_buf): *const u8;
	glMultiDrawElementsIndirectAMD = user_get_proc_address(cstr): *fp_glMultiDrawElementsIndirectAMD;
	let cstr = strings::to_c_with_buf("glMultiDrawElementsIndirectBindlessCountNV", cstr_buf): *const u8;
	glMultiDrawElementsIndirectBindlessCountNV = user_get_proc_address(cstr): *fp_glMultiDrawElementsIndirectBindlessCountNV;
	let cstr = strings::to_c_with_buf("glMultiDrawElementsIndirectBindlessNV", cstr_buf): *const u8;
	glMultiDrawElementsIndirectBindlessNV = user_get_proc_address(cstr): *fp_glMultiDrawElementsIndirectBindlessNV;
	let cstr = strings::to_c_with_buf("glMultiDrawElementsIndirectCountARB", cstr_buf): *const u8;
	glMultiDrawElementsIndirectCountARB = user_get_proc_address(cstr): *fp_glMultiDrawElementsIndirectCountARB;
	let cstr = strings::to_c_with_buf("glMultiDrawMeshTasksIndirectCountNV", cstr_buf): *const u8;
	glMultiDrawMeshTasksIndirectCountNV = user_get_proc_address(cstr): *fp_glMultiDrawMeshTasksIndirectCountNV;
	let cstr = strings::to_c_with_buf("glMultiDrawMeshTasksIndirectNV", cstr_buf): *const u8;
	glMultiDrawMeshTasksIndirectNV = user_get_proc_address(cstr): *fp_glMultiDrawMeshTasksIndirectNV;
	let cstr = strings::to_c_with_buf("glMultiDrawRangeElementArrayAPPLE", cstr_buf): *const u8;
	glMultiDrawRangeElementArrayAPPLE = user_get_proc_address(cstr): *fp_glMultiDrawRangeElementArrayAPPLE;
	let cstr = strings::to_c_with_buf("glMultiModeDrawArraysIBM", cstr_buf): *const u8;
	glMultiModeDrawArraysIBM = user_get_proc_address(cstr): *fp_glMultiModeDrawArraysIBM;
	let cstr = strings::to_c_with_buf("glMultiModeDrawElementsIBM", cstr_buf): *const u8;
	glMultiModeDrawElementsIBM = user_get_proc_address(cstr): *fp_glMultiModeDrawElementsIBM;
	let cstr = strings::to_c_with_buf("glMultiTexBufferEXT", cstr_buf): *const u8;
	glMultiTexBufferEXT = user_get_proc_address(cstr): *fp_glMultiTexBufferEXT;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1bOES", cstr_buf): *const u8;
	glMultiTexCoord1bOES = user_get_proc_address(cstr): *fp_glMultiTexCoord1bOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1bvOES", cstr_buf): *const u8;
	glMultiTexCoord1bvOES = user_get_proc_address(cstr): *fp_glMultiTexCoord1bvOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1d", cstr_buf): *const u8;
	glMultiTexCoord1d = user_get_proc_address(cstr): *fp_glMultiTexCoord1d;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1dARB", cstr_buf): *const u8;
	glMultiTexCoord1dARB = user_get_proc_address(cstr): *fp_glMultiTexCoord1dARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1dv", cstr_buf): *const u8;
	glMultiTexCoord1dv = user_get_proc_address(cstr): *fp_glMultiTexCoord1dv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1dvARB", cstr_buf): *const u8;
	glMultiTexCoord1dvARB = user_get_proc_address(cstr): *fp_glMultiTexCoord1dvARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1f", cstr_buf): *const u8;
	glMultiTexCoord1f = user_get_proc_address(cstr): *fp_glMultiTexCoord1f;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1fARB", cstr_buf): *const u8;
	glMultiTexCoord1fARB = user_get_proc_address(cstr): *fp_glMultiTexCoord1fARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1fv", cstr_buf): *const u8;
	glMultiTexCoord1fv = user_get_proc_address(cstr): *fp_glMultiTexCoord1fv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1fvARB", cstr_buf): *const u8;
	glMultiTexCoord1fvARB = user_get_proc_address(cstr): *fp_glMultiTexCoord1fvARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1hNV", cstr_buf): *const u8;
	glMultiTexCoord1hNV = user_get_proc_address(cstr): *fp_glMultiTexCoord1hNV;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1hvNV", cstr_buf): *const u8;
	glMultiTexCoord1hvNV = user_get_proc_address(cstr): *fp_glMultiTexCoord1hvNV;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1i", cstr_buf): *const u8;
	glMultiTexCoord1i = user_get_proc_address(cstr): *fp_glMultiTexCoord1i;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1iARB", cstr_buf): *const u8;
	glMultiTexCoord1iARB = user_get_proc_address(cstr): *fp_glMultiTexCoord1iARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1iv", cstr_buf): *const u8;
	glMultiTexCoord1iv = user_get_proc_address(cstr): *fp_glMultiTexCoord1iv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1ivARB", cstr_buf): *const u8;
	glMultiTexCoord1ivARB = user_get_proc_address(cstr): *fp_glMultiTexCoord1ivARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1s", cstr_buf): *const u8;
	glMultiTexCoord1s = user_get_proc_address(cstr): *fp_glMultiTexCoord1s;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1sARB", cstr_buf): *const u8;
	glMultiTexCoord1sARB = user_get_proc_address(cstr): *fp_glMultiTexCoord1sARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1sv", cstr_buf): *const u8;
	glMultiTexCoord1sv = user_get_proc_address(cstr): *fp_glMultiTexCoord1sv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1svARB", cstr_buf): *const u8;
	glMultiTexCoord1svARB = user_get_proc_address(cstr): *fp_glMultiTexCoord1svARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1xOES", cstr_buf): *const u8;
	glMultiTexCoord1xOES = user_get_proc_address(cstr): *fp_glMultiTexCoord1xOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord1xvOES", cstr_buf): *const u8;
	glMultiTexCoord1xvOES = user_get_proc_address(cstr): *fp_glMultiTexCoord1xvOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2bOES", cstr_buf): *const u8;
	glMultiTexCoord2bOES = user_get_proc_address(cstr): *fp_glMultiTexCoord2bOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2bvOES", cstr_buf): *const u8;
	glMultiTexCoord2bvOES = user_get_proc_address(cstr): *fp_glMultiTexCoord2bvOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2d", cstr_buf): *const u8;
	glMultiTexCoord2d = user_get_proc_address(cstr): *fp_glMultiTexCoord2d;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2dARB", cstr_buf): *const u8;
	glMultiTexCoord2dARB = user_get_proc_address(cstr): *fp_glMultiTexCoord2dARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2dv", cstr_buf): *const u8;
	glMultiTexCoord2dv = user_get_proc_address(cstr): *fp_glMultiTexCoord2dv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2dvARB", cstr_buf): *const u8;
	glMultiTexCoord2dvARB = user_get_proc_address(cstr): *fp_glMultiTexCoord2dvARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2f", cstr_buf): *const u8;
	glMultiTexCoord2f = user_get_proc_address(cstr): *fp_glMultiTexCoord2f;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2fARB", cstr_buf): *const u8;
	glMultiTexCoord2fARB = user_get_proc_address(cstr): *fp_glMultiTexCoord2fARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2fv", cstr_buf): *const u8;
	glMultiTexCoord2fv = user_get_proc_address(cstr): *fp_glMultiTexCoord2fv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2fvARB", cstr_buf): *const u8;
	glMultiTexCoord2fvARB = user_get_proc_address(cstr): *fp_glMultiTexCoord2fvARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2hNV", cstr_buf): *const u8;
	glMultiTexCoord2hNV = user_get_proc_address(cstr): *fp_glMultiTexCoord2hNV;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2hvNV", cstr_buf): *const u8;
	glMultiTexCoord2hvNV = user_get_proc_address(cstr): *fp_glMultiTexCoord2hvNV;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2i", cstr_buf): *const u8;
	glMultiTexCoord2i = user_get_proc_address(cstr): *fp_glMultiTexCoord2i;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2iARB", cstr_buf): *const u8;
	glMultiTexCoord2iARB = user_get_proc_address(cstr): *fp_glMultiTexCoord2iARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2iv", cstr_buf): *const u8;
	glMultiTexCoord2iv = user_get_proc_address(cstr): *fp_glMultiTexCoord2iv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2ivARB", cstr_buf): *const u8;
	glMultiTexCoord2ivARB = user_get_proc_address(cstr): *fp_glMultiTexCoord2ivARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2s", cstr_buf): *const u8;
	glMultiTexCoord2s = user_get_proc_address(cstr): *fp_glMultiTexCoord2s;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2sARB", cstr_buf): *const u8;
	glMultiTexCoord2sARB = user_get_proc_address(cstr): *fp_glMultiTexCoord2sARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2sv", cstr_buf): *const u8;
	glMultiTexCoord2sv = user_get_proc_address(cstr): *fp_glMultiTexCoord2sv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2svARB", cstr_buf): *const u8;
	glMultiTexCoord2svARB = user_get_proc_address(cstr): *fp_glMultiTexCoord2svARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2xOES", cstr_buf): *const u8;
	glMultiTexCoord2xOES = user_get_proc_address(cstr): *fp_glMultiTexCoord2xOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord2xvOES", cstr_buf): *const u8;
	glMultiTexCoord2xvOES = user_get_proc_address(cstr): *fp_glMultiTexCoord2xvOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3bOES", cstr_buf): *const u8;
	glMultiTexCoord3bOES = user_get_proc_address(cstr): *fp_glMultiTexCoord3bOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3bvOES", cstr_buf): *const u8;
	glMultiTexCoord3bvOES = user_get_proc_address(cstr): *fp_glMultiTexCoord3bvOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3d", cstr_buf): *const u8;
	glMultiTexCoord3d = user_get_proc_address(cstr): *fp_glMultiTexCoord3d;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3dARB", cstr_buf): *const u8;
	glMultiTexCoord3dARB = user_get_proc_address(cstr): *fp_glMultiTexCoord3dARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3dv", cstr_buf): *const u8;
	glMultiTexCoord3dv = user_get_proc_address(cstr): *fp_glMultiTexCoord3dv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3dvARB", cstr_buf): *const u8;
	glMultiTexCoord3dvARB = user_get_proc_address(cstr): *fp_glMultiTexCoord3dvARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3f", cstr_buf): *const u8;
	glMultiTexCoord3f = user_get_proc_address(cstr): *fp_glMultiTexCoord3f;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3fARB", cstr_buf): *const u8;
	glMultiTexCoord3fARB = user_get_proc_address(cstr): *fp_glMultiTexCoord3fARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3fv", cstr_buf): *const u8;
	glMultiTexCoord3fv = user_get_proc_address(cstr): *fp_glMultiTexCoord3fv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3fvARB", cstr_buf): *const u8;
	glMultiTexCoord3fvARB = user_get_proc_address(cstr): *fp_glMultiTexCoord3fvARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3hNV", cstr_buf): *const u8;
	glMultiTexCoord3hNV = user_get_proc_address(cstr): *fp_glMultiTexCoord3hNV;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3hvNV", cstr_buf): *const u8;
	glMultiTexCoord3hvNV = user_get_proc_address(cstr): *fp_glMultiTexCoord3hvNV;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3i", cstr_buf): *const u8;
	glMultiTexCoord3i = user_get_proc_address(cstr): *fp_glMultiTexCoord3i;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3iARB", cstr_buf): *const u8;
	glMultiTexCoord3iARB = user_get_proc_address(cstr): *fp_glMultiTexCoord3iARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3iv", cstr_buf): *const u8;
	glMultiTexCoord3iv = user_get_proc_address(cstr): *fp_glMultiTexCoord3iv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3ivARB", cstr_buf): *const u8;
	glMultiTexCoord3ivARB = user_get_proc_address(cstr): *fp_glMultiTexCoord3ivARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3s", cstr_buf): *const u8;
	glMultiTexCoord3s = user_get_proc_address(cstr): *fp_glMultiTexCoord3s;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3sARB", cstr_buf): *const u8;
	glMultiTexCoord3sARB = user_get_proc_address(cstr): *fp_glMultiTexCoord3sARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3sv", cstr_buf): *const u8;
	glMultiTexCoord3sv = user_get_proc_address(cstr): *fp_glMultiTexCoord3sv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3svARB", cstr_buf): *const u8;
	glMultiTexCoord3svARB = user_get_proc_address(cstr): *fp_glMultiTexCoord3svARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3xOES", cstr_buf): *const u8;
	glMultiTexCoord3xOES = user_get_proc_address(cstr): *fp_glMultiTexCoord3xOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord3xvOES", cstr_buf): *const u8;
	glMultiTexCoord3xvOES = user_get_proc_address(cstr): *fp_glMultiTexCoord3xvOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4bOES", cstr_buf): *const u8;
	glMultiTexCoord4bOES = user_get_proc_address(cstr): *fp_glMultiTexCoord4bOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4bvOES", cstr_buf): *const u8;
	glMultiTexCoord4bvOES = user_get_proc_address(cstr): *fp_glMultiTexCoord4bvOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4d", cstr_buf): *const u8;
	glMultiTexCoord4d = user_get_proc_address(cstr): *fp_glMultiTexCoord4d;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4dARB", cstr_buf): *const u8;
	glMultiTexCoord4dARB = user_get_proc_address(cstr): *fp_glMultiTexCoord4dARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4dv", cstr_buf): *const u8;
	glMultiTexCoord4dv = user_get_proc_address(cstr): *fp_glMultiTexCoord4dv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4dvARB", cstr_buf): *const u8;
	glMultiTexCoord4dvARB = user_get_proc_address(cstr): *fp_glMultiTexCoord4dvARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4f", cstr_buf): *const u8;
	glMultiTexCoord4f = user_get_proc_address(cstr): *fp_glMultiTexCoord4f;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4fARB", cstr_buf): *const u8;
	glMultiTexCoord4fARB = user_get_proc_address(cstr): *fp_glMultiTexCoord4fARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4fv", cstr_buf): *const u8;
	glMultiTexCoord4fv = user_get_proc_address(cstr): *fp_glMultiTexCoord4fv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4fvARB", cstr_buf): *const u8;
	glMultiTexCoord4fvARB = user_get_proc_address(cstr): *fp_glMultiTexCoord4fvARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4hNV", cstr_buf): *const u8;
	glMultiTexCoord4hNV = user_get_proc_address(cstr): *fp_glMultiTexCoord4hNV;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4hvNV", cstr_buf): *const u8;
	glMultiTexCoord4hvNV = user_get_proc_address(cstr): *fp_glMultiTexCoord4hvNV;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4i", cstr_buf): *const u8;
	glMultiTexCoord4i = user_get_proc_address(cstr): *fp_glMultiTexCoord4i;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4iARB", cstr_buf): *const u8;
	glMultiTexCoord4iARB = user_get_proc_address(cstr): *fp_glMultiTexCoord4iARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4iv", cstr_buf): *const u8;
	glMultiTexCoord4iv = user_get_proc_address(cstr): *fp_glMultiTexCoord4iv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4ivARB", cstr_buf): *const u8;
	glMultiTexCoord4ivARB = user_get_proc_address(cstr): *fp_glMultiTexCoord4ivARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4s", cstr_buf): *const u8;
	glMultiTexCoord4s = user_get_proc_address(cstr): *fp_glMultiTexCoord4s;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4sARB", cstr_buf): *const u8;
	glMultiTexCoord4sARB = user_get_proc_address(cstr): *fp_glMultiTexCoord4sARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4sv", cstr_buf): *const u8;
	glMultiTexCoord4sv = user_get_proc_address(cstr): *fp_glMultiTexCoord4sv;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4svARB", cstr_buf): *const u8;
	glMultiTexCoord4svARB = user_get_proc_address(cstr): *fp_glMultiTexCoord4svARB;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4xOES", cstr_buf): *const u8;
	glMultiTexCoord4xOES = user_get_proc_address(cstr): *fp_glMultiTexCoord4xOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoord4xvOES", cstr_buf): *const u8;
	glMultiTexCoord4xvOES = user_get_proc_address(cstr): *fp_glMultiTexCoord4xvOES;
	let cstr = strings::to_c_with_buf("glMultiTexCoordPointerEXT", cstr_buf): *const u8;
	glMultiTexCoordPointerEXT = user_get_proc_address(cstr): *fp_glMultiTexCoordPointerEXT;
	let cstr = strings::to_c_with_buf("glMultiTexEnvfEXT", cstr_buf): *const u8;
	glMultiTexEnvfEXT = user_get_proc_address(cstr): *fp_glMultiTexEnvfEXT;
	let cstr = strings::to_c_with_buf("glMultiTexEnvfvEXT", cstr_buf): *const u8;
	glMultiTexEnvfvEXT = user_get_proc_address(cstr): *fp_glMultiTexEnvfvEXT;
	let cstr = strings::to_c_with_buf("glMultiTexEnviEXT", cstr_buf): *const u8;
	glMultiTexEnviEXT = user_get_proc_address(cstr): *fp_glMultiTexEnviEXT;
	let cstr = strings::to_c_with_buf("glMultiTexEnvivEXT", cstr_buf): *const u8;
	glMultiTexEnvivEXT = user_get_proc_address(cstr): *fp_glMultiTexEnvivEXT;
	let cstr = strings::to_c_with_buf("glMultiTexGendEXT", cstr_buf): *const u8;
	glMultiTexGendEXT = user_get_proc_address(cstr): *fp_glMultiTexGendEXT;
	let cstr = strings::to_c_with_buf("glMultiTexGendvEXT", cstr_buf): *const u8;
	glMultiTexGendvEXT = user_get_proc_address(cstr): *fp_glMultiTexGendvEXT;
	let cstr = strings::to_c_with_buf("glMultiTexGenfEXT", cstr_buf): *const u8;
	glMultiTexGenfEXT = user_get_proc_address(cstr): *fp_glMultiTexGenfEXT;
	let cstr = strings::to_c_with_buf("glMultiTexGenfvEXT", cstr_buf): *const u8;
	glMultiTexGenfvEXT = user_get_proc_address(cstr): *fp_glMultiTexGenfvEXT;
	let cstr = strings::to_c_with_buf("glMultiTexGeniEXT", cstr_buf): *const u8;
	glMultiTexGeniEXT = user_get_proc_address(cstr): *fp_glMultiTexGeniEXT;
	let cstr = strings::to_c_with_buf("glMultiTexGenivEXT", cstr_buf): *const u8;
	glMultiTexGenivEXT = user_get_proc_address(cstr): *fp_glMultiTexGenivEXT;
	let cstr = strings::to_c_with_buf("glMultiTexImage1DEXT", cstr_buf): *const u8;
	glMultiTexImage1DEXT = user_get_proc_address(cstr): *fp_glMultiTexImage1DEXT;
	let cstr = strings::to_c_with_buf("glMultiTexImage2DEXT", cstr_buf): *const u8;
	glMultiTexImage2DEXT = user_get_proc_address(cstr): *fp_glMultiTexImage2DEXT;
	let cstr = strings::to_c_with_buf("glMultiTexImage3DEXT", cstr_buf): *const u8;
	glMultiTexImage3DEXT = user_get_proc_address(cstr): *fp_glMultiTexImage3DEXT;
	let cstr = strings::to_c_with_buf("glMultiTexParameterIivEXT", cstr_buf): *const u8;
	glMultiTexParameterIivEXT = user_get_proc_address(cstr): *fp_glMultiTexParameterIivEXT;
	let cstr = strings::to_c_with_buf("glMultiTexParameterIuivEXT", cstr_buf): *const u8;
	glMultiTexParameterIuivEXT = user_get_proc_address(cstr): *fp_glMultiTexParameterIuivEXT;
	let cstr = strings::to_c_with_buf("glMultiTexParameterfEXT", cstr_buf): *const u8;
	glMultiTexParameterfEXT = user_get_proc_address(cstr): *fp_glMultiTexParameterfEXT;
	let cstr = strings::to_c_with_buf("glMultiTexParameterfvEXT", cstr_buf): *const u8;
	glMultiTexParameterfvEXT = user_get_proc_address(cstr): *fp_glMultiTexParameterfvEXT;
	let cstr = strings::to_c_with_buf("glMultiTexParameteriEXT", cstr_buf): *const u8;
	glMultiTexParameteriEXT = user_get_proc_address(cstr): *fp_glMultiTexParameteriEXT;
	let cstr = strings::to_c_with_buf("glMultiTexParameterivEXT", cstr_buf): *const u8;
	glMultiTexParameterivEXT = user_get_proc_address(cstr): *fp_glMultiTexParameterivEXT;
	let cstr = strings::to_c_with_buf("glMultiTexRenderbufferEXT", cstr_buf): *const u8;
	glMultiTexRenderbufferEXT = user_get_proc_address(cstr): *fp_glMultiTexRenderbufferEXT;
	let cstr = strings::to_c_with_buf("glMultiTexSubImage1DEXT", cstr_buf): *const u8;
	glMultiTexSubImage1DEXT = user_get_proc_address(cstr): *fp_glMultiTexSubImage1DEXT;
	let cstr = strings::to_c_with_buf("glMultiTexSubImage2DEXT", cstr_buf): *const u8;
	glMultiTexSubImage2DEXT = user_get_proc_address(cstr): *fp_glMultiTexSubImage2DEXT;
	let cstr = strings::to_c_with_buf("glMultiTexSubImage3DEXT", cstr_buf): *const u8;
	glMultiTexSubImage3DEXT = user_get_proc_address(cstr): *fp_glMultiTexSubImage3DEXT;
	let cstr = strings::to_c_with_buf("glMulticastBarrierNV", cstr_buf): *const u8;
	glMulticastBarrierNV = user_get_proc_address(cstr): *fp_glMulticastBarrierNV;
	let cstr = strings::to_c_with_buf("glMulticastBlitFramebufferNV", cstr_buf): *const u8;
	glMulticastBlitFramebufferNV = user_get_proc_address(cstr): *fp_glMulticastBlitFramebufferNV;
	let cstr = strings::to_c_with_buf("glMulticastBufferSubDataNV", cstr_buf): *const u8;
	glMulticastBufferSubDataNV = user_get_proc_address(cstr): *fp_glMulticastBufferSubDataNV;
	let cstr = strings::to_c_with_buf("glMulticastCopyBufferSubDataNV", cstr_buf): *const u8;
	glMulticastCopyBufferSubDataNV = user_get_proc_address(cstr): *fp_glMulticastCopyBufferSubDataNV;
	let cstr = strings::to_c_with_buf("glMulticastCopyImageSubDataNV", cstr_buf): *const u8;
	glMulticastCopyImageSubDataNV = user_get_proc_address(cstr): *fp_glMulticastCopyImageSubDataNV;
	let cstr = strings::to_c_with_buf("glMulticastFramebufferSampleLocationsfvNV", cstr_buf): *const u8;
	glMulticastFramebufferSampleLocationsfvNV = user_get_proc_address(cstr): *fp_glMulticastFramebufferSampleLocationsfvNV;
	let cstr = strings::to_c_with_buf("glMulticastGetQueryObjecti64vNV", cstr_buf): *const u8;
	glMulticastGetQueryObjecti64vNV = user_get_proc_address(cstr): *fp_glMulticastGetQueryObjecti64vNV;
	let cstr = strings::to_c_with_buf("glMulticastGetQueryObjectivNV", cstr_buf): *const u8;
	glMulticastGetQueryObjectivNV = user_get_proc_address(cstr): *fp_glMulticastGetQueryObjectivNV;
	let cstr = strings::to_c_with_buf("glMulticastGetQueryObjectui64vNV", cstr_buf): *const u8;
	glMulticastGetQueryObjectui64vNV = user_get_proc_address(cstr): *fp_glMulticastGetQueryObjectui64vNV;
	let cstr = strings::to_c_with_buf("glMulticastGetQueryObjectuivNV", cstr_buf): *const u8;
	glMulticastGetQueryObjectuivNV = user_get_proc_address(cstr): *fp_glMulticastGetQueryObjectuivNV;
	let cstr = strings::to_c_with_buf("glMulticastScissorArrayvNVX", cstr_buf): *const u8;
	glMulticastScissorArrayvNVX = user_get_proc_address(cstr): *fp_glMulticastScissorArrayvNVX;
	let cstr = strings::to_c_with_buf("glMulticastViewportArrayvNVX", cstr_buf): *const u8;
	glMulticastViewportArrayvNVX = user_get_proc_address(cstr): *fp_glMulticastViewportArrayvNVX;
	let cstr = strings::to_c_with_buf("glMulticastViewportPositionWScaleNVX", cstr_buf): *const u8;
	glMulticastViewportPositionWScaleNVX = user_get_proc_address(cstr): *fp_glMulticastViewportPositionWScaleNVX;
	let cstr = strings::to_c_with_buf("glMulticastWaitSyncNV", cstr_buf): *const u8;
	glMulticastWaitSyncNV = user_get_proc_address(cstr): *fp_glMulticastWaitSyncNV;
	let cstr = strings::to_c_with_buf("glNamedBufferAttachMemoryNV", cstr_buf): *const u8;
	glNamedBufferAttachMemoryNV = user_get_proc_address(cstr): *fp_glNamedBufferAttachMemoryNV;
	let cstr = strings::to_c_with_buf("glNamedBufferData", cstr_buf): *const u8;
	glNamedBufferData = user_get_proc_address(cstr): *fp_glNamedBufferData;
	let cstr = strings::to_c_with_buf("glNamedBufferDataEXT", cstr_buf): *const u8;
	glNamedBufferDataEXT = user_get_proc_address(cstr): *fp_glNamedBufferDataEXT;
	let cstr = strings::to_c_with_buf("glNamedBufferPageCommitmentARB", cstr_buf): *const u8;
	glNamedBufferPageCommitmentARB = user_get_proc_address(cstr): *fp_glNamedBufferPageCommitmentARB;
	let cstr = strings::to_c_with_buf("glNamedBufferPageCommitmentEXT", cstr_buf): *const u8;
	glNamedBufferPageCommitmentEXT = user_get_proc_address(cstr): *fp_glNamedBufferPageCommitmentEXT;
	let cstr = strings::to_c_with_buf("glNamedBufferPageCommitmentMemNV", cstr_buf): *const u8;
	glNamedBufferPageCommitmentMemNV = user_get_proc_address(cstr): *fp_glNamedBufferPageCommitmentMemNV;
	let cstr = strings::to_c_with_buf("glNamedBufferStorage", cstr_buf): *const u8;
	glNamedBufferStorage = user_get_proc_address(cstr): *fp_glNamedBufferStorage;
	let cstr = strings::to_c_with_buf("glNamedBufferStorageEXT", cstr_buf): *const u8;
	glNamedBufferStorageEXT = user_get_proc_address(cstr): *fp_glNamedBufferStorageEXT;
	let cstr = strings::to_c_with_buf("glNamedBufferStorageExternalEXT", cstr_buf): *const u8;
	glNamedBufferStorageExternalEXT = user_get_proc_address(cstr): *fp_glNamedBufferStorageExternalEXT;
	let cstr = strings::to_c_with_buf("glNamedBufferStorageMemEXT", cstr_buf): *const u8;
	glNamedBufferStorageMemEXT = user_get_proc_address(cstr): *fp_glNamedBufferStorageMemEXT;
	let cstr = strings::to_c_with_buf("glNamedBufferSubData", cstr_buf): *const u8;
	glNamedBufferSubData = user_get_proc_address(cstr): *fp_glNamedBufferSubData;
	let cstr = strings::to_c_with_buf("glNamedBufferSubDataEXT", cstr_buf): *const u8;
	glNamedBufferSubDataEXT = user_get_proc_address(cstr): *fp_glNamedBufferSubDataEXT;
	let cstr = strings::to_c_with_buf("glNamedCopyBufferSubDataEXT", cstr_buf): *const u8;
	glNamedCopyBufferSubDataEXT = user_get_proc_address(cstr): *fp_glNamedCopyBufferSubDataEXT;
	let cstr = strings::to_c_with_buf("glNamedFramebufferDrawBuffer", cstr_buf): *const u8;
	glNamedFramebufferDrawBuffer = user_get_proc_address(cstr): *fp_glNamedFramebufferDrawBuffer;
	let cstr = strings::to_c_with_buf("glNamedFramebufferDrawBuffers", cstr_buf): *const u8;
	glNamedFramebufferDrawBuffers = user_get_proc_address(cstr): *fp_glNamedFramebufferDrawBuffers;
	let cstr = strings::to_c_with_buf("glNamedFramebufferParameteri", cstr_buf): *const u8;
	glNamedFramebufferParameteri = user_get_proc_address(cstr): *fp_glNamedFramebufferParameteri;
	let cstr = strings::to_c_with_buf("glNamedFramebufferParameteriEXT", cstr_buf): *const u8;
	glNamedFramebufferParameteriEXT = user_get_proc_address(cstr): *fp_glNamedFramebufferParameteriEXT;
	let cstr = strings::to_c_with_buf("glNamedFramebufferReadBuffer", cstr_buf): *const u8;
	glNamedFramebufferReadBuffer = user_get_proc_address(cstr): *fp_glNamedFramebufferReadBuffer;
	let cstr = strings::to_c_with_buf("glNamedFramebufferRenderbuffer", cstr_buf): *const u8;
	glNamedFramebufferRenderbuffer = user_get_proc_address(cstr): *fp_glNamedFramebufferRenderbuffer;
	let cstr = strings::to_c_with_buf("glNamedFramebufferRenderbufferEXT", cstr_buf): *const u8;
	glNamedFramebufferRenderbufferEXT = user_get_proc_address(cstr): *fp_glNamedFramebufferRenderbufferEXT;
	let cstr = strings::to_c_with_buf("glNamedFramebufferSampleLocationsfvARB", cstr_buf): *const u8;
	glNamedFramebufferSampleLocationsfvARB = user_get_proc_address(cstr): *fp_glNamedFramebufferSampleLocationsfvARB;
	let cstr = strings::to_c_with_buf("glNamedFramebufferSampleLocationsfvNV", cstr_buf): *const u8;
	glNamedFramebufferSampleLocationsfvNV = user_get_proc_address(cstr): *fp_glNamedFramebufferSampleLocationsfvNV;
	let cstr = strings::to_c_with_buf("glNamedFramebufferSamplePositionsfvAMD", cstr_buf): *const u8;
	glNamedFramebufferSamplePositionsfvAMD = user_get_proc_address(cstr): *fp_glNamedFramebufferSamplePositionsfvAMD;
	let cstr = strings::to_c_with_buf("glNamedFramebufferTexture", cstr_buf): *const u8;
	glNamedFramebufferTexture = user_get_proc_address(cstr): *fp_glNamedFramebufferTexture;
	let cstr = strings::to_c_with_buf("glNamedFramebufferTexture1DEXT", cstr_buf): *const u8;
	glNamedFramebufferTexture1DEXT = user_get_proc_address(cstr): *fp_glNamedFramebufferTexture1DEXT;
	let cstr = strings::to_c_with_buf("glNamedFramebufferTexture2DEXT", cstr_buf): *const u8;
	glNamedFramebufferTexture2DEXT = user_get_proc_address(cstr): *fp_glNamedFramebufferTexture2DEXT;
	let cstr = strings::to_c_with_buf("glNamedFramebufferTexture3DEXT", cstr_buf): *const u8;
	glNamedFramebufferTexture3DEXT = user_get_proc_address(cstr): *fp_glNamedFramebufferTexture3DEXT;
	let cstr = strings::to_c_with_buf("glNamedFramebufferTextureEXT", cstr_buf): *const u8;
	glNamedFramebufferTextureEXT = user_get_proc_address(cstr): *fp_glNamedFramebufferTextureEXT;
	let cstr = strings::to_c_with_buf("glNamedFramebufferTextureFaceEXT", cstr_buf): *const u8;
	glNamedFramebufferTextureFaceEXT = user_get_proc_address(cstr): *fp_glNamedFramebufferTextureFaceEXT;
	let cstr = strings::to_c_with_buf("glNamedFramebufferTextureLayer", cstr_buf): *const u8;
	glNamedFramebufferTextureLayer = user_get_proc_address(cstr): *fp_glNamedFramebufferTextureLayer;
	let cstr = strings::to_c_with_buf("glNamedFramebufferTextureLayerEXT", cstr_buf): *const u8;
	glNamedFramebufferTextureLayerEXT = user_get_proc_address(cstr): *fp_glNamedFramebufferTextureLayerEXT;
	let cstr = strings::to_c_with_buf("glNamedProgramLocalParameter4dEXT", cstr_buf): *const u8;
	glNamedProgramLocalParameter4dEXT = user_get_proc_address(cstr): *fp_glNamedProgramLocalParameter4dEXT;
	let cstr = strings::to_c_with_buf("glNamedProgramLocalParameter4dvEXT", cstr_buf): *const u8;
	glNamedProgramLocalParameter4dvEXT = user_get_proc_address(cstr): *fp_glNamedProgramLocalParameter4dvEXT;
	let cstr = strings::to_c_with_buf("glNamedProgramLocalParameter4fEXT", cstr_buf): *const u8;
	glNamedProgramLocalParameter4fEXT = user_get_proc_address(cstr): *fp_glNamedProgramLocalParameter4fEXT;
	let cstr = strings::to_c_with_buf("glNamedProgramLocalParameter4fvEXT", cstr_buf): *const u8;
	glNamedProgramLocalParameter4fvEXT = user_get_proc_address(cstr): *fp_glNamedProgramLocalParameter4fvEXT;
	let cstr = strings::to_c_with_buf("glNamedProgramLocalParameterI4iEXT", cstr_buf): *const u8;
	glNamedProgramLocalParameterI4iEXT = user_get_proc_address(cstr): *fp_glNamedProgramLocalParameterI4iEXT;
	let cstr = strings::to_c_with_buf("glNamedProgramLocalParameterI4ivEXT", cstr_buf): *const u8;
	glNamedProgramLocalParameterI4ivEXT = user_get_proc_address(cstr): *fp_glNamedProgramLocalParameterI4ivEXT;
	let cstr = strings::to_c_with_buf("glNamedProgramLocalParameterI4uiEXT", cstr_buf): *const u8;
	glNamedProgramLocalParameterI4uiEXT = user_get_proc_address(cstr): *fp_glNamedProgramLocalParameterI4uiEXT;
	let cstr = strings::to_c_with_buf("glNamedProgramLocalParameterI4uivEXT", cstr_buf): *const u8;
	glNamedProgramLocalParameterI4uivEXT = user_get_proc_address(cstr): *fp_glNamedProgramLocalParameterI4uivEXT;
	let cstr = strings::to_c_with_buf("glNamedProgramLocalParameters4fvEXT", cstr_buf): *const u8;
	glNamedProgramLocalParameters4fvEXT = user_get_proc_address(cstr): *fp_glNamedProgramLocalParameters4fvEXT;
	let cstr = strings::to_c_with_buf("glNamedProgramLocalParametersI4ivEXT", cstr_buf): *const u8;
	glNamedProgramLocalParametersI4ivEXT = user_get_proc_address(cstr): *fp_glNamedProgramLocalParametersI4ivEXT;
	let cstr = strings::to_c_with_buf("glNamedProgramLocalParametersI4uivEXT", cstr_buf): *const u8;
	glNamedProgramLocalParametersI4uivEXT = user_get_proc_address(cstr): *fp_glNamedProgramLocalParametersI4uivEXT;
	let cstr = strings::to_c_with_buf("glNamedProgramStringEXT", cstr_buf): *const u8;
	glNamedProgramStringEXT = user_get_proc_address(cstr): *fp_glNamedProgramStringEXT;
	let cstr = strings::to_c_with_buf("glNamedRenderbufferStorage", cstr_buf): *const u8;
	glNamedRenderbufferStorage = user_get_proc_address(cstr): *fp_glNamedRenderbufferStorage;
	let cstr = strings::to_c_with_buf("glNamedRenderbufferStorageEXT", cstr_buf): *const u8;
	glNamedRenderbufferStorageEXT = user_get_proc_address(cstr): *fp_glNamedRenderbufferStorageEXT;
	let cstr = strings::to_c_with_buf("glNamedRenderbufferStorageMultisample", cstr_buf): *const u8;
	glNamedRenderbufferStorageMultisample = user_get_proc_address(cstr): *fp_glNamedRenderbufferStorageMultisample;
	let cstr = strings::to_c_with_buf("glNamedRenderbufferStorageMultisampleAdvancedAMD", cstr_buf): *const u8;
	glNamedRenderbufferStorageMultisampleAdvancedAMD = user_get_proc_address(cstr): *fp_glNamedRenderbufferStorageMultisampleAdvancedAMD;
	let cstr = strings::to_c_with_buf("glNamedRenderbufferStorageMultisampleCoverageEXT", cstr_buf): *const u8;
	glNamedRenderbufferStorageMultisampleCoverageEXT = user_get_proc_address(cstr): *fp_glNamedRenderbufferStorageMultisampleCoverageEXT;
	let cstr = strings::to_c_with_buf("glNamedRenderbufferStorageMultisampleEXT", cstr_buf): *const u8;
	glNamedRenderbufferStorageMultisampleEXT = user_get_proc_address(cstr): *fp_glNamedRenderbufferStorageMultisampleEXT;
	let cstr = strings::to_c_with_buf("glNamedStringARB", cstr_buf): *const u8;
	glNamedStringARB = user_get_proc_address(cstr): *fp_glNamedStringARB;
	let cstr = strings::to_c_with_buf("glNewList", cstr_buf): *const u8;
	glNewList = user_get_proc_address(cstr): *fp_glNewList;
	let cstr = strings::to_c_with_buf("glNewObjectBufferATI", cstr_buf): *const u8;
	glNewObjectBufferATI = user_get_proc_address(cstr): *fp_glNewObjectBufferATI;
	let cstr = strings::to_c_with_buf("glNormal3b", cstr_buf): *const u8;
	glNormal3b = user_get_proc_address(cstr): *fp_glNormal3b;
	let cstr = strings::to_c_with_buf("glNormal3bv", cstr_buf): *const u8;
	glNormal3bv = user_get_proc_address(cstr): *fp_glNormal3bv;
	let cstr = strings::to_c_with_buf("glNormal3d", cstr_buf): *const u8;
	glNormal3d = user_get_proc_address(cstr): *fp_glNormal3d;
	let cstr = strings::to_c_with_buf("glNormal3dv", cstr_buf): *const u8;
	glNormal3dv = user_get_proc_address(cstr): *fp_glNormal3dv;
	let cstr = strings::to_c_with_buf("glNormal3f", cstr_buf): *const u8;
	glNormal3f = user_get_proc_address(cstr): *fp_glNormal3f;
	let cstr = strings::to_c_with_buf("glNormal3fVertex3fSUN", cstr_buf): *const u8;
	glNormal3fVertex3fSUN = user_get_proc_address(cstr): *fp_glNormal3fVertex3fSUN;
	let cstr = strings::to_c_with_buf("glNormal3fVertex3fvSUN", cstr_buf): *const u8;
	glNormal3fVertex3fvSUN = user_get_proc_address(cstr): *fp_glNormal3fVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glNormal3fv", cstr_buf): *const u8;
	glNormal3fv = user_get_proc_address(cstr): *fp_glNormal3fv;
	let cstr = strings::to_c_with_buf("glNormal3hNV", cstr_buf): *const u8;
	glNormal3hNV = user_get_proc_address(cstr): *fp_glNormal3hNV;
	let cstr = strings::to_c_with_buf("glNormal3hvNV", cstr_buf): *const u8;
	glNormal3hvNV = user_get_proc_address(cstr): *fp_glNormal3hvNV;
	let cstr = strings::to_c_with_buf("glNormal3i", cstr_buf): *const u8;
	glNormal3i = user_get_proc_address(cstr): *fp_glNormal3i;
	let cstr = strings::to_c_with_buf("glNormal3iv", cstr_buf): *const u8;
	glNormal3iv = user_get_proc_address(cstr): *fp_glNormal3iv;
	let cstr = strings::to_c_with_buf("glNormal3s", cstr_buf): *const u8;
	glNormal3s = user_get_proc_address(cstr): *fp_glNormal3s;
	let cstr = strings::to_c_with_buf("glNormal3sv", cstr_buf): *const u8;
	glNormal3sv = user_get_proc_address(cstr): *fp_glNormal3sv;
	let cstr = strings::to_c_with_buf("glNormal3xOES", cstr_buf): *const u8;
	glNormal3xOES = user_get_proc_address(cstr): *fp_glNormal3xOES;
	let cstr = strings::to_c_with_buf("glNormal3xvOES", cstr_buf): *const u8;
	glNormal3xvOES = user_get_proc_address(cstr): *fp_glNormal3xvOES;
	let cstr = strings::to_c_with_buf("glNormalFormatNV", cstr_buf): *const u8;
	glNormalFormatNV = user_get_proc_address(cstr): *fp_glNormalFormatNV;
	let cstr = strings::to_c_with_buf("glNormalPointer", cstr_buf): *const u8;
	glNormalPointer = user_get_proc_address(cstr): *fp_glNormalPointer;
	let cstr = strings::to_c_with_buf("glNormalPointerEXT", cstr_buf): *const u8;
	glNormalPointerEXT = user_get_proc_address(cstr): *fp_glNormalPointerEXT;
	let cstr = strings::to_c_with_buf("glNormalPointerListIBM", cstr_buf): *const u8;
	glNormalPointerListIBM = user_get_proc_address(cstr): *fp_glNormalPointerListIBM;
	let cstr = strings::to_c_with_buf("glNormalPointervINTEL", cstr_buf): *const u8;
	glNormalPointervINTEL = user_get_proc_address(cstr): *fp_glNormalPointervINTEL;
	let cstr = strings::to_c_with_buf("glNormalStream3bATI", cstr_buf): *const u8;
	glNormalStream3bATI = user_get_proc_address(cstr): *fp_glNormalStream3bATI;
	let cstr = strings::to_c_with_buf("glNormalStream3bvATI", cstr_buf): *const u8;
	glNormalStream3bvATI = user_get_proc_address(cstr): *fp_glNormalStream3bvATI;
	let cstr = strings::to_c_with_buf("glNormalStream3dATI", cstr_buf): *const u8;
	glNormalStream3dATI = user_get_proc_address(cstr): *fp_glNormalStream3dATI;
	let cstr = strings::to_c_with_buf("glNormalStream3dvATI", cstr_buf): *const u8;
	glNormalStream3dvATI = user_get_proc_address(cstr): *fp_glNormalStream3dvATI;
	let cstr = strings::to_c_with_buf("glNormalStream3fATI", cstr_buf): *const u8;
	glNormalStream3fATI = user_get_proc_address(cstr): *fp_glNormalStream3fATI;
	let cstr = strings::to_c_with_buf("glNormalStream3fvATI", cstr_buf): *const u8;
	glNormalStream3fvATI = user_get_proc_address(cstr): *fp_glNormalStream3fvATI;
	let cstr = strings::to_c_with_buf("glNormalStream3iATI", cstr_buf): *const u8;
	glNormalStream3iATI = user_get_proc_address(cstr): *fp_glNormalStream3iATI;
	let cstr = strings::to_c_with_buf("glNormalStream3ivATI", cstr_buf): *const u8;
	glNormalStream3ivATI = user_get_proc_address(cstr): *fp_glNormalStream3ivATI;
	let cstr = strings::to_c_with_buf("glNormalStream3sATI", cstr_buf): *const u8;
	glNormalStream3sATI = user_get_proc_address(cstr): *fp_glNormalStream3sATI;
	let cstr = strings::to_c_with_buf("glNormalStream3svATI", cstr_buf): *const u8;
	glNormalStream3svATI = user_get_proc_address(cstr): *fp_glNormalStream3svATI;
	let cstr = strings::to_c_with_buf("glObjectLabel", cstr_buf): *const u8;
	glObjectLabel = user_get_proc_address(cstr): *fp_glObjectLabel;
	let cstr = strings::to_c_with_buf("glObjectPtrLabel", cstr_buf): *const u8;
	glObjectPtrLabel = user_get_proc_address(cstr): *fp_glObjectPtrLabel;
	let cstr = strings::to_c_with_buf("glObjectPurgeableAPPLE", cstr_buf): *const u8;
	glObjectPurgeableAPPLE = user_get_proc_address(cstr): *fp_glObjectPurgeableAPPLE;
	let cstr = strings::to_c_with_buf("glObjectUnpurgeableAPPLE", cstr_buf): *const u8;
	glObjectUnpurgeableAPPLE = user_get_proc_address(cstr): *fp_glObjectUnpurgeableAPPLE;
	let cstr = strings::to_c_with_buf("glOrtho", cstr_buf): *const u8;
	glOrtho = user_get_proc_address(cstr): *fp_glOrtho;
	let cstr = strings::to_c_with_buf("glOrthofOES", cstr_buf): *const u8;
	glOrthofOES = user_get_proc_address(cstr): *fp_glOrthofOES;
	let cstr = strings::to_c_with_buf("glOrthoxOES", cstr_buf): *const u8;
	glOrthoxOES = user_get_proc_address(cstr): *fp_glOrthoxOES;
	let cstr = strings::to_c_with_buf("glPNTrianglesfATI", cstr_buf): *const u8;
	glPNTrianglesfATI = user_get_proc_address(cstr): *fp_glPNTrianglesfATI;
	let cstr = strings::to_c_with_buf("glPNTrianglesiATI", cstr_buf): *const u8;
	glPNTrianglesiATI = user_get_proc_address(cstr): *fp_glPNTrianglesiATI;
	let cstr = strings::to_c_with_buf("glPassTexCoordATI", cstr_buf): *const u8;
	glPassTexCoordATI = user_get_proc_address(cstr): *fp_glPassTexCoordATI;
	let cstr = strings::to_c_with_buf("glPassThrough", cstr_buf): *const u8;
	glPassThrough = user_get_proc_address(cstr): *fp_glPassThrough;
	let cstr = strings::to_c_with_buf("glPassThroughxOES", cstr_buf): *const u8;
	glPassThroughxOES = user_get_proc_address(cstr): *fp_glPassThroughxOES;
	let cstr = strings::to_c_with_buf("glPatchParameterfv", cstr_buf): *const u8;
	glPatchParameterfv = user_get_proc_address(cstr): *fp_glPatchParameterfv;
	let cstr = strings::to_c_with_buf("glPatchParameteri", cstr_buf): *const u8;
	glPatchParameteri = user_get_proc_address(cstr): *fp_glPatchParameteri;
	let cstr = strings::to_c_with_buf("glPathCommandsNV", cstr_buf): *const u8;
	glPathCommandsNV = user_get_proc_address(cstr): *fp_glPathCommandsNV;
	let cstr = strings::to_c_with_buf("glPathCoordsNV", cstr_buf): *const u8;
	glPathCoordsNV = user_get_proc_address(cstr): *fp_glPathCoordsNV;
	let cstr = strings::to_c_with_buf("glPathCoverDepthFuncNV", cstr_buf): *const u8;
	glPathCoverDepthFuncNV = user_get_proc_address(cstr): *fp_glPathCoverDepthFuncNV;
	let cstr = strings::to_c_with_buf("glPathDashArrayNV", cstr_buf): *const u8;
	glPathDashArrayNV = user_get_proc_address(cstr): *fp_glPathDashArrayNV;
	let cstr = strings::to_c_with_buf("glPathGlyphIndexArrayNV", cstr_buf): *const u8;
	glPathGlyphIndexArrayNV = user_get_proc_address(cstr): *fp_glPathGlyphIndexArrayNV;
	let cstr = strings::to_c_with_buf("glPathGlyphIndexRangeNV", cstr_buf): *const u8;
	glPathGlyphIndexRangeNV = user_get_proc_address(cstr): *fp_glPathGlyphIndexRangeNV;
	let cstr = strings::to_c_with_buf("glPathGlyphRangeNV", cstr_buf): *const u8;
	glPathGlyphRangeNV = user_get_proc_address(cstr): *fp_glPathGlyphRangeNV;
	let cstr = strings::to_c_with_buf("glPathGlyphsNV", cstr_buf): *const u8;
	glPathGlyphsNV = user_get_proc_address(cstr): *fp_glPathGlyphsNV;
	let cstr = strings::to_c_with_buf("glPathMemoryGlyphIndexArrayNV", cstr_buf): *const u8;
	glPathMemoryGlyphIndexArrayNV = user_get_proc_address(cstr): *fp_glPathMemoryGlyphIndexArrayNV;
	let cstr = strings::to_c_with_buf("glPathParameterfNV", cstr_buf): *const u8;
	glPathParameterfNV = user_get_proc_address(cstr): *fp_glPathParameterfNV;
	let cstr = strings::to_c_with_buf("glPathParameterfvNV", cstr_buf): *const u8;
	glPathParameterfvNV = user_get_proc_address(cstr): *fp_glPathParameterfvNV;
	let cstr = strings::to_c_with_buf("glPathParameteriNV", cstr_buf): *const u8;
	glPathParameteriNV = user_get_proc_address(cstr): *fp_glPathParameteriNV;
	let cstr = strings::to_c_with_buf("glPathParameterivNV", cstr_buf): *const u8;
	glPathParameterivNV = user_get_proc_address(cstr): *fp_glPathParameterivNV;
	let cstr = strings::to_c_with_buf("glPathStencilDepthOffsetNV", cstr_buf): *const u8;
	glPathStencilDepthOffsetNV = user_get_proc_address(cstr): *fp_glPathStencilDepthOffsetNV;
	let cstr = strings::to_c_with_buf("glPathStencilFuncNV", cstr_buf): *const u8;
	glPathStencilFuncNV = user_get_proc_address(cstr): *fp_glPathStencilFuncNV;
	let cstr = strings::to_c_with_buf("glPathStringNV", cstr_buf): *const u8;
	glPathStringNV = user_get_proc_address(cstr): *fp_glPathStringNV;
	let cstr = strings::to_c_with_buf("glPathSubCommandsNV", cstr_buf): *const u8;
	glPathSubCommandsNV = user_get_proc_address(cstr): *fp_glPathSubCommandsNV;
	let cstr = strings::to_c_with_buf("glPathSubCoordsNV", cstr_buf): *const u8;
	glPathSubCoordsNV = user_get_proc_address(cstr): *fp_glPathSubCoordsNV;
	let cstr = strings::to_c_with_buf("glPauseTransformFeedback", cstr_buf): *const u8;
	glPauseTransformFeedback = user_get_proc_address(cstr): *fp_glPauseTransformFeedback;
	let cstr = strings::to_c_with_buf("glPauseTransformFeedbackNV", cstr_buf): *const u8;
	glPauseTransformFeedbackNV = user_get_proc_address(cstr): *fp_glPauseTransformFeedbackNV;
	let cstr = strings::to_c_with_buf("glPixelDataRangeNV", cstr_buf): *const u8;
	glPixelDataRangeNV = user_get_proc_address(cstr): *fp_glPixelDataRangeNV;
	let cstr = strings::to_c_with_buf("glPixelMapfv", cstr_buf): *const u8;
	glPixelMapfv = user_get_proc_address(cstr): *fp_glPixelMapfv;
	let cstr = strings::to_c_with_buf("glPixelMapuiv", cstr_buf): *const u8;
	glPixelMapuiv = user_get_proc_address(cstr): *fp_glPixelMapuiv;
	let cstr = strings::to_c_with_buf("glPixelMapusv", cstr_buf): *const u8;
	glPixelMapusv = user_get_proc_address(cstr): *fp_glPixelMapusv;
	let cstr = strings::to_c_with_buf("glPixelMapx", cstr_buf): *const u8;
	glPixelMapx = user_get_proc_address(cstr): *fp_glPixelMapx;
	let cstr = strings::to_c_with_buf("glPixelStoref", cstr_buf): *const u8;
	glPixelStoref = user_get_proc_address(cstr): *fp_glPixelStoref;
	let cstr = strings::to_c_with_buf("glPixelStorei", cstr_buf): *const u8;
	glPixelStorei = user_get_proc_address(cstr): *fp_glPixelStorei;
	let cstr = strings::to_c_with_buf("glPixelStorex", cstr_buf): *const u8;
	glPixelStorex = user_get_proc_address(cstr): *fp_glPixelStorex;
	let cstr = strings::to_c_with_buf("glPixelTexGenParameterfSGIS", cstr_buf): *const u8;
	glPixelTexGenParameterfSGIS = user_get_proc_address(cstr): *fp_glPixelTexGenParameterfSGIS;
	let cstr = strings::to_c_with_buf("glPixelTexGenParameterfvSGIS", cstr_buf): *const u8;
	glPixelTexGenParameterfvSGIS = user_get_proc_address(cstr): *fp_glPixelTexGenParameterfvSGIS;
	let cstr = strings::to_c_with_buf("glPixelTexGenParameteriSGIS", cstr_buf): *const u8;
	glPixelTexGenParameteriSGIS = user_get_proc_address(cstr): *fp_glPixelTexGenParameteriSGIS;
	let cstr = strings::to_c_with_buf("glPixelTexGenParameterivSGIS", cstr_buf): *const u8;
	glPixelTexGenParameterivSGIS = user_get_proc_address(cstr): *fp_glPixelTexGenParameterivSGIS;
	let cstr = strings::to_c_with_buf("glPixelTexGenSGIX", cstr_buf): *const u8;
	glPixelTexGenSGIX = user_get_proc_address(cstr): *fp_glPixelTexGenSGIX;
	let cstr = strings::to_c_with_buf("glPixelTransferf", cstr_buf): *const u8;
	glPixelTransferf = user_get_proc_address(cstr): *fp_glPixelTransferf;
	let cstr = strings::to_c_with_buf("glPixelTransferi", cstr_buf): *const u8;
	glPixelTransferi = user_get_proc_address(cstr): *fp_glPixelTransferi;
	let cstr = strings::to_c_with_buf("glPixelTransferxOES", cstr_buf): *const u8;
	glPixelTransferxOES = user_get_proc_address(cstr): *fp_glPixelTransferxOES;
	let cstr = strings::to_c_with_buf("glPixelTransformParameterfEXT", cstr_buf): *const u8;
	glPixelTransformParameterfEXT = user_get_proc_address(cstr): *fp_glPixelTransformParameterfEXT;
	let cstr = strings::to_c_with_buf("glPixelTransformParameterfvEXT", cstr_buf): *const u8;
	glPixelTransformParameterfvEXT = user_get_proc_address(cstr): *fp_glPixelTransformParameterfvEXT;
	let cstr = strings::to_c_with_buf("glPixelTransformParameteriEXT", cstr_buf): *const u8;
	glPixelTransformParameteriEXT = user_get_proc_address(cstr): *fp_glPixelTransformParameteriEXT;
	let cstr = strings::to_c_with_buf("glPixelTransformParameterivEXT", cstr_buf): *const u8;
	glPixelTransformParameterivEXT = user_get_proc_address(cstr): *fp_glPixelTransformParameterivEXT;
	let cstr = strings::to_c_with_buf("glPixelZoom", cstr_buf): *const u8;
	glPixelZoom = user_get_proc_address(cstr): *fp_glPixelZoom;
	let cstr = strings::to_c_with_buf("glPixelZoomxOES", cstr_buf): *const u8;
	glPixelZoomxOES = user_get_proc_address(cstr): *fp_glPixelZoomxOES;
	let cstr = strings::to_c_with_buf("glPointAlongPathNV", cstr_buf): *const u8;
	glPointAlongPathNV = user_get_proc_address(cstr): *fp_glPointAlongPathNV;
	let cstr = strings::to_c_with_buf("glPointParameterf", cstr_buf): *const u8;
	glPointParameterf = user_get_proc_address(cstr): *fp_glPointParameterf;
	let cstr = strings::to_c_with_buf("glPointParameterfARB", cstr_buf): *const u8;
	glPointParameterfARB = user_get_proc_address(cstr): *fp_glPointParameterfARB;
	let cstr = strings::to_c_with_buf("glPointParameterfEXT", cstr_buf): *const u8;
	glPointParameterfEXT = user_get_proc_address(cstr): *fp_glPointParameterfEXT;
	let cstr = strings::to_c_with_buf("glPointParameterfSGIS", cstr_buf): *const u8;
	glPointParameterfSGIS = user_get_proc_address(cstr): *fp_glPointParameterfSGIS;
	let cstr = strings::to_c_with_buf("glPointParameterfv", cstr_buf): *const u8;
	glPointParameterfv = user_get_proc_address(cstr): *fp_glPointParameterfv;
	let cstr = strings::to_c_with_buf("glPointParameterfvARB", cstr_buf): *const u8;
	glPointParameterfvARB = user_get_proc_address(cstr): *fp_glPointParameterfvARB;
	let cstr = strings::to_c_with_buf("glPointParameterfvEXT", cstr_buf): *const u8;
	glPointParameterfvEXT = user_get_proc_address(cstr): *fp_glPointParameterfvEXT;
	let cstr = strings::to_c_with_buf("glPointParameterfvSGIS", cstr_buf): *const u8;
	glPointParameterfvSGIS = user_get_proc_address(cstr): *fp_glPointParameterfvSGIS;
	let cstr = strings::to_c_with_buf("glPointParameteri", cstr_buf): *const u8;
	glPointParameteri = user_get_proc_address(cstr): *fp_glPointParameteri;
	let cstr = strings::to_c_with_buf("glPointParameteriNV", cstr_buf): *const u8;
	glPointParameteriNV = user_get_proc_address(cstr): *fp_glPointParameteriNV;
	let cstr = strings::to_c_with_buf("glPointParameteriv", cstr_buf): *const u8;
	glPointParameteriv = user_get_proc_address(cstr): *fp_glPointParameteriv;
	let cstr = strings::to_c_with_buf("glPointParameterivNV", cstr_buf): *const u8;
	glPointParameterivNV = user_get_proc_address(cstr): *fp_glPointParameterivNV;
	let cstr = strings::to_c_with_buf("glPointParameterxvOES", cstr_buf): *const u8;
	glPointParameterxvOES = user_get_proc_address(cstr): *fp_glPointParameterxvOES;
	let cstr = strings::to_c_with_buf("glPointSize", cstr_buf): *const u8;
	glPointSize = user_get_proc_address(cstr): *fp_glPointSize;
	let cstr = strings::to_c_with_buf("glPointSizexOES", cstr_buf): *const u8;
	glPointSizexOES = user_get_proc_address(cstr): *fp_glPointSizexOES;
	let cstr = strings::to_c_with_buf("glPollAsyncSGIX", cstr_buf): *const u8;
	glPollAsyncSGIX = user_get_proc_address(cstr): *fp_glPollAsyncSGIX;
	let cstr = strings::to_c_with_buf("glPollInstrumentsSGIX", cstr_buf): *const u8;
	glPollInstrumentsSGIX = user_get_proc_address(cstr): *fp_glPollInstrumentsSGIX;
	let cstr = strings::to_c_with_buf("glPolygonMode", cstr_buf): *const u8;
	glPolygonMode = user_get_proc_address(cstr): *fp_glPolygonMode;
	let cstr = strings::to_c_with_buf("glPolygonOffset", cstr_buf): *const u8;
	glPolygonOffset = user_get_proc_address(cstr): *fp_glPolygonOffset;
	let cstr = strings::to_c_with_buf("glPolygonOffsetClamp", cstr_buf): *const u8;
	glPolygonOffsetClamp = user_get_proc_address(cstr): *fp_glPolygonOffsetClamp;
	let cstr = strings::to_c_with_buf("glPolygonOffsetClampEXT", cstr_buf): *const u8;
	glPolygonOffsetClampEXT = user_get_proc_address(cstr): *fp_glPolygonOffsetClampEXT;
	let cstr = strings::to_c_with_buf("glPolygonOffsetEXT", cstr_buf): *const u8;
	glPolygonOffsetEXT = user_get_proc_address(cstr): *fp_glPolygonOffsetEXT;
	let cstr = strings::to_c_with_buf("glPolygonOffsetxOES", cstr_buf): *const u8;
	glPolygonOffsetxOES = user_get_proc_address(cstr): *fp_glPolygonOffsetxOES;
	let cstr = strings::to_c_with_buf("glPolygonStipple", cstr_buf): *const u8;
	glPolygonStipple = user_get_proc_address(cstr): *fp_glPolygonStipple;
	let cstr = strings::to_c_with_buf("glPopAttrib", cstr_buf): *const u8;
	glPopAttrib = user_get_proc_address(cstr): *fp_glPopAttrib;
	let cstr = strings::to_c_with_buf("glPopClientAttrib", cstr_buf): *const u8;
	glPopClientAttrib = user_get_proc_address(cstr): *fp_glPopClientAttrib;
	let cstr = strings::to_c_with_buf("glPopDebugGroup", cstr_buf): *const u8;
	glPopDebugGroup = user_get_proc_address(cstr): *fp_glPopDebugGroup;
	let cstr = strings::to_c_with_buf("glPopGroupMarkerEXT", cstr_buf): *const u8;
	glPopGroupMarkerEXT = user_get_proc_address(cstr): *fp_glPopGroupMarkerEXT;
	let cstr = strings::to_c_with_buf("glPopMatrix", cstr_buf): *const u8;
	glPopMatrix = user_get_proc_address(cstr): *fp_glPopMatrix;
	let cstr = strings::to_c_with_buf("glPopName", cstr_buf): *const u8;
	glPopName = user_get_proc_address(cstr): *fp_glPopName;
	let cstr = strings::to_c_with_buf("glPresentFrameDualFillNV", cstr_buf): *const u8;
	glPresentFrameDualFillNV = user_get_proc_address(cstr): *fp_glPresentFrameDualFillNV;
	let cstr = strings::to_c_with_buf("glPresentFrameKeyedNV", cstr_buf): *const u8;
	glPresentFrameKeyedNV = user_get_proc_address(cstr): *fp_glPresentFrameKeyedNV;
	let cstr = strings::to_c_with_buf("glPrimitiveBoundingBoxARB", cstr_buf): *const u8;
	glPrimitiveBoundingBoxARB = user_get_proc_address(cstr): *fp_glPrimitiveBoundingBoxARB;
	let cstr = strings::to_c_with_buf("glPrimitiveRestartIndexNV", cstr_buf): *const u8;
	glPrimitiveRestartIndexNV = user_get_proc_address(cstr): *fp_glPrimitiveRestartIndexNV;
	let cstr = strings::to_c_with_buf("glPrimitiveRestartNV", cstr_buf): *const u8;
	glPrimitiveRestartNV = user_get_proc_address(cstr): *fp_glPrimitiveRestartNV;
	let cstr = strings::to_c_with_buf("glPrioritizeTextures", cstr_buf): *const u8;
	glPrioritizeTextures = user_get_proc_address(cstr): *fp_glPrioritizeTextures;
	let cstr = strings::to_c_with_buf("glPrioritizeTexturesEXT", cstr_buf): *const u8;
	glPrioritizeTexturesEXT = user_get_proc_address(cstr): *fp_glPrioritizeTexturesEXT;
	let cstr = strings::to_c_with_buf("glPrioritizeTexturesxOES", cstr_buf): *const u8;
	glPrioritizeTexturesxOES = user_get_proc_address(cstr): *fp_glPrioritizeTexturesxOES;
	let cstr = strings::to_c_with_buf("glProgramBinary", cstr_buf): *const u8;
	glProgramBinary = user_get_proc_address(cstr): *fp_glProgramBinary;
	let cstr = strings::to_c_with_buf("glProgramBufferParametersIivNV", cstr_buf): *const u8;
	glProgramBufferParametersIivNV = user_get_proc_address(cstr): *fp_glProgramBufferParametersIivNV;
	let cstr = strings::to_c_with_buf("glProgramBufferParametersIuivNV", cstr_buf): *const u8;
	glProgramBufferParametersIuivNV = user_get_proc_address(cstr): *fp_glProgramBufferParametersIuivNV;
	let cstr = strings::to_c_with_buf("glProgramBufferParametersfvNV", cstr_buf): *const u8;
	glProgramBufferParametersfvNV = user_get_proc_address(cstr): *fp_glProgramBufferParametersfvNV;
	let cstr = strings::to_c_with_buf("glProgramEnvParameter4dARB", cstr_buf): *const u8;
	glProgramEnvParameter4dARB = user_get_proc_address(cstr): *fp_glProgramEnvParameter4dARB;
	let cstr = strings::to_c_with_buf("glProgramEnvParameter4dvARB", cstr_buf): *const u8;
	glProgramEnvParameter4dvARB = user_get_proc_address(cstr): *fp_glProgramEnvParameter4dvARB;
	let cstr = strings::to_c_with_buf("glProgramEnvParameter4fARB", cstr_buf): *const u8;
	glProgramEnvParameter4fARB = user_get_proc_address(cstr): *fp_glProgramEnvParameter4fARB;
	let cstr = strings::to_c_with_buf("glProgramEnvParameter4fvARB", cstr_buf): *const u8;
	glProgramEnvParameter4fvARB = user_get_proc_address(cstr): *fp_glProgramEnvParameter4fvARB;
	let cstr = strings::to_c_with_buf("glProgramEnvParameterI4iNV", cstr_buf): *const u8;
	glProgramEnvParameterI4iNV = user_get_proc_address(cstr): *fp_glProgramEnvParameterI4iNV;
	let cstr = strings::to_c_with_buf("glProgramEnvParameterI4ivNV", cstr_buf): *const u8;
	glProgramEnvParameterI4ivNV = user_get_proc_address(cstr): *fp_glProgramEnvParameterI4ivNV;
	let cstr = strings::to_c_with_buf("glProgramEnvParameterI4uiNV", cstr_buf): *const u8;
	glProgramEnvParameterI4uiNV = user_get_proc_address(cstr): *fp_glProgramEnvParameterI4uiNV;
	let cstr = strings::to_c_with_buf("glProgramEnvParameterI4uivNV", cstr_buf): *const u8;
	glProgramEnvParameterI4uivNV = user_get_proc_address(cstr): *fp_glProgramEnvParameterI4uivNV;
	let cstr = strings::to_c_with_buf("glProgramEnvParameters4fvEXT", cstr_buf): *const u8;
	glProgramEnvParameters4fvEXT = user_get_proc_address(cstr): *fp_glProgramEnvParameters4fvEXT;
	let cstr = strings::to_c_with_buf("glProgramEnvParametersI4ivNV", cstr_buf): *const u8;
	glProgramEnvParametersI4ivNV = user_get_proc_address(cstr): *fp_glProgramEnvParametersI4ivNV;
	let cstr = strings::to_c_with_buf("glProgramEnvParametersI4uivNV", cstr_buf): *const u8;
	glProgramEnvParametersI4uivNV = user_get_proc_address(cstr): *fp_glProgramEnvParametersI4uivNV;
	let cstr = strings::to_c_with_buf("glProgramLocalParameter4dARB", cstr_buf): *const u8;
	glProgramLocalParameter4dARB = user_get_proc_address(cstr): *fp_glProgramLocalParameter4dARB;
	let cstr = strings::to_c_with_buf("glProgramLocalParameter4dvARB", cstr_buf): *const u8;
	glProgramLocalParameter4dvARB = user_get_proc_address(cstr): *fp_glProgramLocalParameter4dvARB;
	let cstr = strings::to_c_with_buf("glProgramLocalParameter4fARB", cstr_buf): *const u8;
	glProgramLocalParameter4fARB = user_get_proc_address(cstr): *fp_glProgramLocalParameter4fARB;
	let cstr = strings::to_c_with_buf("glProgramLocalParameter4fvARB", cstr_buf): *const u8;
	glProgramLocalParameter4fvARB = user_get_proc_address(cstr): *fp_glProgramLocalParameter4fvARB;
	let cstr = strings::to_c_with_buf("glProgramLocalParameterI4iNV", cstr_buf): *const u8;
	glProgramLocalParameterI4iNV = user_get_proc_address(cstr): *fp_glProgramLocalParameterI4iNV;
	let cstr = strings::to_c_with_buf("glProgramLocalParameterI4ivNV", cstr_buf): *const u8;
	glProgramLocalParameterI4ivNV = user_get_proc_address(cstr): *fp_glProgramLocalParameterI4ivNV;
	let cstr = strings::to_c_with_buf("glProgramLocalParameterI4uiNV", cstr_buf): *const u8;
	glProgramLocalParameterI4uiNV = user_get_proc_address(cstr): *fp_glProgramLocalParameterI4uiNV;
	let cstr = strings::to_c_with_buf("glProgramLocalParameterI4uivNV", cstr_buf): *const u8;
	glProgramLocalParameterI4uivNV = user_get_proc_address(cstr): *fp_glProgramLocalParameterI4uivNV;
	let cstr = strings::to_c_with_buf("glProgramLocalParameters4fvEXT", cstr_buf): *const u8;
	glProgramLocalParameters4fvEXT = user_get_proc_address(cstr): *fp_glProgramLocalParameters4fvEXT;
	let cstr = strings::to_c_with_buf("glProgramLocalParametersI4ivNV", cstr_buf): *const u8;
	glProgramLocalParametersI4ivNV = user_get_proc_address(cstr): *fp_glProgramLocalParametersI4ivNV;
	let cstr = strings::to_c_with_buf("glProgramLocalParametersI4uivNV", cstr_buf): *const u8;
	glProgramLocalParametersI4uivNV = user_get_proc_address(cstr): *fp_glProgramLocalParametersI4uivNV;
	let cstr = strings::to_c_with_buf("glProgramNamedParameter4dNV", cstr_buf): *const u8;
	glProgramNamedParameter4dNV = user_get_proc_address(cstr): *fp_glProgramNamedParameter4dNV;
	let cstr = strings::to_c_with_buf("glProgramNamedParameter4dvNV", cstr_buf): *const u8;
	glProgramNamedParameter4dvNV = user_get_proc_address(cstr): *fp_glProgramNamedParameter4dvNV;
	let cstr = strings::to_c_with_buf("glProgramNamedParameter4fNV", cstr_buf): *const u8;
	glProgramNamedParameter4fNV = user_get_proc_address(cstr): *fp_glProgramNamedParameter4fNV;
	let cstr = strings::to_c_with_buf("glProgramNamedParameter4fvNV", cstr_buf): *const u8;
	glProgramNamedParameter4fvNV = user_get_proc_address(cstr): *fp_glProgramNamedParameter4fvNV;
	let cstr = strings::to_c_with_buf("glProgramParameter4dNV", cstr_buf): *const u8;
	glProgramParameter4dNV = user_get_proc_address(cstr): *fp_glProgramParameter4dNV;
	let cstr = strings::to_c_with_buf("glProgramParameter4dvNV", cstr_buf): *const u8;
	glProgramParameter4dvNV = user_get_proc_address(cstr): *fp_glProgramParameter4dvNV;
	let cstr = strings::to_c_with_buf("glProgramParameter4fNV", cstr_buf): *const u8;
	glProgramParameter4fNV = user_get_proc_address(cstr): *fp_glProgramParameter4fNV;
	let cstr = strings::to_c_with_buf("glProgramParameter4fvNV", cstr_buf): *const u8;
	glProgramParameter4fvNV = user_get_proc_address(cstr): *fp_glProgramParameter4fvNV;
	let cstr = strings::to_c_with_buf("glProgramParameteri", cstr_buf): *const u8;
	glProgramParameteri = user_get_proc_address(cstr): *fp_glProgramParameteri;
	let cstr = strings::to_c_with_buf("glProgramParameteriARB", cstr_buf): *const u8;
	glProgramParameteriARB = user_get_proc_address(cstr): *fp_glProgramParameteriARB;
	let cstr = strings::to_c_with_buf("glProgramParameteriEXT", cstr_buf): *const u8;
	glProgramParameteriEXT = user_get_proc_address(cstr): *fp_glProgramParameteriEXT;
	let cstr = strings::to_c_with_buf("glProgramParameters4dvNV", cstr_buf): *const u8;
	glProgramParameters4dvNV = user_get_proc_address(cstr): *fp_glProgramParameters4dvNV;
	let cstr = strings::to_c_with_buf("glProgramParameters4fvNV", cstr_buf): *const u8;
	glProgramParameters4fvNV = user_get_proc_address(cstr): *fp_glProgramParameters4fvNV;
	let cstr = strings::to_c_with_buf("glProgramPathFragmentInputGenNV", cstr_buf): *const u8;
	glProgramPathFragmentInputGenNV = user_get_proc_address(cstr): *fp_glProgramPathFragmentInputGenNV;
	let cstr = strings::to_c_with_buf("glProgramStringARB", cstr_buf): *const u8;
	glProgramStringARB = user_get_proc_address(cstr): *fp_glProgramStringARB;
	let cstr = strings::to_c_with_buf("glProgramSubroutineParametersuivNV", cstr_buf): *const u8;
	glProgramSubroutineParametersuivNV = user_get_proc_address(cstr): *fp_glProgramSubroutineParametersuivNV;
	let cstr = strings::to_c_with_buf("glProgramUniform1d", cstr_buf): *const u8;
	glProgramUniform1d = user_get_proc_address(cstr): *fp_glProgramUniform1d;
	let cstr = strings::to_c_with_buf("glProgramUniform1dEXT", cstr_buf): *const u8;
	glProgramUniform1dEXT = user_get_proc_address(cstr): *fp_glProgramUniform1dEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform1dv", cstr_buf): *const u8;
	glProgramUniform1dv = user_get_proc_address(cstr): *fp_glProgramUniform1dv;
	let cstr = strings::to_c_with_buf("glProgramUniform1dvEXT", cstr_buf): *const u8;
	glProgramUniform1dvEXT = user_get_proc_address(cstr): *fp_glProgramUniform1dvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform1f", cstr_buf): *const u8;
	glProgramUniform1f = user_get_proc_address(cstr): *fp_glProgramUniform1f;
	let cstr = strings::to_c_with_buf("glProgramUniform1fEXT", cstr_buf): *const u8;
	glProgramUniform1fEXT = user_get_proc_address(cstr): *fp_glProgramUniform1fEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform1fv", cstr_buf): *const u8;
	glProgramUniform1fv = user_get_proc_address(cstr): *fp_glProgramUniform1fv;
	let cstr = strings::to_c_with_buf("glProgramUniform1fvEXT", cstr_buf): *const u8;
	glProgramUniform1fvEXT = user_get_proc_address(cstr): *fp_glProgramUniform1fvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform1i", cstr_buf): *const u8;
	glProgramUniform1i = user_get_proc_address(cstr): *fp_glProgramUniform1i;
	let cstr = strings::to_c_with_buf("glProgramUniform1i64ARB", cstr_buf): *const u8;
	glProgramUniform1i64ARB = user_get_proc_address(cstr): *fp_glProgramUniform1i64ARB;
	let cstr = strings::to_c_with_buf("glProgramUniform1i64NV", cstr_buf): *const u8;
	glProgramUniform1i64NV = user_get_proc_address(cstr): *fp_glProgramUniform1i64NV;
	let cstr = strings::to_c_with_buf("glProgramUniform1i64vARB", cstr_buf): *const u8;
	glProgramUniform1i64vARB = user_get_proc_address(cstr): *fp_glProgramUniform1i64vARB;
	let cstr = strings::to_c_with_buf("glProgramUniform1i64vNV", cstr_buf): *const u8;
	glProgramUniform1i64vNV = user_get_proc_address(cstr): *fp_glProgramUniform1i64vNV;
	let cstr = strings::to_c_with_buf("glProgramUniform1iEXT", cstr_buf): *const u8;
	glProgramUniform1iEXT = user_get_proc_address(cstr): *fp_glProgramUniform1iEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform1iv", cstr_buf): *const u8;
	glProgramUniform1iv = user_get_proc_address(cstr): *fp_glProgramUniform1iv;
	let cstr = strings::to_c_with_buf("glProgramUniform1ivEXT", cstr_buf): *const u8;
	glProgramUniform1ivEXT = user_get_proc_address(cstr): *fp_glProgramUniform1ivEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform1ui", cstr_buf): *const u8;
	glProgramUniform1ui = user_get_proc_address(cstr): *fp_glProgramUniform1ui;
	let cstr = strings::to_c_with_buf("glProgramUniform1ui64ARB", cstr_buf): *const u8;
	glProgramUniform1ui64ARB = user_get_proc_address(cstr): *fp_glProgramUniform1ui64ARB;
	let cstr = strings::to_c_with_buf("glProgramUniform1ui64NV", cstr_buf): *const u8;
	glProgramUniform1ui64NV = user_get_proc_address(cstr): *fp_glProgramUniform1ui64NV;
	let cstr = strings::to_c_with_buf("glProgramUniform1ui64vARB", cstr_buf): *const u8;
	glProgramUniform1ui64vARB = user_get_proc_address(cstr): *fp_glProgramUniform1ui64vARB;
	let cstr = strings::to_c_with_buf("glProgramUniform1ui64vNV", cstr_buf): *const u8;
	glProgramUniform1ui64vNV = user_get_proc_address(cstr): *fp_glProgramUniform1ui64vNV;
	let cstr = strings::to_c_with_buf("glProgramUniform1uiEXT", cstr_buf): *const u8;
	glProgramUniform1uiEXT = user_get_proc_address(cstr): *fp_glProgramUniform1uiEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform1uiv", cstr_buf): *const u8;
	glProgramUniform1uiv = user_get_proc_address(cstr): *fp_glProgramUniform1uiv;
	let cstr = strings::to_c_with_buf("glProgramUniform1uivEXT", cstr_buf): *const u8;
	glProgramUniform1uivEXT = user_get_proc_address(cstr): *fp_glProgramUniform1uivEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform2d", cstr_buf): *const u8;
	glProgramUniform2d = user_get_proc_address(cstr): *fp_glProgramUniform2d;
	let cstr = strings::to_c_with_buf("glProgramUniform2dEXT", cstr_buf): *const u8;
	glProgramUniform2dEXT = user_get_proc_address(cstr): *fp_glProgramUniform2dEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform2dv", cstr_buf): *const u8;
	glProgramUniform2dv = user_get_proc_address(cstr): *fp_glProgramUniform2dv;
	let cstr = strings::to_c_with_buf("glProgramUniform2dvEXT", cstr_buf): *const u8;
	glProgramUniform2dvEXT = user_get_proc_address(cstr): *fp_glProgramUniform2dvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform2f", cstr_buf): *const u8;
	glProgramUniform2f = user_get_proc_address(cstr): *fp_glProgramUniform2f;
	let cstr = strings::to_c_with_buf("glProgramUniform2fEXT", cstr_buf): *const u8;
	glProgramUniform2fEXT = user_get_proc_address(cstr): *fp_glProgramUniform2fEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform2fv", cstr_buf): *const u8;
	glProgramUniform2fv = user_get_proc_address(cstr): *fp_glProgramUniform2fv;
	let cstr = strings::to_c_with_buf("glProgramUniform2fvEXT", cstr_buf): *const u8;
	glProgramUniform2fvEXT = user_get_proc_address(cstr): *fp_glProgramUniform2fvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform2i", cstr_buf): *const u8;
	glProgramUniform2i = user_get_proc_address(cstr): *fp_glProgramUniform2i;
	let cstr = strings::to_c_with_buf("glProgramUniform2i64ARB", cstr_buf): *const u8;
	glProgramUniform2i64ARB = user_get_proc_address(cstr): *fp_glProgramUniform2i64ARB;
	let cstr = strings::to_c_with_buf("glProgramUniform2i64NV", cstr_buf): *const u8;
	glProgramUniform2i64NV = user_get_proc_address(cstr): *fp_glProgramUniform2i64NV;
	let cstr = strings::to_c_with_buf("glProgramUniform2i64vARB", cstr_buf): *const u8;
	glProgramUniform2i64vARB = user_get_proc_address(cstr): *fp_glProgramUniform2i64vARB;
	let cstr = strings::to_c_with_buf("glProgramUniform2i64vNV", cstr_buf): *const u8;
	glProgramUniform2i64vNV = user_get_proc_address(cstr): *fp_glProgramUniform2i64vNV;
	let cstr = strings::to_c_with_buf("glProgramUniform2iEXT", cstr_buf): *const u8;
	glProgramUniform2iEXT = user_get_proc_address(cstr): *fp_glProgramUniform2iEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform2iv", cstr_buf): *const u8;
	glProgramUniform2iv = user_get_proc_address(cstr): *fp_glProgramUniform2iv;
	let cstr = strings::to_c_with_buf("glProgramUniform2ivEXT", cstr_buf): *const u8;
	glProgramUniform2ivEXT = user_get_proc_address(cstr): *fp_glProgramUniform2ivEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform2ui", cstr_buf): *const u8;
	glProgramUniform2ui = user_get_proc_address(cstr): *fp_glProgramUniform2ui;
	let cstr = strings::to_c_with_buf("glProgramUniform2ui64ARB", cstr_buf): *const u8;
	glProgramUniform2ui64ARB = user_get_proc_address(cstr): *fp_glProgramUniform2ui64ARB;
	let cstr = strings::to_c_with_buf("glProgramUniform2ui64NV", cstr_buf): *const u8;
	glProgramUniform2ui64NV = user_get_proc_address(cstr): *fp_glProgramUniform2ui64NV;
	let cstr = strings::to_c_with_buf("glProgramUniform2ui64vARB", cstr_buf): *const u8;
	glProgramUniform2ui64vARB = user_get_proc_address(cstr): *fp_glProgramUniform2ui64vARB;
	let cstr = strings::to_c_with_buf("glProgramUniform2ui64vNV", cstr_buf): *const u8;
	glProgramUniform2ui64vNV = user_get_proc_address(cstr): *fp_glProgramUniform2ui64vNV;
	let cstr = strings::to_c_with_buf("glProgramUniform2uiEXT", cstr_buf): *const u8;
	glProgramUniform2uiEXT = user_get_proc_address(cstr): *fp_glProgramUniform2uiEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform2uiv", cstr_buf): *const u8;
	glProgramUniform2uiv = user_get_proc_address(cstr): *fp_glProgramUniform2uiv;
	let cstr = strings::to_c_with_buf("glProgramUniform2uivEXT", cstr_buf): *const u8;
	glProgramUniform2uivEXT = user_get_proc_address(cstr): *fp_glProgramUniform2uivEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform3d", cstr_buf): *const u8;
	glProgramUniform3d = user_get_proc_address(cstr): *fp_glProgramUniform3d;
	let cstr = strings::to_c_with_buf("glProgramUniform3dEXT", cstr_buf): *const u8;
	glProgramUniform3dEXT = user_get_proc_address(cstr): *fp_glProgramUniform3dEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform3dv", cstr_buf): *const u8;
	glProgramUniform3dv = user_get_proc_address(cstr): *fp_glProgramUniform3dv;
	let cstr = strings::to_c_with_buf("glProgramUniform3dvEXT", cstr_buf): *const u8;
	glProgramUniform3dvEXT = user_get_proc_address(cstr): *fp_glProgramUniform3dvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform3f", cstr_buf): *const u8;
	glProgramUniform3f = user_get_proc_address(cstr): *fp_glProgramUniform3f;
	let cstr = strings::to_c_with_buf("glProgramUniform3fEXT", cstr_buf): *const u8;
	glProgramUniform3fEXT = user_get_proc_address(cstr): *fp_glProgramUniform3fEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform3fv", cstr_buf): *const u8;
	glProgramUniform3fv = user_get_proc_address(cstr): *fp_glProgramUniform3fv;
	let cstr = strings::to_c_with_buf("glProgramUniform3fvEXT", cstr_buf): *const u8;
	glProgramUniform3fvEXT = user_get_proc_address(cstr): *fp_glProgramUniform3fvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform3i", cstr_buf): *const u8;
	glProgramUniform3i = user_get_proc_address(cstr): *fp_glProgramUniform3i;
	let cstr = strings::to_c_with_buf("glProgramUniform3i64ARB", cstr_buf): *const u8;
	glProgramUniform3i64ARB = user_get_proc_address(cstr): *fp_glProgramUniform3i64ARB;
	let cstr = strings::to_c_with_buf("glProgramUniform3i64NV", cstr_buf): *const u8;
	glProgramUniform3i64NV = user_get_proc_address(cstr): *fp_glProgramUniform3i64NV;
	let cstr = strings::to_c_with_buf("glProgramUniform3i64vARB", cstr_buf): *const u8;
	glProgramUniform3i64vARB = user_get_proc_address(cstr): *fp_glProgramUniform3i64vARB;
	let cstr = strings::to_c_with_buf("glProgramUniform3i64vNV", cstr_buf): *const u8;
	glProgramUniform3i64vNV = user_get_proc_address(cstr): *fp_glProgramUniform3i64vNV;
	let cstr = strings::to_c_with_buf("glProgramUniform3iEXT", cstr_buf): *const u8;
	glProgramUniform3iEXT = user_get_proc_address(cstr): *fp_glProgramUniform3iEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform3iv", cstr_buf): *const u8;
	glProgramUniform3iv = user_get_proc_address(cstr): *fp_glProgramUniform3iv;
	let cstr = strings::to_c_with_buf("glProgramUniform3ivEXT", cstr_buf): *const u8;
	glProgramUniform3ivEXT = user_get_proc_address(cstr): *fp_glProgramUniform3ivEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform3ui", cstr_buf): *const u8;
	glProgramUniform3ui = user_get_proc_address(cstr): *fp_glProgramUniform3ui;
	let cstr = strings::to_c_with_buf("glProgramUniform3ui64ARB", cstr_buf): *const u8;
	glProgramUniform3ui64ARB = user_get_proc_address(cstr): *fp_glProgramUniform3ui64ARB;
	let cstr = strings::to_c_with_buf("glProgramUniform3ui64NV", cstr_buf): *const u8;
	glProgramUniform3ui64NV = user_get_proc_address(cstr): *fp_glProgramUniform3ui64NV;
	let cstr = strings::to_c_with_buf("glProgramUniform3ui64vARB", cstr_buf): *const u8;
	glProgramUniform3ui64vARB = user_get_proc_address(cstr): *fp_glProgramUniform3ui64vARB;
	let cstr = strings::to_c_with_buf("glProgramUniform3ui64vNV", cstr_buf): *const u8;
	glProgramUniform3ui64vNV = user_get_proc_address(cstr): *fp_glProgramUniform3ui64vNV;
	let cstr = strings::to_c_with_buf("glProgramUniform3uiEXT", cstr_buf): *const u8;
	glProgramUniform3uiEXT = user_get_proc_address(cstr): *fp_glProgramUniform3uiEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform3uiv", cstr_buf): *const u8;
	glProgramUniform3uiv = user_get_proc_address(cstr): *fp_glProgramUniform3uiv;
	let cstr = strings::to_c_with_buf("glProgramUniform3uivEXT", cstr_buf): *const u8;
	glProgramUniform3uivEXT = user_get_proc_address(cstr): *fp_glProgramUniform3uivEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform4d", cstr_buf): *const u8;
	glProgramUniform4d = user_get_proc_address(cstr): *fp_glProgramUniform4d;
	let cstr = strings::to_c_with_buf("glProgramUniform4dEXT", cstr_buf): *const u8;
	glProgramUniform4dEXT = user_get_proc_address(cstr): *fp_glProgramUniform4dEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform4dv", cstr_buf): *const u8;
	glProgramUniform4dv = user_get_proc_address(cstr): *fp_glProgramUniform4dv;
	let cstr = strings::to_c_with_buf("glProgramUniform4dvEXT", cstr_buf): *const u8;
	glProgramUniform4dvEXT = user_get_proc_address(cstr): *fp_glProgramUniform4dvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform4f", cstr_buf): *const u8;
	glProgramUniform4f = user_get_proc_address(cstr): *fp_glProgramUniform4f;
	let cstr = strings::to_c_with_buf("glProgramUniform4fEXT", cstr_buf): *const u8;
	glProgramUniform4fEXT = user_get_proc_address(cstr): *fp_glProgramUniform4fEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform4fv", cstr_buf): *const u8;
	glProgramUniform4fv = user_get_proc_address(cstr): *fp_glProgramUniform4fv;
	let cstr = strings::to_c_with_buf("glProgramUniform4fvEXT", cstr_buf): *const u8;
	glProgramUniform4fvEXT = user_get_proc_address(cstr): *fp_glProgramUniform4fvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform4i", cstr_buf): *const u8;
	glProgramUniform4i = user_get_proc_address(cstr): *fp_glProgramUniform4i;
	let cstr = strings::to_c_with_buf("glProgramUniform4i64ARB", cstr_buf): *const u8;
	glProgramUniform4i64ARB = user_get_proc_address(cstr): *fp_glProgramUniform4i64ARB;
	let cstr = strings::to_c_with_buf("glProgramUniform4i64NV", cstr_buf): *const u8;
	glProgramUniform4i64NV = user_get_proc_address(cstr): *fp_glProgramUniform4i64NV;
	let cstr = strings::to_c_with_buf("glProgramUniform4i64vARB", cstr_buf): *const u8;
	glProgramUniform4i64vARB = user_get_proc_address(cstr): *fp_glProgramUniform4i64vARB;
	let cstr = strings::to_c_with_buf("glProgramUniform4i64vNV", cstr_buf): *const u8;
	glProgramUniform4i64vNV = user_get_proc_address(cstr): *fp_glProgramUniform4i64vNV;
	let cstr = strings::to_c_with_buf("glProgramUniform4iEXT", cstr_buf): *const u8;
	glProgramUniform4iEXT = user_get_proc_address(cstr): *fp_glProgramUniform4iEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform4iv", cstr_buf): *const u8;
	glProgramUniform4iv = user_get_proc_address(cstr): *fp_glProgramUniform4iv;
	let cstr = strings::to_c_with_buf("glProgramUniform4ivEXT", cstr_buf): *const u8;
	glProgramUniform4ivEXT = user_get_proc_address(cstr): *fp_glProgramUniform4ivEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform4ui", cstr_buf): *const u8;
	glProgramUniform4ui = user_get_proc_address(cstr): *fp_glProgramUniform4ui;
	let cstr = strings::to_c_with_buf("glProgramUniform4ui64ARB", cstr_buf): *const u8;
	glProgramUniform4ui64ARB = user_get_proc_address(cstr): *fp_glProgramUniform4ui64ARB;
	let cstr = strings::to_c_with_buf("glProgramUniform4ui64NV", cstr_buf): *const u8;
	glProgramUniform4ui64NV = user_get_proc_address(cstr): *fp_glProgramUniform4ui64NV;
	let cstr = strings::to_c_with_buf("glProgramUniform4ui64vARB", cstr_buf): *const u8;
	glProgramUniform4ui64vARB = user_get_proc_address(cstr): *fp_glProgramUniform4ui64vARB;
	let cstr = strings::to_c_with_buf("glProgramUniform4ui64vNV", cstr_buf): *const u8;
	glProgramUniform4ui64vNV = user_get_proc_address(cstr): *fp_glProgramUniform4ui64vNV;
	let cstr = strings::to_c_with_buf("glProgramUniform4uiEXT", cstr_buf): *const u8;
	glProgramUniform4uiEXT = user_get_proc_address(cstr): *fp_glProgramUniform4uiEXT;
	let cstr = strings::to_c_with_buf("glProgramUniform4uiv", cstr_buf): *const u8;
	glProgramUniform4uiv = user_get_proc_address(cstr): *fp_glProgramUniform4uiv;
	let cstr = strings::to_c_with_buf("glProgramUniform4uivEXT", cstr_buf): *const u8;
	glProgramUniform4uivEXT = user_get_proc_address(cstr): *fp_glProgramUniform4uivEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformHandleui64ARB", cstr_buf): *const u8;
	glProgramUniformHandleui64ARB = user_get_proc_address(cstr): *fp_glProgramUniformHandleui64ARB;
	let cstr = strings::to_c_with_buf("glProgramUniformHandleui64NV", cstr_buf): *const u8;
	glProgramUniformHandleui64NV = user_get_proc_address(cstr): *fp_glProgramUniformHandleui64NV;
	let cstr = strings::to_c_with_buf("glProgramUniformHandleui64vARB", cstr_buf): *const u8;
	glProgramUniformHandleui64vARB = user_get_proc_address(cstr): *fp_glProgramUniformHandleui64vARB;
	let cstr = strings::to_c_with_buf("glProgramUniformHandleui64vNV", cstr_buf): *const u8;
	glProgramUniformHandleui64vNV = user_get_proc_address(cstr): *fp_glProgramUniformHandleui64vNV;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix2dv", cstr_buf): *const u8;
	glProgramUniformMatrix2dv = user_get_proc_address(cstr): *fp_glProgramUniformMatrix2dv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix2dvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix2dvEXT = user_get_proc_address(cstr): *fp_glProgramUniformMatrix2dvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix2fv", cstr_buf): *const u8;
	glProgramUniformMatrix2fv = user_get_proc_address(cstr): *fp_glProgramUniformMatrix2fv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix2fvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix2fvEXT = user_get_proc_address(cstr): *fp_glProgramUniformMatrix2fvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix2x3dv", cstr_buf): *const u8;
	glProgramUniformMatrix2x3dv = user_get_proc_address(cstr): *fp_glProgramUniformMatrix2x3dv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix2x3dvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix2x3dvEXT = user_get_proc_address(cstr): *fp_glProgramUniformMatrix2x3dvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix2x3fv", cstr_buf): *const u8;
	glProgramUniformMatrix2x3fv = user_get_proc_address(cstr): *fp_glProgramUniformMatrix2x3fv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix2x3fvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix2x3fvEXT = user_get_proc_address(cstr): *fp_glProgramUniformMatrix2x3fvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix2x4dv", cstr_buf): *const u8;
	glProgramUniformMatrix2x4dv = user_get_proc_address(cstr): *fp_glProgramUniformMatrix2x4dv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix2x4dvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix2x4dvEXT = user_get_proc_address(cstr): *fp_glProgramUniformMatrix2x4dvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix2x4fv", cstr_buf): *const u8;
	glProgramUniformMatrix2x4fv = user_get_proc_address(cstr): *fp_glProgramUniformMatrix2x4fv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix2x4fvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix2x4fvEXT = user_get_proc_address(cstr): *fp_glProgramUniformMatrix2x4fvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix3dv", cstr_buf): *const u8;
	glProgramUniformMatrix3dv = user_get_proc_address(cstr): *fp_glProgramUniformMatrix3dv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix3dvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix3dvEXT = user_get_proc_address(cstr): *fp_glProgramUniformMatrix3dvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix3fv", cstr_buf): *const u8;
	glProgramUniformMatrix3fv = user_get_proc_address(cstr): *fp_glProgramUniformMatrix3fv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix3fvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix3fvEXT = user_get_proc_address(cstr): *fp_glProgramUniformMatrix3fvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix3x2dv", cstr_buf): *const u8;
	glProgramUniformMatrix3x2dv = user_get_proc_address(cstr): *fp_glProgramUniformMatrix3x2dv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix3x2dvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix3x2dvEXT = user_get_proc_address(cstr): *fp_glProgramUniformMatrix3x2dvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix3x2fv", cstr_buf): *const u8;
	glProgramUniformMatrix3x2fv = user_get_proc_address(cstr): *fp_glProgramUniformMatrix3x2fv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix3x2fvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix3x2fvEXT = user_get_proc_address(cstr): *fp_glProgramUniformMatrix3x2fvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix3x4dv", cstr_buf): *const u8;
	glProgramUniformMatrix3x4dv = user_get_proc_address(cstr): *fp_glProgramUniformMatrix3x4dv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix3x4dvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix3x4dvEXT = user_get_proc_address(cstr): *fp_glProgramUniformMatrix3x4dvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix3x4fv", cstr_buf): *const u8;
	glProgramUniformMatrix3x4fv = user_get_proc_address(cstr): *fp_glProgramUniformMatrix3x4fv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix3x4fvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix3x4fvEXT = user_get_proc_address(cstr): *fp_glProgramUniformMatrix3x4fvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix4dv", cstr_buf): *const u8;
	glProgramUniformMatrix4dv = user_get_proc_address(cstr): *fp_glProgramUniformMatrix4dv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix4dvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix4dvEXT = user_get_proc_address(cstr): *fp_glProgramUniformMatrix4dvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix4fv", cstr_buf): *const u8;
	glProgramUniformMatrix4fv = user_get_proc_address(cstr): *fp_glProgramUniformMatrix4fv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix4fvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix4fvEXT = user_get_proc_address(cstr): *fp_glProgramUniformMatrix4fvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix4x2dv", cstr_buf): *const u8;
	glProgramUniformMatrix4x2dv = user_get_proc_address(cstr): *fp_glProgramUniformMatrix4x2dv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix4x2dvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix4x2dvEXT = user_get_proc_address(cstr): *fp_glProgramUniformMatrix4x2dvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix4x2fv", cstr_buf): *const u8;
	glProgramUniformMatrix4x2fv = user_get_proc_address(cstr): *fp_glProgramUniformMatrix4x2fv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix4x2fvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix4x2fvEXT = user_get_proc_address(cstr): *fp_glProgramUniformMatrix4x2fvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix4x3dv", cstr_buf): *const u8;
	glProgramUniformMatrix4x3dv = user_get_proc_address(cstr): *fp_glProgramUniformMatrix4x3dv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix4x3dvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix4x3dvEXT = user_get_proc_address(cstr): *fp_glProgramUniformMatrix4x3dvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix4x3fv", cstr_buf): *const u8;
	glProgramUniformMatrix4x3fv = user_get_proc_address(cstr): *fp_glProgramUniformMatrix4x3fv;
	let cstr = strings::to_c_with_buf("glProgramUniformMatrix4x3fvEXT", cstr_buf): *const u8;
	glProgramUniformMatrix4x3fvEXT = user_get_proc_address(cstr): *fp_glProgramUniformMatrix4x3fvEXT;
	let cstr = strings::to_c_with_buf("glProgramUniformui64NV", cstr_buf): *const u8;
	glProgramUniformui64NV = user_get_proc_address(cstr): *fp_glProgramUniformui64NV;
	let cstr = strings::to_c_with_buf("glProgramUniformui64vNV", cstr_buf): *const u8;
	glProgramUniformui64vNV = user_get_proc_address(cstr): *fp_glProgramUniformui64vNV;
	let cstr = strings::to_c_with_buf("glProgramVertexLimitNV", cstr_buf): *const u8;
	glProgramVertexLimitNV = user_get_proc_address(cstr): *fp_glProgramVertexLimitNV;
	let cstr = strings::to_c_with_buf("glProvokingVertex", cstr_buf): *const u8;
	glProvokingVertex = user_get_proc_address(cstr): *fp_glProvokingVertex;
	let cstr = strings::to_c_with_buf("glProvokingVertexEXT", cstr_buf): *const u8;
	glProvokingVertexEXT = user_get_proc_address(cstr): *fp_glProvokingVertexEXT;
	let cstr = strings::to_c_with_buf("glPushAttrib", cstr_buf): *const u8;
	glPushAttrib = user_get_proc_address(cstr): *fp_glPushAttrib;
	let cstr = strings::to_c_with_buf("glPushClientAttrib", cstr_buf): *const u8;
	glPushClientAttrib = user_get_proc_address(cstr): *fp_glPushClientAttrib;
	let cstr = strings::to_c_with_buf("glPushClientAttribDefaultEXT", cstr_buf): *const u8;
	glPushClientAttribDefaultEXT = user_get_proc_address(cstr): *fp_glPushClientAttribDefaultEXT;
	let cstr = strings::to_c_with_buf("glPushDebugGroup", cstr_buf): *const u8;
	glPushDebugGroup = user_get_proc_address(cstr): *fp_glPushDebugGroup;
	let cstr = strings::to_c_with_buf("glPushGroupMarkerEXT", cstr_buf): *const u8;
	glPushGroupMarkerEXT = user_get_proc_address(cstr): *fp_glPushGroupMarkerEXT;
	let cstr = strings::to_c_with_buf("glPushMatrix", cstr_buf): *const u8;
	glPushMatrix = user_get_proc_address(cstr): *fp_glPushMatrix;
	let cstr = strings::to_c_with_buf("glPushName", cstr_buf): *const u8;
	glPushName = user_get_proc_address(cstr): *fp_glPushName;
	let cstr = strings::to_c_with_buf("glQueryCounter", cstr_buf): *const u8;
	glQueryCounter = user_get_proc_address(cstr): *fp_glQueryCounter;
	let cstr = strings::to_c_with_buf("glQueryMatrixxOES", cstr_buf): *const u8;
	glQueryMatrixxOES = user_get_proc_address(cstr): *fp_glQueryMatrixxOES;
	let cstr = strings::to_c_with_buf("glQueryObjectParameteruiAMD", cstr_buf): *const u8;
	glQueryObjectParameteruiAMD = user_get_proc_address(cstr): *fp_glQueryObjectParameteruiAMD;
	let cstr = strings::to_c_with_buf("glQueryResourceNV", cstr_buf): *const u8;
	glQueryResourceNV = user_get_proc_address(cstr): *fp_glQueryResourceNV;
	let cstr = strings::to_c_with_buf("glQueryResourceTagNV", cstr_buf): *const u8;
	glQueryResourceTagNV = user_get_proc_address(cstr): *fp_glQueryResourceTagNV;
	let cstr = strings::to_c_with_buf("glRasterPos2d", cstr_buf): *const u8;
	glRasterPos2d = user_get_proc_address(cstr): *fp_glRasterPos2d;
	let cstr = strings::to_c_with_buf("glRasterPos2dv", cstr_buf): *const u8;
	glRasterPos2dv = user_get_proc_address(cstr): *fp_glRasterPos2dv;
	let cstr = strings::to_c_with_buf("glRasterPos2f", cstr_buf): *const u8;
	glRasterPos2f = user_get_proc_address(cstr): *fp_glRasterPos2f;
	let cstr = strings::to_c_with_buf("glRasterPos2fv", cstr_buf): *const u8;
	glRasterPos2fv = user_get_proc_address(cstr): *fp_glRasterPos2fv;
	let cstr = strings::to_c_with_buf("glRasterPos2i", cstr_buf): *const u8;
	glRasterPos2i = user_get_proc_address(cstr): *fp_glRasterPos2i;
	let cstr = strings::to_c_with_buf("glRasterPos2iv", cstr_buf): *const u8;
	glRasterPos2iv = user_get_proc_address(cstr): *fp_glRasterPos2iv;
	let cstr = strings::to_c_with_buf("glRasterPos2s", cstr_buf): *const u8;
	glRasterPos2s = user_get_proc_address(cstr): *fp_glRasterPos2s;
	let cstr = strings::to_c_with_buf("glRasterPos2sv", cstr_buf): *const u8;
	glRasterPos2sv = user_get_proc_address(cstr): *fp_glRasterPos2sv;
	let cstr = strings::to_c_with_buf("glRasterPos2xOES", cstr_buf): *const u8;
	glRasterPos2xOES = user_get_proc_address(cstr): *fp_glRasterPos2xOES;
	let cstr = strings::to_c_with_buf("glRasterPos2xvOES", cstr_buf): *const u8;
	glRasterPos2xvOES = user_get_proc_address(cstr): *fp_glRasterPos2xvOES;
	let cstr = strings::to_c_with_buf("glRasterPos3d", cstr_buf): *const u8;
	glRasterPos3d = user_get_proc_address(cstr): *fp_glRasterPos3d;
	let cstr = strings::to_c_with_buf("glRasterPos3dv", cstr_buf): *const u8;
	glRasterPos3dv = user_get_proc_address(cstr): *fp_glRasterPos3dv;
	let cstr = strings::to_c_with_buf("glRasterPos3f", cstr_buf): *const u8;
	glRasterPos3f = user_get_proc_address(cstr): *fp_glRasterPos3f;
	let cstr = strings::to_c_with_buf("glRasterPos3fv", cstr_buf): *const u8;
	glRasterPos3fv = user_get_proc_address(cstr): *fp_glRasterPos3fv;
	let cstr = strings::to_c_with_buf("glRasterPos3i", cstr_buf): *const u8;
	glRasterPos3i = user_get_proc_address(cstr): *fp_glRasterPos3i;
	let cstr = strings::to_c_with_buf("glRasterPos3iv", cstr_buf): *const u8;
	glRasterPos3iv = user_get_proc_address(cstr): *fp_glRasterPos3iv;
	let cstr = strings::to_c_with_buf("glRasterPos3s", cstr_buf): *const u8;
	glRasterPos3s = user_get_proc_address(cstr): *fp_glRasterPos3s;
	let cstr = strings::to_c_with_buf("glRasterPos3sv", cstr_buf): *const u8;
	glRasterPos3sv = user_get_proc_address(cstr): *fp_glRasterPos3sv;
	let cstr = strings::to_c_with_buf("glRasterPos3xOES", cstr_buf): *const u8;
	glRasterPos3xOES = user_get_proc_address(cstr): *fp_glRasterPos3xOES;
	let cstr = strings::to_c_with_buf("glRasterPos3xvOES", cstr_buf): *const u8;
	glRasterPos3xvOES = user_get_proc_address(cstr): *fp_glRasterPos3xvOES;
	let cstr = strings::to_c_with_buf("glRasterPos4d", cstr_buf): *const u8;
	glRasterPos4d = user_get_proc_address(cstr): *fp_glRasterPos4d;
	let cstr = strings::to_c_with_buf("glRasterPos4dv", cstr_buf): *const u8;
	glRasterPos4dv = user_get_proc_address(cstr): *fp_glRasterPos4dv;
	let cstr = strings::to_c_with_buf("glRasterPos4f", cstr_buf): *const u8;
	glRasterPos4f = user_get_proc_address(cstr): *fp_glRasterPos4f;
	let cstr = strings::to_c_with_buf("glRasterPos4fv", cstr_buf): *const u8;
	glRasterPos4fv = user_get_proc_address(cstr): *fp_glRasterPos4fv;
	let cstr = strings::to_c_with_buf("glRasterPos4i", cstr_buf): *const u8;
	glRasterPos4i = user_get_proc_address(cstr): *fp_glRasterPos4i;
	let cstr = strings::to_c_with_buf("glRasterPos4iv", cstr_buf): *const u8;
	glRasterPos4iv = user_get_proc_address(cstr): *fp_glRasterPos4iv;
	let cstr = strings::to_c_with_buf("glRasterPos4s", cstr_buf): *const u8;
	glRasterPos4s = user_get_proc_address(cstr): *fp_glRasterPos4s;
	let cstr = strings::to_c_with_buf("glRasterPos4sv", cstr_buf): *const u8;
	glRasterPos4sv = user_get_proc_address(cstr): *fp_glRasterPos4sv;
	let cstr = strings::to_c_with_buf("glRasterPos4xOES", cstr_buf): *const u8;
	glRasterPos4xOES = user_get_proc_address(cstr): *fp_glRasterPos4xOES;
	let cstr = strings::to_c_with_buf("glRasterPos4xvOES", cstr_buf): *const u8;
	glRasterPos4xvOES = user_get_proc_address(cstr): *fp_glRasterPos4xvOES;
	let cstr = strings::to_c_with_buf("glRasterSamplesEXT", cstr_buf): *const u8;
	glRasterSamplesEXT = user_get_proc_address(cstr): *fp_glRasterSamplesEXT;
	let cstr = strings::to_c_with_buf("glReadBuffer", cstr_buf): *const u8;
	glReadBuffer = user_get_proc_address(cstr): *fp_glReadBuffer;
	let cstr = strings::to_c_with_buf("glReadInstrumentsSGIX", cstr_buf): *const u8;
	glReadInstrumentsSGIX = user_get_proc_address(cstr): *fp_glReadInstrumentsSGIX;
	let cstr = strings::to_c_with_buf("glReadPixels", cstr_buf): *const u8;
	glReadPixels = user_get_proc_address(cstr): *fp_glReadPixels;
	let cstr = strings::to_c_with_buf("glReadnPixels", cstr_buf): *const u8;
	glReadnPixels = user_get_proc_address(cstr): *fp_glReadnPixels;
	let cstr = strings::to_c_with_buf("glReadnPixelsARB", cstr_buf): *const u8;
	glReadnPixelsARB = user_get_proc_address(cstr): *fp_glReadnPixelsARB;
	let cstr = strings::to_c_with_buf("glRectd", cstr_buf): *const u8;
	glRectd = user_get_proc_address(cstr): *fp_glRectd;
	let cstr = strings::to_c_with_buf("glRectdv", cstr_buf): *const u8;
	glRectdv = user_get_proc_address(cstr): *fp_glRectdv;
	let cstr = strings::to_c_with_buf("glRectf", cstr_buf): *const u8;
	glRectf = user_get_proc_address(cstr): *fp_glRectf;
	let cstr = strings::to_c_with_buf("glRectfv", cstr_buf): *const u8;
	glRectfv = user_get_proc_address(cstr): *fp_glRectfv;
	let cstr = strings::to_c_with_buf("glRecti", cstr_buf): *const u8;
	glRecti = user_get_proc_address(cstr): *fp_glRecti;
	let cstr = strings::to_c_with_buf("glRectiv", cstr_buf): *const u8;
	glRectiv = user_get_proc_address(cstr): *fp_glRectiv;
	let cstr = strings::to_c_with_buf("glRects", cstr_buf): *const u8;
	glRects = user_get_proc_address(cstr): *fp_glRects;
	let cstr = strings::to_c_with_buf("glRectsv", cstr_buf): *const u8;
	glRectsv = user_get_proc_address(cstr): *fp_glRectsv;
	let cstr = strings::to_c_with_buf("glRectxOES", cstr_buf): *const u8;
	glRectxOES = user_get_proc_address(cstr): *fp_glRectxOES;
	let cstr = strings::to_c_with_buf("glRectxvOES", cstr_buf): *const u8;
	glRectxvOES = user_get_proc_address(cstr): *fp_glRectxvOES;
	let cstr = strings::to_c_with_buf("glReferencePlaneSGIX", cstr_buf): *const u8;
	glReferencePlaneSGIX = user_get_proc_address(cstr): *fp_glReferencePlaneSGIX;
	let cstr = strings::to_c_with_buf("glReleaseKeyedMutexWin32EXT", cstr_buf): *const u8;
	glReleaseKeyedMutexWin32EXT = user_get_proc_address(cstr): *fp_glReleaseKeyedMutexWin32EXT;
	let cstr = strings::to_c_with_buf("glReleaseShaderCompiler", cstr_buf): *const u8;
	glReleaseShaderCompiler = user_get_proc_address(cstr): *fp_glReleaseShaderCompiler;
	let cstr = strings::to_c_with_buf("glRenderGpuMaskNV", cstr_buf): *const u8;
	glRenderGpuMaskNV = user_get_proc_address(cstr): *fp_glRenderGpuMaskNV;
	let cstr = strings::to_c_with_buf("glRenderMode", cstr_buf): *const u8;
	glRenderMode = user_get_proc_address(cstr): *fp_glRenderMode;
	let cstr = strings::to_c_with_buf("glRenderbufferStorage", cstr_buf): *const u8;
	glRenderbufferStorage = user_get_proc_address(cstr): *fp_glRenderbufferStorage;
	let cstr = strings::to_c_with_buf("glRenderbufferStorageEXT", cstr_buf): *const u8;
	glRenderbufferStorageEXT = user_get_proc_address(cstr): *fp_glRenderbufferStorageEXT;
	let cstr = strings::to_c_with_buf("glRenderbufferStorageMultisample", cstr_buf): *const u8;
	glRenderbufferStorageMultisample = user_get_proc_address(cstr): *fp_glRenderbufferStorageMultisample;
	let cstr = strings::to_c_with_buf("glRenderbufferStorageMultisampleAdvancedAMD", cstr_buf): *const u8;
	glRenderbufferStorageMultisampleAdvancedAMD = user_get_proc_address(cstr): *fp_glRenderbufferStorageMultisampleAdvancedAMD;
	let cstr = strings::to_c_with_buf("glRenderbufferStorageMultisampleCoverageNV", cstr_buf): *const u8;
	glRenderbufferStorageMultisampleCoverageNV = user_get_proc_address(cstr): *fp_glRenderbufferStorageMultisampleCoverageNV;
	let cstr = strings::to_c_with_buf("glRenderbufferStorageMultisampleEXT", cstr_buf): *const u8;
	glRenderbufferStorageMultisampleEXT = user_get_proc_address(cstr): *fp_glRenderbufferStorageMultisampleEXT;
	let cstr = strings::to_c_with_buf("glReplacementCodePointerSUN", cstr_buf): *const u8;
	glReplacementCodePointerSUN = user_get_proc_address(cstr): *fp_glReplacementCodePointerSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeubSUN", cstr_buf): *const u8;
	glReplacementCodeubSUN = user_get_proc_address(cstr): *fp_glReplacementCodeubSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeubvSUN", cstr_buf): *const u8;
	glReplacementCodeubvSUN = user_get_proc_address(cstr): *fp_glReplacementCodeubvSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiColor3fVertex3fSUN", cstr_buf): *const u8;
	glReplacementCodeuiColor3fVertex3fSUN = user_get_proc_address(cstr): *fp_glReplacementCodeuiColor3fVertex3fSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiColor3fVertex3fvSUN", cstr_buf): *const u8;
	glReplacementCodeuiColor3fVertex3fvSUN = user_get_proc_address(cstr): *fp_glReplacementCodeuiColor3fVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiColor4fNormal3fVertex3fSUN", cstr_buf): *const u8;
	glReplacementCodeuiColor4fNormal3fVertex3fSUN = user_get_proc_address(cstr): *fp_glReplacementCodeuiColor4fNormal3fVertex3fSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiColor4fNormal3fVertex3fvSUN", cstr_buf): *const u8;
	glReplacementCodeuiColor4fNormal3fVertex3fvSUN = user_get_proc_address(cstr): *fp_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiColor4ubVertex3fSUN", cstr_buf): *const u8;
	glReplacementCodeuiColor4ubVertex3fSUN = user_get_proc_address(cstr): *fp_glReplacementCodeuiColor4ubVertex3fSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiColor4ubVertex3fvSUN", cstr_buf): *const u8;
	glReplacementCodeuiColor4ubVertex3fvSUN = user_get_proc_address(cstr): *fp_glReplacementCodeuiColor4ubVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiNormal3fVertex3fSUN", cstr_buf): *const u8;
	glReplacementCodeuiNormal3fVertex3fSUN = user_get_proc_address(cstr): *fp_glReplacementCodeuiNormal3fVertex3fSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiNormal3fVertex3fvSUN", cstr_buf): *const u8;
	glReplacementCodeuiNormal3fVertex3fvSUN = user_get_proc_address(cstr): *fp_glReplacementCodeuiNormal3fVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiSUN", cstr_buf): *const u8;
	glReplacementCodeuiSUN = user_get_proc_address(cstr): *fp_glReplacementCodeuiSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN", cstr_buf): *const u8;
	glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = user_get_proc_address(cstr): *fp_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", cstr_buf): *const u8;
	glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = user_get_proc_address(cstr): *fp_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN", cstr_buf): *const u8;
	glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = user_get_proc_address(cstr): *fp_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", cstr_buf): *const u8;
	glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = user_get_proc_address(cstr): *fp_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiTexCoord2fVertex3fSUN", cstr_buf): *const u8;
	glReplacementCodeuiTexCoord2fVertex3fSUN = user_get_proc_address(cstr): *fp_glReplacementCodeuiTexCoord2fVertex3fSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiTexCoord2fVertex3fvSUN", cstr_buf): *const u8;
	glReplacementCodeuiTexCoord2fVertex3fvSUN = user_get_proc_address(cstr): *fp_glReplacementCodeuiTexCoord2fVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiVertex3fSUN", cstr_buf): *const u8;
	glReplacementCodeuiVertex3fSUN = user_get_proc_address(cstr): *fp_glReplacementCodeuiVertex3fSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuiVertex3fvSUN", cstr_buf): *const u8;
	glReplacementCodeuiVertex3fvSUN = user_get_proc_address(cstr): *fp_glReplacementCodeuiVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeuivSUN", cstr_buf): *const u8;
	glReplacementCodeuivSUN = user_get_proc_address(cstr): *fp_glReplacementCodeuivSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeusSUN", cstr_buf): *const u8;
	glReplacementCodeusSUN = user_get_proc_address(cstr): *fp_glReplacementCodeusSUN;
	let cstr = strings::to_c_with_buf("glReplacementCodeusvSUN", cstr_buf): *const u8;
	glReplacementCodeusvSUN = user_get_proc_address(cstr): *fp_glReplacementCodeusvSUN;
	let cstr = strings::to_c_with_buf("glRequestResidentProgramsNV", cstr_buf): *const u8;
	glRequestResidentProgramsNV = user_get_proc_address(cstr): *fp_glRequestResidentProgramsNV;
	let cstr = strings::to_c_with_buf("glResetHistogramEXT", cstr_buf): *const u8;
	glResetHistogramEXT = user_get_proc_address(cstr): *fp_glResetHistogramEXT;
	let cstr = strings::to_c_with_buf("glResetMemoryObjectParameterNV", cstr_buf): *const u8;
	glResetMemoryObjectParameterNV = user_get_proc_address(cstr): *fp_glResetMemoryObjectParameterNV;
	let cstr = strings::to_c_with_buf("glResetMinmaxEXT", cstr_buf): *const u8;
	glResetMinmaxEXT = user_get_proc_address(cstr): *fp_glResetMinmaxEXT;
	let cstr = strings::to_c_with_buf("glResizeBuffersMESA", cstr_buf): *const u8;
	glResizeBuffersMESA = user_get_proc_address(cstr): *fp_glResizeBuffersMESA;
	let cstr = strings::to_c_with_buf("glResolveDepthValuesNV", cstr_buf): *const u8;
	glResolveDepthValuesNV = user_get_proc_address(cstr): *fp_glResolveDepthValuesNV;
	let cstr = strings::to_c_with_buf("glResumeTransformFeedback", cstr_buf): *const u8;
	glResumeTransformFeedback = user_get_proc_address(cstr): *fp_glResumeTransformFeedback;
	let cstr = strings::to_c_with_buf("glResumeTransformFeedbackNV", cstr_buf): *const u8;
	glResumeTransformFeedbackNV = user_get_proc_address(cstr): *fp_glResumeTransformFeedbackNV;
	let cstr = strings::to_c_with_buf("glRotated", cstr_buf): *const u8;
	glRotated = user_get_proc_address(cstr): *fp_glRotated;
	let cstr = strings::to_c_with_buf("glRotatef", cstr_buf): *const u8;
	glRotatef = user_get_proc_address(cstr): *fp_glRotatef;
	let cstr = strings::to_c_with_buf("glRotatexOES", cstr_buf): *const u8;
	glRotatexOES = user_get_proc_address(cstr): *fp_glRotatexOES;
	let cstr = strings::to_c_with_buf("glSampleCoverage", cstr_buf): *const u8;
	glSampleCoverage = user_get_proc_address(cstr): *fp_glSampleCoverage;
	let cstr = strings::to_c_with_buf("glSampleCoverageARB", cstr_buf): *const u8;
	glSampleCoverageARB = user_get_proc_address(cstr): *fp_glSampleCoverageARB;
	let cstr = strings::to_c_with_buf("glSampleMapATI", cstr_buf): *const u8;
	glSampleMapATI = user_get_proc_address(cstr): *fp_glSampleMapATI;
	let cstr = strings::to_c_with_buf("glSampleMaskEXT", cstr_buf): *const u8;
	glSampleMaskEXT = user_get_proc_address(cstr): *fp_glSampleMaskEXT;
	let cstr = strings::to_c_with_buf("glSampleMaskIndexedNV", cstr_buf): *const u8;
	glSampleMaskIndexedNV = user_get_proc_address(cstr): *fp_glSampleMaskIndexedNV;
	let cstr = strings::to_c_with_buf("glSampleMaskSGIS", cstr_buf): *const u8;
	glSampleMaskSGIS = user_get_proc_address(cstr): *fp_glSampleMaskSGIS;
	let cstr = strings::to_c_with_buf("glSampleMaski", cstr_buf): *const u8;
	glSampleMaski = user_get_proc_address(cstr): *fp_glSampleMaski;
	let cstr = strings::to_c_with_buf("glSamplePatternEXT", cstr_buf): *const u8;
	glSamplePatternEXT = user_get_proc_address(cstr): *fp_glSamplePatternEXT;
	let cstr = strings::to_c_with_buf("glSamplePatternSGIS", cstr_buf): *const u8;
	glSamplePatternSGIS = user_get_proc_address(cstr): *fp_glSamplePatternSGIS;
	let cstr = strings::to_c_with_buf("glSamplerParameterIiv", cstr_buf): *const u8;
	glSamplerParameterIiv = user_get_proc_address(cstr): *fp_glSamplerParameterIiv;
	let cstr = strings::to_c_with_buf("glSamplerParameterIuiv", cstr_buf): *const u8;
	glSamplerParameterIuiv = user_get_proc_address(cstr): *fp_glSamplerParameterIuiv;
	let cstr = strings::to_c_with_buf("glSamplerParameterf", cstr_buf): *const u8;
	glSamplerParameterf = user_get_proc_address(cstr): *fp_glSamplerParameterf;
	let cstr = strings::to_c_with_buf("glSamplerParameterfv", cstr_buf): *const u8;
	glSamplerParameterfv = user_get_proc_address(cstr): *fp_glSamplerParameterfv;
	let cstr = strings::to_c_with_buf("glSamplerParameteri", cstr_buf): *const u8;
	glSamplerParameteri = user_get_proc_address(cstr): *fp_glSamplerParameteri;
	let cstr = strings::to_c_with_buf("glSamplerParameteriv", cstr_buf): *const u8;
	glSamplerParameteriv = user_get_proc_address(cstr): *fp_glSamplerParameteriv;
	let cstr = strings::to_c_with_buf("glScaled", cstr_buf): *const u8;
	glScaled = user_get_proc_address(cstr): *fp_glScaled;
	let cstr = strings::to_c_with_buf("glScalef", cstr_buf): *const u8;
	glScalef = user_get_proc_address(cstr): *fp_glScalef;
	let cstr = strings::to_c_with_buf("glScalexOES", cstr_buf): *const u8;
	glScalexOES = user_get_proc_address(cstr): *fp_glScalexOES;
	let cstr = strings::to_c_with_buf("glScissor", cstr_buf): *const u8;
	glScissor = user_get_proc_address(cstr): *fp_glScissor;
	let cstr = strings::to_c_with_buf("glScissorArrayv", cstr_buf): *const u8;
	glScissorArrayv = user_get_proc_address(cstr): *fp_glScissorArrayv;
	let cstr = strings::to_c_with_buf("glScissorExclusiveArrayvNV", cstr_buf): *const u8;
	glScissorExclusiveArrayvNV = user_get_proc_address(cstr): *fp_glScissorExclusiveArrayvNV;
	let cstr = strings::to_c_with_buf("glScissorExclusiveNV", cstr_buf): *const u8;
	glScissorExclusiveNV = user_get_proc_address(cstr): *fp_glScissorExclusiveNV;
	let cstr = strings::to_c_with_buf("glScissorIndexed", cstr_buf): *const u8;
	glScissorIndexed = user_get_proc_address(cstr): *fp_glScissorIndexed;
	let cstr = strings::to_c_with_buf("glScissorIndexedv", cstr_buf): *const u8;
	glScissorIndexedv = user_get_proc_address(cstr): *fp_glScissorIndexedv;
	let cstr = strings::to_c_with_buf("glSecondaryColor3b", cstr_buf): *const u8;
	glSecondaryColor3b = user_get_proc_address(cstr): *fp_glSecondaryColor3b;
	let cstr = strings::to_c_with_buf("glSecondaryColor3bEXT", cstr_buf): *const u8;
	glSecondaryColor3bEXT = user_get_proc_address(cstr): *fp_glSecondaryColor3bEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3bv", cstr_buf): *const u8;
	glSecondaryColor3bv = user_get_proc_address(cstr): *fp_glSecondaryColor3bv;
	let cstr = strings::to_c_with_buf("glSecondaryColor3bvEXT", cstr_buf): *const u8;
	glSecondaryColor3bvEXT = user_get_proc_address(cstr): *fp_glSecondaryColor3bvEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3d", cstr_buf): *const u8;
	glSecondaryColor3d = user_get_proc_address(cstr): *fp_glSecondaryColor3d;
	let cstr = strings::to_c_with_buf("glSecondaryColor3dEXT", cstr_buf): *const u8;
	glSecondaryColor3dEXT = user_get_proc_address(cstr): *fp_glSecondaryColor3dEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3dv", cstr_buf): *const u8;
	glSecondaryColor3dv = user_get_proc_address(cstr): *fp_glSecondaryColor3dv;
	let cstr = strings::to_c_with_buf("glSecondaryColor3dvEXT", cstr_buf): *const u8;
	glSecondaryColor3dvEXT = user_get_proc_address(cstr): *fp_glSecondaryColor3dvEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3f", cstr_buf): *const u8;
	glSecondaryColor3f = user_get_proc_address(cstr): *fp_glSecondaryColor3f;
	let cstr = strings::to_c_with_buf("glSecondaryColor3fEXT", cstr_buf): *const u8;
	glSecondaryColor3fEXT = user_get_proc_address(cstr): *fp_glSecondaryColor3fEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3fv", cstr_buf): *const u8;
	glSecondaryColor3fv = user_get_proc_address(cstr): *fp_glSecondaryColor3fv;
	let cstr = strings::to_c_with_buf("glSecondaryColor3fvEXT", cstr_buf): *const u8;
	glSecondaryColor3fvEXT = user_get_proc_address(cstr): *fp_glSecondaryColor3fvEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3hNV", cstr_buf): *const u8;
	glSecondaryColor3hNV = user_get_proc_address(cstr): *fp_glSecondaryColor3hNV;
	let cstr = strings::to_c_with_buf("glSecondaryColor3hvNV", cstr_buf): *const u8;
	glSecondaryColor3hvNV = user_get_proc_address(cstr): *fp_glSecondaryColor3hvNV;
	let cstr = strings::to_c_with_buf("glSecondaryColor3i", cstr_buf): *const u8;
	glSecondaryColor3i = user_get_proc_address(cstr): *fp_glSecondaryColor3i;
	let cstr = strings::to_c_with_buf("glSecondaryColor3iEXT", cstr_buf): *const u8;
	glSecondaryColor3iEXT = user_get_proc_address(cstr): *fp_glSecondaryColor3iEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3iv", cstr_buf): *const u8;
	glSecondaryColor3iv = user_get_proc_address(cstr): *fp_glSecondaryColor3iv;
	let cstr = strings::to_c_with_buf("glSecondaryColor3ivEXT", cstr_buf): *const u8;
	glSecondaryColor3ivEXT = user_get_proc_address(cstr): *fp_glSecondaryColor3ivEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3s", cstr_buf): *const u8;
	glSecondaryColor3s = user_get_proc_address(cstr): *fp_glSecondaryColor3s;
	let cstr = strings::to_c_with_buf("glSecondaryColor3sEXT", cstr_buf): *const u8;
	glSecondaryColor3sEXT = user_get_proc_address(cstr): *fp_glSecondaryColor3sEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3sv", cstr_buf): *const u8;
	glSecondaryColor3sv = user_get_proc_address(cstr): *fp_glSecondaryColor3sv;
	let cstr = strings::to_c_with_buf("glSecondaryColor3svEXT", cstr_buf): *const u8;
	glSecondaryColor3svEXT = user_get_proc_address(cstr): *fp_glSecondaryColor3svEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3ub", cstr_buf): *const u8;
	glSecondaryColor3ub = user_get_proc_address(cstr): *fp_glSecondaryColor3ub;
	let cstr = strings::to_c_with_buf("glSecondaryColor3ubEXT", cstr_buf): *const u8;
	glSecondaryColor3ubEXT = user_get_proc_address(cstr): *fp_glSecondaryColor3ubEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3ubv", cstr_buf): *const u8;
	glSecondaryColor3ubv = user_get_proc_address(cstr): *fp_glSecondaryColor3ubv;
	let cstr = strings::to_c_with_buf("glSecondaryColor3ubvEXT", cstr_buf): *const u8;
	glSecondaryColor3ubvEXT = user_get_proc_address(cstr): *fp_glSecondaryColor3ubvEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3ui", cstr_buf): *const u8;
	glSecondaryColor3ui = user_get_proc_address(cstr): *fp_glSecondaryColor3ui;
	let cstr = strings::to_c_with_buf("glSecondaryColor3uiEXT", cstr_buf): *const u8;
	glSecondaryColor3uiEXT = user_get_proc_address(cstr): *fp_glSecondaryColor3uiEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3uiv", cstr_buf): *const u8;
	glSecondaryColor3uiv = user_get_proc_address(cstr): *fp_glSecondaryColor3uiv;
	let cstr = strings::to_c_with_buf("glSecondaryColor3uivEXT", cstr_buf): *const u8;
	glSecondaryColor3uivEXT = user_get_proc_address(cstr): *fp_glSecondaryColor3uivEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3us", cstr_buf): *const u8;
	glSecondaryColor3us = user_get_proc_address(cstr): *fp_glSecondaryColor3us;
	let cstr = strings::to_c_with_buf("glSecondaryColor3usEXT", cstr_buf): *const u8;
	glSecondaryColor3usEXT = user_get_proc_address(cstr): *fp_glSecondaryColor3usEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColor3usv", cstr_buf): *const u8;
	glSecondaryColor3usv = user_get_proc_address(cstr): *fp_glSecondaryColor3usv;
	let cstr = strings::to_c_with_buf("glSecondaryColor3usvEXT", cstr_buf): *const u8;
	glSecondaryColor3usvEXT = user_get_proc_address(cstr): *fp_glSecondaryColor3usvEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColorFormatNV", cstr_buf): *const u8;
	glSecondaryColorFormatNV = user_get_proc_address(cstr): *fp_glSecondaryColorFormatNV;
	let cstr = strings::to_c_with_buf("glSecondaryColorPointer", cstr_buf): *const u8;
	glSecondaryColorPointer = user_get_proc_address(cstr): *fp_glSecondaryColorPointer;
	let cstr = strings::to_c_with_buf("glSecondaryColorPointerEXT", cstr_buf): *const u8;
	glSecondaryColorPointerEXT = user_get_proc_address(cstr): *fp_glSecondaryColorPointerEXT;
	let cstr = strings::to_c_with_buf("glSecondaryColorPointerListIBM", cstr_buf): *const u8;
	glSecondaryColorPointerListIBM = user_get_proc_address(cstr): *fp_glSecondaryColorPointerListIBM;
	let cstr = strings::to_c_with_buf("glSelectBuffer", cstr_buf): *const u8;
	glSelectBuffer = user_get_proc_address(cstr): *fp_glSelectBuffer;
	let cstr = strings::to_c_with_buf("glSelectPerfMonitorCountersAMD", cstr_buf): *const u8;
	glSelectPerfMonitorCountersAMD = user_get_proc_address(cstr): *fp_glSelectPerfMonitorCountersAMD;
	let cstr = strings::to_c_with_buf("glSemaphoreParameterivNV", cstr_buf): *const u8;
	glSemaphoreParameterivNV = user_get_proc_address(cstr): *fp_glSemaphoreParameterivNV;
	let cstr = strings::to_c_with_buf("glSemaphoreParameterui64vEXT", cstr_buf): *const u8;
	glSemaphoreParameterui64vEXT = user_get_proc_address(cstr): *fp_glSemaphoreParameterui64vEXT;
	let cstr = strings::to_c_with_buf("glSeparableFilter2DEXT", cstr_buf): *const u8;
	glSeparableFilter2DEXT = user_get_proc_address(cstr): *fp_glSeparableFilter2DEXT;
	let cstr = strings::to_c_with_buf("glSetFenceAPPLE", cstr_buf): *const u8;
	glSetFenceAPPLE = user_get_proc_address(cstr): *fp_glSetFenceAPPLE;
	let cstr = strings::to_c_with_buf("glSetFenceNV", cstr_buf): *const u8;
	glSetFenceNV = user_get_proc_address(cstr): *fp_glSetFenceNV;
	let cstr = strings::to_c_with_buf("glSetFragmentShaderConstantATI", cstr_buf): *const u8;
	glSetFragmentShaderConstantATI = user_get_proc_address(cstr): *fp_glSetFragmentShaderConstantATI;
	let cstr = strings::to_c_with_buf("glSetInvariantEXT", cstr_buf): *const u8;
	glSetInvariantEXT = user_get_proc_address(cstr): *fp_glSetInvariantEXT;
	let cstr = strings::to_c_with_buf("glSetLocalConstantEXT", cstr_buf): *const u8;
	glSetLocalConstantEXT = user_get_proc_address(cstr): *fp_glSetLocalConstantEXT;
	let cstr = strings::to_c_with_buf("glSetMultisamplefvAMD", cstr_buf): *const u8;
	glSetMultisamplefvAMD = user_get_proc_address(cstr): *fp_glSetMultisamplefvAMD;
	let cstr = strings::to_c_with_buf("glShadeModel", cstr_buf): *const u8;
	glShadeModel = user_get_proc_address(cstr): *fp_glShadeModel;
	let cstr = strings::to_c_with_buf("glShaderBinary", cstr_buf): *const u8;
	glShaderBinary = user_get_proc_address(cstr): *fp_glShaderBinary;
	let cstr = strings::to_c_with_buf("glShaderOp1EXT", cstr_buf): *const u8;
	glShaderOp1EXT = user_get_proc_address(cstr): *fp_glShaderOp1EXT;
	let cstr = strings::to_c_with_buf("glShaderOp2EXT", cstr_buf): *const u8;
	glShaderOp2EXT = user_get_proc_address(cstr): *fp_glShaderOp2EXT;
	let cstr = strings::to_c_with_buf("glShaderOp3EXT", cstr_buf): *const u8;
	glShaderOp3EXT = user_get_proc_address(cstr): *fp_glShaderOp3EXT;
	let cstr = strings::to_c_with_buf("glShaderSource", cstr_buf): *const u8;
	glShaderSource = user_get_proc_address(cstr): *fp_glShaderSource;
	let cstr = strings::to_c_with_buf("glShaderSourceARB", cstr_buf): *const u8;
	glShaderSourceARB = user_get_proc_address(cstr): *fp_glShaderSourceARB;
	let cstr = strings::to_c_with_buf("glShaderStorageBlockBinding", cstr_buf): *const u8;
	glShaderStorageBlockBinding = user_get_proc_address(cstr): *fp_glShaderStorageBlockBinding;
	let cstr = strings::to_c_with_buf("glShadingRateImageBarrierNV", cstr_buf): *const u8;
	glShadingRateImageBarrierNV = user_get_proc_address(cstr): *fp_glShadingRateImageBarrierNV;
	let cstr = strings::to_c_with_buf("glShadingRateImagePaletteNV", cstr_buf): *const u8;
	glShadingRateImagePaletteNV = user_get_proc_address(cstr): *fp_glShadingRateImagePaletteNV;
	let cstr = strings::to_c_with_buf("glShadingRateSampleOrderCustomNV", cstr_buf): *const u8;
	glShadingRateSampleOrderCustomNV = user_get_proc_address(cstr): *fp_glShadingRateSampleOrderCustomNV;
	let cstr = strings::to_c_with_buf("glShadingRateSampleOrderNV", cstr_buf): *const u8;
	glShadingRateSampleOrderNV = user_get_proc_address(cstr): *fp_glShadingRateSampleOrderNV;
	let cstr = strings::to_c_with_buf("glSharpenTexFuncSGIS", cstr_buf): *const u8;
	glSharpenTexFuncSGIS = user_get_proc_address(cstr): *fp_glSharpenTexFuncSGIS;
	let cstr = strings::to_c_with_buf("glSignalSemaphoreEXT", cstr_buf): *const u8;
	glSignalSemaphoreEXT = user_get_proc_address(cstr): *fp_glSignalSemaphoreEXT;
	let cstr = strings::to_c_with_buf("glSignalSemaphoreui64NVX", cstr_buf): *const u8;
	glSignalSemaphoreui64NVX = user_get_proc_address(cstr): *fp_glSignalSemaphoreui64NVX;
	let cstr = strings::to_c_with_buf("glSignalVkFenceNV", cstr_buf): *const u8;
	glSignalVkFenceNV = user_get_proc_address(cstr): *fp_glSignalVkFenceNV;
	let cstr = strings::to_c_with_buf("glSignalVkSemaphoreNV", cstr_buf): *const u8;
	glSignalVkSemaphoreNV = user_get_proc_address(cstr): *fp_glSignalVkSemaphoreNV;
	let cstr = strings::to_c_with_buf("glSpecializeShaderARB", cstr_buf): *const u8;
	glSpecializeShaderARB = user_get_proc_address(cstr): *fp_glSpecializeShaderARB;
	let cstr = strings::to_c_with_buf("glSpriteParameterfSGIX", cstr_buf): *const u8;
	glSpriteParameterfSGIX = user_get_proc_address(cstr): *fp_glSpriteParameterfSGIX;
	let cstr = strings::to_c_with_buf("glSpriteParameterfvSGIX", cstr_buf): *const u8;
	glSpriteParameterfvSGIX = user_get_proc_address(cstr): *fp_glSpriteParameterfvSGIX;
	let cstr = strings::to_c_with_buf("glSpriteParameteriSGIX", cstr_buf): *const u8;
	glSpriteParameteriSGIX = user_get_proc_address(cstr): *fp_glSpriteParameteriSGIX;
	let cstr = strings::to_c_with_buf("glSpriteParameterivSGIX", cstr_buf): *const u8;
	glSpriteParameterivSGIX = user_get_proc_address(cstr): *fp_glSpriteParameterivSGIX;
	let cstr = strings::to_c_with_buf("glStartInstrumentsSGIX", cstr_buf): *const u8;
	glStartInstrumentsSGIX = user_get_proc_address(cstr): *fp_glStartInstrumentsSGIX;
	let cstr = strings::to_c_with_buf("glStateCaptureNV", cstr_buf): *const u8;
	glStateCaptureNV = user_get_proc_address(cstr): *fp_glStateCaptureNV;
	let cstr = strings::to_c_with_buf("glStencilClearTagEXT", cstr_buf): *const u8;
	glStencilClearTagEXT = user_get_proc_address(cstr): *fp_glStencilClearTagEXT;
	let cstr = strings::to_c_with_buf("glStencilFillPathInstancedNV", cstr_buf): *const u8;
	glStencilFillPathInstancedNV = user_get_proc_address(cstr): *fp_glStencilFillPathInstancedNV;
	let cstr = strings::to_c_with_buf("glStencilFillPathNV", cstr_buf): *const u8;
	glStencilFillPathNV = user_get_proc_address(cstr): *fp_glStencilFillPathNV;
	let cstr = strings::to_c_with_buf("glStencilFunc", cstr_buf): *const u8;
	glStencilFunc = user_get_proc_address(cstr): *fp_glStencilFunc;
	let cstr = strings::to_c_with_buf("glStencilFuncSeparate", cstr_buf): *const u8;
	glStencilFuncSeparate = user_get_proc_address(cstr): *fp_glStencilFuncSeparate;
	let cstr = strings::to_c_with_buf("glStencilFuncSeparateATI", cstr_buf): *const u8;
	glStencilFuncSeparateATI = user_get_proc_address(cstr): *fp_glStencilFuncSeparateATI;
	let cstr = strings::to_c_with_buf("glStencilMask", cstr_buf): *const u8;
	glStencilMask = user_get_proc_address(cstr): *fp_glStencilMask;
	let cstr = strings::to_c_with_buf("glStencilMaskSeparate", cstr_buf): *const u8;
	glStencilMaskSeparate = user_get_proc_address(cstr): *fp_glStencilMaskSeparate;
	let cstr = strings::to_c_with_buf("glStencilOp", cstr_buf): *const u8;
	glStencilOp = user_get_proc_address(cstr): *fp_glStencilOp;
	let cstr = strings::to_c_with_buf("glStencilOpSeparate", cstr_buf): *const u8;
	glStencilOpSeparate = user_get_proc_address(cstr): *fp_glStencilOpSeparate;
	let cstr = strings::to_c_with_buf("glStencilOpSeparateATI", cstr_buf): *const u8;
	glStencilOpSeparateATI = user_get_proc_address(cstr): *fp_glStencilOpSeparateATI;
	let cstr = strings::to_c_with_buf("glStencilOpValueAMD", cstr_buf): *const u8;
	glStencilOpValueAMD = user_get_proc_address(cstr): *fp_glStencilOpValueAMD;
	let cstr = strings::to_c_with_buf("glStencilStrokePathInstancedNV", cstr_buf): *const u8;
	glStencilStrokePathInstancedNV = user_get_proc_address(cstr): *fp_glStencilStrokePathInstancedNV;
	let cstr = strings::to_c_with_buf("glStencilStrokePathNV", cstr_buf): *const u8;
	glStencilStrokePathNV = user_get_proc_address(cstr): *fp_glStencilStrokePathNV;
	let cstr = strings::to_c_with_buf("glStencilThenCoverFillPathInstancedNV", cstr_buf): *const u8;
	glStencilThenCoverFillPathInstancedNV = user_get_proc_address(cstr): *fp_glStencilThenCoverFillPathInstancedNV;
	let cstr = strings::to_c_with_buf("glStencilThenCoverFillPathNV", cstr_buf): *const u8;
	glStencilThenCoverFillPathNV = user_get_proc_address(cstr): *fp_glStencilThenCoverFillPathNV;
	let cstr = strings::to_c_with_buf("glStencilThenCoverStrokePathInstancedNV", cstr_buf): *const u8;
	glStencilThenCoverStrokePathInstancedNV = user_get_proc_address(cstr): *fp_glStencilThenCoverStrokePathInstancedNV;
	let cstr = strings::to_c_with_buf("glStencilThenCoverStrokePathNV", cstr_buf): *const u8;
	glStencilThenCoverStrokePathNV = user_get_proc_address(cstr): *fp_glStencilThenCoverStrokePathNV;
	let cstr = strings::to_c_with_buf("glStopInstrumentsSGIX", cstr_buf): *const u8;
	glStopInstrumentsSGIX = user_get_proc_address(cstr): *fp_glStopInstrumentsSGIX;
	let cstr = strings::to_c_with_buf("glStringMarkerGREMEDY", cstr_buf): *const u8;
	glStringMarkerGREMEDY = user_get_proc_address(cstr): *fp_glStringMarkerGREMEDY;
	let cstr = strings::to_c_with_buf("glSubpixelPrecisionBiasNV", cstr_buf): *const u8;
	glSubpixelPrecisionBiasNV = user_get_proc_address(cstr): *fp_glSubpixelPrecisionBiasNV;
	let cstr = strings::to_c_with_buf("glSwizzleEXT", cstr_buf): *const u8;
	glSwizzleEXT = user_get_proc_address(cstr): *fp_glSwizzleEXT;
	let cstr = strings::to_c_with_buf("glSyncTextureINTEL", cstr_buf): *const u8;
	glSyncTextureINTEL = user_get_proc_address(cstr): *fp_glSyncTextureINTEL;
	let cstr = strings::to_c_with_buf("glTagSampleBufferSGIX", cstr_buf): *const u8;
	glTagSampleBufferSGIX = user_get_proc_address(cstr): *fp_glTagSampleBufferSGIX;
	let cstr = strings::to_c_with_buf("glTangent3bEXT", cstr_buf): *const u8;
	glTangent3bEXT = user_get_proc_address(cstr): *fp_glTangent3bEXT;
	let cstr = strings::to_c_with_buf("glTangent3bvEXT", cstr_buf): *const u8;
	glTangent3bvEXT = user_get_proc_address(cstr): *fp_glTangent3bvEXT;
	let cstr = strings::to_c_with_buf("glTangent3dEXT", cstr_buf): *const u8;
	glTangent3dEXT = user_get_proc_address(cstr): *fp_glTangent3dEXT;
	let cstr = strings::to_c_with_buf("glTangent3dvEXT", cstr_buf): *const u8;
	glTangent3dvEXT = user_get_proc_address(cstr): *fp_glTangent3dvEXT;
	let cstr = strings::to_c_with_buf("glTangent3fEXT", cstr_buf): *const u8;
	glTangent3fEXT = user_get_proc_address(cstr): *fp_glTangent3fEXT;
	let cstr = strings::to_c_with_buf("glTangent3fvEXT", cstr_buf): *const u8;
	glTangent3fvEXT = user_get_proc_address(cstr): *fp_glTangent3fvEXT;
	let cstr = strings::to_c_with_buf("glTangent3iEXT", cstr_buf): *const u8;
	glTangent3iEXT = user_get_proc_address(cstr): *fp_glTangent3iEXT;
	let cstr = strings::to_c_with_buf("glTangent3ivEXT", cstr_buf): *const u8;
	glTangent3ivEXT = user_get_proc_address(cstr): *fp_glTangent3ivEXT;
	let cstr = strings::to_c_with_buf("glTangent3sEXT", cstr_buf): *const u8;
	glTangent3sEXT = user_get_proc_address(cstr): *fp_glTangent3sEXT;
	let cstr = strings::to_c_with_buf("glTangent3svEXT", cstr_buf): *const u8;
	glTangent3svEXT = user_get_proc_address(cstr): *fp_glTangent3svEXT;
	let cstr = strings::to_c_with_buf("glTangentPointerEXT", cstr_buf): *const u8;
	glTangentPointerEXT = user_get_proc_address(cstr): *fp_glTangentPointerEXT;
	let cstr = strings::to_c_with_buf("glTbufferMask3DFX", cstr_buf): *const u8;
	glTbufferMask3DFX = user_get_proc_address(cstr): *fp_glTbufferMask3DFX;
	let cstr = strings::to_c_with_buf("glTessellationFactorAMD", cstr_buf): *const u8;
	glTessellationFactorAMD = user_get_proc_address(cstr): *fp_glTessellationFactorAMD;
	let cstr = strings::to_c_with_buf("glTessellationModeAMD", cstr_buf): *const u8;
	glTessellationModeAMD = user_get_proc_address(cstr): *fp_glTessellationModeAMD;
	let cstr = strings::to_c_with_buf("glTestFenceAPPLE", cstr_buf): *const u8;
	glTestFenceAPPLE = user_get_proc_address(cstr): *fp_glTestFenceAPPLE;
	let cstr = strings::to_c_with_buf("glTestFenceNV", cstr_buf): *const u8;
	glTestFenceNV = user_get_proc_address(cstr): *fp_glTestFenceNV;
	let cstr = strings::to_c_with_buf("glTestObjectAPPLE", cstr_buf): *const u8;
	glTestObjectAPPLE = user_get_proc_address(cstr): *fp_glTestObjectAPPLE;
	let cstr = strings::to_c_with_buf("glTexAttachMemoryNV", cstr_buf): *const u8;
	glTexAttachMemoryNV = user_get_proc_address(cstr): *fp_glTexAttachMemoryNV;
	let cstr = strings::to_c_with_buf("glTexBufferARB", cstr_buf): *const u8;
	glTexBufferARB = user_get_proc_address(cstr): *fp_glTexBufferARB;
	let cstr = strings::to_c_with_buf("glTexBufferEXT", cstr_buf): *const u8;
	glTexBufferEXT = user_get_proc_address(cstr): *fp_glTexBufferEXT;
	let cstr = strings::to_c_with_buf("glTexBufferRange", cstr_buf): *const u8;
	glTexBufferRange = user_get_proc_address(cstr): *fp_glTexBufferRange;
	let cstr = strings::to_c_with_buf("glTexBumpParameterfvATI", cstr_buf): *const u8;
	glTexBumpParameterfvATI = user_get_proc_address(cstr): *fp_glTexBumpParameterfvATI;
	let cstr = strings::to_c_with_buf("glTexBumpParameterivATI", cstr_buf): *const u8;
	glTexBumpParameterivATI = user_get_proc_address(cstr): *fp_glTexBumpParameterivATI;
	let cstr = strings::to_c_with_buf("glTexCoord1bOES", cstr_buf): *const u8;
	glTexCoord1bOES = user_get_proc_address(cstr): *fp_glTexCoord1bOES;
	let cstr = strings::to_c_with_buf("glTexCoord1bvOES", cstr_buf): *const u8;
	glTexCoord1bvOES = user_get_proc_address(cstr): *fp_glTexCoord1bvOES;
	let cstr = strings::to_c_with_buf("glTexCoord1d", cstr_buf): *const u8;
	glTexCoord1d = user_get_proc_address(cstr): *fp_glTexCoord1d;
	let cstr = strings::to_c_with_buf("glTexCoord1dv", cstr_buf): *const u8;
	glTexCoord1dv = user_get_proc_address(cstr): *fp_glTexCoord1dv;
	let cstr = strings::to_c_with_buf("glTexCoord1f", cstr_buf): *const u8;
	glTexCoord1f = user_get_proc_address(cstr): *fp_glTexCoord1f;
	let cstr = strings::to_c_with_buf("glTexCoord1fv", cstr_buf): *const u8;
	glTexCoord1fv = user_get_proc_address(cstr): *fp_glTexCoord1fv;
	let cstr = strings::to_c_with_buf("glTexCoord1hNV", cstr_buf): *const u8;
	glTexCoord1hNV = user_get_proc_address(cstr): *fp_glTexCoord1hNV;
	let cstr = strings::to_c_with_buf("glTexCoord1hvNV", cstr_buf): *const u8;
	glTexCoord1hvNV = user_get_proc_address(cstr): *fp_glTexCoord1hvNV;
	let cstr = strings::to_c_with_buf("glTexCoord1i", cstr_buf): *const u8;
	glTexCoord1i = user_get_proc_address(cstr): *fp_glTexCoord1i;
	let cstr = strings::to_c_with_buf("glTexCoord1iv", cstr_buf): *const u8;
	glTexCoord1iv = user_get_proc_address(cstr): *fp_glTexCoord1iv;
	let cstr = strings::to_c_with_buf("glTexCoord1s", cstr_buf): *const u8;
	glTexCoord1s = user_get_proc_address(cstr): *fp_glTexCoord1s;
	let cstr = strings::to_c_with_buf("glTexCoord1sv", cstr_buf): *const u8;
	glTexCoord1sv = user_get_proc_address(cstr): *fp_glTexCoord1sv;
	let cstr = strings::to_c_with_buf("glTexCoord1xOES", cstr_buf): *const u8;
	glTexCoord1xOES = user_get_proc_address(cstr): *fp_glTexCoord1xOES;
	let cstr = strings::to_c_with_buf("glTexCoord1xvOES", cstr_buf): *const u8;
	glTexCoord1xvOES = user_get_proc_address(cstr): *fp_glTexCoord1xvOES;
	let cstr = strings::to_c_with_buf("glTexCoord2bOES", cstr_buf): *const u8;
	glTexCoord2bOES = user_get_proc_address(cstr): *fp_glTexCoord2bOES;
	let cstr = strings::to_c_with_buf("glTexCoord2bvOES", cstr_buf): *const u8;
	glTexCoord2bvOES = user_get_proc_address(cstr): *fp_glTexCoord2bvOES;
	let cstr = strings::to_c_with_buf("glTexCoord2d", cstr_buf): *const u8;
	glTexCoord2d = user_get_proc_address(cstr): *fp_glTexCoord2d;
	let cstr = strings::to_c_with_buf("glTexCoord2dv", cstr_buf): *const u8;
	glTexCoord2dv = user_get_proc_address(cstr): *fp_glTexCoord2dv;
	let cstr = strings::to_c_with_buf("glTexCoord2f", cstr_buf): *const u8;
	glTexCoord2f = user_get_proc_address(cstr): *fp_glTexCoord2f;
	let cstr = strings::to_c_with_buf("glTexCoord2fColor3fVertex3fSUN", cstr_buf): *const u8;
	glTexCoord2fColor3fVertex3fSUN = user_get_proc_address(cstr): *fp_glTexCoord2fColor3fVertex3fSUN;
	let cstr = strings::to_c_with_buf("glTexCoord2fColor3fVertex3fvSUN", cstr_buf): *const u8;
	glTexCoord2fColor3fVertex3fvSUN = user_get_proc_address(cstr): *fp_glTexCoord2fColor3fVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glTexCoord2fColor4fNormal3fVertex3fSUN", cstr_buf): *const u8;
	glTexCoord2fColor4fNormal3fVertex3fSUN = user_get_proc_address(cstr): *fp_glTexCoord2fColor4fNormal3fVertex3fSUN;
	let cstr = strings::to_c_with_buf("glTexCoord2fColor4fNormal3fVertex3fvSUN", cstr_buf): *const u8;
	glTexCoord2fColor4fNormal3fVertex3fvSUN = user_get_proc_address(cstr): *fp_glTexCoord2fColor4fNormal3fVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glTexCoord2fColor4ubVertex3fSUN", cstr_buf): *const u8;
	glTexCoord2fColor4ubVertex3fSUN = user_get_proc_address(cstr): *fp_glTexCoord2fColor4ubVertex3fSUN;
	let cstr = strings::to_c_with_buf("glTexCoord2fColor4ubVertex3fvSUN", cstr_buf): *const u8;
	glTexCoord2fColor4ubVertex3fvSUN = user_get_proc_address(cstr): *fp_glTexCoord2fColor4ubVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glTexCoord2fNormal3fVertex3fSUN", cstr_buf): *const u8;
	glTexCoord2fNormal3fVertex3fSUN = user_get_proc_address(cstr): *fp_glTexCoord2fNormal3fVertex3fSUN;
	let cstr = strings::to_c_with_buf("glTexCoord2fNormal3fVertex3fvSUN", cstr_buf): *const u8;
	glTexCoord2fNormal3fVertex3fvSUN = user_get_proc_address(cstr): *fp_glTexCoord2fNormal3fVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glTexCoord2fVertex3fSUN", cstr_buf): *const u8;
	glTexCoord2fVertex3fSUN = user_get_proc_address(cstr): *fp_glTexCoord2fVertex3fSUN;
	let cstr = strings::to_c_with_buf("glTexCoord2fVertex3fvSUN", cstr_buf): *const u8;
	glTexCoord2fVertex3fvSUN = user_get_proc_address(cstr): *fp_glTexCoord2fVertex3fvSUN;
	let cstr = strings::to_c_with_buf("glTexCoord2fv", cstr_buf): *const u8;
	glTexCoord2fv = user_get_proc_address(cstr): *fp_glTexCoord2fv;
	let cstr = strings::to_c_with_buf("glTexCoord2hNV", cstr_buf): *const u8;
	glTexCoord2hNV = user_get_proc_address(cstr): *fp_glTexCoord2hNV;
	let cstr = strings::to_c_with_buf("glTexCoord2hvNV", cstr_buf): *const u8;
	glTexCoord2hvNV = user_get_proc_address(cstr): *fp_glTexCoord2hvNV;
	let cstr = strings::to_c_with_buf("glTexCoord2i", cstr_buf): *const u8;
	glTexCoord2i = user_get_proc_address(cstr): *fp_glTexCoord2i;
	let cstr = strings::to_c_with_buf("glTexCoord2iv", cstr_buf): *const u8;
	glTexCoord2iv = user_get_proc_address(cstr): *fp_glTexCoord2iv;
	let cstr = strings::to_c_with_buf("glTexCoord2s", cstr_buf): *const u8;
	glTexCoord2s = user_get_proc_address(cstr): *fp_glTexCoord2s;
	let cstr = strings::to_c_with_buf("glTexCoord2sv", cstr_buf): *const u8;
	glTexCoord2sv = user_get_proc_address(cstr): *fp_glTexCoord2sv;
	let cstr = strings::to_c_with_buf("glTexCoord2xOES", cstr_buf): *const u8;
	glTexCoord2xOES = user_get_proc_address(cstr): *fp_glTexCoord2xOES;
	let cstr = strings::to_c_with_buf("glTexCoord2xvOES", cstr_buf): *const u8;
	glTexCoord2xvOES = user_get_proc_address(cstr): *fp_glTexCoord2xvOES;
	let cstr = strings::to_c_with_buf("glTexCoord3bOES", cstr_buf): *const u8;
	glTexCoord3bOES = user_get_proc_address(cstr): *fp_glTexCoord3bOES;
	let cstr = strings::to_c_with_buf("glTexCoord3bvOES", cstr_buf): *const u8;
	glTexCoord3bvOES = user_get_proc_address(cstr): *fp_glTexCoord3bvOES;
	let cstr = strings::to_c_with_buf("glTexCoord3d", cstr_buf): *const u8;
	glTexCoord3d = user_get_proc_address(cstr): *fp_glTexCoord3d;
	let cstr = strings::to_c_with_buf("glTexCoord3dv", cstr_buf): *const u8;
	glTexCoord3dv = user_get_proc_address(cstr): *fp_glTexCoord3dv;
	let cstr = strings::to_c_with_buf("glTexCoord3f", cstr_buf): *const u8;
	glTexCoord3f = user_get_proc_address(cstr): *fp_glTexCoord3f;
	let cstr = strings::to_c_with_buf("glTexCoord3fv", cstr_buf): *const u8;
	glTexCoord3fv = user_get_proc_address(cstr): *fp_glTexCoord3fv;
	let cstr = strings::to_c_with_buf("glTexCoord3hNV", cstr_buf): *const u8;
	glTexCoord3hNV = user_get_proc_address(cstr): *fp_glTexCoord3hNV;
	let cstr = strings::to_c_with_buf("glTexCoord3hvNV", cstr_buf): *const u8;
	glTexCoord3hvNV = user_get_proc_address(cstr): *fp_glTexCoord3hvNV;
	let cstr = strings::to_c_with_buf("glTexCoord3i", cstr_buf): *const u8;
	glTexCoord3i = user_get_proc_address(cstr): *fp_glTexCoord3i;
	let cstr = strings::to_c_with_buf("glTexCoord3iv", cstr_buf): *const u8;
	glTexCoord3iv = user_get_proc_address(cstr): *fp_glTexCoord3iv;
	let cstr = strings::to_c_with_buf("glTexCoord3s", cstr_buf): *const u8;
	glTexCoord3s = user_get_proc_address(cstr): *fp_glTexCoord3s;
	let cstr = strings::to_c_with_buf("glTexCoord3sv", cstr_buf): *const u8;
	glTexCoord3sv = user_get_proc_address(cstr): *fp_glTexCoord3sv;
	let cstr = strings::to_c_with_buf("glTexCoord3xOES", cstr_buf): *const u8;
	glTexCoord3xOES = user_get_proc_address(cstr): *fp_glTexCoord3xOES;
	let cstr = strings::to_c_with_buf("glTexCoord3xvOES", cstr_buf): *const u8;
	glTexCoord3xvOES = user_get_proc_address(cstr): *fp_glTexCoord3xvOES;
	let cstr = strings::to_c_with_buf("glTexCoord4bOES", cstr_buf): *const u8;
	glTexCoord4bOES = user_get_proc_address(cstr): *fp_glTexCoord4bOES;
	let cstr = strings::to_c_with_buf("glTexCoord4bvOES", cstr_buf): *const u8;
	glTexCoord4bvOES = user_get_proc_address(cstr): *fp_glTexCoord4bvOES;
	let cstr = strings::to_c_with_buf("glTexCoord4d", cstr_buf): *const u8;
	glTexCoord4d = user_get_proc_address(cstr): *fp_glTexCoord4d;
	let cstr = strings::to_c_with_buf("glTexCoord4dv", cstr_buf): *const u8;
	glTexCoord4dv = user_get_proc_address(cstr): *fp_glTexCoord4dv;
	let cstr = strings::to_c_with_buf("glTexCoord4f", cstr_buf): *const u8;
	glTexCoord4f = user_get_proc_address(cstr): *fp_glTexCoord4f;
	let cstr = strings::to_c_with_buf("glTexCoord4fColor4fNormal3fVertex4fSUN", cstr_buf): *const u8;
	glTexCoord4fColor4fNormal3fVertex4fSUN = user_get_proc_address(cstr): *fp_glTexCoord4fColor4fNormal3fVertex4fSUN;
	let cstr = strings::to_c_with_buf("glTexCoord4fColor4fNormal3fVertex4fvSUN", cstr_buf): *const u8;
	glTexCoord4fColor4fNormal3fVertex4fvSUN = user_get_proc_address(cstr): *fp_glTexCoord4fColor4fNormal3fVertex4fvSUN;
	let cstr = strings::to_c_with_buf("glTexCoord4fVertex4fSUN", cstr_buf): *const u8;
	glTexCoord4fVertex4fSUN = user_get_proc_address(cstr): *fp_glTexCoord4fVertex4fSUN;
	let cstr = strings::to_c_with_buf("glTexCoord4fVertex4fvSUN", cstr_buf): *const u8;
	glTexCoord4fVertex4fvSUN = user_get_proc_address(cstr): *fp_glTexCoord4fVertex4fvSUN;
	let cstr = strings::to_c_with_buf("glTexCoord4fv", cstr_buf): *const u8;
	glTexCoord4fv = user_get_proc_address(cstr): *fp_glTexCoord4fv;
	let cstr = strings::to_c_with_buf("glTexCoord4hNV", cstr_buf): *const u8;
	glTexCoord4hNV = user_get_proc_address(cstr): *fp_glTexCoord4hNV;
	let cstr = strings::to_c_with_buf("glTexCoord4hvNV", cstr_buf): *const u8;
	glTexCoord4hvNV = user_get_proc_address(cstr): *fp_glTexCoord4hvNV;
	let cstr = strings::to_c_with_buf("glTexCoord4i", cstr_buf): *const u8;
	glTexCoord4i = user_get_proc_address(cstr): *fp_glTexCoord4i;
	let cstr = strings::to_c_with_buf("glTexCoord4iv", cstr_buf): *const u8;
	glTexCoord4iv = user_get_proc_address(cstr): *fp_glTexCoord4iv;
	let cstr = strings::to_c_with_buf("glTexCoord4s", cstr_buf): *const u8;
	glTexCoord4s = user_get_proc_address(cstr): *fp_glTexCoord4s;
	let cstr = strings::to_c_with_buf("glTexCoord4sv", cstr_buf): *const u8;
	glTexCoord4sv = user_get_proc_address(cstr): *fp_glTexCoord4sv;
	let cstr = strings::to_c_with_buf("glTexCoord4xOES", cstr_buf): *const u8;
	glTexCoord4xOES = user_get_proc_address(cstr): *fp_glTexCoord4xOES;
	let cstr = strings::to_c_with_buf("glTexCoord4xvOES", cstr_buf): *const u8;
	glTexCoord4xvOES = user_get_proc_address(cstr): *fp_glTexCoord4xvOES;
	let cstr = strings::to_c_with_buf("glTexCoordFormatNV", cstr_buf): *const u8;
	glTexCoordFormatNV = user_get_proc_address(cstr): *fp_glTexCoordFormatNV;
	let cstr = strings::to_c_with_buf("glTexCoordPointer", cstr_buf): *const u8;
	glTexCoordPointer = user_get_proc_address(cstr): *fp_glTexCoordPointer;
	let cstr = strings::to_c_with_buf("glTexCoordPointerEXT", cstr_buf): *const u8;
	glTexCoordPointerEXT = user_get_proc_address(cstr): *fp_glTexCoordPointerEXT;
	let cstr = strings::to_c_with_buf("glTexCoordPointerListIBM", cstr_buf): *const u8;
	glTexCoordPointerListIBM = user_get_proc_address(cstr): *fp_glTexCoordPointerListIBM;
	let cstr = strings::to_c_with_buf("glTexCoordPointervINTEL", cstr_buf): *const u8;
	glTexCoordPointervINTEL = user_get_proc_address(cstr): *fp_glTexCoordPointervINTEL;
	let cstr = strings::to_c_with_buf("glTexEnvf", cstr_buf): *const u8;
	glTexEnvf = user_get_proc_address(cstr): *fp_glTexEnvf;
	let cstr = strings::to_c_with_buf("glTexEnvfv", cstr_buf): *const u8;
	glTexEnvfv = user_get_proc_address(cstr): *fp_glTexEnvfv;
	let cstr = strings::to_c_with_buf("glTexEnvi", cstr_buf): *const u8;
	glTexEnvi = user_get_proc_address(cstr): *fp_glTexEnvi;
	let cstr = strings::to_c_with_buf("glTexEnviv", cstr_buf): *const u8;
	glTexEnviv = user_get_proc_address(cstr): *fp_glTexEnviv;
	let cstr = strings::to_c_with_buf("glTexEnvxOES", cstr_buf): *const u8;
	glTexEnvxOES = user_get_proc_address(cstr): *fp_glTexEnvxOES;
	let cstr = strings::to_c_with_buf("glTexEnvxvOES", cstr_buf): *const u8;
	glTexEnvxvOES = user_get_proc_address(cstr): *fp_glTexEnvxvOES;
	let cstr = strings::to_c_with_buf("glTexFilterFuncSGIS", cstr_buf): *const u8;
	glTexFilterFuncSGIS = user_get_proc_address(cstr): *fp_glTexFilterFuncSGIS;
	let cstr = strings::to_c_with_buf("glTexGend", cstr_buf): *const u8;
	glTexGend = user_get_proc_address(cstr): *fp_glTexGend;
	let cstr = strings::to_c_with_buf("glTexGendv", cstr_buf): *const u8;
	glTexGendv = user_get_proc_address(cstr): *fp_glTexGendv;
	let cstr = strings::to_c_with_buf("glTexGenf", cstr_buf): *const u8;
	glTexGenf = user_get_proc_address(cstr): *fp_glTexGenf;
	let cstr = strings::to_c_with_buf("glTexGenfv", cstr_buf): *const u8;
	glTexGenfv = user_get_proc_address(cstr): *fp_glTexGenfv;
	let cstr = strings::to_c_with_buf("glTexGeni", cstr_buf): *const u8;
	glTexGeni = user_get_proc_address(cstr): *fp_glTexGeni;
	let cstr = strings::to_c_with_buf("glTexGeniv", cstr_buf): *const u8;
	glTexGeniv = user_get_proc_address(cstr): *fp_glTexGeniv;
	let cstr = strings::to_c_with_buf("glTexGenxOES", cstr_buf): *const u8;
	glTexGenxOES = user_get_proc_address(cstr): *fp_glTexGenxOES;
	let cstr = strings::to_c_with_buf("glTexGenxvOES", cstr_buf): *const u8;
	glTexGenxvOES = user_get_proc_address(cstr): *fp_glTexGenxvOES;
	let cstr = strings::to_c_with_buf("glTexImage1D", cstr_buf): *const u8;
	glTexImage1D = user_get_proc_address(cstr): *fp_glTexImage1D;
	let cstr = strings::to_c_with_buf("glTexImage2D", cstr_buf): *const u8;
	glTexImage2D = user_get_proc_address(cstr): *fp_glTexImage2D;
	let cstr = strings::to_c_with_buf("glTexImage2DMultisample", cstr_buf): *const u8;
	glTexImage2DMultisample = user_get_proc_address(cstr): *fp_glTexImage2DMultisample;
	let cstr = strings::to_c_with_buf("glTexImage2DMultisampleCoverageNV", cstr_buf): *const u8;
	glTexImage2DMultisampleCoverageNV = user_get_proc_address(cstr): *fp_glTexImage2DMultisampleCoverageNV;
	let cstr = strings::to_c_with_buf("glTexImage3D", cstr_buf): *const u8;
	glTexImage3D = user_get_proc_address(cstr): *fp_glTexImage3D;
	let cstr = strings::to_c_with_buf("glTexImage3DEXT", cstr_buf): *const u8;
	glTexImage3DEXT = user_get_proc_address(cstr): *fp_glTexImage3DEXT;
	let cstr = strings::to_c_with_buf("glTexImage3DMultisample", cstr_buf): *const u8;
	glTexImage3DMultisample = user_get_proc_address(cstr): *fp_glTexImage3DMultisample;
	let cstr = strings::to_c_with_buf("glTexImage3DMultisampleCoverageNV", cstr_buf): *const u8;
	glTexImage3DMultisampleCoverageNV = user_get_proc_address(cstr): *fp_glTexImage3DMultisampleCoverageNV;
	let cstr = strings::to_c_with_buf("glTexImage4DSGIS", cstr_buf): *const u8;
	glTexImage4DSGIS = user_get_proc_address(cstr): *fp_glTexImage4DSGIS;
	let cstr = strings::to_c_with_buf("glTexPageCommitmentARB", cstr_buf): *const u8;
	glTexPageCommitmentARB = user_get_proc_address(cstr): *fp_glTexPageCommitmentARB;
	let cstr = strings::to_c_with_buf("glTexPageCommitmentMemNV", cstr_buf): *const u8;
	glTexPageCommitmentMemNV = user_get_proc_address(cstr): *fp_glTexPageCommitmentMemNV;
	let cstr = strings::to_c_with_buf("glTexParameterIivEXT", cstr_buf): *const u8;
	glTexParameterIivEXT = user_get_proc_address(cstr): *fp_glTexParameterIivEXT;
	let cstr = strings::to_c_with_buf("glTexParameterIuivEXT", cstr_buf): *const u8;
	glTexParameterIuivEXT = user_get_proc_address(cstr): *fp_glTexParameterIuivEXT;
	let cstr = strings::to_c_with_buf("glTexParameterf", cstr_buf): *const u8;
	glTexParameterf = user_get_proc_address(cstr): *fp_glTexParameterf;
	let cstr = strings::to_c_with_buf("glTexParameterfv", cstr_buf): *const u8;
	glTexParameterfv = user_get_proc_address(cstr): *fp_glTexParameterfv;
	let cstr = strings::to_c_with_buf("glTexParameteri", cstr_buf): *const u8;
	glTexParameteri = user_get_proc_address(cstr): *fp_glTexParameteri;
	let cstr = strings::to_c_with_buf("glTexParameteriv", cstr_buf): *const u8;
	glTexParameteriv = user_get_proc_address(cstr): *fp_glTexParameteriv;
	let cstr = strings::to_c_with_buf("glTexParameterxOES", cstr_buf): *const u8;
	glTexParameterxOES = user_get_proc_address(cstr): *fp_glTexParameterxOES;
	let cstr = strings::to_c_with_buf("glTexParameterxvOES", cstr_buf): *const u8;
	glTexParameterxvOES = user_get_proc_address(cstr): *fp_glTexParameterxvOES;
	let cstr = strings::to_c_with_buf("glTexRenderbufferNV", cstr_buf): *const u8;
	glTexRenderbufferNV = user_get_proc_address(cstr): *fp_glTexRenderbufferNV;
	let cstr = strings::to_c_with_buf("glTexStorage1D", cstr_buf): *const u8;
	glTexStorage1D = user_get_proc_address(cstr): *fp_glTexStorage1D;
	let cstr = strings::to_c_with_buf("glTexStorage1DEXT", cstr_buf): *const u8;
	glTexStorage1DEXT = user_get_proc_address(cstr): *fp_glTexStorage1DEXT;
	let cstr = strings::to_c_with_buf("glTexStorage2D", cstr_buf): *const u8;
	glTexStorage2D = user_get_proc_address(cstr): *fp_glTexStorage2D;
	let cstr = strings::to_c_with_buf("glTexStorage2DEXT", cstr_buf): *const u8;
	glTexStorage2DEXT = user_get_proc_address(cstr): *fp_glTexStorage2DEXT;
	let cstr = strings::to_c_with_buf("glTexStorage2DMultisample", cstr_buf): *const u8;
	glTexStorage2DMultisample = user_get_proc_address(cstr): *fp_glTexStorage2DMultisample;
	let cstr = strings::to_c_with_buf("glTexStorage3D", cstr_buf): *const u8;
	glTexStorage3D = user_get_proc_address(cstr): *fp_glTexStorage3D;
	let cstr = strings::to_c_with_buf("glTexStorage3DEXT", cstr_buf): *const u8;
	glTexStorage3DEXT = user_get_proc_address(cstr): *fp_glTexStorage3DEXT;
	let cstr = strings::to_c_with_buf("glTexStorage3DMultisample", cstr_buf): *const u8;
	glTexStorage3DMultisample = user_get_proc_address(cstr): *fp_glTexStorage3DMultisample;
	let cstr = strings::to_c_with_buf("glTexStorageMem1DEXT", cstr_buf): *const u8;
	glTexStorageMem1DEXT = user_get_proc_address(cstr): *fp_glTexStorageMem1DEXT;
	let cstr = strings::to_c_with_buf("glTexStorageMem2DEXT", cstr_buf): *const u8;
	glTexStorageMem2DEXT = user_get_proc_address(cstr): *fp_glTexStorageMem2DEXT;
	let cstr = strings::to_c_with_buf("glTexStorageMem2DMultisampleEXT", cstr_buf): *const u8;
	glTexStorageMem2DMultisampleEXT = user_get_proc_address(cstr): *fp_glTexStorageMem2DMultisampleEXT;
	let cstr = strings::to_c_with_buf("glTexStorageMem3DEXT", cstr_buf): *const u8;
	glTexStorageMem3DEXT = user_get_proc_address(cstr): *fp_glTexStorageMem3DEXT;
	let cstr = strings::to_c_with_buf("glTexStorageMem3DMultisampleEXT", cstr_buf): *const u8;
	glTexStorageMem3DMultisampleEXT = user_get_proc_address(cstr): *fp_glTexStorageMem3DMultisampleEXT;
	let cstr = strings::to_c_with_buf("glTexStorageSparseAMD", cstr_buf): *const u8;
	glTexStorageSparseAMD = user_get_proc_address(cstr): *fp_glTexStorageSparseAMD;
	let cstr = strings::to_c_with_buf("glTexSubImage1D", cstr_buf): *const u8;
	glTexSubImage1D = user_get_proc_address(cstr): *fp_glTexSubImage1D;
	let cstr = strings::to_c_with_buf("glTexSubImage1DEXT", cstr_buf): *const u8;
	glTexSubImage1DEXT = user_get_proc_address(cstr): *fp_glTexSubImage1DEXT;
	let cstr = strings::to_c_with_buf("glTexSubImage2D", cstr_buf): *const u8;
	glTexSubImage2D = user_get_proc_address(cstr): *fp_glTexSubImage2D;
	let cstr = strings::to_c_with_buf("glTexSubImage2DEXT", cstr_buf): *const u8;
	glTexSubImage2DEXT = user_get_proc_address(cstr): *fp_glTexSubImage2DEXT;
	let cstr = strings::to_c_with_buf("glTexSubImage3D", cstr_buf): *const u8;
	glTexSubImage3D = user_get_proc_address(cstr): *fp_glTexSubImage3D;
	let cstr = strings::to_c_with_buf("glTexSubImage3DEXT", cstr_buf): *const u8;
	glTexSubImage3DEXT = user_get_proc_address(cstr): *fp_glTexSubImage3DEXT;
	let cstr = strings::to_c_with_buf("glTexSubImage4DSGIS", cstr_buf): *const u8;
	glTexSubImage4DSGIS = user_get_proc_address(cstr): *fp_glTexSubImage4DSGIS;
	let cstr = strings::to_c_with_buf("glTextureAttachMemoryNV", cstr_buf): *const u8;
	glTextureAttachMemoryNV = user_get_proc_address(cstr): *fp_glTextureAttachMemoryNV;
	let cstr = strings::to_c_with_buf("glTextureBarrier", cstr_buf): *const u8;
	glTextureBarrier = user_get_proc_address(cstr): *fp_glTextureBarrier;
	let cstr = strings::to_c_with_buf("glTextureBarrierNV", cstr_buf): *const u8;
	glTextureBarrierNV = user_get_proc_address(cstr): *fp_glTextureBarrierNV;
	let cstr = strings::to_c_with_buf("glTextureBuffer", cstr_buf): *const u8;
	glTextureBuffer = user_get_proc_address(cstr): *fp_glTextureBuffer;
	let cstr = strings::to_c_with_buf("glTextureBufferEXT", cstr_buf): *const u8;
	glTextureBufferEXT = user_get_proc_address(cstr): *fp_glTextureBufferEXT;
	let cstr = strings::to_c_with_buf("glTextureBufferRange", cstr_buf): *const u8;
	glTextureBufferRange = user_get_proc_address(cstr): *fp_glTextureBufferRange;
	let cstr = strings::to_c_with_buf("glTextureBufferRangeEXT", cstr_buf): *const u8;
	glTextureBufferRangeEXT = user_get_proc_address(cstr): *fp_glTextureBufferRangeEXT;
	let cstr = strings::to_c_with_buf("glTextureColorMaskSGIS", cstr_buf): *const u8;
	glTextureColorMaskSGIS = user_get_proc_address(cstr): *fp_glTextureColorMaskSGIS;
	let cstr = strings::to_c_with_buf("glTextureImage1DEXT", cstr_buf): *const u8;
	glTextureImage1DEXT = user_get_proc_address(cstr): *fp_glTextureImage1DEXT;
	let cstr = strings::to_c_with_buf("glTextureImage2DEXT", cstr_buf): *const u8;
	glTextureImage2DEXT = user_get_proc_address(cstr): *fp_glTextureImage2DEXT;
	let cstr = strings::to_c_with_buf("glTextureImage2DMultisampleCoverageNV", cstr_buf): *const u8;
	glTextureImage2DMultisampleCoverageNV = user_get_proc_address(cstr): *fp_glTextureImage2DMultisampleCoverageNV;
	let cstr = strings::to_c_with_buf("glTextureImage2DMultisampleNV", cstr_buf): *const u8;
	glTextureImage2DMultisampleNV = user_get_proc_address(cstr): *fp_glTextureImage2DMultisampleNV;
	let cstr = strings::to_c_with_buf("glTextureImage3DEXT", cstr_buf): *const u8;
	glTextureImage3DEXT = user_get_proc_address(cstr): *fp_glTextureImage3DEXT;
	let cstr = strings::to_c_with_buf("glTextureImage3DMultisampleCoverageNV", cstr_buf): *const u8;
	glTextureImage3DMultisampleCoverageNV = user_get_proc_address(cstr): *fp_glTextureImage3DMultisampleCoverageNV;
	let cstr = strings::to_c_with_buf("glTextureImage3DMultisampleNV", cstr_buf): *const u8;
	glTextureImage3DMultisampleNV = user_get_proc_address(cstr): *fp_glTextureImage3DMultisampleNV;
	let cstr = strings::to_c_with_buf("glTextureLightEXT", cstr_buf): *const u8;
	glTextureLightEXT = user_get_proc_address(cstr): *fp_glTextureLightEXT;
	let cstr = strings::to_c_with_buf("glTextureMaterialEXT", cstr_buf): *const u8;
	glTextureMaterialEXT = user_get_proc_address(cstr): *fp_glTextureMaterialEXT;
	let cstr = strings::to_c_with_buf("glTextureNormalEXT", cstr_buf): *const u8;
	glTextureNormalEXT = user_get_proc_address(cstr): *fp_glTextureNormalEXT;
	let cstr = strings::to_c_with_buf("glTexturePageCommitmentEXT", cstr_buf): *const u8;
	glTexturePageCommitmentEXT = user_get_proc_address(cstr): *fp_glTexturePageCommitmentEXT;
	let cstr = strings::to_c_with_buf("glTexturePageCommitmentMemNV", cstr_buf): *const u8;
	glTexturePageCommitmentMemNV = user_get_proc_address(cstr): *fp_glTexturePageCommitmentMemNV;
	let cstr = strings::to_c_with_buf("glTextureParameterIiv", cstr_buf): *const u8;
	glTextureParameterIiv = user_get_proc_address(cstr): *fp_glTextureParameterIiv;
	let cstr = strings::to_c_with_buf("glTextureParameterIivEXT", cstr_buf): *const u8;
	glTextureParameterIivEXT = user_get_proc_address(cstr): *fp_glTextureParameterIivEXT;
	let cstr = strings::to_c_with_buf("glTextureParameterIuiv", cstr_buf): *const u8;
	glTextureParameterIuiv = user_get_proc_address(cstr): *fp_glTextureParameterIuiv;
	let cstr = strings::to_c_with_buf("glTextureParameterIuivEXT", cstr_buf): *const u8;
	glTextureParameterIuivEXT = user_get_proc_address(cstr): *fp_glTextureParameterIuivEXT;
	let cstr = strings::to_c_with_buf("glTextureParameterf", cstr_buf): *const u8;
	glTextureParameterf = user_get_proc_address(cstr): *fp_glTextureParameterf;
	let cstr = strings::to_c_with_buf("glTextureParameterfEXT", cstr_buf): *const u8;
	glTextureParameterfEXT = user_get_proc_address(cstr): *fp_glTextureParameterfEXT;
	let cstr = strings::to_c_with_buf("glTextureParameterfv", cstr_buf): *const u8;
	glTextureParameterfv = user_get_proc_address(cstr): *fp_glTextureParameterfv;
	let cstr = strings::to_c_with_buf("glTextureParameterfvEXT", cstr_buf): *const u8;
	glTextureParameterfvEXT = user_get_proc_address(cstr): *fp_glTextureParameterfvEXT;
	let cstr = strings::to_c_with_buf("glTextureParameteri", cstr_buf): *const u8;
	glTextureParameteri = user_get_proc_address(cstr): *fp_glTextureParameteri;
	let cstr = strings::to_c_with_buf("glTextureParameteriEXT", cstr_buf): *const u8;
	glTextureParameteriEXT = user_get_proc_address(cstr): *fp_glTextureParameteriEXT;
	let cstr = strings::to_c_with_buf("glTextureParameteriv", cstr_buf): *const u8;
	glTextureParameteriv = user_get_proc_address(cstr): *fp_glTextureParameteriv;
	let cstr = strings::to_c_with_buf("glTextureParameterivEXT", cstr_buf): *const u8;
	glTextureParameterivEXT = user_get_proc_address(cstr): *fp_glTextureParameterivEXT;
	let cstr = strings::to_c_with_buf("glTextureRangeAPPLE", cstr_buf): *const u8;
	glTextureRangeAPPLE = user_get_proc_address(cstr): *fp_glTextureRangeAPPLE;
	let cstr = strings::to_c_with_buf("glTextureRenderbufferEXT", cstr_buf): *const u8;
	glTextureRenderbufferEXT = user_get_proc_address(cstr): *fp_glTextureRenderbufferEXT;
	let cstr = strings::to_c_with_buf("glTextureStorage1D", cstr_buf): *const u8;
	glTextureStorage1D = user_get_proc_address(cstr): *fp_glTextureStorage1D;
	let cstr = strings::to_c_with_buf("glTextureStorage1DEXT", cstr_buf): *const u8;
	glTextureStorage1DEXT = user_get_proc_address(cstr): *fp_glTextureStorage1DEXT;
	let cstr = strings::to_c_with_buf("glTextureStorage2D", cstr_buf): *const u8;
	glTextureStorage2D = user_get_proc_address(cstr): *fp_glTextureStorage2D;
	let cstr = strings::to_c_with_buf("glTextureStorage2DEXT", cstr_buf): *const u8;
	glTextureStorage2DEXT = user_get_proc_address(cstr): *fp_glTextureStorage2DEXT;
	let cstr = strings::to_c_with_buf("glTextureStorage2DMultisample", cstr_buf): *const u8;
	glTextureStorage2DMultisample = user_get_proc_address(cstr): *fp_glTextureStorage2DMultisample;
	let cstr = strings::to_c_with_buf("glTextureStorage2DMultisampleEXT", cstr_buf): *const u8;
	glTextureStorage2DMultisampleEXT = user_get_proc_address(cstr): *fp_glTextureStorage2DMultisampleEXT;
	let cstr = strings::to_c_with_buf("glTextureStorage3D", cstr_buf): *const u8;
	glTextureStorage3D = user_get_proc_address(cstr): *fp_glTextureStorage3D;
	let cstr = strings::to_c_with_buf("glTextureStorage3DEXT", cstr_buf): *const u8;
	glTextureStorage3DEXT = user_get_proc_address(cstr): *fp_glTextureStorage3DEXT;
	let cstr = strings::to_c_with_buf("glTextureStorage3DMultisample", cstr_buf): *const u8;
	glTextureStorage3DMultisample = user_get_proc_address(cstr): *fp_glTextureStorage3DMultisample;
	let cstr = strings::to_c_with_buf("glTextureStorage3DMultisampleEXT", cstr_buf): *const u8;
	glTextureStorage3DMultisampleEXT = user_get_proc_address(cstr): *fp_glTextureStorage3DMultisampleEXT;
	let cstr = strings::to_c_with_buf("glTextureStorageMem1DEXT", cstr_buf): *const u8;
	glTextureStorageMem1DEXT = user_get_proc_address(cstr): *fp_glTextureStorageMem1DEXT;
	let cstr = strings::to_c_with_buf("glTextureStorageMem2DEXT", cstr_buf): *const u8;
	glTextureStorageMem2DEXT = user_get_proc_address(cstr): *fp_glTextureStorageMem2DEXT;
	let cstr = strings::to_c_with_buf("glTextureStorageMem2DMultisampleEXT", cstr_buf): *const u8;
	glTextureStorageMem2DMultisampleEXT = user_get_proc_address(cstr): *fp_glTextureStorageMem2DMultisampleEXT;
	let cstr = strings::to_c_with_buf("glTextureStorageMem3DEXT", cstr_buf): *const u8;
	glTextureStorageMem3DEXT = user_get_proc_address(cstr): *fp_glTextureStorageMem3DEXT;
	let cstr = strings::to_c_with_buf("glTextureStorageMem3DMultisampleEXT", cstr_buf): *const u8;
	glTextureStorageMem3DMultisampleEXT = user_get_proc_address(cstr): *fp_glTextureStorageMem3DMultisampleEXT;
	let cstr = strings::to_c_with_buf("glTextureStorageSparseAMD", cstr_buf): *const u8;
	glTextureStorageSparseAMD = user_get_proc_address(cstr): *fp_glTextureStorageSparseAMD;
	let cstr = strings::to_c_with_buf("glTextureSubImage1D", cstr_buf): *const u8;
	glTextureSubImage1D = user_get_proc_address(cstr): *fp_glTextureSubImage1D;
	let cstr = strings::to_c_with_buf("glTextureSubImage1DEXT", cstr_buf): *const u8;
	glTextureSubImage1DEXT = user_get_proc_address(cstr): *fp_glTextureSubImage1DEXT;
	let cstr = strings::to_c_with_buf("glTextureSubImage2D", cstr_buf): *const u8;
	glTextureSubImage2D = user_get_proc_address(cstr): *fp_glTextureSubImage2D;
	let cstr = strings::to_c_with_buf("glTextureSubImage2DEXT", cstr_buf): *const u8;
	glTextureSubImage2DEXT = user_get_proc_address(cstr): *fp_glTextureSubImage2DEXT;
	let cstr = strings::to_c_with_buf("glTextureSubImage3D", cstr_buf): *const u8;
	glTextureSubImage3D = user_get_proc_address(cstr): *fp_glTextureSubImage3D;
	let cstr = strings::to_c_with_buf("glTextureSubImage3DEXT", cstr_buf): *const u8;
	glTextureSubImage3DEXT = user_get_proc_address(cstr): *fp_glTextureSubImage3DEXT;
	let cstr = strings::to_c_with_buf("glTextureView", cstr_buf): *const u8;
	glTextureView = user_get_proc_address(cstr): *fp_glTextureView;
	let cstr = strings::to_c_with_buf("glTrackMatrixNV", cstr_buf): *const u8;
	glTrackMatrixNV = user_get_proc_address(cstr): *fp_glTrackMatrixNV;
	let cstr = strings::to_c_with_buf("glTransformFeedbackAttribsNV", cstr_buf): *const u8;
	glTransformFeedbackAttribsNV = user_get_proc_address(cstr): *fp_glTransformFeedbackAttribsNV;
	let cstr = strings::to_c_with_buf("glTransformFeedbackBufferBase", cstr_buf): *const u8;
	glTransformFeedbackBufferBase = user_get_proc_address(cstr): *fp_glTransformFeedbackBufferBase;
	let cstr = strings::to_c_with_buf("glTransformFeedbackBufferRange", cstr_buf): *const u8;
	glTransformFeedbackBufferRange = user_get_proc_address(cstr): *fp_glTransformFeedbackBufferRange;
	let cstr = strings::to_c_with_buf("glTransformFeedbackStreamAttribsNV", cstr_buf): *const u8;
	glTransformFeedbackStreamAttribsNV = user_get_proc_address(cstr): *fp_glTransformFeedbackStreamAttribsNV;
	let cstr = strings::to_c_with_buf("glTransformFeedbackVaryingsEXT", cstr_buf): *const u8;
	glTransformFeedbackVaryingsEXT = user_get_proc_address(cstr): *fp_glTransformFeedbackVaryingsEXT;
	let cstr = strings::to_c_with_buf("glTransformFeedbackVaryingsNV", cstr_buf): *const u8;
	glTransformFeedbackVaryingsNV = user_get_proc_address(cstr): *fp_glTransformFeedbackVaryingsNV;
	let cstr = strings::to_c_with_buf("glTransformPathNV", cstr_buf): *const u8;
	glTransformPathNV = user_get_proc_address(cstr): *fp_glTransformPathNV;
	let cstr = strings::to_c_with_buf("glTranslated", cstr_buf): *const u8;
	glTranslated = user_get_proc_address(cstr): *fp_glTranslated;
	let cstr = strings::to_c_with_buf("glTranslatef", cstr_buf): *const u8;
	glTranslatef = user_get_proc_address(cstr): *fp_glTranslatef;
	let cstr = strings::to_c_with_buf("glTranslatexOES", cstr_buf): *const u8;
	glTranslatexOES = user_get_proc_address(cstr): *fp_glTranslatexOES;
	let cstr = strings::to_c_with_buf("glUniform1d", cstr_buf): *const u8;
	glUniform1d = user_get_proc_address(cstr): *fp_glUniform1d;
	let cstr = strings::to_c_with_buf("glUniform1dv", cstr_buf): *const u8;
	glUniform1dv = user_get_proc_address(cstr): *fp_glUniform1dv;
	let cstr = strings::to_c_with_buf("glUniform1f", cstr_buf): *const u8;
	glUniform1f = user_get_proc_address(cstr): *fp_glUniform1f;
	let cstr = strings::to_c_with_buf("glUniform1fARB", cstr_buf): *const u8;
	glUniform1fARB = user_get_proc_address(cstr): *fp_glUniform1fARB;
	let cstr = strings::to_c_with_buf("glUniform1fv", cstr_buf): *const u8;
	glUniform1fv = user_get_proc_address(cstr): *fp_glUniform1fv;
	let cstr = strings::to_c_with_buf("glUniform1fvARB", cstr_buf): *const u8;
	glUniform1fvARB = user_get_proc_address(cstr): *fp_glUniform1fvARB;
	let cstr = strings::to_c_with_buf("glUniform1i", cstr_buf): *const u8;
	glUniform1i = user_get_proc_address(cstr): *fp_glUniform1i;
	let cstr = strings::to_c_with_buf("glUniform1i64ARB", cstr_buf): *const u8;
	glUniform1i64ARB = user_get_proc_address(cstr): *fp_glUniform1i64ARB;
	let cstr = strings::to_c_with_buf("glUniform1i64NV", cstr_buf): *const u8;
	glUniform1i64NV = user_get_proc_address(cstr): *fp_glUniform1i64NV;
	let cstr = strings::to_c_with_buf("glUniform1i64vARB", cstr_buf): *const u8;
	glUniform1i64vARB = user_get_proc_address(cstr): *fp_glUniform1i64vARB;
	let cstr = strings::to_c_with_buf("glUniform1i64vNV", cstr_buf): *const u8;
	glUniform1i64vNV = user_get_proc_address(cstr): *fp_glUniform1i64vNV;
	let cstr = strings::to_c_with_buf("glUniform1iARB", cstr_buf): *const u8;
	glUniform1iARB = user_get_proc_address(cstr): *fp_glUniform1iARB;
	let cstr = strings::to_c_with_buf("glUniform1iv", cstr_buf): *const u8;
	glUniform1iv = user_get_proc_address(cstr): *fp_glUniform1iv;
	let cstr = strings::to_c_with_buf("glUniform1ivARB", cstr_buf): *const u8;
	glUniform1ivARB = user_get_proc_address(cstr): *fp_glUniform1ivARB;
	let cstr = strings::to_c_with_buf("glUniform1ui64ARB", cstr_buf): *const u8;
	glUniform1ui64ARB = user_get_proc_address(cstr): *fp_glUniform1ui64ARB;
	let cstr = strings::to_c_with_buf("glUniform1ui64NV", cstr_buf): *const u8;
	glUniform1ui64NV = user_get_proc_address(cstr): *fp_glUniform1ui64NV;
	let cstr = strings::to_c_with_buf("glUniform1ui64vARB", cstr_buf): *const u8;
	glUniform1ui64vARB = user_get_proc_address(cstr): *fp_glUniform1ui64vARB;
	let cstr = strings::to_c_with_buf("glUniform1ui64vNV", cstr_buf): *const u8;
	glUniform1ui64vNV = user_get_proc_address(cstr): *fp_glUniform1ui64vNV;
	let cstr = strings::to_c_with_buf("glUniform1uiEXT", cstr_buf): *const u8;
	glUniform1uiEXT = user_get_proc_address(cstr): *fp_glUniform1uiEXT;
	let cstr = strings::to_c_with_buf("glUniform1uivEXT", cstr_buf): *const u8;
	glUniform1uivEXT = user_get_proc_address(cstr): *fp_glUniform1uivEXT;
	let cstr = strings::to_c_with_buf("glUniform2d", cstr_buf): *const u8;
	glUniform2d = user_get_proc_address(cstr): *fp_glUniform2d;
	let cstr = strings::to_c_with_buf("glUniform2dv", cstr_buf): *const u8;
	glUniform2dv = user_get_proc_address(cstr): *fp_glUniform2dv;
	let cstr = strings::to_c_with_buf("glUniform2f", cstr_buf): *const u8;
	glUniform2f = user_get_proc_address(cstr): *fp_glUniform2f;
	let cstr = strings::to_c_with_buf("glUniform2fARB", cstr_buf): *const u8;
	glUniform2fARB = user_get_proc_address(cstr): *fp_glUniform2fARB;
	let cstr = strings::to_c_with_buf("glUniform2fv", cstr_buf): *const u8;
	glUniform2fv = user_get_proc_address(cstr): *fp_glUniform2fv;
	let cstr = strings::to_c_with_buf("glUniform2fvARB", cstr_buf): *const u8;
	glUniform2fvARB = user_get_proc_address(cstr): *fp_glUniform2fvARB;
	let cstr = strings::to_c_with_buf("glUniform2i", cstr_buf): *const u8;
	glUniform2i = user_get_proc_address(cstr): *fp_glUniform2i;
	let cstr = strings::to_c_with_buf("glUniform2i64ARB", cstr_buf): *const u8;
	glUniform2i64ARB = user_get_proc_address(cstr): *fp_glUniform2i64ARB;
	let cstr = strings::to_c_with_buf("glUniform2i64NV", cstr_buf): *const u8;
	glUniform2i64NV = user_get_proc_address(cstr): *fp_glUniform2i64NV;
	let cstr = strings::to_c_with_buf("glUniform2i64vARB", cstr_buf): *const u8;
	glUniform2i64vARB = user_get_proc_address(cstr): *fp_glUniform2i64vARB;
	let cstr = strings::to_c_with_buf("glUniform2i64vNV", cstr_buf): *const u8;
	glUniform2i64vNV = user_get_proc_address(cstr): *fp_glUniform2i64vNV;
	let cstr = strings::to_c_with_buf("glUniform2iARB", cstr_buf): *const u8;
	glUniform2iARB = user_get_proc_address(cstr): *fp_glUniform2iARB;
	let cstr = strings::to_c_with_buf("glUniform2iv", cstr_buf): *const u8;
	glUniform2iv = user_get_proc_address(cstr): *fp_glUniform2iv;
	let cstr = strings::to_c_with_buf("glUniform2ivARB", cstr_buf): *const u8;
	glUniform2ivARB = user_get_proc_address(cstr): *fp_glUniform2ivARB;
	let cstr = strings::to_c_with_buf("glUniform2ui64ARB", cstr_buf): *const u8;
	glUniform2ui64ARB = user_get_proc_address(cstr): *fp_glUniform2ui64ARB;
	let cstr = strings::to_c_with_buf("glUniform2ui64NV", cstr_buf): *const u8;
	glUniform2ui64NV = user_get_proc_address(cstr): *fp_glUniform2ui64NV;
	let cstr = strings::to_c_with_buf("glUniform2ui64vARB", cstr_buf): *const u8;
	glUniform2ui64vARB = user_get_proc_address(cstr): *fp_glUniform2ui64vARB;
	let cstr = strings::to_c_with_buf("glUniform2ui64vNV", cstr_buf): *const u8;
	glUniform2ui64vNV = user_get_proc_address(cstr): *fp_glUniform2ui64vNV;
	let cstr = strings::to_c_with_buf("glUniform2uiEXT", cstr_buf): *const u8;
	glUniform2uiEXT = user_get_proc_address(cstr): *fp_glUniform2uiEXT;
	let cstr = strings::to_c_with_buf("glUniform2uivEXT", cstr_buf): *const u8;
	glUniform2uivEXT = user_get_proc_address(cstr): *fp_glUniform2uivEXT;
	let cstr = strings::to_c_with_buf("glUniform3d", cstr_buf): *const u8;
	glUniform3d = user_get_proc_address(cstr): *fp_glUniform3d;
	let cstr = strings::to_c_with_buf("glUniform3dv", cstr_buf): *const u8;
	glUniform3dv = user_get_proc_address(cstr): *fp_glUniform3dv;
	let cstr = strings::to_c_with_buf("glUniform3f", cstr_buf): *const u8;
	glUniform3f = user_get_proc_address(cstr): *fp_glUniform3f;
	let cstr = strings::to_c_with_buf("glUniform3fARB", cstr_buf): *const u8;
	glUniform3fARB = user_get_proc_address(cstr): *fp_glUniform3fARB;
	let cstr = strings::to_c_with_buf("glUniform3fv", cstr_buf): *const u8;
	glUniform3fv = user_get_proc_address(cstr): *fp_glUniform3fv;
	let cstr = strings::to_c_with_buf("glUniform3fvARB", cstr_buf): *const u8;
	glUniform3fvARB = user_get_proc_address(cstr): *fp_glUniform3fvARB;
	let cstr = strings::to_c_with_buf("glUniform3i", cstr_buf): *const u8;
	glUniform3i = user_get_proc_address(cstr): *fp_glUniform3i;
	let cstr = strings::to_c_with_buf("glUniform3i64ARB", cstr_buf): *const u8;
	glUniform3i64ARB = user_get_proc_address(cstr): *fp_glUniform3i64ARB;
	let cstr = strings::to_c_with_buf("glUniform3i64NV", cstr_buf): *const u8;
	glUniform3i64NV = user_get_proc_address(cstr): *fp_glUniform3i64NV;
	let cstr = strings::to_c_with_buf("glUniform3i64vARB", cstr_buf): *const u8;
	glUniform3i64vARB = user_get_proc_address(cstr): *fp_glUniform3i64vARB;
	let cstr = strings::to_c_with_buf("glUniform3i64vNV", cstr_buf): *const u8;
	glUniform3i64vNV = user_get_proc_address(cstr): *fp_glUniform3i64vNV;
	let cstr = strings::to_c_with_buf("glUniform3iARB", cstr_buf): *const u8;
	glUniform3iARB = user_get_proc_address(cstr): *fp_glUniform3iARB;
	let cstr = strings::to_c_with_buf("glUniform3iv", cstr_buf): *const u8;
	glUniform3iv = user_get_proc_address(cstr): *fp_glUniform3iv;
	let cstr = strings::to_c_with_buf("glUniform3ivARB", cstr_buf): *const u8;
	glUniform3ivARB = user_get_proc_address(cstr): *fp_glUniform3ivARB;
	let cstr = strings::to_c_with_buf("glUniform3ui64ARB", cstr_buf): *const u8;
	glUniform3ui64ARB = user_get_proc_address(cstr): *fp_glUniform3ui64ARB;
	let cstr = strings::to_c_with_buf("glUniform3ui64NV", cstr_buf): *const u8;
	glUniform3ui64NV = user_get_proc_address(cstr): *fp_glUniform3ui64NV;
	let cstr = strings::to_c_with_buf("glUniform3ui64vARB", cstr_buf): *const u8;
	glUniform3ui64vARB = user_get_proc_address(cstr): *fp_glUniform3ui64vARB;
	let cstr = strings::to_c_with_buf("glUniform3ui64vNV", cstr_buf): *const u8;
	glUniform3ui64vNV = user_get_proc_address(cstr): *fp_glUniform3ui64vNV;
	let cstr = strings::to_c_with_buf("glUniform3uiEXT", cstr_buf): *const u8;
	glUniform3uiEXT = user_get_proc_address(cstr): *fp_glUniform3uiEXT;
	let cstr = strings::to_c_with_buf("glUniform3uivEXT", cstr_buf): *const u8;
	glUniform3uivEXT = user_get_proc_address(cstr): *fp_glUniform3uivEXT;
	let cstr = strings::to_c_with_buf("glUniform4d", cstr_buf): *const u8;
	glUniform4d = user_get_proc_address(cstr): *fp_glUniform4d;
	let cstr = strings::to_c_with_buf("glUniform4dv", cstr_buf): *const u8;
	glUniform4dv = user_get_proc_address(cstr): *fp_glUniform4dv;
	let cstr = strings::to_c_with_buf("glUniform4f", cstr_buf): *const u8;
	glUniform4f = user_get_proc_address(cstr): *fp_glUniform4f;
	let cstr = strings::to_c_with_buf("glUniform4fARB", cstr_buf): *const u8;
	glUniform4fARB = user_get_proc_address(cstr): *fp_glUniform4fARB;
	let cstr = strings::to_c_with_buf("glUniform4fv", cstr_buf): *const u8;
	glUniform4fv = user_get_proc_address(cstr): *fp_glUniform4fv;
	let cstr = strings::to_c_with_buf("glUniform4fvARB", cstr_buf): *const u8;
	glUniform4fvARB = user_get_proc_address(cstr): *fp_glUniform4fvARB;
	let cstr = strings::to_c_with_buf("glUniform4i", cstr_buf): *const u8;
	glUniform4i = user_get_proc_address(cstr): *fp_glUniform4i;
	let cstr = strings::to_c_with_buf("glUniform4i64ARB", cstr_buf): *const u8;
	glUniform4i64ARB = user_get_proc_address(cstr): *fp_glUniform4i64ARB;
	let cstr = strings::to_c_with_buf("glUniform4i64NV", cstr_buf): *const u8;
	glUniform4i64NV = user_get_proc_address(cstr): *fp_glUniform4i64NV;
	let cstr = strings::to_c_with_buf("glUniform4i64vARB", cstr_buf): *const u8;
	glUniform4i64vARB = user_get_proc_address(cstr): *fp_glUniform4i64vARB;
	let cstr = strings::to_c_with_buf("glUniform4i64vNV", cstr_buf): *const u8;
	glUniform4i64vNV = user_get_proc_address(cstr): *fp_glUniform4i64vNV;
	let cstr = strings::to_c_with_buf("glUniform4iARB", cstr_buf): *const u8;
	glUniform4iARB = user_get_proc_address(cstr): *fp_glUniform4iARB;
	let cstr = strings::to_c_with_buf("glUniform4iv", cstr_buf): *const u8;
	glUniform4iv = user_get_proc_address(cstr): *fp_glUniform4iv;
	let cstr = strings::to_c_with_buf("glUniform4ivARB", cstr_buf): *const u8;
	glUniform4ivARB = user_get_proc_address(cstr): *fp_glUniform4ivARB;
	let cstr = strings::to_c_with_buf("glUniform4ui64ARB", cstr_buf): *const u8;
	glUniform4ui64ARB = user_get_proc_address(cstr): *fp_glUniform4ui64ARB;
	let cstr = strings::to_c_with_buf("glUniform4ui64NV", cstr_buf): *const u8;
	glUniform4ui64NV = user_get_proc_address(cstr): *fp_glUniform4ui64NV;
	let cstr = strings::to_c_with_buf("glUniform4ui64vARB", cstr_buf): *const u8;
	glUniform4ui64vARB = user_get_proc_address(cstr): *fp_glUniform4ui64vARB;
	let cstr = strings::to_c_with_buf("glUniform4ui64vNV", cstr_buf): *const u8;
	glUniform4ui64vNV = user_get_proc_address(cstr): *fp_glUniform4ui64vNV;
	let cstr = strings::to_c_with_buf("glUniform4uiEXT", cstr_buf): *const u8;
	glUniform4uiEXT = user_get_proc_address(cstr): *fp_glUniform4uiEXT;
	let cstr = strings::to_c_with_buf("glUniform4uivEXT", cstr_buf): *const u8;
	glUniform4uivEXT = user_get_proc_address(cstr): *fp_glUniform4uivEXT;
	let cstr = strings::to_c_with_buf("glUniformBlockBinding", cstr_buf): *const u8;
	glUniformBlockBinding = user_get_proc_address(cstr): *fp_glUniformBlockBinding;
	let cstr = strings::to_c_with_buf("glUniformBufferEXT", cstr_buf): *const u8;
	glUniformBufferEXT = user_get_proc_address(cstr): *fp_glUniformBufferEXT;
	let cstr = strings::to_c_with_buf("glUniformHandleui64ARB", cstr_buf): *const u8;
	glUniformHandleui64ARB = user_get_proc_address(cstr): *fp_glUniformHandleui64ARB;
	let cstr = strings::to_c_with_buf("glUniformHandleui64NV", cstr_buf): *const u8;
	glUniformHandleui64NV = user_get_proc_address(cstr): *fp_glUniformHandleui64NV;
	let cstr = strings::to_c_with_buf("glUniformHandleui64vARB", cstr_buf): *const u8;
	glUniformHandleui64vARB = user_get_proc_address(cstr): *fp_glUniformHandleui64vARB;
	let cstr = strings::to_c_with_buf("glUniformHandleui64vNV", cstr_buf): *const u8;
	glUniformHandleui64vNV = user_get_proc_address(cstr): *fp_glUniformHandleui64vNV;
	let cstr = strings::to_c_with_buf("glUniformMatrix2dv", cstr_buf): *const u8;
	glUniformMatrix2dv = user_get_proc_address(cstr): *fp_glUniformMatrix2dv;
	let cstr = strings::to_c_with_buf("glUniformMatrix2fv", cstr_buf): *const u8;
	glUniformMatrix2fv = user_get_proc_address(cstr): *fp_glUniformMatrix2fv;
	let cstr = strings::to_c_with_buf("glUniformMatrix2fvARB", cstr_buf): *const u8;
	glUniformMatrix2fvARB = user_get_proc_address(cstr): *fp_glUniformMatrix2fvARB;
	let cstr = strings::to_c_with_buf("glUniformMatrix2x3dv", cstr_buf): *const u8;
	glUniformMatrix2x3dv = user_get_proc_address(cstr): *fp_glUniformMatrix2x3dv;
	let cstr = strings::to_c_with_buf("glUniformMatrix2x3fv", cstr_buf): *const u8;
	glUniformMatrix2x3fv = user_get_proc_address(cstr): *fp_glUniformMatrix2x3fv;
	let cstr = strings::to_c_with_buf("glUniformMatrix2x4dv", cstr_buf): *const u8;
	glUniformMatrix2x4dv = user_get_proc_address(cstr): *fp_glUniformMatrix2x4dv;
	let cstr = strings::to_c_with_buf("glUniformMatrix2x4fv", cstr_buf): *const u8;
	glUniformMatrix2x4fv = user_get_proc_address(cstr): *fp_glUniformMatrix2x4fv;
	let cstr = strings::to_c_with_buf("glUniformMatrix3dv", cstr_buf): *const u8;
	glUniformMatrix3dv = user_get_proc_address(cstr): *fp_glUniformMatrix3dv;
	let cstr = strings::to_c_with_buf("glUniformMatrix3fv", cstr_buf): *const u8;
	glUniformMatrix3fv = user_get_proc_address(cstr): *fp_glUniformMatrix3fv;
	let cstr = strings::to_c_with_buf("glUniformMatrix3fvARB", cstr_buf): *const u8;
	glUniformMatrix3fvARB = user_get_proc_address(cstr): *fp_glUniformMatrix3fvARB;
	let cstr = strings::to_c_with_buf("glUniformMatrix3x2dv", cstr_buf): *const u8;
	glUniformMatrix3x2dv = user_get_proc_address(cstr): *fp_glUniformMatrix3x2dv;
	let cstr = strings::to_c_with_buf("glUniformMatrix3x2fv", cstr_buf): *const u8;
	glUniformMatrix3x2fv = user_get_proc_address(cstr): *fp_glUniformMatrix3x2fv;
	let cstr = strings::to_c_with_buf("glUniformMatrix3x4dv", cstr_buf): *const u8;
	glUniformMatrix3x4dv = user_get_proc_address(cstr): *fp_glUniformMatrix3x4dv;
	let cstr = strings::to_c_with_buf("glUniformMatrix3x4fv", cstr_buf): *const u8;
	glUniformMatrix3x4fv = user_get_proc_address(cstr): *fp_glUniformMatrix3x4fv;
	let cstr = strings::to_c_with_buf("glUniformMatrix4dv", cstr_buf): *const u8;
	glUniformMatrix4dv = user_get_proc_address(cstr): *fp_glUniformMatrix4dv;
	let cstr = strings::to_c_with_buf("glUniformMatrix4fv", cstr_buf): *const u8;
	glUniformMatrix4fv = user_get_proc_address(cstr): *fp_glUniformMatrix4fv;
	let cstr = strings::to_c_with_buf("glUniformMatrix4fvARB", cstr_buf): *const u8;
	glUniformMatrix4fvARB = user_get_proc_address(cstr): *fp_glUniformMatrix4fvARB;
	let cstr = strings::to_c_with_buf("glUniformMatrix4x2dv", cstr_buf): *const u8;
	glUniformMatrix4x2dv = user_get_proc_address(cstr): *fp_glUniformMatrix4x2dv;
	let cstr = strings::to_c_with_buf("glUniformMatrix4x2fv", cstr_buf): *const u8;
	glUniformMatrix4x2fv = user_get_proc_address(cstr): *fp_glUniformMatrix4x2fv;
	let cstr = strings::to_c_with_buf("glUniformMatrix4x3dv", cstr_buf): *const u8;
	glUniformMatrix4x3dv = user_get_proc_address(cstr): *fp_glUniformMatrix4x3dv;
	let cstr = strings::to_c_with_buf("glUniformMatrix4x3fv", cstr_buf): *const u8;
	glUniformMatrix4x3fv = user_get_proc_address(cstr): *fp_glUniformMatrix4x3fv;
	let cstr = strings::to_c_with_buf("glUniformSubroutinesuiv", cstr_buf): *const u8;
	glUniformSubroutinesuiv = user_get_proc_address(cstr): *fp_glUniformSubroutinesuiv;
	let cstr = strings::to_c_with_buf("glUniformui64NV", cstr_buf): *const u8;
	glUniformui64NV = user_get_proc_address(cstr): *fp_glUniformui64NV;
	let cstr = strings::to_c_with_buf("glUniformui64vNV", cstr_buf): *const u8;
	glUniformui64vNV = user_get_proc_address(cstr): *fp_glUniformui64vNV;
	let cstr = strings::to_c_with_buf("glUnlockArraysEXT", cstr_buf): *const u8;
	glUnlockArraysEXT = user_get_proc_address(cstr): *fp_glUnlockArraysEXT;
	let cstr = strings::to_c_with_buf("glUnmapBuffer", cstr_buf): *const u8;
	glUnmapBuffer = user_get_proc_address(cstr): *fp_glUnmapBuffer;
	let cstr = strings::to_c_with_buf("glUnmapBufferARB", cstr_buf): *const u8;
	glUnmapBufferARB = user_get_proc_address(cstr): *fp_glUnmapBufferARB;
	let cstr = strings::to_c_with_buf("glUnmapNamedBuffer", cstr_buf): *const u8;
	glUnmapNamedBuffer = user_get_proc_address(cstr): *fp_glUnmapNamedBuffer;
	let cstr = strings::to_c_with_buf("glUnmapNamedBufferEXT", cstr_buf): *const u8;
	glUnmapNamedBufferEXT = user_get_proc_address(cstr): *fp_glUnmapNamedBufferEXT;
	let cstr = strings::to_c_with_buf("glUnmapObjectBufferATI", cstr_buf): *const u8;
	glUnmapObjectBufferATI = user_get_proc_address(cstr): *fp_glUnmapObjectBufferATI;
	let cstr = strings::to_c_with_buf("glUnmapTexture2DINTEL", cstr_buf): *const u8;
	glUnmapTexture2DINTEL = user_get_proc_address(cstr): *fp_glUnmapTexture2DINTEL;
	let cstr = strings::to_c_with_buf("glUpdateObjectBufferATI", cstr_buf): *const u8;
	glUpdateObjectBufferATI = user_get_proc_address(cstr): *fp_glUpdateObjectBufferATI;
	let cstr = strings::to_c_with_buf("glUploadGpuMaskNVX", cstr_buf): *const u8;
	glUploadGpuMaskNVX = user_get_proc_address(cstr): *fp_glUploadGpuMaskNVX;
	let cstr = strings::to_c_with_buf("glUseProgram", cstr_buf): *const u8;
	glUseProgram = user_get_proc_address(cstr): *fp_glUseProgram;
	let cstr = strings::to_c_with_buf("glUseProgramObjectARB", cstr_buf): *const u8;
	glUseProgramObjectARB = user_get_proc_address(cstr): *fp_glUseProgramObjectARB;
	let cstr = strings::to_c_with_buf("glUseProgramStages", cstr_buf): *const u8;
	glUseProgramStages = user_get_proc_address(cstr): *fp_glUseProgramStages;
	let cstr = strings::to_c_with_buf("glUseShaderProgramEXT", cstr_buf): *const u8;
	glUseShaderProgramEXT = user_get_proc_address(cstr): *fp_glUseShaderProgramEXT;
	let cstr = strings::to_c_with_buf("glVDPAUFiniNV", cstr_buf): *const u8;
	glVDPAUFiniNV = user_get_proc_address(cstr): *fp_glVDPAUFiniNV;
	let cstr = strings::to_c_with_buf("glVDPAUGetSurfaceivNV", cstr_buf): *const u8;
	glVDPAUGetSurfaceivNV = user_get_proc_address(cstr): *fp_glVDPAUGetSurfaceivNV;
	let cstr = strings::to_c_with_buf("glVDPAUInitNV", cstr_buf): *const u8;
	glVDPAUInitNV = user_get_proc_address(cstr): *fp_glVDPAUInitNV;
	let cstr = strings::to_c_with_buf("glVDPAUIsSurfaceNV", cstr_buf): *const u8;
	glVDPAUIsSurfaceNV = user_get_proc_address(cstr): *fp_glVDPAUIsSurfaceNV;
	let cstr = strings::to_c_with_buf("glVDPAUMapSurfacesNV", cstr_buf): *const u8;
	glVDPAUMapSurfacesNV = user_get_proc_address(cstr): *fp_glVDPAUMapSurfacesNV;
	let cstr = strings::to_c_with_buf("glVDPAURegisterOutputSurfaceNV", cstr_buf): *const u8;
	glVDPAURegisterOutputSurfaceNV = user_get_proc_address(cstr): *fp_glVDPAURegisterOutputSurfaceNV;
	let cstr = strings::to_c_with_buf("glVDPAURegisterVideoSurfaceNV", cstr_buf): *const u8;
	glVDPAURegisterVideoSurfaceNV = user_get_proc_address(cstr): *fp_glVDPAURegisterVideoSurfaceNV;
	let cstr = strings::to_c_with_buf("glVDPAURegisterVideoSurfaceWithPictureStructureNV", cstr_buf): *const u8;
	glVDPAURegisterVideoSurfaceWithPictureStructureNV = user_get_proc_address(cstr): *fp_glVDPAURegisterVideoSurfaceWithPictureStructureNV;
	let cstr = strings::to_c_with_buf("glVDPAUSurfaceAccessNV", cstr_buf): *const u8;
	glVDPAUSurfaceAccessNV = user_get_proc_address(cstr): *fp_glVDPAUSurfaceAccessNV;
	let cstr = strings::to_c_with_buf("glVDPAUUnmapSurfacesNV", cstr_buf): *const u8;
	glVDPAUUnmapSurfacesNV = user_get_proc_address(cstr): *fp_glVDPAUUnmapSurfacesNV;
	let cstr = strings::to_c_with_buf("glVDPAUUnregisterSurfaceNV", cstr_buf): *const u8;
	glVDPAUUnregisterSurfaceNV = user_get_proc_address(cstr): *fp_glVDPAUUnregisterSurfaceNV;
	let cstr = strings::to_c_with_buf("glValidateProgram", cstr_buf): *const u8;
	glValidateProgram = user_get_proc_address(cstr): *fp_glValidateProgram;
	let cstr = strings::to_c_with_buf("glValidateProgramARB", cstr_buf): *const u8;
	glValidateProgramARB = user_get_proc_address(cstr): *fp_glValidateProgramARB;
	let cstr = strings::to_c_with_buf("glValidateProgramPipeline", cstr_buf): *const u8;
	glValidateProgramPipeline = user_get_proc_address(cstr): *fp_glValidateProgramPipeline;
	let cstr = strings::to_c_with_buf("glVariantArrayObjectATI", cstr_buf): *const u8;
	glVariantArrayObjectATI = user_get_proc_address(cstr): *fp_glVariantArrayObjectATI;
	let cstr = strings::to_c_with_buf("glVariantPointerEXT", cstr_buf): *const u8;
	glVariantPointerEXT = user_get_proc_address(cstr): *fp_glVariantPointerEXT;
	let cstr = strings::to_c_with_buf("glVariantbvEXT", cstr_buf): *const u8;
	glVariantbvEXT = user_get_proc_address(cstr): *fp_glVariantbvEXT;
	let cstr = strings::to_c_with_buf("glVariantdvEXT", cstr_buf): *const u8;
	glVariantdvEXT = user_get_proc_address(cstr): *fp_glVariantdvEXT;
	let cstr = strings::to_c_with_buf("glVariantfvEXT", cstr_buf): *const u8;
	glVariantfvEXT = user_get_proc_address(cstr): *fp_glVariantfvEXT;
	let cstr = strings::to_c_with_buf("glVariantivEXT", cstr_buf): *const u8;
	glVariantivEXT = user_get_proc_address(cstr): *fp_glVariantivEXT;
	let cstr = strings::to_c_with_buf("glVariantsvEXT", cstr_buf): *const u8;
	glVariantsvEXT = user_get_proc_address(cstr): *fp_glVariantsvEXT;
	let cstr = strings::to_c_with_buf("glVariantubvEXT", cstr_buf): *const u8;
	glVariantubvEXT = user_get_proc_address(cstr): *fp_glVariantubvEXT;
	let cstr = strings::to_c_with_buf("glVariantuivEXT", cstr_buf): *const u8;
	glVariantuivEXT = user_get_proc_address(cstr): *fp_glVariantuivEXT;
	let cstr = strings::to_c_with_buf("glVariantusvEXT", cstr_buf): *const u8;
	glVariantusvEXT = user_get_proc_address(cstr): *fp_glVariantusvEXT;
	let cstr = strings::to_c_with_buf("glVertex2bOES", cstr_buf): *const u8;
	glVertex2bOES = user_get_proc_address(cstr): *fp_glVertex2bOES;
	let cstr = strings::to_c_with_buf("glVertex2bvOES", cstr_buf): *const u8;
	glVertex2bvOES = user_get_proc_address(cstr): *fp_glVertex2bvOES;
	let cstr = strings::to_c_with_buf("glVertex2d", cstr_buf): *const u8;
	glVertex2d = user_get_proc_address(cstr): *fp_glVertex2d;
	let cstr = strings::to_c_with_buf("glVertex2dv", cstr_buf): *const u8;
	glVertex2dv = user_get_proc_address(cstr): *fp_glVertex2dv;
	let cstr = strings::to_c_with_buf("glVertex2f", cstr_buf): *const u8;
	glVertex2f = user_get_proc_address(cstr): *fp_glVertex2f;
	let cstr = strings::to_c_with_buf("glVertex2fv", cstr_buf): *const u8;
	glVertex2fv = user_get_proc_address(cstr): *fp_glVertex2fv;
	let cstr = strings::to_c_with_buf("glVertex2hNV", cstr_buf): *const u8;
	glVertex2hNV = user_get_proc_address(cstr): *fp_glVertex2hNV;
	let cstr = strings::to_c_with_buf("glVertex2hvNV", cstr_buf): *const u8;
	glVertex2hvNV = user_get_proc_address(cstr): *fp_glVertex2hvNV;
	let cstr = strings::to_c_with_buf("glVertex2i", cstr_buf): *const u8;
	glVertex2i = user_get_proc_address(cstr): *fp_glVertex2i;
	let cstr = strings::to_c_with_buf("glVertex2iv", cstr_buf): *const u8;
	glVertex2iv = user_get_proc_address(cstr): *fp_glVertex2iv;
	let cstr = strings::to_c_with_buf("glVertex2s", cstr_buf): *const u8;
	glVertex2s = user_get_proc_address(cstr): *fp_glVertex2s;
	let cstr = strings::to_c_with_buf("glVertex2sv", cstr_buf): *const u8;
	glVertex2sv = user_get_proc_address(cstr): *fp_glVertex2sv;
	let cstr = strings::to_c_with_buf("glVertex2xOES", cstr_buf): *const u8;
	glVertex2xOES = user_get_proc_address(cstr): *fp_glVertex2xOES;
	let cstr = strings::to_c_with_buf("glVertex2xvOES", cstr_buf): *const u8;
	glVertex2xvOES = user_get_proc_address(cstr): *fp_glVertex2xvOES;
	let cstr = strings::to_c_with_buf("glVertex3bOES", cstr_buf): *const u8;
	glVertex3bOES = user_get_proc_address(cstr): *fp_glVertex3bOES;
	let cstr = strings::to_c_with_buf("glVertex3bvOES", cstr_buf): *const u8;
	glVertex3bvOES = user_get_proc_address(cstr): *fp_glVertex3bvOES;
	let cstr = strings::to_c_with_buf("glVertex3d", cstr_buf): *const u8;
	glVertex3d = user_get_proc_address(cstr): *fp_glVertex3d;
	let cstr = strings::to_c_with_buf("glVertex3dv", cstr_buf): *const u8;
	glVertex3dv = user_get_proc_address(cstr): *fp_glVertex3dv;
	let cstr = strings::to_c_with_buf("glVertex3f", cstr_buf): *const u8;
	glVertex3f = user_get_proc_address(cstr): *fp_glVertex3f;
	let cstr = strings::to_c_with_buf("glVertex3fv", cstr_buf): *const u8;
	glVertex3fv = user_get_proc_address(cstr): *fp_glVertex3fv;
	let cstr = strings::to_c_with_buf("glVertex3hNV", cstr_buf): *const u8;
	glVertex3hNV = user_get_proc_address(cstr): *fp_glVertex3hNV;
	let cstr = strings::to_c_with_buf("glVertex3hvNV", cstr_buf): *const u8;
	glVertex3hvNV = user_get_proc_address(cstr): *fp_glVertex3hvNV;
	let cstr = strings::to_c_with_buf("glVertex3i", cstr_buf): *const u8;
	glVertex3i = user_get_proc_address(cstr): *fp_glVertex3i;
	let cstr = strings::to_c_with_buf("glVertex3iv", cstr_buf): *const u8;
	glVertex3iv = user_get_proc_address(cstr): *fp_glVertex3iv;
	let cstr = strings::to_c_with_buf("glVertex3s", cstr_buf): *const u8;
	glVertex3s = user_get_proc_address(cstr): *fp_glVertex3s;
	let cstr = strings::to_c_with_buf("glVertex3sv", cstr_buf): *const u8;
	glVertex3sv = user_get_proc_address(cstr): *fp_glVertex3sv;
	let cstr = strings::to_c_with_buf("glVertex3xOES", cstr_buf): *const u8;
	glVertex3xOES = user_get_proc_address(cstr): *fp_glVertex3xOES;
	let cstr = strings::to_c_with_buf("glVertex3xvOES", cstr_buf): *const u8;
	glVertex3xvOES = user_get_proc_address(cstr): *fp_glVertex3xvOES;
	let cstr = strings::to_c_with_buf("glVertex4bOES", cstr_buf): *const u8;
	glVertex4bOES = user_get_proc_address(cstr): *fp_glVertex4bOES;
	let cstr = strings::to_c_with_buf("glVertex4bvOES", cstr_buf): *const u8;
	glVertex4bvOES = user_get_proc_address(cstr): *fp_glVertex4bvOES;
	let cstr = strings::to_c_with_buf("glVertex4d", cstr_buf): *const u8;
	glVertex4d = user_get_proc_address(cstr): *fp_glVertex4d;
	let cstr = strings::to_c_with_buf("glVertex4dv", cstr_buf): *const u8;
	glVertex4dv = user_get_proc_address(cstr): *fp_glVertex4dv;
	let cstr = strings::to_c_with_buf("glVertex4f", cstr_buf): *const u8;
	glVertex4f = user_get_proc_address(cstr): *fp_glVertex4f;
	let cstr = strings::to_c_with_buf("glVertex4fv", cstr_buf): *const u8;
	glVertex4fv = user_get_proc_address(cstr): *fp_glVertex4fv;
	let cstr = strings::to_c_with_buf("glVertex4hNV", cstr_buf): *const u8;
	glVertex4hNV = user_get_proc_address(cstr): *fp_glVertex4hNV;
	let cstr = strings::to_c_with_buf("glVertex4hvNV", cstr_buf): *const u8;
	glVertex4hvNV = user_get_proc_address(cstr): *fp_glVertex4hvNV;
	let cstr = strings::to_c_with_buf("glVertex4i", cstr_buf): *const u8;
	glVertex4i = user_get_proc_address(cstr): *fp_glVertex4i;
	let cstr = strings::to_c_with_buf("glVertex4iv", cstr_buf): *const u8;
	glVertex4iv = user_get_proc_address(cstr): *fp_glVertex4iv;
	let cstr = strings::to_c_with_buf("glVertex4s", cstr_buf): *const u8;
	glVertex4s = user_get_proc_address(cstr): *fp_glVertex4s;
	let cstr = strings::to_c_with_buf("glVertex4sv", cstr_buf): *const u8;
	glVertex4sv = user_get_proc_address(cstr): *fp_glVertex4sv;
	let cstr = strings::to_c_with_buf("glVertex4xOES", cstr_buf): *const u8;
	glVertex4xOES = user_get_proc_address(cstr): *fp_glVertex4xOES;
	let cstr = strings::to_c_with_buf("glVertex4xvOES", cstr_buf): *const u8;
	glVertex4xvOES = user_get_proc_address(cstr): *fp_glVertex4xvOES;
	let cstr = strings::to_c_with_buf("glVertexArrayAttribBinding", cstr_buf): *const u8;
	glVertexArrayAttribBinding = user_get_proc_address(cstr): *fp_glVertexArrayAttribBinding;
	let cstr = strings::to_c_with_buf("glVertexArrayAttribFormat", cstr_buf): *const u8;
	glVertexArrayAttribFormat = user_get_proc_address(cstr): *fp_glVertexArrayAttribFormat;
	let cstr = strings::to_c_with_buf("glVertexArrayAttribIFormat", cstr_buf): *const u8;
	glVertexArrayAttribIFormat = user_get_proc_address(cstr): *fp_glVertexArrayAttribIFormat;
	let cstr = strings::to_c_with_buf("glVertexArrayAttribLFormat", cstr_buf): *const u8;
	glVertexArrayAttribLFormat = user_get_proc_address(cstr): *fp_glVertexArrayAttribLFormat;
	let cstr = strings::to_c_with_buf("glVertexArrayBindVertexBufferEXT", cstr_buf): *const u8;
	glVertexArrayBindVertexBufferEXT = user_get_proc_address(cstr): *fp_glVertexArrayBindVertexBufferEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayBindingDivisor", cstr_buf): *const u8;
	glVertexArrayBindingDivisor = user_get_proc_address(cstr): *fp_glVertexArrayBindingDivisor;
	let cstr = strings::to_c_with_buf("glVertexArrayColorOffsetEXT", cstr_buf): *const u8;
	glVertexArrayColorOffsetEXT = user_get_proc_address(cstr): *fp_glVertexArrayColorOffsetEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayEdgeFlagOffsetEXT", cstr_buf): *const u8;
	glVertexArrayEdgeFlagOffsetEXT = user_get_proc_address(cstr): *fp_glVertexArrayEdgeFlagOffsetEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayElementBuffer", cstr_buf): *const u8;
	glVertexArrayElementBuffer = user_get_proc_address(cstr): *fp_glVertexArrayElementBuffer;
	let cstr = strings::to_c_with_buf("glVertexArrayFogCoordOffsetEXT", cstr_buf): *const u8;
	glVertexArrayFogCoordOffsetEXT = user_get_proc_address(cstr): *fp_glVertexArrayFogCoordOffsetEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayIndexOffsetEXT", cstr_buf): *const u8;
	glVertexArrayIndexOffsetEXT = user_get_proc_address(cstr): *fp_glVertexArrayIndexOffsetEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayMultiTexCoordOffsetEXT", cstr_buf): *const u8;
	glVertexArrayMultiTexCoordOffsetEXT = user_get_proc_address(cstr): *fp_glVertexArrayMultiTexCoordOffsetEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayNormalOffsetEXT", cstr_buf): *const u8;
	glVertexArrayNormalOffsetEXT = user_get_proc_address(cstr): *fp_glVertexArrayNormalOffsetEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayParameteriAPPLE", cstr_buf): *const u8;
	glVertexArrayParameteriAPPLE = user_get_proc_address(cstr): *fp_glVertexArrayParameteriAPPLE;
	let cstr = strings::to_c_with_buf("glVertexArrayRangeAPPLE", cstr_buf): *const u8;
	glVertexArrayRangeAPPLE = user_get_proc_address(cstr): *fp_glVertexArrayRangeAPPLE;
	let cstr = strings::to_c_with_buf("glVertexArrayRangeNV", cstr_buf): *const u8;
	glVertexArrayRangeNV = user_get_proc_address(cstr): *fp_glVertexArrayRangeNV;
	let cstr = strings::to_c_with_buf("glVertexArraySecondaryColorOffsetEXT", cstr_buf): *const u8;
	glVertexArraySecondaryColorOffsetEXT = user_get_proc_address(cstr): *fp_glVertexArraySecondaryColorOffsetEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayTexCoordOffsetEXT", cstr_buf): *const u8;
	glVertexArrayTexCoordOffsetEXT = user_get_proc_address(cstr): *fp_glVertexArrayTexCoordOffsetEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayVertexAttribBindingEXT", cstr_buf): *const u8;
	glVertexArrayVertexAttribBindingEXT = user_get_proc_address(cstr): *fp_glVertexArrayVertexAttribBindingEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayVertexAttribDivisorEXT", cstr_buf): *const u8;
	glVertexArrayVertexAttribDivisorEXT = user_get_proc_address(cstr): *fp_glVertexArrayVertexAttribDivisorEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayVertexAttribFormatEXT", cstr_buf): *const u8;
	glVertexArrayVertexAttribFormatEXT = user_get_proc_address(cstr): *fp_glVertexArrayVertexAttribFormatEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayVertexAttribIFormatEXT", cstr_buf): *const u8;
	glVertexArrayVertexAttribIFormatEXT = user_get_proc_address(cstr): *fp_glVertexArrayVertexAttribIFormatEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayVertexAttribIOffsetEXT", cstr_buf): *const u8;
	glVertexArrayVertexAttribIOffsetEXT = user_get_proc_address(cstr): *fp_glVertexArrayVertexAttribIOffsetEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayVertexAttribLFormatEXT", cstr_buf): *const u8;
	glVertexArrayVertexAttribLFormatEXT = user_get_proc_address(cstr): *fp_glVertexArrayVertexAttribLFormatEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayVertexAttribLOffsetEXT", cstr_buf): *const u8;
	glVertexArrayVertexAttribLOffsetEXT = user_get_proc_address(cstr): *fp_glVertexArrayVertexAttribLOffsetEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayVertexAttribOffsetEXT", cstr_buf): *const u8;
	glVertexArrayVertexAttribOffsetEXT = user_get_proc_address(cstr): *fp_glVertexArrayVertexAttribOffsetEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayVertexBindingDivisorEXT", cstr_buf): *const u8;
	glVertexArrayVertexBindingDivisorEXT = user_get_proc_address(cstr): *fp_glVertexArrayVertexBindingDivisorEXT;
	let cstr = strings::to_c_with_buf("glVertexArrayVertexBuffer", cstr_buf): *const u8;
	glVertexArrayVertexBuffer = user_get_proc_address(cstr): *fp_glVertexArrayVertexBuffer;
	let cstr = strings::to_c_with_buf("glVertexArrayVertexBuffers", cstr_buf): *const u8;
	glVertexArrayVertexBuffers = user_get_proc_address(cstr): *fp_glVertexArrayVertexBuffers;
	let cstr = strings::to_c_with_buf("glVertexArrayVertexOffsetEXT", cstr_buf): *const u8;
	glVertexArrayVertexOffsetEXT = user_get_proc_address(cstr): *fp_glVertexArrayVertexOffsetEXT;
	let cstr = strings::to_c_with_buf("glVertexAttrib1d", cstr_buf): *const u8;
	glVertexAttrib1d = user_get_proc_address(cstr): *fp_glVertexAttrib1d;
	let cstr = strings::to_c_with_buf("glVertexAttrib1dARB", cstr_buf): *const u8;
	glVertexAttrib1dARB = user_get_proc_address(cstr): *fp_glVertexAttrib1dARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib1dNV", cstr_buf): *const u8;
	glVertexAttrib1dNV = user_get_proc_address(cstr): *fp_glVertexAttrib1dNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib1dv", cstr_buf): *const u8;
	glVertexAttrib1dv = user_get_proc_address(cstr): *fp_glVertexAttrib1dv;
	let cstr = strings::to_c_with_buf("glVertexAttrib1dvARB", cstr_buf): *const u8;
	glVertexAttrib1dvARB = user_get_proc_address(cstr): *fp_glVertexAttrib1dvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib1dvNV", cstr_buf): *const u8;
	glVertexAttrib1dvNV = user_get_proc_address(cstr): *fp_glVertexAttrib1dvNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib1f", cstr_buf): *const u8;
	glVertexAttrib1f = user_get_proc_address(cstr): *fp_glVertexAttrib1f;
	let cstr = strings::to_c_with_buf("glVertexAttrib1fARB", cstr_buf): *const u8;
	glVertexAttrib1fARB = user_get_proc_address(cstr): *fp_glVertexAttrib1fARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib1fNV", cstr_buf): *const u8;
	glVertexAttrib1fNV = user_get_proc_address(cstr): *fp_glVertexAttrib1fNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib1fv", cstr_buf): *const u8;
	glVertexAttrib1fv = user_get_proc_address(cstr): *fp_glVertexAttrib1fv;
	let cstr = strings::to_c_with_buf("glVertexAttrib1fvARB", cstr_buf): *const u8;
	glVertexAttrib1fvARB = user_get_proc_address(cstr): *fp_glVertexAttrib1fvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib1fvNV", cstr_buf): *const u8;
	glVertexAttrib1fvNV = user_get_proc_address(cstr): *fp_glVertexAttrib1fvNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib1hNV", cstr_buf): *const u8;
	glVertexAttrib1hNV = user_get_proc_address(cstr): *fp_glVertexAttrib1hNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib1hvNV", cstr_buf): *const u8;
	glVertexAttrib1hvNV = user_get_proc_address(cstr): *fp_glVertexAttrib1hvNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib1s", cstr_buf): *const u8;
	glVertexAttrib1s = user_get_proc_address(cstr): *fp_glVertexAttrib1s;
	let cstr = strings::to_c_with_buf("glVertexAttrib1sARB", cstr_buf): *const u8;
	glVertexAttrib1sARB = user_get_proc_address(cstr): *fp_glVertexAttrib1sARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib1sNV", cstr_buf): *const u8;
	glVertexAttrib1sNV = user_get_proc_address(cstr): *fp_glVertexAttrib1sNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib1sv", cstr_buf): *const u8;
	glVertexAttrib1sv = user_get_proc_address(cstr): *fp_glVertexAttrib1sv;
	let cstr = strings::to_c_with_buf("glVertexAttrib1svARB", cstr_buf): *const u8;
	glVertexAttrib1svARB = user_get_proc_address(cstr): *fp_glVertexAttrib1svARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib1svNV", cstr_buf): *const u8;
	glVertexAttrib1svNV = user_get_proc_address(cstr): *fp_glVertexAttrib1svNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib2d", cstr_buf): *const u8;
	glVertexAttrib2d = user_get_proc_address(cstr): *fp_glVertexAttrib2d;
	let cstr = strings::to_c_with_buf("glVertexAttrib2dARB", cstr_buf): *const u8;
	glVertexAttrib2dARB = user_get_proc_address(cstr): *fp_glVertexAttrib2dARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib2dNV", cstr_buf): *const u8;
	glVertexAttrib2dNV = user_get_proc_address(cstr): *fp_glVertexAttrib2dNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib2dv", cstr_buf): *const u8;
	glVertexAttrib2dv = user_get_proc_address(cstr): *fp_glVertexAttrib2dv;
	let cstr = strings::to_c_with_buf("glVertexAttrib2dvARB", cstr_buf): *const u8;
	glVertexAttrib2dvARB = user_get_proc_address(cstr): *fp_glVertexAttrib2dvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib2dvNV", cstr_buf): *const u8;
	glVertexAttrib2dvNV = user_get_proc_address(cstr): *fp_glVertexAttrib2dvNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib2f", cstr_buf): *const u8;
	glVertexAttrib2f = user_get_proc_address(cstr): *fp_glVertexAttrib2f;
	let cstr = strings::to_c_with_buf("glVertexAttrib2fARB", cstr_buf): *const u8;
	glVertexAttrib2fARB = user_get_proc_address(cstr): *fp_glVertexAttrib2fARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib2fNV", cstr_buf): *const u8;
	glVertexAttrib2fNV = user_get_proc_address(cstr): *fp_glVertexAttrib2fNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib2fv", cstr_buf): *const u8;
	glVertexAttrib2fv = user_get_proc_address(cstr): *fp_glVertexAttrib2fv;
	let cstr = strings::to_c_with_buf("glVertexAttrib2fvARB", cstr_buf): *const u8;
	glVertexAttrib2fvARB = user_get_proc_address(cstr): *fp_glVertexAttrib2fvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib2fvNV", cstr_buf): *const u8;
	glVertexAttrib2fvNV = user_get_proc_address(cstr): *fp_glVertexAttrib2fvNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib2hNV", cstr_buf): *const u8;
	glVertexAttrib2hNV = user_get_proc_address(cstr): *fp_glVertexAttrib2hNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib2hvNV", cstr_buf): *const u8;
	glVertexAttrib2hvNV = user_get_proc_address(cstr): *fp_glVertexAttrib2hvNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib2s", cstr_buf): *const u8;
	glVertexAttrib2s = user_get_proc_address(cstr): *fp_glVertexAttrib2s;
	let cstr = strings::to_c_with_buf("glVertexAttrib2sARB", cstr_buf): *const u8;
	glVertexAttrib2sARB = user_get_proc_address(cstr): *fp_glVertexAttrib2sARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib2sNV", cstr_buf): *const u8;
	glVertexAttrib2sNV = user_get_proc_address(cstr): *fp_glVertexAttrib2sNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib2sv", cstr_buf): *const u8;
	glVertexAttrib2sv = user_get_proc_address(cstr): *fp_glVertexAttrib2sv;
	let cstr = strings::to_c_with_buf("glVertexAttrib2svARB", cstr_buf): *const u8;
	glVertexAttrib2svARB = user_get_proc_address(cstr): *fp_glVertexAttrib2svARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib2svNV", cstr_buf): *const u8;
	glVertexAttrib2svNV = user_get_proc_address(cstr): *fp_glVertexAttrib2svNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib3d", cstr_buf): *const u8;
	glVertexAttrib3d = user_get_proc_address(cstr): *fp_glVertexAttrib3d;
	let cstr = strings::to_c_with_buf("glVertexAttrib3dARB", cstr_buf): *const u8;
	glVertexAttrib3dARB = user_get_proc_address(cstr): *fp_glVertexAttrib3dARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib3dNV", cstr_buf): *const u8;
	glVertexAttrib3dNV = user_get_proc_address(cstr): *fp_glVertexAttrib3dNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib3dv", cstr_buf): *const u8;
	glVertexAttrib3dv = user_get_proc_address(cstr): *fp_glVertexAttrib3dv;
	let cstr = strings::to_c_with_buf("glVertexAttrib3dvARB", cstr_buf): *const u8;
	glVertexAttrib3dvARB = user_get_proc_address(cstr): *fp_glVertexAttrib3dvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib3dvNV", cstr_buf): *const u8;
	glVertexAttrib3dvNV = user_get_proc_address(cstr): *fp_glVertexAttrib3dvNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib3f", cstr_buf): *const u8;
	glVertexAttrib3f = user_get_proc_address(cstr): *fp_glVertexAttrib3f;
	let cstr = strings::to_c_with_buf("glVertexAttrib3fARB", cstr_buf): *const u8;
	glVertexAttrib3fARB = user_get_proc_address(cstr): *fp_glVertexAttrib3fARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib3fNV", cstr_buf): *const u8;
	glVertexAttrib3fNV = user_get_proc_address(cstr): *fp_glVertexAttrib3fNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib3fv", cstr_buf): *const u8;
	glVertexAttrib3fv = user_get_proc_address(cstr): *fp_glVertexAttrib3fv;
	let cstr = strings::to_c_with_buf("glVertexAttrib3fvARB", cstr_buf): *const u8;
	glVertexAttrib3fvARB = user_get_proc_address(cstr): *fp_glVertexAttrib3fvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib3fvNV", cstr_buf): *const u8;
	glVertexAttrib3fvNV = user_get_proc_address(cstr): *fp_glVertexAttrib3fvNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib3hNV", cstr_buf): *const u8;
	glVertexAttrib3hNV = user_get_proc_address(cstr): *fp_glVertexAttrib3hNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib3hvNV", cstr_buf): *const u8;
	glVertexAttrib3hvNV = user_get_proc_address(cstr): *fp_glVertexAttrib3hvNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib3s", cstr_buf): *const u8;
	glVertexAttrib3s = user_get_proc_address(cstr): *fp_glVertexAttrib3s;
	let cstr = strings::to_c_with_buf("glVertexAttrib3sARB", cstr_buf): *const u8;
	glVertexAttrib3sARB = user_get_proc_address(cstr): *fp_glVertexAttrib3sARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib3sNV", cstr_buf): *const u8;
	glVertexAttrib3sNV = user_get_proc_address(cstr): *fp_glVertexAttrib3sNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib3sv", cstr_buf): *const u8;
	glVertexAttrib3sv = user_get_proc_address(cstr): *fp_glVertexAttrib3sv;
	let cstr = strings::to_c_with_buf("glVertexAttrib3svARB", cstr_buf): *const u8;
	glVertexAttrib3svARB = user_get_proc_address(cstr): *fp_glVertexAttrib3svARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib3svNV", cstr_buf): *const u8;
	glVertexAttrib3svNV = user_get_proc_address(cstr): *fp_glVertexAttrib3svNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib4Nbv", cstr_buf): *const u8;
	glVertexAttrib4Nbv = user_get_proc_address(cstr): *fp_glVertexAttrib4Nbv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4NbvARB", cstr_buf): *const u8;
	glVertexAttrib4NbvARB = user_get_proc_address(cstr): *fp_glVertexAttrib4NbvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4Niv", cstr_buf): *const u8;
	glVertexAttrib4Niv = user_get_proc_address(cstr): *fp_glVertexAttrib4Niv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4NivARB", cstr_buf): *const u8;
	glVertexAttrib4NivARB = user_get_proc_address(cstr): *fp_glVertexAttrib4NivARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4Nsv", cstr_buf): *const u8;
	glVertexAttrib4Nsv = user_get_proc_address(cstr): *fp_glVertexAttrib4Nsv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4NsvARB", cstr_buf): *const u8;
	glVertexAttrib4NsvARB = user_get_proc_address(cstr): *fp_glVertexAttrib4NsvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4Nub", cstr_buf): *const u8;
	glVertexAttrib4Nub = user_get_proc_address(cstr): *fp_glVertexAttrib4Nub;
	let cstr = strings::to_c_with_buf("glVertexAttrib4NubARB", cstr_buf): *const u8;
	glVertexAttrib4NubARB = user_get_proc_address(cstr): *fp_glVertexAttrib4NubARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4Nubv", cstr_buf): *const u8;
	glVertexAttrib4Nubv = user_get_proc_address(cstr): *fp_glVertexAttrib4Nubv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4NubvARB", cstr_buf): *const u8;
	glVertexAttrib4NubvARB = user_get_proc_address(cstr): *fp_glVertexAttrib4NubvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4Nuiv", cstr_buf): *const u8;
	glVertexAttrib4Nuiv = user_get_proc_address(cstr): *fp_glVertexAttrib4Nuiv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4NuivARB", cstr_buf): *const u8;
	glVertexAttrib4NuivARB = user_get_proc_address(cstr): *fp_glVertexAttrib4NuivARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4Nusv", cstr_buf): *const u8;
	glVertexAttrib4Nusv = user_get_proc_address(cstr): *fp_glVertexAttrib4Nusv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4NusvARB", cstr_buf): *const u8;
	glVertexAttrib4NusvARB = user_get_proc_address(cstr): *fp_glVertexAttrib4NusvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4bv", cstr_buf): *const u8;
	glVertexAttrib4bv = user_get_proc_address(cstr): *fp_glVertexAttrib4bv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4bvARB", cstr_buf): *const u8;
	glVertexAttrib4bvARB = user_get_proc_address(cstr): *fp_glVertexAttrib4bvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4d", cstr_buf): *const u8;
	glVertexAttrib4d = user_get_proc_address(cstr): *fp_glVertexAttrib4d;
	let cstr = strings::to_c_with_buf("glVertexAttrib4dARB", cstr_buf): *const u8;
	glVertexAttrib4dARB = user_get_proc_address(cstr): *fp_glVertexAttrib4dARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4dNV", cstr_buf): *const u8;
	glVertexAttrib4dNV = user_get_proc_address(cstr): *fp_glVertexAttrib4dNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib4dv", cstr_buf): *const u8;
	glVertexAttrib4dv = user_get_proc_address(cstr): *fp_glVertexAttrib4dv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4dvARB", cstr_buf): *const u8;
	glVertexAttrib4dvARB = user_get_proc_address(cstr): *fp_glVertexAttrib4dvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4dvNV", cstr_buf): *const u8;
	glVertexAttrib4dvNV = user_get_proc_address(cstr): *fp_glVertexAttrib4dvNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib4f", cstr_buf): *const u8;
	glVertexAttrib4f = user_get_proc_address(cstr): *fp_glVertexAttrib4f;
	let cstr = strings::to_c_with_buf("glVertexAttrib4fARB", cstr_buf): *const u8;
	glVertexAttrib4fARB = user_get_proc_address(cstr): *fp_glVertexAttrib4fARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4fNV", cstr_buf): *const u8;
	glVertexAttrib4fNV = user_get_proc_address(cstr): *fp_glVertexAttrib4fNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib4fv", cstr_buf): *const u8;
	glVertexAttrib4fv = user_get_proc_address(cstr): *fp_glVertexAttrib4fv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4fvARB", cstr_buf): *const u8;
	glVertexAttrib4fvARB = user_get_proc_address(cstr): *fp_glVertexAttrib4fvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4fvNV", cstr_buf): *const u8;
	glVertexAttrib4fvNV = user_get_proc_address(cstr): *fp_glVertexAttrib4fvNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib4hNV", cstr_buf): *const u8;
	glVertexAttrib4hNV = user_get_proc_address(cstr): *fp_glVertexAttrib4hNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib4hvNV", cstr_buf): *const u8;
	glVertexAttrib4hvNV = user_get_proc_address(cstr): *fp_glVertexAttrib4hvNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib4iv", cstr_buf): *const u8;
	glVertexAttrib4iv = user_get_proc_address(cstr): *fp_glVertexAttrib4iv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4ivARB", cstr_buf): *const u8;
	glVertexAttrib4ivARB = user_get_proc_address(cstr): *fp_glVertexAttrib4ivARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4s", cstr_buf): *const u8;
	glVertexAttrib4s = user_get_proc_address(cstr): *fp_glVertexAttrib4s;
	let cstr = strings::to_c_with_buf("glVertexAttrib4sARB", cstr_buf): *const u8;
	glVertexAttrib4sARB = user_get_proc_address(cstr): *fp_glVertexAttrib4sARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4sNV", cstr_buf): *const u8;
	glVertexAttrib4sNV = user_get_proc_address(cstr): *fp_glVertexAttrib4sNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib4sv", cstr_buf): *const u8;
	glVertexAttrib4sv = user_get_proc_address(cstr): *fp_glVertexAttrib4sv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4svARB", cstr_buf): *const u8;
	glVertexAttrib4svARB = user_get_proc_address(cstr): *fp_glVertexAttrib4svARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4svNV", cstr_buf): *const u8;
	glVertexAttrib4svNV = user_get_proc_address(cstr): *fp_glVertexAttrib4svNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib4ubNV", cstr_buf): *const u8;
	glVertexAttrib4ubNV = user_get_proc_address(cstr): *fp_glVertexAttrib4ubNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib4ubv", cstr_buf): *const u8;
	glVertexAttrib4ubv = user_get_proc_address(cstr): *fp_glVertexAttrib4ubv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4ubvARB", cstr_buf): *const u8;
	glVertexAttrib4ubvARB = user_get_proc_address(cstr): *fp_glVertexAttrib4ubvARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4ubvNV", cstr_buf): *const u8;
	glVertexAttrib4ubvNV = user_get_proc_address(cstr): *fp_glVertexAttrib4ubvNV;
	let cstr = strings::to_c_with_buf("glVertexAttrib4uiv", cstr_buf): *const u8;
	glVertexAttrib4uiv = user_get_proc_address(cstr): *fp_glVertexAttrib4uiv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4uivARB", cstr_buf): *const u8;
	glVertexAttrib4uivARB = user_get_proc_address(cstr): *fp_glVertexAttrib4uivARB;
	let cstr = strings::to_c_with_buf("glVertexAttrib4usv", cstr_buf): *const u8;
	glVertexAttrib4usv = user_get_proc_address(cstr): *fp_glVertexAttrib4usv;
	let cstr = strings::to_c_with_buf("glVertexAttrib4usvARB", cstr_buf): *const u8;
	glVertexAttrib4usvARB = user_get_proc_address(cstr): *fp_glVertexAttrib4usvARB;
	let cstr = strings::to_c_with_buf("glVertexAttribArrayObjectATI", cstr_buf): *const u8;
	glVertexAttribArrayObjectATI = user_get_proc_address(cstr): *fp_glVertexAttribArrayObjectATI;
	let cstr = strings::to_c_with_buf("glVertexAttribBinding", cstr_buf): *const u8;
	glVertexAttribBinding = user_get_proc_address(cstr): *fp_glVertexAttribBinding;
	let cstr = strings::to_c_with_buf("glVertexAttribDivisorARB", cstr_buf): *const u8;
	glVertexAttribDivisorARB = user_get_proc_address(cstr): *fp_glVertexAttribDivisorARB;
	let cstr = strings::to_c_with_buf("glVertexAttribFormat", cstr_buf): *const u8;
	glVertexAttribFormat = user_get_proc_address(cstr): *fp_glVertexAttribFormat;
	let cstr = strings::to_c_with_buf("glVertexAttribFormatNV", cstr_buf): *const u8;
	glVertexAttribFormatNV = user_get_proc_address(cstr): *fp_glVertexAttribFormatNV;
	let cstr = strings::to_c_with_buf("glVertexAttribI1iEXT", cstr_buf): *const u8;
	glVertexAttribI1iEXT = user_get_proc_address(cstr): *fp_glVertexAttribI1iEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI1ivEXT", cstr_buf): *const u8;
	glVertexAttribI1ivEXT = user_get_proc_address(cstr): *fp_glVertexAttribI1ivEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI1uiEXT", cstr_buf): *const u8;
	glVertexAttribI1uiEXT = user_get_proc_address(cstr): *fp_glVertexAttribI1uiEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI1uivEXT", cstr_buf): *const u8;
	glVertexAttribI1uivEXT = user_get_proc_address(cstr): *fp_glVertexAttribI1uivEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI2iEXT", cstr_buf): *const u8;
	glVertexAttribI2iEXT = user_get_proc_address(cstr): *fp_glVertexAttribI2iEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI2ivEXT", cstr_buf): *const u8;
	glVertexAttribI2ivEXT = user_get_proc_address(cstr): *fp_glVertexAttribI2ivEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI2uiEXT", cstr_buf): *const u8;
	glVertexAttribI2uiEXT = user_get_proc_address(cstr): *fp_glVertexAttribI2uiEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI2uivEXT", cstr_buf): *const u8;
	glVertexAttribI2uivEXT = user_get_proc_address(cstr): *fp_glVertexAttribI2uivEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI3iEXT", cstr_buf): *const u8;
	glVertexAttribI3iEXT = user_get_proc_address(cstr): *fp_glVertexAttribI3iEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI3ivEXT", cstr_buf): *const u8;
	glVertexAttribI3ivEXT = user_get_proc_address(cstr): *fp_glVertexAttribI3ivEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI3uiEXT", cstr_buf): *const u8;
	glVertexAttribI3uiEXT = user_get_proc_address(cstr): *fp_glVertexAttribI3uiEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI3uivEXT", cstr_buf): *const u8;
	glVertexAttribI3uivEXT = user_get_proc_address(cstr): *fp_glVertexAttribI3uivEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI4bvEXT", cstr_buf): *const u8;
	glVertexAttribI4bvEXT = user_get_proc_address(cstr): *fp_glVertexAttribI4bvEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI4iEXT", cstr_buf): *const u8;
	glVertexAttribI4iEXT = user_get_proc_address(cstr): *fp_glVertexAttribI4iEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI4ivEXT", cstr_buf): *const u8;
	glVertexAttribI4ivEXT = user_get_proc_address(cstr): *fp_glVertexAttribI4ivEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI4svEXT", cstr_buf): *const u8;
	glVertexAttribI4svEXT = user_get_proc_address(cstr): *fp_glVertexAttribI4svEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI4ubvEXT", cstr_buf): *const u8;
	glVertexAttribI4ubvEXT = user_get_proc_address(cstr): *fp_glVertexAttribI4ubvEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI4uiEXT", cstr_buf): *const u8;
	glVertexAttribI4uiEXT = user_get_proc_address(cstr): *fp_glVertexAttribI4uiEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI4uivEXT", cstr_buf): *const u8;
	glVertexAttribI4uivEXT = user_get_proc_address(cstr): *fp_glVertexAttribI4uivEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribI4usvEXT", cstr_buf): *const u8;
	glVertexAttribI4usvEXT = user_get_proc_address(cstr): *fp_glVertexAttribI4usvEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribIFormat", cstr_buf): *const u8;
	glVertexAttribIFormat = user_get_proc_address(cstr): *fp_glVertexAttribIFormat;
	let cstr = strings::to_c_with_buf("glVertexAttribIFormatNV", cstr_buf): *const u8;
	glVertexAttribIFormatNV = user_get_proc_address(cstr): *fp_glVertexAttribIFormatNV;
	let cstr = strings::to_c_with_buf("glVertexAttribIPointerEXT", cstr_buf): *const u8;
	glVertexAttribIPointerEXT = user_get_proc_address(cstr): *fp_glVertexAttribIPointerEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribL1d", cstr_buf): *const u8;
	glVertexAttribL1d = user_get_proc_address(cstr): *fp_glVertexAttribL1d;
	let cstr = strings::to_c_with_buf("glVertexAttribL1dEXT", cstr_buf): *const u8;
	glVertexAttribL1dEXT = user_get_proc_address(cstr): *fp_glVertexAttribL1dEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribL1dv", cstr_buf): *const u8;
	glVertexAttribL1dv = user_get_proc_address(cstr): *fp_glVertexAttribL1dv;
	let cstr = strings::to_c_with_buf("glVertexAttribL1dvEXT", cstr_buf): *const u8;
	glVertexAttribL1dvEXT = user_get_proc_address(cstr): *fp_glVertexAttribL1dvEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribL1i64NV", cstr_buf): *const u8;
	glVertexAttribL1i64NV = user_get_proc_address(cstr): *fp_glVertexAttribL1i64NV;
	let cstr = strings::to_c_with_buf("glVertexAttribL1i64vNV", cstr_buf): *const u8;
	glVertexAttribL1i64vNV = user_get_proc_address(cstr): *fp_glVertexAttribL1i64vNV;
	let cstr = strings::to_c_with_buf("glVertexAttribL1ui64ARB", cstr_buf): *const u8;
	glVertexAttribL1ui64ARB = user_get_proc_address(cstr): *fp_glVertexAttribL1ui64ARB;
	let cstr = strings::to_c_with_buf("glVertexAttribL1ui64NV", cstr_buf): *const u8;
	glVertexAttribL1ui64NV = user_get_proc_address(cstr): *fp_glVertexAttribL1ui64NV;
	let cstr = strings::to_c_with_buf("glVertexAttribL1ui64vARB", cstr_buf): *const u8;
	glVertexAttribL1ui64vARB = user_get_proc_address(cstr): *fp_glVertexAttribL1ui64vARB;
	let cstr = strings::to_c_with_buf("glVertexAttribL1ui64vNV", cstr_buf): *const u8;
	glVertexAttribL1ui64vNV = user_get_proc_address(cstr): *fp_glVertexAttribL1ui64vNV;
	let cstr = strings::to_c_with_buf("glVertexAttribL2d", cstr_buf): *const u8;
	glVertexAttribL2d = user_get_proc_address(cstr): *fp_glVertexAttribL2d;
	let cstr = strings::to_c_with_buf("glVertexAttribL2dEXT", cstr_buf): *const u8;
	glVertexAttribL2dEXT = user_get_proc_address(cstr): *fp_glVertexAttribL2dEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribL2dv", cstr_buf): *const u8;
	glVertexAttribL2dv = user_get_proc_address(cstr): *fp_glVertexAttribL2dv;
	let cstr = strings::to_c_with_buf("glVertexAttribL2dvEXT", cstr_buf): *const u8;
	glVertexAttribL2dvEXT = user_get_proc_address(cstr): *fp_glVertexAttribL2dvEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribL2i64NV", cstr_buf): *const u8;
	glVertexAttribL2i64NV = user_get_proc_address(cstr): *fp_glVertexAttribL2i64NV;
	let cstr = strings::to_c_with_buf("glVertexAttribL2i64vNV", cstr_buf): *const u8;
	glVertexAttribL2i64vNV = user_get_proc_address(cstr): *fp_glVertexAttribL2i64vNV;
	let cstr = strings::to_c_with_buf("glVertexAttribL2ui64NV", cstr_buf): *const u8;
	glVertexAttribL2ui64NV = user_get_proc_address(cstr): *fp_glVertexAttribL2ui64NV;
	let cstr = strings::to_c_with_buf("glVertexAttribL2ui64vNV", cstr_buf): *const u8;
	glVertexAttribL2ui64vNV = user_get_proc_address(cstr): *fp_glVertexAttribL2ui64vNV;
	let cstr = strings::to_c_with_buf("glVertexAttribL3d", cstr_buf): *const u8;
	glVertexAttribL3d = user_get_proc_address(cstr): *fp_glVertexAttribL3d;
	let cstr = strings::to_c_with_buf("glVertexAttribL3dEXT", cstr_buf): *const u8;
	glVertexAttribL3dEXT = user_get_proc_address(cstr): *fp_glVertexAttribL3dEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribL3dv", cstr_buf): *const u8;
	glVertexAttribL3dv = user_get_proc_address(cstr): *fp_glVertexAttribL3dv;
	let cstr = strings::to_c_with_buf("glVertexAttribL3dvEXT", cstr_buf): *const u8;
	glVertexAttribL3dvEXT = user_get_proc_address(cstr): *fp_glVertexAttribL3dvEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribL3i64NV", cstr_buf): *const u8;
	glVertexAttribL3i64NV = user_get_proc_address(cstr): *fp_glVertexAttribL3i64NV;
	let cstr = strings::to_c_with_buf("glVertexAttribL3i64vNV", cstr_buf): *const u8;
	glVertexAttribL3i64vNV = user_get_proc_address(cstr): *fp_glVertexAttribL3i64vNV;
	let cstr = strings::to_c_with_buf("glVertexAttribL3ui64NV", cstr_buf): *const u8;
	glVertexAttribL3ui64NV = user_get_proc_address(cstr): *fp_glVertexAttribL3ui64NV;
	let cstr = strings::to_c_with_buf("glVertexAttribL3ui64vNV", cstr_buf): *const u8;
	glVertexAttribL3ui64vNV = user_get_proc_address(cstr): *fp_glVertexAttribL3ui64vNV;
	let cstr = strings::to_c_with_buf("glVertexAttribL4d", cstr_buf): *const u8;
	glVertexAttribL4d = user_get_proc_address(cstr): *fp_glVertexAttribL4d;
	let cstr = strings::to_c_with_buf("glVertexAttribL4dEXT", cstr_buf): *const u8;
	glVertexAttribL4dEXT = user_get_proc_address(cstr): *fp_glVertexAttribL4dEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribL4dv", cstr_buf): *const u8;
	glVertexAttribL4dv = user_get_proc_address(cstr): *fp_glVertexAttribL4dv;
	let cstr = strings::to_c_with_buf("glVertexAttribL4dvEXT", cstr_buf): *const u8;
	glVertexAttribL4dvEXT = user_get_proc_address(cstr): *fp_glVertexAttribL4dvEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribL4i64NV", cstr_buf): *const u8;
	glVertexAttribL4i64NV = user_get_proc_address(cstr): *fp_glVertexAttribL4i64NV;
	let cstr = strings::to_c_with_buf("glVertexAttribL4i64vNV", cstr_buf): *const u8;
	glVertexAttribL4i64vNV = user_get_proc_address(cstr): *fp_glVertexAttribL4i64vNV;
	let cstr = strings::to_c_with_buf("glVertexAttribL4ui64NV", cstr_buf): *const u8;
	glVertexAttribL4ui64NV = user_get_proc_address(cstr): *fp_glVertexAttribL4ui64NV;
	let cstr = strings::to_c_with_buf("glVertexAttribL4ui64vNV", cstr_buf): *const u8;
	glVertexAttribL4ui64vNV = user_get_proc_address(cstr): *fp_glVertexAttribL4ui64vNV;
	let cstr = strings::to_c_with_buf("glVertexAttribLFormat", cstr_buf): *const u8;
	glVertexAttribLFormat = user_get_proc_address(cstr): *fp_glVertexAttribLFormat;
	let cstr = strings::to_c_with_buf("glVertexAttribLFormatNV", cstr_buf): *const u8;
	glVertexAttribLFormatNV = user_get_proc_address(cstr): *fp_glVertexAttribLFormatNV;
	let cstr = strings::to_c_with_buf("glVertexAttribLPointer", cstr_buf): *const u8;
	glVertexAttribLPointer = user_get_proc_address(cstr): *fp_glVertexAttribLPointer;
	let cstr = strings::to_c_with_buf("glVertexAttribLPointerEXT", cstr_buf): *const u8;
	glVertexAttribLPointerEXT = user_get_proc_address(cstr): *fp_glVertexAttribLPointerEXT;
	let cstr = strings::to_c_with_buf("glVertexAttribP1ui", cstr_buf): *const u8;
	glVertexAttribP1ui = user_get_proc_address(cstr): *fp_glVertexAttribP1ui;
	let cstr = strings::to_c_with_buf("glVertexAttribP1uiv", cstr_buf): *const u8;
	glVertexAttribP1uiv = user_get_proc_address(cstr): *fp_glVertexAttribP1uiv;
	let cstr = strings::to_c_with_buf("glVertexAttribP2ui", cstr_buf): *const u8;
	glVertexAttribP2ui = user_get_proc_address(cstr): *fp_glVertexAttribP2ui;
	let cstr = strings::to_c_with_buf("glVertexAttribP2uiv", cstr_buf): *const u8;
	glVertexAttribP2uiv = user_get_proc_address(cstr): *fp_glVertexAttribP2uiv;
	let cstr = strings::to_c_with_buf("glVertexAttribP3ui", cstr_buf): *const u8;
	glVertexAttribP3ui = user_get_proc_address(cstr): *fp_glVertexAttribP3ui;
	let cstr = strings::to_c_with_buf("glVertexAttribP3uiv", cstr_buf): *const u8;
	glVertexAttribP3uiv = user_get_proc_address(cstr): *fp_glVertexAttribP3uiv;
	let cstr = strings::to_c_with_buf("glVertexAttribP4ui", cstr_buf): *const u8;
	glVertexAttribP4ui = user_get_proc_address(cstr): *fp_glVertexAttribP4ui;
	let cstr = strings::to_c_with_buf("glVertexAttribP4uiv", cstr_buf): *const u8;
	glVertexAttribP4uiv = user_get_proc_address(cstr): *fp_glVertexAttribP4uiv;
	let cstr = strings::to_c_with_buf("glVertexAttribParameteriAMD", cstr_buf): *const u8;
	glVertexAttribParameteriAMD = user_get_proc_address(cstr): *fp_glVertexAttribParameteriAMD;
	let cstr = strings::to_c_with_buf("glVertexAttribPointer", cstr_buf): *const u8;
	glVertexAttribPointer = user_get_proc_address(cstr): *fp_glVertexAttribPointer;
	let cstr = strings::to_c_with_buf("glVertexAttribPointerARB", cstr_buf): *const u8;
	glVertexAttribPointerARB = user_get_proc_address(cstr): *fp_glVertexAttribPointerARB;
	let cstr = strings::to_c_with_buf("glVertexAttribPointerNV", cstr_buf): *const u8;
	glVertexAttribPointerNV = user_get_proc_address(cstr): *fp_glVertexAttribPointerNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs1dvNV", cstr_buf): *const u8;
	glVertexAttribs1dvNV = user_get_proc_address(cstr): *fp_glVertexAttribs1dvNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs1fvNV", cstr_buf): *const u8;
	glVertexAttribs1fvNV = user_get_proc_address(cstr): *fp_glVertexAttribs1fvNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs1hvNV", cstr_buf): *const u8;
	glVertexAttribs1hvNV = user_get_proc_address(cstr): *fp_glVertexAttribs1hvNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs1svNV", cstr_buf): *const u8;
	glVertexAttribs1svNV = user_get_proc_address(cstr): *fp_glVertexAttribs1svNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs2dvNV", cstr_buf): *const u8;
	glVertexAttribs2dvNV = user_get_proc_address(cstr): *fp_glVertexAttribs2dvNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs2fvNV", cstr_buf): *const u8;
	glVertexAttribs2fvNV = user_get_proc_address(cstr): *fp_glVertexAttribs2fvNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs2hvNV", cstr_buf): *const u8;
	glVertexAttribs2hvNV = user_get_proc_address(cstr): *fp_glVertexAttribs2hvNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs2svNV", cstr_buf): *const u8;
	glVertexAttribs2svNV = user_get_proc_address(cstr): *fp_glVertexAttribs2svNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs3dvNV", cstr_buf): *const u8;
	glVertexAttribs3dvNV = user_get_proc_address(cstr): *fp_glVertexAttribs3dvNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs3fvNV", cstr_buf): *const u8;
	glVertexAttribs3fvNV = user_get_proc_address(cstr): *fp_glVertexAttribs3fvNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs3hvNV", cstr_buf): *const u8;
	glVertexAttribs3hvNV = user_get_proc_address(cstr): *fp_glVertexAttribs3hvNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs3svNV", cstr_buf): *const u8;
	glVertexAttribs3svNV = user_get_proc_address(cstr): *fp_glVertexAttribs3svNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs4dvNV", cstr_buf): *const u8;
	glVertexAttribs4dvNV = user_get_proc_address(cstr): *fp_glVertexAttribs4dvNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs4fvNV", cstr_buf): *const u8;
	glVertexAttribs4fvNV = user_get_proc_address(cstr): *fp_glVertexAttribs4fvNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs4hvNV", cstr_buf): *const u8;
	glVertexAttribs4hvNV = user_get_proc_address(cstr): *fp_glVertexAttribs4hvNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs4svNV", cstr_buf): *const u8;
	glVertexAttribs4svNV = user_get_proc_address(cstr): *fp_glVertexAttribs4svNV;
	let cstr = strings::to_c_with_buf("glVertexAttribs4ubvNV", cstr_buf): *const u8;
	glVertexAttribs4ubvNV = user_get_proc_address(cstr): *fp_glVertexAttribs4ubvNV;
	let cstr = strings::to_c_with_buf("glVertexBindingDivisor", cstr_buf): *const u8;
	glVertexBindingDivisor = user_get_proc_address(cstr): *fp_glVertexBindingDivisor;
	let cstr = strings::to_c_with_buf("glVertexBlendARB", cstr_buf): *const u8;
	glVertexBlendARB = user_get_proc_address(cstr): *fp_glVertexBlendARB;
	let cstr = strings::to_c_with_buf("glVertexBlendEnvfATI", cstr_buf): *const u8;
	glVertexBlendEnvfATI = user_get_proc_address(cstr): *fp_glVertexBlendEnvfATI;
	let cstr = strings::to_c_with_buf("glVertexBlendEnviATI", cstr_buf): *const u8;
	glVertexBlendEnviATI = user_get_proc_address(cstr): *fp_glVertexBlendEnviATI;
	let cstr = strings::to_c_with_buf("glVertexFormatNV", cstr_buf): *const u8;
	glVertexFormatNV = user_get_proc_address(cstr): *fp_glVertexFormatNV;
	let cstr = strings::to_c_with_buf("glVertexPointer", cstr_buf): *const u8;
	glVertexPointer = user_get_proc_address(cstr): *fp_glVertexPointer;
	let cstr = strings::to_c_with_buf("glVertexPointerEXT", cstr_buf): *const u8;
	glVertexPointerEXT = user_get_proc_address(cstr): *fp_glVertexPointerEXT;
	let cstr = strings::to_c_with_buf("glVertexPointerListIBM", cstr_buf): *const u8;
	glVertexPointerListIBM = user_get_proc_address(cstr): *fp_glVertexPointerListIBM;
	let cstr = strings::to_c_with_buf("glVertexPointervINTEL", cstr_buf): *const u8;
	glVertexPointervINTEL = user_get_proc_address(cstr): *fp_glVertexPointervINTEL;
	let cstr = strings::to_c_with_buf("glVertexStream1dATI", cstr_buf): *const u8;
	glVertexStream1dATI = user_get_proc_address(cstr): *fp_glVertexStream1dATI;
	let cstr = strings::to_c_with_buf("glVertexStream1dvATI", cstr_buf): *const u8;
	glVertexStream1dvATI = user_get_proc_address(cstr): *fp_glVertexStream1dvATI;
	let cstr = strings::to_c_with_buf("glVertexStream1fATI", cstr_buf): *const u8;
	glVertexStream1fATI = user_get_proc_address(cstr): *fp_glVertexStream1fATI;
	let cstr = strings::to_c_with_buf("glVertexStream1fvATI", cstr_buf): *const u8;
	glVertexStream1fvATI = user_get_proc_address(cstr): *fp_glVertexStream1fvATI;
	let cstr = strings::to_c_with_buf("glVertexStream1iATI", cstr_buf): *const u8;
	glVertexStream1iATI = user_get_proc_address(cstr): *fp_glVertexStream1iATI;
	let cstr = strings::to_c_with_buf("glVertexStream1ivATI", cstr_buf): *const u8;
	glVertexStream1ivATI = user_get_proc_address(cstr): *fp_glVertexStream1ivATI;
	let cstr = strings::to_c_with_buf("glVertexStream1sATI", cstr_buf): *const u8;
	glVertexStream1sATI = user_get_proc_address(cstr): *fp_glVertexStream1sATI;
	let cstr = strings::to_c_with_buf("glVertexStream1svATI", cstr_buf): *const u8;
	glVertexStream1svATI = user_get_proc_address(cstr): *fp_glVertexStream1svATI;
	let cstr = strings::to_c_with_buf("glVertexStream2dATI", cstr_buf): *const u8;
	glVertexStream2dATI = user_get_proc_address(cstr): *fp_glVertexStream2dATI;
	let cstr = strings::to_c_with_buf("glVertexStream2dvATI", cstr_buf): *const u8;
	glVertexStream2dvATI = user_get_proc_address(cstr): *fp_glVertexStream2dvATI;
	let cstr = strings::to_c_with_buf("glVertexStream2fATI", cstr_buf): *const u8;
	glVertexStream2fATI = user_get_proc_address(cstr): *fp_glVertexStream2fATI;
	let cstr = strings::to_c_with_buf("glVertexStream2fvATI", cstr_buf): *const u8;
	glVertexStream2fvATI = user_get_proc_address(cstr): *fp_glVertexStream2fvATI;
	let cstr = strings::to_c_with_buf("glVertexStream2iATI", cstr_buf): *const u8;
	glVertexStream2iATI = user_get_proc_address(cstr): *fp_glVertexStream2iATI;
	let cstr = strings::to_c_with_buf("glVertexStream2ivATI", cstr_buf): *const u8;
	glVertexStream2ivATI = user_get_proc_address(cstr): *fp_glVertexStream2ivATI;
	let cstr = strings::to_c_with_buf("glVertexStream2sATI", cstr_buf): *const u8;
	glVertexStream2sATI = user_get_proc_address(cstr): *fp_glVertexStream2sATI;
	let cstr = strings::to_c_with_buf("glVertexStream2svATI", cstr_buf): *const u8;
	glVertexStream2svATI = user_get_proc_address(cstr): *fp_glVertexStream2svATI;
	let cstr = strings::to_c_with_buf("glVertexStream3dATI", cstr_buf): *const u8;
	glVertexStream3dATI = user_get_proc_address(cstr): *fp_glVertexStream3dATI;
	let cstr = strings::to_c_with_buf("glVertexStream3dvATI", cstr_buf): *const u8;
	glVertexStream3dvATI = user_get_proc_address(cstr): *fp_glVertexStream3dvATI;
	let cstr = strings::to_c_with_buf("glVertexStream3fATI", cstr_buf): *const u8;
	glVertexStream3fATI = user_get_proc_address(cstr): *fp_glVertexStream3fATI;
	let cstr = strings::to_c_with_buf("glVertexStream3fvATI", cstr_buf): *const u8;
	glVertexStream3fvATI = user_get_proc_address(cstr): *fp_glVertexStream3fvATI;
	let cstr = strings::to_c_with_buf("glVertexStream3iATI", cstr_buf): *const u8;
	glVertexStream3iATI = user_get_proc_address(cstr): *fp_glVertexStream3iATI;
	let cstr = strings::to_c_with_buf("glVertexStream3ivATI", cstr_buf): *const u8;
	glVertexStream3ivATI = user_get_proc_address(cstr): *fp_glVertexStream3ivATI;
	let cstr = strings::to_c_with_buf("glVertexStream3sATI", cstr_buf): *const u8;
	glVertexStream3sATI = user_get_proc_address(cstr): *fp_glVertexStream3sATI;
	let cstr = strings::to_c_with_buf("glVertexStream3svATI", cstr_buf): *const u8;
	glVertexStream3svATI = user_get_proc_address(cstr): *fp_glVertexStream3svATI;
	let cstr = strings::to_c_with_buf("glVertexStream4dATI", cstr_buf): *const u8;
	glVertexStream4dATI = user_get_proc_address(cstr): *fp_glVertexStream4dATI;
	let cstr = strings::to_c_with_buf("glVertexStream4dvATI", cstr_buf): *const u8;
	glVertexStream4dvATI = user_get_proc_address(cstr): *fp_glVertexStream4dvATI;
	let cstr = strings::to_c_with_buf("glVertexStream4fATI", cstr_buf): *const u8;
	glVertexStream4fATI = user_get_proc_address(cstr): *fp_glVertexStream4fATI;
	let cstr = strings::to_c_with_buf("glVertexStream4fvATI", cstr_buf): *const u8;
	glVertexStream4fvATI = user_get_proc_address(cstr): *fp_glVertexStream4fvATI;
	let cstr = strings::to_c_with_buf("glVertexStream4iATI", cstr_buf): *const u8;
	glVertexStream4iATI = user_get_proc_address(cstr): *fp_glVertexStream4iATI;
	let cstr = strings::to_c_with_buf("glVertexStream4ivATI", cstr_buf): *const u8;
	glVertexStream4ivATI = user_get_proc_address(cstr): *fp_glVertexStream4ivATI;
	let cstr = strings::to_c_with_buf("glVertexStream4sATI", cstr_buf): *const u8;
	glVertexStream4sATI = user_get_proc_address(cstr): *fp_glVertexStream4sATI;
	let cstr = strings::to_c_with_buf("glVertexStream4svATI", cstr_buf): *const u8;
	glVertexStream4svATI = user_get_proc_address(cstr): *fp_glVertexStream4svATI;
	let cstr = strings::to_c_with_buf("glVertexWeightPointerEXT", cstr_buf): *const u8;
	glVertexWeightPointerEXT = user_get_proc_address(cstr): *fp_glVertexWeightPointerEXT;
	let cstr = strings::to_c_with_buf("glVertexWeightfEXT", cstr_buf): *const u8;
	glVertexWeightfEXT = user_get_proc_address(cstr): *fp_glVertexWeightfEXT;
	let cstr = strings::to_c_with_buf("glVertexWeightfvEXT", cstr_buf): *const u8;
	glVertexWeightfvEXT = user_get_proc_address(cstr): *fp_glVertexWeightfvEXT;
	let cstr = strings::to_c_with_buf("glVertexWeighthNV", cstr_buf): *const u8;
	glVertexWeighthNV = user_get_proc_address(cstr): *fp_glVertexWeighthNV;
	let cstr = strings::to_c_with_buf("glVertexWeighthvNV", cstr_buf): *const u8;
	glVertexWeighthvNV = user_get_proc_address(cstr): *fp_glVertexWeighthvNV;
	let cstr = strings::to_c_with_buf("glVideoCaptureNV", cstr_buf): *const u8;
	glVideoCaptureNV = user_get_proc_address(cstr): *fp_glVideoCaptureNV;
	let cstr = strings::to_c_with_buf("glVideoCaptureStreamParameterdvNV", cstr_buf): *const u8;
	glVideoCaptureStreamParameterdvNV = user_get_proc_address(cstr): *fp_glVideoCaptureStreamParameterdvNV;
	let cstr = strings::to_c_with_buf("glVideoCaptureStreamParameterfvNV", cstr_buf): *const u8;
	glVideoCaptureStreamParameterfvNV = user_get_proc_address(cstr): *fp_glVideoCaptureStreamParameterfvNV;
	let cstr = strings::to_c_with_buf("glVideoCaptureStreamParameterivNV", cstr_buf): *const u8;
	glVideoCaptureStreamParameterivNV = user_get_proc_address(cstr): *fp_glVideoCaptureStreamParameterivNV;
	let cstr = strings::to_c_with_buf("glViewport", cstr_buf): *const u8;
	glViewport = user_get_proc_address(cstr): *fp_glViewport;
	let cstr = strings::to_c_with_buf("glViewportArrayv", cstr_buf): *const u8;
	glViewportArrayv = user_get_proc_address(cstr): *fp_glViewportArrayv;
	let cstr = strings::to_c_with_buf("glViewportIndexedf", cstr_buf): *const u8;
	glViewportIndexedf = user_get_proc_address(cstr): *fp_glViewportIndexedf;
	let cstr = strings::to_c_with_buf("glViewportIndexedfv", cstr_buf): *const u8;
	glViewportIndexedfv = user_get_proc_address(cstr): *fp_glViewportIndexedfv;
	let cstr = strings::to_c_with_buf("glViewportPositionWScaleNV", cstr_buf): *const u8;
	glViewportPositionWScaleNV = user_get_proc_address(cstr): *fp_glViewportPositionWScaleNV;
	let cstr = strings::to_c_with_buf("glViewportSwizzleNV", cstr_buf): *const u8;
	glViewportSwizzleNV = user_get_proc_address(cstr): *fp_glViewportSwizzleNV;
	let cstr = strings::to_c_with_buf("glWaitSemaphoreEXT", cstr_buf): *const u8;
	glWaitSemaphoreEXT = user_get_proc_address(cstr): *fp_glWaitSemaphoreEXT;
	let cstr = strings::to_c_with_buf("glWaitSemaphoreui64NVX", cstr_buf): *const u8;
	glWaitSemaphoreui64NVX = user_get_proc_address(cstr): *fp_glWaitSemaphoreui64NVX;
	let cstr = strings::to_c_with_buf("glWaitSync", cstr_buf): *const u8;
	glWaitSync = user_get_proc_address(cstr): *fp_glWaitSync;
	let cstr = strings::to_c_with_buf("glWaitVkSemaphoreNV", cstr_buf): *const u8;
	glWaitVkSemaphoreNV = user_get_proc_address(cstr): *fp_glWaitVkSemaphoreNV;
	let cstr = strings::to_c_with_buf("glWeightPathsNV", cstr_buf): *const u8;
	glWeightPathsNV = user_get_proc_address(cstr): *fp_glWeightPathsNV;
	let cstr = strings::to_c_with_buf("glWeightPointerARB", cstr_buf): *const u8;
	glWeightPointerARB = user_get_proc_address(cstr): *fp_glWeightPointerARB;
	let cstr = strings::to_c_with_buf("glWeightbvARB", cstr_buf): *const u8;
	glWeightbvARB = user_get_proc_address(cstr): *fp_glWeightbvARB;
	let cstr = strings::to_c_with_buf("glWeightdvARB", cstr_buf): *const u8;
	glWeightdvARB = user_get_proc_address(cstr): *fp_glWeightdvARB;
	let cstr = strings::to_c_with_buf("glWeightfvARB", cstr_buf): *const u8;
	glWeightfvARB = user_get_proc_address(cstr): *fp_glWeightfvARB;
	let cstr = strings::to_c_with_buf("glWeightivARB", cstr_buf): *const u8;
	glWeightivARB = user_get_proc_address(cstr): *fp_glWeightivARB;
	let cstr = strings::to_c_with_buf("glWeightsvARB", cstr_buf): *const u8;
	glWeightsvARB = user_get_proc_address(cstr): *fp_glWeightsvARB;
	let cstr = strings::to_c_with_buf("glWeightubvARB", cstr_buf): *const u8;
	glWeightubvARB = user_get_proc_address(cstr): *fp_glWeightubvARB;
	let cstr = strings::to_c_with_buf("glWeightuivARB", cstr_buf): *const u8;
	glWeightuivARB = user_get_proc_address(cstr): *fp_glWeightuivARB;
	let cstr = strings::to_c_with_buf("glWeightusvARB", cstr_buf): *const u8;
	glWeightusvARB = user_get_proc_address(cstr): *fp_glWeightusvARB;
	let cstr = strings::to_c_with_buf("glWindowPos2d", cstr_buf): *const u8;
	glWindowPos2d = user_get_proc_address(cstr): *fp_glWindowPos2d;
	let cstr = strings::to_c_with_buf("glWindowPos2dARB", cstr_buf): *const u8;
	glWindowPos2dARB = user_get_proc_address(cstr): *fp_glWindowPos2dARB;
	let cstr = strings::to_c_with_buf("glWindowPos2dMESA", cstr_buf): *const u8;
	glWindowPos2dMESA = user_get_proc_address(cstr): *fp_glWindowPos2dMESA;
	let cstr = strings::to_c_with_buf("glWindowPos2dv", cstr_buf): *const u8;
	glWindowPos2dv = user_get_proc_address(cstr): *fp_glWindowPos2dv;
	let cstr = strings::to_c_with_buf("glWindowPos2dvARB", cstr_buf): *const u8;
	glWindowPos2dvARB = user_get_proc_address(cstr): *fp_glWindowPos2dvARB;
	let cstr = strings::to_c_with_buf("glWindowPos2dvMESA", cstr_buf): *const u8;
	glWindowPos2dvMESA = user_get_proc_address(cstr): *fp_glWindowPos2dvMESA;
	let cstr = strings::to_c_with_buf("glWindowPos2f", cstr_buf): *const u8;
	glWindowPos2f = user_get_proc_address(cstr): *fp_glWindowPos2f;
	let cstr = strings::to_c_with_buf("glWindowPos2fARB", cstr_buf): *const u8;
	glWindowPos2fARB = user_get_proc_address(cstr): *fp_glWindowPos2fARB;
	let cstr = strings::to_c_with_buf("glWindowPos2fMESA", cstr_buf): *const u8;
	glWindowPos2fMESA = user_get_proc_address(cstr): *fp_glWindowPos2fMESA;
	let cstr = strings::to_c_with_buf("glWindowPos2fv", cstr_buf): *const u8;
	glWindowPos2fv = user_get_proc_address(cstr): *fp_glWindowPos2fv;
	let cstr = strings::to_c_with_buf("glWindowPos2fvARB", cstr_buf): *const u8;
	glWindowPos2fvARB = user_get_proc_address(cstr): *fp_glWindowPos2fvARB;
	let cstr = strings::to_c_with_buf("glWindowPos2fvMESA", cstr_buf): *const u8;
	glWindowPos2fvMESA = user_get_proc_address(cstr): *fp_glWindowPos2fvMESA;
	let cstr = strings::to_c_with_buf("glWindowPos2i", cstr_buf): *const u8;
	glWindowPos2i = user_get_proc_address(cstr): *fp_glWindowPos2i;
	let cstr = strings::to_c_with_buf("glWindowPos2iARB", cstr_buf): *const u8;
	glWindowPos2iARB = user_get_proc_address(cstr): *fp_glWindowPos2iARB;
	let cstr = strings::to_c_with_buf("glWindowPos2iMESA", cstr_buf): *const u8;
	glWindowPos2iMESA = user_get_proc_address(cstr): *fp_glWindowPos2iMESA;
	let cstr = strings::to_c_with_buf("glWindowPos2iv", cstr_buf): *const u8;
	glWindowPos2iv = user_get_proc_address(cstr): *fp_glWindowPos2iv;
	let cstr = strings::to_c_with_buf("glWindowPos2ivARB", cstr_buf): *const u8;
	glWindowPos2ivARB = user_get_proc_address(cstr): *fp_glWindowPos2ivARB;
	let cstr = strings::to_c_with_buf("glWindowPos2ivMESA", cstr_buf): *const u8;
	glWindowPos2ivMESA = user_get_proc_address(cstr): *fp_glWindowPos2ivMESA;
	let cstr = strings::to_c_with_buf("glWindowPos2s", cstr_buf): *const u8;
	glWindowPos2s = user_get_proc_address(cstr): *fp_glWindowPos2s;
	let cstr = strings::to_c_with_buf("glWindowPos2sARB", cstr_buf): *const u8;
	glWindowPos2sARB = user_get_proc_address(cstr): *fp_glWindowPos2sARB;
	let cstr = strings::to_c_with_buf("glWindowPos2sMESA", cstr_buf): *const u8;
	glWindowPos2sMESA = user_get_proc_address(cstr): *fp_glWindowPos2sMESA;
	let cstr = strings::to_c_with_buf("glWindowPos2sv", cstr_buf): *const u8;
	glWindowPos2sv = user_get_proc_address(cstr): *fp_glWindowPos2sv;
	let cstr = strings::to_c_with_buf("glWindowPos2svARB", cstr_buf): *const u8;
	glWindowPos2svARB = user_get_proc_address(cstr): *fp_glWindowPos2svARB;
	let cstr = strings::to_c_with_buf("glWindowPos2svMESA", cstr_buf): *const u8;
	glWindowPos2svMESA = user_get_proc_address(cstr): *fp_glWindowPos2svMESA;
	let cstr = strings::to_c_with_buf("glWindowPos3d", cstr_buf): *const u8;
	glWindowPos3d = user_get_proc_address(cstr): *fp_glWindowPos3d;
	let cstr = strings::to_c_with_buf("glWindowPos3dARB", cstr_buf): *const u8;
	glWindowPos3dARB = user_get_proc_address(cstr): *fp_glWindowPos3dARB;
	let cstr = strings::to_c_with_buf("glWindowPos3dMESA", cstr_buf): *const u8;
	glWindowPos3dMESA = user_get_proc_address(cstr): *fp_glWindowPos3dMESA;
	let cstr = strings::to_c_with_buf("glWindowPos3dv", cstr_buf): *const u8;
	glWindowPos3dv = user_get_proc_address(cstr): *fp_glWindowPos3dv;
	let cstr = strings::to_c_with_buf("glWindowPos3dvARB", cstr_buf): *const u8;
	glWindowPos3dvARB = user_get_proc_address(cstr): *fp_glWindowPos3dvARB;
	let cstr = strings::to_c_with_buf("glWindowPos3dvMESA", cstr_buf): *const u8;
	glWindowPos3dvMESA = user_get_proc_address(cstr): *fp_glWindowPos3dvMESA;
	let cstr = strings::to_c_with_buf("glWindowPos3f", cstr_buf): *const u8;
	glWindowPos3f = user_get_proc_address(cstr): *fp_glWindowPos3f;
	let cstr = strings::to_c_with_buf("glWindowPos3fARB", cstr_buf): *const u8;
	glWindowPos3fARB = user_get_proc_address(cstr): *fp_glWindowPos3fARB;
	let cstr = strings::to_c_with_buf("glWindowPos3fMESA", cstr_buf): *const u8;
	glWindowPos3fMESA = user_get_proc_address(cstr): *fp_glWindowPos3fMESA;
	let cstr = strings::to_c_with_buf("glWindowPos3fv", cstr_buf): *const u8;
	glWindowPos3fv = user_get_proc_address(cstr): *fp_glWindowPos3fv;
	let cstr = strings::to_c_with_buf("glWindowPos3fvARB", cstr_buf): *const u8;
	glWindowPos3fvARB = user_get_proc_address(cstr): *fp_glWindowPos3fvARB;
	let cstr = strings::to_c_with_buf("glWindowPos3fvMESA", cstr_buf): *const u8;
	glWindowPos3fvMESA = user_get_proc_address(cstr): *fp_glWindowPos3fvMESA;
	let cstr = strings::to_c_with_buf("glWindowPos3i", cstr_buf): *const u8;
	glWindowPos3i = user_get_proc_address(cstr): *fp_glWindowPos3i;
	let cstr = strings::to_c_with_buf("glWindowPos3iARB", cstr_buf): *const u8;
	glWindowPos3iARB = user_get_proc_address(cstr): *fp_glWindowPos3iARB;
	let cstr = strings::to_c_with_buf("glWindowPos3iMESA", cstr_buf): *const u8;
	glWindowPos3iMESA = user_get_proc_address(cstr): *fp_glWindowPos3iMESA;
	let cstr = strings::to_c_with_buf("glWindowPos3iv", cstr_buf): *const u8;
	glWindowPos3iv = user_get_proc_address(cstr): *fp_glWindowPos3iv;
	let cstr = strings::to_c_with_buf("glWindowPos3ivARB", cstr_buf): *const u8;
	glWindowPos3ivARB = user_get_proc_address(cstr): *fp_glWindowPos3ivARB;
	let cstr = strings::to_c_with_buf("glWindowPos3ivMESA", cstr_buf): *const u8;
	glWindowPos3ivMESA = user_get_proc_address(cstr): *fp_glWindowPos3ivMESA;
	let cstr = strings::to_c_with_buf("glWindowPos3s", cstr_buf): *const u8;
	glWindowPos3s = user_get_proc_address(cstr): *fp_glWindowPos3s;
	let cstr = strings::to_c_with_buf("glWindowPos3sARB", cstr_buf): *const u8;
	glWindowPos3sARB = user_get_proc_address(cstr): *fp_glWindowPos3sARB;
	let cstr = strings::to_c_with_buf("glWindowPos3sMESA", cstr_buf): *const u8;
	glWindowPos3sMESA = user_get_proc_address(cstr): *fp_glWindowPos3sMESA;
	let cstr = strings::to_c_with_buf("glWindowPos3sv", cstr_buf): *const u8;
	glWindowPos3sv = user_get_proc_address(cstr): *fp_glWindowPos3sv;
	let cstr = strings::to_c_with_buf("glWindowPos3svARB", cstr_buf): *const u8;
	glWindowPos3svARB = user_get_proc_address(cstr): *fp_glWindowPos3svARB;
	let cstr = strings::to_c_with_buf("glWindowPos3svMESA", cstr_buf): *const u8;
	glWindowPos3svMESA = user_get_proc_address(cstr): *fp_glWindowPos3svMESA;
	let cstr = strings::to_c_with_buf("glWindowPos4dMESA", cstr_buf): *const u8;
	glWindowPos4dMESA = user_get_proc_address(cstr): *fp_glWindowPos4dMESA;
	let cstr = strings::to_c_with_buf("glWindowPos4dvMESA", cstr_buf): *const u8;
	glWindowPos4dvMESA = user_get_proc_address(cstr): *fp_glWindowPos4dvMESA;
	let cstr = strings::to_c_with_buf("glWindowPos4fMESA", cstr_buf): *const u8;
	glWindowPos4fMESA = user_get_proc_address(cstr): *fp_glWindowPos4fMESA;
	let cstr = strings::to_c_with_buf("glWindowPos4fvMESA", cstr_buf): *const u8;
	glWindowPos4fvMESA = user_get_proc_address(cstr): *fp_glWindowPos4fvMESA;
	let cstr = strings::to_c_with_buf("glWindowPos4iMESA", cstr_buf): *const u8;
	glWindowPos4iMESA = user_get_proc_address(cstr): *fp_glWindowPos4iMESA;
	let cstr = strings::to_c_with_buf("glWindowPos4ivMESA", cstr_buf): *const u8;
	glWindowPos4ivMESA = user_get_proc_address(cstr): *fp_glWindowPos4ivMESA;
	let cstr = strings::to_c_with_buf("glWindowPos4sMESA", cstr_buf): *const u8;
	glWindowPos4sMESA = user_get_proc_address(cstr): *fp_glWindowPos4sMESA;
	let cstr = strings::to_c_with_buf("glWindowPos4svMESA", cstr_buf): *const u8;
	glWindowPos4svMESA = user_get_proc_address(cstr): *fp_glWindowPos4svMESA;
	let cstr = strings::to_c_with_buf("glWindowRectanglesEXT", cstr_buf): *const u8;
	glWindowRectanglesEXT = user_get_proc_address(cstr): *fp_glWindowRectanglesEXT;
	let cstr = strings::to_c_with_buf("glWriteMaskEXT", cstr_buf): *const u8;
	glWriteMaskEXT = user_get_proc_address(cstr): *fp_glWriteMaskEXT;
};
